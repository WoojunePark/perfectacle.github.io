<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>야놀자를 떠나며... (feat. 레저큐)</title>
      <link href="/2019/08/23/exit-yanolja-feat-leisureq/"/>
      <url>/2019/08/23/exit-yanolja-feat-leisureq/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/exit-yanolja-feat-leisureq/thumb.gif" alt=""><br>오늘은 야놀자 서류상 <strong>퇴사일</strong>이다. (오늘까지 남은 연차를 사용했다.)<br>총 세 번의 이직 시도 끝에 성공할 수 있었다.<br>여태까지 신입으로만 이직(프론트엔드 신입(5개월 재직) -&gt; 백엔드 중고 신입)했고, 지인 추천을 통해서만 면접을 봤는데<br>이번 이직에서는 지인 추천도 있었지만, 내 힘으로 스스로 지원해서 합격까지 한 케이스도 많아서 굉장히 뿌듯한 경험이었다.<br>나와 같은 2~3년 차 주니어 분에게 도움이 됐으면 하는 바람, 개인적으로 회고를 하고 싶어서 정리를 해봤다.  </p><a id="more"></a><h2 id="왜-퇴사를-결심했나"><a href="#왜-퇴사를-결심했나" class="headerlink" title="왜 퇴사를 결심했나"></a>왜 퇴사를 결심했나</h2><p>야놀자는 탄력 근무제(연장 근무를 했다면 다른 날 단축 근무 가능), 식비 지원, 분기별 야놀자 포인트 지급, 전용 사옥 등등의 좋은 복지들이 있다.<br>또한 <a href="https://yanolja.github.io/2019/07/tech_yanolja" rel="external nofollow noopener noreferrer" target="_blank">Tech야, 놀자</a>란 세미나를 할 정도로 탄탄한 개발문화와 <a href="https://www.mk.co.kr/news/business/view/2019/06/406700/" rel="external nofollow noopener noreferrer" target="_blank">유니콘 기업으로 선정</a>되는 등 굉장히 유망한 회사다.<br>그럼에도 불구하고 내가 퇴사를 결심한 계기를 크게 두 가지다.</p><ol><li>가장 큰 요인은 <strong>개발에 집중하지 못하는 환경</strong>이었다.<br>레저큐에서 야놀자로 조직이 이동되면서(완전히 퇴사 후 입사 처리되었다. 레저큐는 야놀자의 계열사인데 일부만 야놀자로 조직 이동이 된 상태다.) 레저큐의 인프라 쪽을 한 번 쭉 털고 가야하는 이슈가 있었다.<br>평상시에 인프라에 관심이 많았던 내가 해당 업무를 맡게 되었고, 끝까지 털지 못하고 퇴사하게 되었다. (이후에는 시스템 엔지니어 쪽 팀에서 도와줄 예정인 걸로 알고 있다.)<br>개발이 하고 싶었지만, 점점 인프라 쪽 업무의 비중이 높아지면서 내 정체성을 의심하기 시작했다.<br>나는 서버 개발자인가? 아니면 시스템 엔지니어인가…?<br>물론 인프라 쪽도 알면 좋지만, 아직까지는 개발이 더 <strong>마렵다</strong>는 생각이 들었다.</li><li><strong>연봉</strong><br>대부분의 이직 사유 중 하나일 것이다.<br>물론 나보다 열악한 근무 환경 속에서도 안 좋은 대우를 받으시는 분들도 있을 거다.<br>하지만 사람의 욕심은 끝이 없어서 자꾸만 위를 올려다 보게 되었다.<br>네임밸류 기업에서 시작을 한 게 아니기 때문에 첫 시작 자체가 높지 않았던 탓도 있었던 것 같다. (그렇다고 그렇게 낮은 편도 아니었다.)</li></ol><p>그 외에도 있긴 하지만, 너무 개인적인 일이기도 하고 크게 공감을 얻을만한 내용이 아니어서 적지 않았다.</p><h2 id="세-번의-이직-시도"><a href="#세-번의-이직-시도" class="headerlink" title="세 번의 이직 시도"></a>세 번의 이직 시도</h2><p>작년에 두 번, 올해 한 번의 이직을 시도했다.<br>공교롭게도 이직 시도할 쯤이 연봉 협상 시기와 비슷한 경우가 많았다.<br>그만큼 연봉 인상에 대한 갈증도 어느정도 있었던 것 같다.</p><h3 id="첫-번째-시도-오피지지"><a href="#첫-번째-시도-오피지지" class="headerlink" title="첫 번째 시도, 오피지지"></a>첫 번째 시도, 오피지지</h3><p><a href="https://www.op.gg/" rel="external nofollow noopener noreferrer" target="_blank">오피지지</a>는 게임 랭킹/플레이 분석 등등을 해주는 서비스를 제공해주는 회사이다.<br>우리나라 보다 외국 유저가 많은만큼 글로벌 경험도 해볼 수 있고, 또 트래픽도 굉장히 많은 걸로 알고 있다.<br>면접을 보러 건물 앞을 서성이자 프로게이머 면접 왔냐고 물어봤다.<br>프로게이머 구단을 꾸리고 있을 정도로 게임에 대한 열정을 엿볼 수 있었다.  </p><p>우선 면접 중에 가장 신선했던 것은 직접 코드리뷰를 한다는 점이다.<br>물론 코드를 제출하는 게 아니라 회사 노트북을 들고 가서 이슈가 없을 부분 중에서 그나마 잘 짰다고 생각한 부분을 리뷰했다.<br>회사 외부 사람에게 코드리뷰를 한 적은 처음이었고, 내 코드에 어떤 개선사항들이 있는지, 앞으로 어떻게 해결해나가야할지 등등에 대해서 피드백을 알 수 있어서 좋았다.<br>그 이후에는 기술적인 질문들을 받았는데 이 때 제대로 대답을 하지 못했다.<br>단골 질문들도 나왔는데 평상시 그런 내용들은 물라도 <strong>일하는데 문제가 없었던 터</strong>라 공부를 미루고 있었다.<br>또한 <strong>면접 전에 반짝 공부해서 가기에는 회사에게 미안했다.</strong><br>내 원래 모습이 아닌 거짓된 모습을 보여주는 것 같기 때문에 회사에게도, 나에게도 좋지 않다고 판단을 했다.<br>그 이후에는 인사? 면접까지 바로 이루어졌다. (이건 뭐 다른 기업들이랑 크게 다르지 않았던 것 같아서 적을만한 게 없다.)<br>그리고 면접이 끝나고 나서도 해당 질문들을 정리하고 공부했어야 했는데 게으르게도 정리하지 않았다.  </p><p>결과는 <strong>불합격</strong>이었다.<br>내 추측에 의하면 내가 답변을 제대로 못했기 때문이라기 보다는 성향이 맞지 않았던 것 같았다.<br>당시에는 <del>빨대를 꼽을</del>나를 빠르게 성장시켜 줄 사수나 환경에 대해 갈망하고 있었다.<br>시간이 흘렀지만 나는 그대로인 것 같았다.<br>그러다보니 나를 바꿀 생각을 안 하고, 주변 환경을 바꿔서 쉽게 쉽게 가려고 했던 것 같다.<br>면접 때도 그런 태도를 계속 내비췄던 것 같은데 당시 오피지지는 그렇게 막 챙겨주고 가르쳐 줄 상황이 아니었기 때문이 아닐까 생각을 한다.</p><h3 id="두-번째-시도-쿠팡"><a href="#두-번째-시도-쿠팡" class="headerlink" title="두 번째 시도, 쿠팡"></a>두 번째 시도, 쿠팡</h3><p><a href="https://www.coupang.com/" rel="external nofollow noopener noreferrer" target="_blank">쿠팡</a>은 이커머스 사업을 하는 회사이다.<br>프론트엔드 스터디 강의를 해주신 두 분께서 쿠팡 출신이기 때문에 쿠팡에 대해 굉장히 기대가 크고 벽도 높다고 생각했다.<br>경력이 적었던 터라 내부 추천으로 들어가기에는 무리가 있어보였고 신입으로 지원하게 되었다.</p><p>운 좋게 서류를 통과하고 코딩 테스트를 볼 차례가 되었다.<br><a href="http://tech.kakao.com/2018/09/21/kakao-blind-recruitment-for2019-round-1/" rel="external nofollow noopener noreferrer" target="_blank">카카오 블라인드 채용 코딩 테스트</a> 문제를 봤을 때 이걸 다 푼 사람이 있나 싶을 정도였다.<br>그 중에 1/5도 못 맞출만큼 평상시에 알고리듬에 관한 공부를 하지 않았다.<br>그러다보니 거의 벼락치기 수준으로 코딩 테스트를 준비했다.  </p><p>결과는 <strong>불합격</strong>이었다.<br>개인적인 기준에는 너무 어려웠다.<br>초반 1~2 문제는 시간이 좀 걸렸고, 풀었던 문제들도 나이스하지 못하게 풀었다.<br>뒤로 가면 갈 수록 도저히 실무에서 겪어보지 못한 복잡성이었다.<br>지금 다시 풀라고 해도 못 붙는다.  </p><p>이렇게 나에게 코딩 테스트는 넘사벽 급의 존재가 되었다.<br>이 때부터라도 알고리듬 공부를 열심히 했어야했는데 또 게으름 탓에 알고리듬 공부도 딱히 하지 않으며 시간만 흘러갔다.</p><h3 id="세-번째-시도"><a href="#세-번째-시도" class="headerlink" title="세 번째 시도"></a>세 번째 시도</h3><p>세 번째 시도부터는 올해에 시도하기 시작했다.<br>그리고 처음으로 공격적으로 동시에 여러 곳을 면접봤다.<br>일주일에 면접을 5번 본 적도 있고, 심지어 오전에 한 개, 오후에 한 개 이렇게 본 날도 있었다.<br>떨어지기도 많이 떨어졌고, 붙기도 많이 붙었다.  </p><h4 id="탈락한-기업"><a href="#탈락한-기업" class="headerlink" title="탈락한 기업"></a>탈락한 기업</h4><ol><li>스노우<br><a href="https://snowcorp.com/" rel="external nofollow noopener noreferrer" target="_blank">스노우</a>는 스마트폰의 카메라 필터나 영상과 관련된 앱을 만드는 회사이다.<br><del>비개발자인 친구들도 많이 사용하는 앱이라 스노우 지원했다고 자랑도 했다.</del><br>하지만 서류부터 <strong>광탈</strong>했다.  </li><li>카카오뱅크<br><a href="https://www.kakaobank.com/" rel="external nofollow noopener noreferrer" target="_blank">카카오뱅크</a>는 국내 최초로 온라인 100% 은행이다. (오프라인 은행 지점이 없다.)<br>평상시에 크게 사용하진 않지만(역시 사람은 익숙한 것을 바꾸기가 정말 힘들다.) 그래도 간편함과 혁신적인 부분에 있어서는 정말 좋게 생각하고 있었다.<br>스노우의 전례가 있기 때문에 이번엔 친구들에게 설레발을 떨지 않았다.<br>서류를 열심히 작성해서 제출했지만 역시나 서류에서 <strong>탈락</strong>했다.<br>지원동기를 적어내는 칸에 <strong>거짓말을 치지 않는 이상 나를 어필하는 능력이 부족</strong>했다.<br>금융 쪽은 아예 경험이 없기 때문에 뭐라 적을 내용이 없었는데 그런 경험이 없기 때문에 떨어졌던 게 아닐까 싶다.</li><li>카카오<br><a href="https://www.kakaocorp.com/" rel="external nofollow noopener noreferrer" target="_blank">카카오</a>는 카카오톡이라는 메신저로 성장하여 다음 포털까지 인수한 회사이다.<br>월간 카카오를 통해 도전했고, 한 달에 한 번씩 볼 수 있기 때문에 크게 부담 가지지 않고 지원했다.<br>서류까지는 어찌저찌 통과했지만, 역시나 코딩 테스트에서 탈락했다.<br>&nbsp;<br>하지만 카카오는 나에게 용기를 불어넣어준 아주 고마운 회사이다.<br>회사마다, 팀마다 다르겠지만 내가 여태까지 봐왔던 코딩 테스트(카카오 블라인드 채용, 쿠팡 신입)와 비교해보면 난이도가 너무 낮았다. (그렇다고 발로 풀어도 될 정도까진 아니고…)<br>아마도 신입은 경력이 없다보니 증명할 게 코딩 테스트 말고는 없어서 좀 빡세게 냈던 게 아닐까 싶다.<br>따라서 경력은 프로젝트 이력 등등을 통해 증명할 수 있으니 다소 코딩 테스트의 비중을 좀 낮춘 게 아닐까 싶다.<br>실제로 내가 본 다른 기업의 코딩 테스트는 전부 카카오의 코딩 테스트와 비슷한 수준이었다.</li></ol><h4 id="네오펙트"><a href="#네오펙트" class="headerlink" title="네오펙트"></a>네오펙트</h4><p><a href="https://www.neofect.com/" rel="external nofollow noopener noreferrer" target="_blank">네오펙트</a>는 의료 재활 솔루션 회사이다.<br>생소한 도메인이기도 하고, 서버 개발자가 뭐 할일이 크게 있나… 싶을 정도였는데<br>의료 재활 기기와 앱을 연동해서 재활을 쉽고 재미있게 도와주는데 이 때 앱에서 사용할 API 서버를 개발하는 업무의 담당자를 뽑고 있었다.</p><p>서류까지는 무사통과 되고, 그 이후에 코딩 테스트를 봤는데 신기하게 <strong>SQL, 자바스크립트(DOM 지식이 필요한)</strong> 문제들이 나왔다.<br>솔직히 다른 코딩 테스트들은 어떤 문제는 ‘이 회사는 실무에서 이정도 복잡성을 다루면서 이런 문제를 내나?’ 싶은 수준의 문제도 많았는데 네오펙트는 참 실용적인 문제들만 나와서 좋았다.<br>(그만큼 내가 준비가 덜 됐기 때문에 그렇게 느꼈을지도 모르겠다.)  </p><p>코딩 테스트 통과 후에 주말에 두 명의 면접관과 함께 행아웃으로 라이브 코딩 면접도 보았다. (손코딩은 아니고 IDE를 사용해서 풀었다.)<br>라이브 코딩이기 때문에 구글링을 하면 안 되는 줄 알고 초반에 좀 뻘뻘대다가 해도 된다는 소리를 듣고 정말 실용적으로 면접보는 것 같아서 좋았다.<br>문제 자체는 Easy 레벨이었는데 초반에 너무 성급하게 문제를 푸는 바람에 이해를 잘못해서 시간을 정말 많이 날렸다.<br>어찌저찌 문제를 풀고 코드를 제출했다.<br>너무 덜렁대는 성격을 보여준 것 같아 불안했는데 어찌저찌 통과했다.</p><p>마지막으로 기술 면접과 인사 면접을 하루에 몰아서 보았다.<br>오피지지 이후로 첫 번째 기술 면접이기 때문에 오피지지에서 대답하지 못했던 부분들은 많이 공부해둔 상태였다. (실무를 통해 경험하다보니 자연스레 공부한 내용들도 있었고…)<br>하지만 자바 관련된 질문들, 스프링 관련된 질문들은 전혀 하지 않았다.<br>오로지 내가 진행한 프로젝트 이력에 대해서만 물어봤다. (그 이외의 질문도 좀 있긴 했지만)<br>이후에 면접관에게 왜 그런 내용은 물어보지 않았냐고 여쭙자 ‘자신들이 질문한 것만으로 어느 정도 검증이 되기도 하고, 그런 걸 물어봐도 뻔한 대답이 돌아오기 때문에 제대로 검증이 안되기 때문’이라고 말했던 것 같다. (정확히는 기억이…)</p><p>결과는 <strong>합격</strong>이었다.<br>처음으로 합격한 회사라 기분이 정말 좋았다.<br>하지만 집에 돌아가는 순간 입사하지 않기로 마음 먹었다.<br>거리가 너무 멀기도 하고, 교통편이 좋지 않아서 집에 가면서 마음이 많이 돌아섰다.<br>하지만 굉장히 실용적인 부분만 검증한 것 같아서 굉장히 좋은 면접 경험이었다.</p><h4 id="네이버-파이낸셜-분사-예정"><a href="#네이버-파이낸셜-분사-예정" class="headerlink" title="네이버 파이낸셜(분사 예정)"></a>네이버 파이낸셜(분사 예정)</h4><p><a href="https://pay.naver.com/" rel="external nofollow noopener noreferrer" target="_blank">네이버 파이낸셜</a>은 네이버 페이라는 간편 결제 서비스를 개발하는 핀테크 회사이다. (아직은 네이버 소속)<br>네이버 파이낸셜은 미래에셋에서 5000억을 투자(예정)받을 정도로 미래에 촉망받는 회사이다.<br>나는 간편결제라면 대부분 네이버 페이 밖에 안 쓰고, 굉장히 편리하게 사용하고 있는 서비스이기 때문에 지원했다. (네이버라는 네임밸류도 한 몫 했다.)  </p><p>신기하게 코딩 테스트는 보지 않고 서류를 합격하였다.<br>대신 면접장에서 화이트보드에 손코딩(정확한 문법까지 작성하진 않아도 됨)과 A4 용지에 출력된 문제들을 푸는 걸로 코딩 테스트를 대체했다.<br>내가 경력이 짧다는 이유로 이런 과정도 있었는데 경력이 많은 경우에는 이마저도 스킵하지 않을까 싶었다.<br>1차 면접에서는 역시나 프로젝트 위주의 질문을 많이 받았다.<br>면접이 끝난 후에 선물을 받았는데 2019년이 절반 이상 흘러갔는데 캘린더가 선물에 포함된 건 조금 아쉬웠다.  </p><p>1주가 흐른 후에 합격 메일을 통보 받고, 2차 면접 날짜를 잡았다.<br>2차는 기술 심층 면접이었다.<br>1차에서 물어보지 않았던 부분들에 대해서 질문을 많이 받았다.<br>초반에는 인프라 쪽 질문을 많이 받았고, 면접관 분도 개발자 불러다놓고 너무 인프라 쪽 얘기만 한 것 같다고 말씀하셨다.<br>많은 질문들이 나의 추측으로 밖에 답변할 수 없을 정도로 내 지식이 크게 부족했다.<br>그 때마다 면접관 분들은 정답을 원하는 게 아니라 그냥 알고 있는 그 대로 한 번 얘기해보라고 다독여주셨다.<br>그래서인지 면접이 끝날 때 쯤에는 몸에 산소 공급이 부족한 느낌이 들 정도로 얘기를 많이 했고, 머리에서 김이 나는 것 같았다.  </p><p>또 1주가 흐른 후에 합격 메일을 통보 받고, 마지막 3차 임원진 면접 날짜를 잡았다.<br>임원진이기 때문에 비개발직군이 들어오지 않을까 싶었는데, 내가 하는 말을 전부 이해하시는 걸 보아 개발자이거나 개발자 출신 같아 보였다.<br>그리고 블로그 하는 걸 굉장히 높게 평가해주셨고, 면접을 보는 내내 긍정적인 신호를 받았다.  </p><p>결과는 <strong>합격</strong>이다.<br>개인적으로 1차에서는 프로젝트 위주로, 2차에서는 기술 위주로 평가를 받아서 다방면에서 고루고루 평가를 제대로 받았단 느낌이 들었다.<br>하지만 3차까지 면접과정이 있다보니 역시 몸과 마음이 시간이 지나면 지날 수록 지침을 느꼈다.<br>1차와 2차는 하루에 몰아서 봤으면 어땠을까… 싶기도 하다. (그러면 내가 지쳐 쓰러졌을 지도 모르겠지만…)</p><h4 id="밸런스-히어로"><a href="#밸런스-히어로" class="headerlink" title="밸런스 히어로"></a>밸런스 히어로</h4><p><a href="https://truebalance.io/" rel="external nofollow noopener noreferrer" target="_blank">밸런스 히어로</a>는 인도에서 무선통신요금을 효율적으로 관리하는 솔루션 등등을 제공해주는 앱(트루 밸런스)을 개발한 핀테크 기업이다.<br>처음에 채용 담당자로부터 <strong>카카오톡</strong>으로 연락이 왔다. (주변 지인을 통해서 내 번호를 알았다고 한다.)<br>나는 인터넷에 핸드폰 번호를 공개한 적이 없어서 맨 처음엔 스팸인가 싶어서 무시했지만 내 주제에 오히려 굴러들어온 기회를 걷어차버리는 것 같아서 먼저 채용 담당자를 만났다.  </p><p>처음에는 별 생각없이 만났는데 정말 흥미로운 서비스 같았다.<br>일단 인도 인구가 13억 명이나 되고, 인도는 현재 개발이 크게 되지 않았고,<br>매달 1,000만명이 스마트폰을 신규가입하고, 인터넷이란 환경을 스마트폰으로 처음 접하는 세대가 대부분이라는 점이 굉장히 흥미로웠다.<br>그러다 보니 비싼 아이폰은 거의 쓰지 않고, 또 대부분이 스마트폰으로 인터넷을 접했기 때문에 프론트엔드 개발자 보다는 안드로이드 개발자가 클라이언트 쪽 주력이란 사실도 흥미로웠다.<br>그리고 서비스를 개발하는 입장에서 인도 현지에 무조건 방문한다는 사실을 듣고 설렘 반, 두려움 반이었다.</p><p>바로 그 날 저녁에 이력서를 보내고, 시간이 흘러 서류는 통과하고 코딩테스트를 봤다.<br>다른 코딩 테스트와 비슷한 수준이었는데 샘플로 등록된 테스트 코드가 많지 않았다.<br>그래서 내가 테스트 코드를 등록해서 돌려봤는데 내가 등록한 테스트 코드는 잘 통과했다.<br>그래서 바로 제출을 했는데 말하기 창피한 수준의 점수가 나와서 한숨을 푹푹 쉬어가며 떨어졌다고 생각했는데 웬걸 합격 메일이 날아왔다.</p><p>1차로 기술면접을 봤는데 그 날 처음 위워크를 방문해봤는데 상당히 시설이 좋아서 일하는 분위기 보다는 노는 분위기가 났다.<br>그리고 건물은 높은데 엘레베이터가 두 대 뿐이 없어서 엘레베이터 전쟁도 어느 정도 예상되었다.<br>네오펙트는 프로젝트 이력만 물어봤던 것에 비해서 밸런스 히어로는 기본적인 기술 관련된 질문도 좀 했다. (JVM 메모리 구조나 GC 같은…)<br>그리고 내가 진행한 배포 서버 구축 프로젝트에 대해서 내가 <strong>CI/CD</strong> 서버 구축이라고 적어놨는데 사실 단순히 배포 서버만 만든 건데 해당 단어의 의미를 정확히 모르고 사용했다는 것도 피드백을 해주셨다.  </p><p>1차 면접에 대한 결과는 그날 저녁에 바로 와서 여기 사람이 그렇게 급한가… 싶었다.<br>(아니면 내가 그만큼 뽑고 싶은 인재인가…란 생각도 들긴 했지만 아직 김칫국 마시기엔 일렀기 때문에 애써 자기 최면을 했다.)<br>2차 면접은 1차에서 기술에 대한 걸 봤기 때문에 전형적인 임원진 면접으로 알고 있었는데 테크 리더 분께서 들어오셔서 기술 심층 면접을 보았다.<br>블로그에 대해 얘기를 하다가 심도있게 작성한 글을 얘기하다보니 직접 심도있게 적은 글을 골라보라 하고 그에 대해 설명도 부탁하셨다.<br>그렇게까지 디테일하게 블로그에 대해서 물어본 적은 처음이었다.<br>그리고 해시맵이나 GC의 구조 등등에 대해서 좀 더 심도있게 질문해주셨는데 처음엔 내가 답변을 제대로 못하자 문제를 해결할 수 있게 끔 질문을 유도해주셨다.  </p><p>결과는 <strong>합격</strong>이다.<br>코딩테스트까지는 일반적인 속도였지만, 그 이후부터는 굉장히 빠르게 채용이 진행되고 결과도 빨리 알려줘서 좋았다.   </p><h4 id="비바-리퍼블리카"><a href="#비바-리퍼블리카" class="headerlink" title="비바 리퍼블리카"></a>비바 리퍼블리카</h4><p><a href="https://toss.im/" rel="external nofollow noopener noreferrer" target="_blank">비바 리퍼블리카</a>는 간편 송금 서비스로 시작한 토스란 앱을 만들고, 토스로 이름이 더 많이 알려진 핀테크 스타트업이다.<br>토스하면 복지라던지, 여러가지 무성한 소문 때문에 굉장히 높은 벽으로 인식하고 있었다.  </p><p>토스는 다른 회사와 달리 코딩 테스트를 일절 보지 않았다. (손코딩도 마찬가지로)<br>이유를 물어보니 코딩 테스트로 역량 검증이 힘들다고 했던 걸로 기억한다.  </p><p>서류 넣자마자 다음날 연락이 와서 그 다음주에 바로 1차 기술 면접 날짜를 잡았다.<br>다른 곳과 마찬가지로 대부분 프로젝트 관련된 질문이었고, 다른 데서는 인프라 쪽 얘기를 많이 했는데 여기선 서버 개발 쪽 얘기를 많이 했다.<br>내가 MSA 경험이 없고 대용량의 트래픽을 받아본 경험이 없다보니 그에 대한 답변을 못하자 계속해서 답변을 유도할 수 있는 질문을 해주셨다.</p><p>그리고 그 다음날 바로 합격 전화가 와서 또 그 주에 2차 문화 면접 날짜를 잡았다.<br>임원진 면접도 아니고, 문화 면접이기 때문에 어떻게 준비를 해야할지 막막해서 지인에게 조언을 구했다.<br>지인은 아래와 같이 조언해주었다.  </p><ol><li>인생의 목표를 설정해라.  </li><li>인생의 목표와 회사의 목표를 봐라.  </li><li>공통점을 찾아라.  </li><li>공통점이 없다면, 혹은 현저히 적다면 과감히 포기해라.  </li></ol><p>나는 거짓말을 쳐서라도 들어가고 싶은 곳은 들어가야하나 싶었는데 그 분은 장기적으로 봤을 때는 회사나 본인 둘 다에게 손해라고 말씀해주셨다.<br>누구나 해줄 수 있는 말이지만 나에겐 굉장히 영향력이 큰 분이라 위 조언을 토대로 아래와 같이 행동해보았다.  </p><ol><li>인생의 목표를 정한다.  </li><li>내 인생의 목표를 이루려면 뭘 해야할까?  </li><li>회사가 내 인생의 목표를 이루는데 도움이 될까?</li><li>된다면 어떤 부분에서 어떤 도움을 받을 수 있을까?</li></ol><p>위와 같은 고민을 하자 토스에는 내 인생의 목표를 이뤄줄만한 점이 있기 때문에 그걸 토대로 면접을 준비했다.<br>이 시간은 불과 3시간도 채 걸리지 않았다.<br>배민의 2차 면접을 위해 1주일 간 배민다움 책을 읽은 것에 비하면(1주일 내내 읽은 건 아니지만)<br>굉장히 단시간 내에 2차 면접 준비를 마쳤고, 확신 또한 있었다.</p><p>2차 면접은 위에 고민한 내용을 토대로 정리해서 답변을 했고, 나를 당홯하게 만드는 질문이나 내용들이 어느 정도 있었지만 확신을 갖고 있었기 때문에 이상한 답변을 한 것 같진 않다.<br>그리고 토스가 어떻게 일하는지, 정말 기업 문화가 어떤 문화인지 알 수 있게 해주는 면접이었다.</p><p>결과는 <strong>합격</strong>했는데 바로 그 날 저녁에 알려주었다. <del>(저녁에도 열심히 일하는 무서운 사람들…)</del><br>다른것보다도 내가 여태껏 경험해본 모든 채용과정을 통틀어 제일 빨랐다.<br>모든 과정이 1주일 내로 다 끝났다.<br>개인적으로 이런 부분도 구직자를 배려해주는 한 부분인 것 같다고 느꼈다.</p><h4 id="우아한-형제들"><a href="#우아한-형제들" class="headerlink" title="우아한 형제들"></a>우아한 형제들</h4><p><a href="https://www.woowahan.com/" rel="external nofollow noopener noreferrer" target="_blank">우아한 형제들</a>은 배달의 민족(줄여서 배민), 배민찬, 배민 라이더스 등등의 서비스를 만든 회사로 오히려 <strong>배민</strong>이란 이름으로 더 잘 알려져있다.<br>우아한 형제들을 처음 지원할 때는 굉장히 망설였다.<br>월간 카카오와 달리 한 달에 한 번 지원할 수 있는 제도가 아니기 때문에 재도전하기까지 쿨타임(기간)이 어느정도 있기 때문이었다.<br>하지만 개발이 하고 싶다는 강한 욕구와 기술 블로그와 다양한 세미나 등등을 통해 개발 문화가 탄탄한 게 눈에 보였기 때문에 고민 끝에 지원했다.</p><p>이력서 양식에서부터 신경을 많이 쓴 티가 났다. <del>(내가 쓴 이력서를 재활용하지 못해서 좀 귀찮았지만…)</del><br>일반적인 회사의 지원동기 같은 건 물어보지 않았고(아마도 없었던 걸로 기억한다.),<br>배민의 B급 감성과 잘 맞는 사람을 찾는 것인지 노래와 시를 인용해서 작성하는 내용도 있었는데 평상시 가사 보다는 비트 위주의 음악을 듣다보니 해당 내용을 그냥 무시하고 적었다.</p><p>1주일 정도가 흘러 코딩 테스트 메일이 와서 서류는 합격인 줄 알았는데 코딩 테스트까지가 서류 전형이었다.<br>문제는 크게 어렵진 않았는데 복잡도(리스트가 엄청 크다거나) 부분에서 타임아웃이 발생했다.<br>시간이 없는 관계로 제출을 하긴 했는데 계속해서 마음에 걸렸지만 어쩔 수 없었다.</p><p>또 1주일 정도가 흘러 코딩 테스트는 합격 메일이 오고, 그로부터 또 1주 후에 이제 1차 기술 면접을 보게 되었다.<br>이번 기술 면접 때도 자바나 스프링 같은 기본적인 기술보다는 프로젝트 이력 위주로 물어보았다.<br>내가 인프라 쪽 얘기를 굉장히 많이 하자 내 정체성(본인은 인프라 쪽이냐, 개발 쪽이냐)을 여쭤보고 내가 개발이라고 답하자 안심하는 듯 했다.<br>면접 분위기도 딱딱하지 않고 자연스럽게 풀어주어서 좋았다.<br>코딩 테스트에 관한 건 내 코딩 습관(메서드를 쪼개거나 변수 앞에 final을 붙이는 등등)에 대해서만 물어보았다.<br>면접 중간중간 공부 열심히 했다는 칭찬도 들었는데 이 때부터 자신감이 엄청 붙기 시작해서 면접이 끝나고 붙었다는 자신이 생겼다.<br>한편으론 면접을 못봤다고 생각했을 때도 붙은 경험이 있기 때문에 반대로 되는 게 아닐까, 나 혼자 헛소리 하다 온 게 아닐까 걱정이 됐다.<br>면접이 끝나고 배민의 B급 감성이 가득 담긴 선물을 주는데 면접 때 뭘 받아본 적은 처음이어서 기분이 되게 좋았다.</p><p>그로부터 1주일 정도가 흘러 1차 합격 메일이 오고, 2차 임원진 면접을 그로부터 1주 후에 보았다.<br>면접 보기 하루 전날에 스타벅스 기프트콘을 주는 것 또한 면접자를 배려해준다는 걸 크게 느낄 수 있었다.<br>정말정말 들어가고 싶은 회사이기 때문에 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=11211590" rel="external nofollow noopener noreferrer" target="_blank">배민다움</a>이란 책도 읽었다.<br>개인적으로 배민에 들어갈 생각이 없더라도 꼭 한 번 읽어보길 권한다.<br>한 기업의 역사와 어떤 마인드를 가지고, 또 어떻게 충성도 높은 고객을, 그런 문화들을 만들어냈는지 엿볼 수 있는 기회이다.<br>책을 본 덕분에 면접은 괜찮게 봤다는 느낌이 들었다.  </p><p>그로부터 1주일 정도가 흘러 최종 <strong>합격</strong> 메일이 왔다.<br>면접자를 배려하는 점은 굉장히 좋은 경험이었지만 길었던 면접 과정에 몸과 마음이 많이 지친 것 같았다.</p><h2 id="나는-어떻게-합격할-수-있었을까"><a href="#나는-어떻게-합격할-수-있었을까" class="headerlink" title="나는 어떻게 합격할 수 있었을까?"></a>나는 어떻게 합격할 수 있었을까?</h2><p>자만이 아니라 내 주관적인 판단 하에 어떤 이유 때문에 생각지도 못한 기업들에 합격할 수 있었는지 고민해봤다.<br>하나하나 나열해서 과거로 올라가자면 끝이 없을테니 적당히 추려보았다.</p><h3 id="연차대비-다양한-경험"><a href="#연차대비-다양한-경험" class="headerlink" title="연차대비 다양한 경험"></a>연차대비 다양한 경험</h3><p>나는 다음과 같은 경험을 해보았다.  </p><ol><li>프로젝트 세팅(Gradle, JDK, 기술 스택)  </li><li>서버 세팅(AWS의 VPC, Subnet, Routing Table, NAT Gateway, EC2, ELB, EB, Security Group, Route 53, RDS, ElastiCache 등등을 처음부터 끝까지 만들어보았다.)  </li><li><a href="/2017/09/28/map-api-performance-improvement/">성능 개선</a>(지도보기 API 응답 15MB -&gt; 2MB로 줄임, 응답 속도를 22초에서 0.5초로 단축)  </li><li>기존 로직을 수정할 때 먼저 기존 로직을 손대지 않고 성공하는 테스트 코드를 작성한 후에 로직을 개선하면서 테스트가 실패하지 않게 끔 하며 리팩토링</li><li>Dogfooding(외부에 제공할 서비스를 사내에서 미리 적용해봄) 용으로 진행한 프로젝트에서 Spring WebMVC를 사용해도 됨에도 불구하고 먼저 Webflux를 제안해주셔서 Webflux에 대한 간단한 이해도 및 장단점</li><li>인프라 경험<ol><li>자동화된 배포 서버 구축 및 배포 방식 통일(Jenkins, Ansible)  </li><li>서버 환경 통일(Docker)  </li><li>모니터링 시스템 구축(Prometheus, Exporter, Grafana)  </li><li>Scale In/Out에 대비하여 유동적으로 서비스 디스커버리(Consul)</li></ol></li></ol><p>위와 같은 경험은 주니어에게 AWS에 대한 제한을 걸지 않았던 환경(각자 DevOps로 일하는 문화)과 독자적으로 프로젝트를 진행할 수 있었던 환경,<br>지속적으로 AWS 쪽에 관심을 표하니 인프라 쪽 업무도 맡을 수 있게 된 환경이 나에게 주어졌기 때문에 경험할 수 있었다.<br>한마디로 복이 참 많았다.</p><h3 id="블로그"><a href="#블로그" class="headerlink" title="블로그"></a>블로그</h3><p>이번 면접에서 블로그에 대해 얘기가 나오지 않은 적이 거의 없었던 것 같다.<br>먼저 언급을 해주거나, 블로그 글 재밌게 잘 봤다고 얘기해주거나, 블로그에 나온 내용 중에 궁금한 점을 물어보거나 할 정도였으니 말이다.  </p><p>3년 전, 처음 블로그 시작은 개발자로 취직하기 전에 이력서에 한 줄이라도 더 적어보고 싶은 마음에, 스타 개발자가 되고 싶은 마음에 시작했다.<br>하지만 이제 블로그에 정리를 하지 않으면 이해도가 많이 줄어드는 것 같고, 정리를 해놓으면 마음이 좀 안심되는 지경에 이르렀다. (그럼에도 불구하고 게으를 땐 여전히 잘 안 쓴다 ㅠㅠ…)<br>또한 블로그를 해서 손해본 적은 없었던 것 같다. (앞으로는 말조심 해야할 일이 더 많을 것 같다.)<br>따라서 뭐가 됐던 블로그에 조금씩 남기다 보면 하나의 밑거름이 되지 않을까 싶다. <del>(광고 수익으로 돈까스를 공짜로 먹으려는 심산도 있긴 하다.)</del></p><h3 id="자신감"><a href="#자신감" class="headerlink" title="자신감"></a>자신감</h3><p>뭔소리냐 싶을 수 있겠지만, 합격하는 곳이 생기고 심지어 칭찬해주거나 면접 잘 봤다고 얘기해주는 면접관도 있다보니<br>그 이후에 보는 면접에서는 더 잘 대답한 것 같았다.<br>심지어 준비를 덜 했는데도 잘 본 기업도 있었다.  </p><p>물어볼 게 비슷해보였고, 그에 대해 나는 준비됐다라고 자신감을 가지기 시작하니 두렵지 않았다.<br>그전에는 ‘어떻게 내가 감히, 나는 아직 부족해’라는 생각으로 의기소침해하며 제대로 대답도 못하거나 이직 시도할 생각 조차도 하지 못했다.<br>하지만 이런 자신감을 가지고 나니 남은 면접들이 전부 수월하게 잘 풀렸다.</p><h3 id="이력서"><a href="#이력서" class="headerlink" title="이력서"></a>이력서</h3><p>지인의 조언을 받아 <a href="https://docs.google.com/document/d/1VBjqH1ghnNB7SONO0JrOHe4kTE328-YZrbm0UrQt4uE/edit?usp=sharing" rel="external nofollow noopener noreferrer" target="_blank">전형적인 국문 이력서</a>에서 <a href="https://docs.google.com/document/d/1oLILPuICSujGcaknguKo7vpfV-FrRCyp-VpDKYvAt58/edit?usp=sharing" rel="external nofollow noopener noreferrer" target="_blank">프로젝트 중심의 정보들만 남긴 이력서</a>로 탈바꿈했다.<br>전형적인 국문 이력서(사진, 성별, 나이, 주소, 학력, 성장배경 등등)는 기술 중심의 회사라면 그닥 궁금해할 거 같지 않았다.<br>‘개발자가 개발만 잘하면 되지, 뭐가 중요하냐’라는 생각에 수정을 했는데 매우 잘 한 것 같다. </p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>최종적으로 이직하기로 한 회사가 있긴 하지만, <strong>수습 3개월</strong>이라는 큰 관문이 남아있기 때문에 공개하기엔 이른 것 같다.<br>연말 쯤에는 속시원히 어떤 회사 다닌다고 말할 수 있지 않을까 싶다. </p><p>이번 면접 때 느낀 점은 회사에서 원하는 인재는 다 비슷한 것 같았다. (문화만 좀 다를 뿐이지)<br>결국엔 잘하는 사람을 원한다. (내가 잘한다고 막 자만하거나 그런 건 아니다.)<br>적어도 현재 잘하지 않더라도 열심히 해서 미래 잠재 능력을 보는 것도 같았다. (아마도 나는 이 축에 속하는 것 같고 이건 연차가 적은 주니어까지만 먹힐 것 같다.)<br>대부분이 엄청 기술적인 부분보다는 프로젝트 중심으로 많이 물어봤다. (전부 자사 서비스 회사를 가서 그런 경험이 중시된 부분도 있겠지만)<br>결국 프로젝트 경험을 쌓아야하기 때문에 개인적인 토이 프로젝트나 오픈 소스 쪽 경험을 쌓아보는 것도 좋은 것 같다.  </p><p>또한 거짓말 칠만한, 가식적인 질문들(직장 상사의 부당한 지시에 어떻게 대응할 것인지 등등)이 없었고, 나의 솔직한 대답(지원 동기)가 좋게 작용했다.<br>유튜브나 블로그에 저런 것 관련해서 어떻게 답변해야하는지, 면접관이 듣고싶어하는 답은 정해져있다 뭐 이런 내용을 어느 정도 봤었는데 그렇게까지 나 자신을 속이고 싶지 않았다. (덜 간절했던 건지도 모르겠지만…)<br>지원 동기에 대해서 어떤 회사에는 ‘잘하는 사람이 있어서 그 사람 보고 지원했습니다’, 또 어떤 회사에는 ‘평상시에 자주 사용하는 서비스인데 제가 만들고 남들이 쓰는 거 보면 뿌듯할 거 같아서’,<br>또 다른 회사에는 ‘대용량 트래픽에 대한 경험이 없다보니 그런 경험 하고 싶어서’ 이렇게 말했다.<br>인터넷에서 말하는 ‘그 회사여야만 하는 이유’, ‘다른 회사에도 써먹을 수 있는 이유면 안 된다’라는 내용에 완전 위배했다.<br>만약 내가 자신이 없었다면, 준비가 덜 됐더라면 저런 내용들로 나 자신을 숨기고 포장했을 거다.<br>하지만 나는 기술로 승부하는 개발자이기 때문에 숨김없는 나의 기술 실력으로 승부했는데 좋게 작용한 것 같고, 전부 기술 중심의 회사이기 때문에 먹힌 전략 같았다.</p><p>그리고 이번 이직을 통해서 개발자 측면에서도 많은 성장을 했지만, 한 사람 측면에서도 엄청난 성장을 했다.<br>열심히 하고, 잘 한다고 이직 해보라는 권유를 주변으로부터 종종 받았다.<br>하지만 그럴 때일 수록 ‘카프카도 잘 모르는데, 레디스도 잘 모르는데, MSA로 서버 구성도 안 해봤는데, 알고리듬이나 자료구조도 잘 모르는데, 객체지향도 잘 모르는데, 스프링도 잘 모르는데’ 이런 생각이 자꾸만 들었다.<br>그래서 ‘조금만 더 준비하고 봐야지’란 생각으로 계속 공부만 해왔다. (사실 경력 중에 공부 안 하고 인생 낭비한 세월이 절반은 된 것 같다. 물론 공부한 하면서 살진 못하겠지만…)<br>하지만 이번 이직을 통해 내가 합격하지 못할 곳이라고 생각한 기업들에 많이 떨어지기도 했지만 합격도 많이 했다.<br>그러다보니 <strong>내가 생각한 나보다 나는 좀 더 가치가 있는 사람이구나</strong>라는 걸 깨닫게 되었다.<br>그동안 내 가치를 내 스스로 깎아내리고, 제대로 판단하지 못하고 시간을 많이 낭비했다는 생각도 들었다.<br>어떻게 보면 자만일지 모르겠지만 정도 차이는 있더라도 내 가치를 내 스스로 판단하지 못한 건 사실이었다. (물론 지금도 정확히 판단하진 못하지만…)<br>그러다보니 말이나 행동할 때 자신감이 붙다보니 계속해서 좋은 결과가 있었던 것 같다.</p><p>이런 사실은 주변에서 천년 만년 말해줘도 죽었다 깨어나도 깨닫지 못한다.<br>본인이 직접 깨달아야한다. (물론 그만한 준비를 해왔다는 전제 하에…)<br>하지만 시간은 계속해서 흘러가기 때문에 최대한 빨리 깨달아야한다.<br>당신의 가치를 계속해서 깎아내리는 일이 없길 바란다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 잡동사니 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 퇴사 </tag>
            
            <tag> 이직 </tag>
            
            <tag> 면접 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Hexo) NexT 테마</title>
      <link href="/2019/08/22/hexo-theme-next/"/>
      <url>/2019/08/22/hexo-theme-next/</url>
      
        <content type="html"><![CDATA[<h2 id="Static-Page-Blog-테마-선정"><a href="#Static-Page-Blog-테마-선정" class="headerlink" title="Static Page Blog 테마 선정"></a>Static Page Blog 테마 선정</h2><p>Static Page로 만들어진 블로그들은 테마가 굉장히 중요하다.<br>네이버나 티스토리에는 있는 기본적인 기능들이 없는 테마들이 상당히 많다. (검색, 카테고리, 태그, 페이지네이션 등등)<br>따라서 디자인만 보고 골랐다가 커스터마이징하느라 시간을 날리기 십상이기 때문에 디자인과 기능 사이에 어느정도 절충안을 가지고 골라야한다.  </p><a id="more"></a><p><img src="/images/hexo-theme-next/hueman.png" alt=""><br>나는 이전에 <a href="https://github.com/ppoffice/hexo-theme-hueman" rel="external nofollow noopener noreferrer" target="_blank">Hueman</a> 테마를 살짝 커스터마이징해서 사용했다.<br>검색이나 카테고리, 메뉴 등등의 기능은 좋았지만 디자인이 좀 구려보였다.<br>다소 아쉽긴 했지만 블로그의 본질은 <strong>글쓰기</strong>이기 때문에 좀 더 가치있는 일에 집중을 하고 싶어서 큰 불만없이 사용하고 있었다.</p><p><img src="/images/hexo-theme-next/pork-cutlet.jpeg" alt="넘나 맛있는 내사랑 돈까스를 매주 공짜로 먹을 수만 있다면..."><br>하지만 욕심이 생겨서 구글 애드센스를 통해 조그만 수익이라도 창출해보고 싶었다.<br>그러나 번번히 정책에 부합하지 않는다는 답변만 받았다.<br>그러다보니 ‘애드센스 다느라 뻘짓할 시간에 공부해서 연봉 올리는 게 더 낫겠다’는 판단이 들었다.</p><h2 id="왜-NexT-테마로-바꾸는가"><a href="#왜-NexT-테마로-바꾸는가" class="headerlink" title="왜 NexT 테마로 바꾸는가?"></a>왜 NexT 테마로 바꾸는가?</h2><p>하지만 인간의 욕심은 끝이 없고, 주변에서 ‘왜 애드센스 안 다냐, 다른 사람들은 쉽게 통과됐다’라는 소리가 들리길래 다시 욕심이 생겼다.<br>애드센스 말고 다른 광고 플랫폼도 있지만 ‘질떨어지는 광고가 노출되면 어떡하나, 광고가 너무 과해서 사람들의 발길이 끊기면 어떡하나’ 이런 걱정들이 들었다.<br>그렇다고 해서 애드센스가 통과 잘 되는 다른 플랫폼으로 갈아타고 싶진 않았고, 내가 테마를 커스터마이징하면서 뭔가 웹표준이나 접근성에 위배되는 등등의 잘못을 저지르지 않을까 싶었다.<br>따라서 애드센스가 통과된 적이 있고, 사람들이 많이 사용하는 테마를 최대한 커스터마이징하지 않으려고 하다보니 <a href="https://github.com/theme-next/hexo-theme-next" rel="external nofollow noopener noreferrer" target="_blank">NexT</a>란 테마를 발견하게 되었다.</p><p>우선 카테고리, 메뉴, 태그, 검색 등등의 기능은 이전 Hueman 테마와 동일하다.<br>하지만 디자인이 깔끔하고 테마 안에서도 <a href="https://muse.theme-next.org" rel="external nofollow noopener noreferrer" target="_blank">Muse</a>, <a href="https://mist.theme-next.org" rel="external nofollow noopener noreferrer" target="_blank">Mist</a>, <a href="https://pisces.theme-next.org" rel="external nofollow noopener noreferrer" target="_blank">Pisces</a>, <a href="https://theme-next.org" rel="external nofollow noopener noreferrer" target="_blank">Gemini</a>와 같은 테마들이 존재한다. (나는 Pisces 테마를 택했다.)<br>또한 사이드바에 목차가 나오는 것도 좋고, 예전에는 블로그 홈에 썸네일이 없으면 좀 보기가 안 좋았는데 이 테마는 굳이 썸네일이 없어도 돼서 썸네일을 고르는데 들었던 시간을 단축시킬 수도 있다.<br><a href="https://theme-next.org/docs/" rel="external nofollow noopener noreferrer" target="_blank">문서</a>도 굉장히 잘 되있고, 한국어도 잘 지원한다.<br>또한 북마크 기능(다음에 해당 페이지 재방문시 스크롤 위치 기억), <a href="https://github.com/MoOx/pjax" rel="external nofollow noopener noreferrer" target="_blank">PJAX</a> (AJAX와 pushState를 이용하여 페이지를 처음부터 로딩하는 게 아니라 필요한 컨텐츠만 로딩), 각종 Analytic, 댓글 등등의 플러그인의 사용이 가능하다.<br>그리고 유지보수도 굉장히 활발히 이루어지고 있다.</p><p>테마를 바꾸고 만 하루만에 바로 통과되었다.<br>기존 테마를 내 맘대로 커스터마이징 하면서 뭔가 잘못 건드린 모양이다.<br><del>주 1회 매콤 치즈 돈까스를 실현하기 위해 블로그를 열심히 해야겠다.</del></p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 잡동사니 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>왜 한국은 미국 금리에 의존적일까?</title>
      <link href="/2019/08/15/why-korea-depends-on-interest-rate-us/"/>
      <url>/2019/08/15/why-korea-depends-on-interest-rate-us/</url>
      
        <content type="html"><![CDATA[<p><a href="https://youtu.be/0LYMTsj_eqc?t=3022" rel="external nofollow noopener noreferrer" target="_blank">EBS 다큐프라임 자본주의 제1부 돈은 빚이다</a>와<br><a href="https://www.youtube.com/channel/UClmxSq4_kJfLtyIY7TycFfw" rel="external nofollow noopener noreferrer" target="_blank">돌디</a> 님의 <a href="https://youtu.be/LzpNvyvTmIE" rel="external nofollow noopener noreferrer" target="_blank">금리</a>, <a href="https://youtu.be/jqeXqLJMYl0?t=590" rel="external nofollow noopener noreferrer" target="_blank">돈은 가짜다 - 저축만 해서 망하는 이유</a> 영상을 보면 좀 더 많은 인사이트를 쌓을 수 있다.</p><h2 id="왜-한국은-한국-금리에만-의존할-수-없는-걸까"><a href="#왜-한국은-한국-금리에만-의존할-수-없는-걸까" class="headerlink" title="왜 한국은 한국 금리에만 의존할 수 없는 걸까?"></a>왜 한국은 한국 금리에만 의존할 수 없는 걸까?</h2><p>그 이유는 바로 무역 때문이다.<br>대부분의 나라가 무역을 하기 때문에 그 나라의 금리에만 의존할 순 없을 것이다.<br>더군다나 우리 나라는 자원(석유, 나무, 철광석 등등)이 거의 없다.<br>대부분 외국에서 수입에 의존하기 때문이다.<br>이렇게 수출/수입을 할 때 쓰는 돈이 <code>기축통화</code>인데 우리나라의 통화는 기축통화가 아니기 때문에 우리나라의 금리에만 의존할 수가 없는 거다.</p><a id="more"></a><h3 id="기축통화-우리가-미국-금리에-의존할-수-밖에-없는-이유"><a href="#기축통화-우리가-미국-금리에-의존할-수-밖에-없는-이유" class="headerlink" title="기축통화 - 우리가 미국 금리에 의존할 수 밖에 없는 이유"></a>기축통화 - 우리가 미국 금리에 의존할 수 밖에 없는 이유</h3><p>기축통화는 <code>국제거래에 통용되는 결제 수단</code>으로서 가장 의미있는 돈이 기축통화인데, 현재 기축통화는 미국의 달러($)이다.  </p><p>그럼 어떻게 달러가 기축통화가 되었을까?<br>현재 미국이 경제대국이지만 과거에는 영국이 경제대국이었다.<br>그래서 2차 세계 대전 이전에는 영국의 파운드(£)가 기축통화였다.<br>하지만 2차 세계 대전 당시에 영국은 전쟁 자금을 마련하기 위해 미국으로부터 많은 돈을 빌렸고,<br>그 돈을 갚기 위해 영국은 많은 금을 미국에 지불하게 된다.<br>대부분 금을 제일 많이 가지고 있는 국가가 패권을 가지게 되고, 그로 인해 미국이 패권을 가지게 됨으로써 <code>1944년 미국 브레튼우즈 협정</code>에서 달러가 기축통화가 되었다.</p><h3 id="달러의-의미"><a href="#달러의-의미" class="headerlink" title="달러의 의미"></a>달러의 의미</h3><p><a href="/2019/08/15/money-is-debt#최초의-은행">돈은 빚이다</a>에서 말했다 싶이 금은 들고다니기 불편하므로 대부분의 사람이 금고에 금을 맡기고, 금 보관증으로 거래를 하기 시작했다.<br>기축통화가 된 달러도 마찬가지였다.<br>35 달러를 가져오면 금 1oz로 교환해주겠다고 <code>1944년 미국 브레튼우즈 협정</code>에서 정해졌다. (이를 <code>금 본위제 또는 금 태환제</code>라고 부른다.)</p><p>즉, <code>달러는 금 보관증</code>으로써 작용하기 시작했다.<br><img src="/images/why-korea-depends-on-interest-rate-us/dollar-in-past.jpeg" alt="TEN DOLLARS IN GOLD COIN이라는 문구를 주목해라."></p><p>하지만 그 이후에 베트남 전쟁으로 달러의 가치가 하락하기 시작했다.<br>달러의 가치가 하락했다는 것은 수요/공급 법칙에 의해 달러의 공급이 많아졌음을 의미한다.<br>즉, 공급이 많아졌다는 것은 중앙은행에서 달러를 많이 찍어냈음을 의미한다.<br>왜냐하면 전쟁을 하려면 많은 돈이 필요하기 때문이다.<br>그만한 금이 없음에도 불구하고 미국은 자신의 금고 안에 금이 얼마나 들어있는지는 미국 자신 밖에 모르기 때문에 <code>없는 금을 교환</code>해준다고 교환증(달러)을 마구 찍어댄 게 아닐까 싶다.</p><p>그래서 미국에 수출을 해서 달러를 벌어들인 각국은 달러의 가치를 점점 의심하기 시작한다.<br>그 결과 많은 국가가 <code>달러(금 보관증)</code>를 금으로 바꾸기 시작한다.<br>엎친데 덮친격으로 미국은 무역 적자(수출액 &lt; 수입액)였기 때문에 금은 점점 더 미국 밖으로 유출되기 시작한다.  </p><p>역사적으로 금을 가장 많이 가진 국가가 패권을 쥐기 때문에 금의 유출이 두려웠던 미국은 <code>1971년 닉슨 대통령</code>에 의해 금 본위제(달러를 금으로 교환)를 폐지하도록 한다.<br>왜냐하면 돈은 종이 쪼가리에 불과하기 때문에 중앙은행에서 찍어대기만 하면 되지만, 금은 실물이기 때문에 돈보다 생성(혹은 확보)해내기가 훨씬 어려웠기 때문이다.<br>물론 폐지할 때도 영구적으로 폐지한다고 하면 달러(금 보관증)를 소유한 나라의 반발이 심할 것이므로 미국의 경제가 살아날 때까지 임시 방편으로 폐지하는 것처럼 얘기했지만 그 이후 금 본위제는 부활하지 않고 있다.</p><p><img src="/images/why-korea-depends-on-interest-rate-us/dollar-in-present.jpg" alt="1971년 이후의 달러는 GOLD와 관련된 문구가 어디에도 적혀있지 않다."><br>이제 달러는 금으로부터 자유로워졌고, 단순히 종이 쪼가리에 불과하게 된다.<br>즉, 금의 보유량과 상관없이 이제 마구잡이로 찍어댈 수 있게 됐다.</p><h3 id="미국의-조폐공사"><a href="#미국의-조폐공사" class="headerlink" title="미국의 조폐공사"></a>미국의 조폐공사</h3><p>또한 달러의 조폐공사인 미국의 중앙은행(FRB, Federal Reserve Bank)은 한국과 달리 정부가 운영하는 기관이 아닌 <code>민간은행</code>이다.<br>따라서 민간은행에 의해 돈이 생산되다보니 완전 그들의 손아귀에 막강한 권력이 있는 것이다.<br>미국 정부마저도 중앙은행에 이자를 내고 돈을 대출받고 있다.  </p><p>어찌보면 굉장히 웃긴 일인데, 미국에서도 화폐 발행권을 민간은행에서 정부로 옮기려는 시도는 있었다.<br>케네디 대통령이 <code>암살</code>당한 해인 <code>1963년 6월</code>에 <code>대통령령 11110호(화폐의 발행권을 정부로 가져온다는 내용)</code>에 서명했다.<br>그로부터 5개월 후인 11월에 케네디 대통령은 암살 당하고, 그 이후 대통령을 맡게 된 존슨 대통령은 대통령령 11110호에 <code>서명한 것을 취소</code>했다.<br>음모론에 불과할지 모르겠지만, <code>그만큼 미국의 중앙은행이 가진 권력이 막강했기 때문에 이런 사태가 벌어졌다</code>라는 루머도 있다.</p><p>이렇게 달러는 종이 쪼가리에 불과하고(완전 종이 쪼가리까지는 아니고, 미국에 대한 신뢰도로써 사용되는 게 아닐까 싶다.), 그 달러 마저도 정부가 아닌 민간은행에서 발행하기 때문에<br>미국에 대한 의존도를 낮추자는 차원에서 다른 기축통화를 지정하자는 얘기도 있었지만 그만한 경제 규모를 가진 큰 나라가 없기 때문에 계속해서 달러가 기축통화로서 자리잡고 있는 게 아닐까 싶다.</p><h3 id="한국-금리는-미국-금리에-의존한다"><a href="#한국-금리는-미국-금리에-의존한다" class="headerlink" title="한국 금리는 미국 금리에 의존한다."></a>한국 금리는 미국 금리에 의존한다.</h3><p><a href="/2019/08/15/why-central-banks-creates-money/">왜 중앙은행은 화폐를 발행하는가? (feat. 인플레이션, 디플레이션)</a>에서 말했다 싶이 돈도 수요/공급 원칙을 따른다.<br>또한 금리(돈을 빌려주는 대가, 이자)에도 마찬가지로 수요/공급 원칙이 적용된다.  </p><p>돈을 빌리려는 사람이 많으면 공급 부족에 의해 금리는 올라간다.<br>경기가 좋으면 사람들은 많은 돈을 사용할테고, 그로 인해 돈도 빌려서 여기저기 사업도 번창하고, 투자도 많이 할 것이다.<br>이렇게 경기가 좋으면 금리는 올라가게 돼있다.</p><p>돈을 빌리려는 사람이 적으면 공급 과잉에 의해 금리는 내려간다.<br>경기가 안 좋으면 사람들의 소비 심리는 위축되고, 그로 인해 기업의 매출은 줄어들고, 기업은 매출이 줄어들었으니 인건비 절감의 목적으로 정리해고를 하고, 또 정리해고 당한 사람들은 돈을 벌지 못하니 소비 심리는 위축되고…<br>이런 사이클이 계속해서 반복된다.<br>정부 입장에서는 사람들이 소비를 하지 않으니 세금이 덜 걷히게 되니 돈을 쓰게 끔 만들어야한다.<br>돈이 있어야 쓰게 되는데 사람들은 돈이 없다보니 적은 금리로 대출해주는 것이다.<br>하지만 그럼에도 불구하고 사람들이 금리가 비싸다고 생각되면 돈을 많이 빌리지 않을테니 사람들이 돈을 많이 빌릴 때까지 계속해서 금리를 내린다.<br>0%까지 내리면 누구나 돈을 빌리고 갚지 않으면 되기 때문에 0.1%까지 낮추는 것으로 알고 있다.</p><p>이렇게 경기가 안 좋아지면 금리는 내려가고, 그러다 다시 경기가 좋아지면 금리를 올리고, 이런 싸이클이 계속해서 반복된다.  </p><p>하지만 이는 한 나라의 금리만 바라봤을 때의 얘기이고, 다른 나라의 금리까지 끼어들게 되면 상황은 좀 복잡해진다.  </p><table><thead><tr><th>은행명</th><th>이자</th><th>자본</th></tr></thead><tbody><tr><td>A</td><td>3%</td><td>건장</td></tr><tr><td>B</td><td>1%</td><td>부실</td></tr></tbody></table><p>당신이라면 어느 은행에 예금할 것인가? 이성적으로 판단해보면 당연히 A 은행에 맡길 것이다.<br>그럼 이 은행명을 국가로 바꿔보자.</p><table><thead><tr><th>국가</th><th>이자</th><th>자본</th></tr></thead><tbody><tr><td>미국</td><td>3%</td><td>건장</td></tr><tr><td>한국</td><td>1%</td><td>부실</td></tr></tbody></table><p>대부분 한국보다 미국이 훨씬 튼튼한 나라라고 생각한다.<br>더군다나 금리마저 높다면??<br>당장 한국에 투자했던 사람은 한국에 투자한 돈을 빼서 다시 미국에 투자할 것이다.<br>따라서 이런 자본의 유출을 막기 위해 경기의 상황과는 별개로 울며 겨자먹기로 금리를 조금씩 올려서 미국보다 금리를 높게 만들 수도 있을 것이다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 경제 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자본주의 </tag>
            
            <tag> 경제 </tag>
            
            <tag> 재테크 </tag>
            
            <tag> 금리 </tag>
            
            <tag> 기축통화 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>왜 중앙은행은 화폐를 발행하는가? (feat. 인플레이션, 디플레이션)</title>
      <link href="/2019/08/15/why-central-banks-creates-money/"/>
      <url>/2019/08/15/why-central-banks-creates-money/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/why-central-banks-creates-money/thumb.jpg" alt="돈 많이 벌고싶다..."></p><p><a href="https://youtu.be/0LYMTsj_eqc" rel="external nofollow noopener noreferrer" target="_blank">EBS 다큐프라임 자본주의 제1부 돈은 빚이다</a>를 보고 나면 더 많은 인사이트를 얻을 수 있다.</p><h2 id="물가는-왜-상승하는가-feat-인플레이션"><a href="#물가는-왜-상승하는가-feat-인플레이션" class="headerlink" title="물가는 왜 상승하는가? (feat. 인플레이션)"></a>물가는 왜 상승하는가? (feat. 인플레이션)</h2><p><img src="/images/why-central-banks-creates-money/demand-and-supply.jpg" alt="수요와 공급의 원칙을 알고 있는가?"></p><p>수요가 늘어나거나 공급이 줄어들면 가격이 올라간다.(공급 부족)<br>예를 들면 참외 농사가 흉년이 일어나서 참외를 먹고 싶은 사람은 전과 같이 10명으로 고정적인데 참외의 갯수가 5개로 확 줄어들은 상황이거나,<br>어느날 참외가 암을 치료해준다는 소문이 돌아 참외는 100개가 있는데 참외를 사려는 사람이 1000명으로 늘어난 상황이다.</p><a id="more"></a><p>수요가 줄어들거나 공급이 늘어나면 가격은 줄어든다.(공급 과잉)<br>예를 들면 참외 농사가 풍년이 나서 참외를 먹고 싶은 사람은 전과 같이 10명으로 고정적인데 참외의 갯수가 1000개로 확 늘어난 상황이거나,<br>어느날 참외를 먹으면 암에 걸린다는 소문이 돌아 참외는 100개가 있는데 참외를 사려는 사람이 1명으로 줄어들은 상황이다.</p><p>이렇게 특정 물건에 대해서 수요와 공급의 원칙에 의해 물가가 상승/하락하곤 한다.<br>하지만 이건 특정 물건에만 국한되는 게 아니라 돈에도 적용되는 원칙이다.</p><p>돈의 공급이 늘어나는 방법에는 두 가지 방법이 있다.</p><ol><li>중앙은행에서는 화폐를 발행할 수 있다.<br>돈을 찍어내는데 당연히 공급이 늘어날 것이다.</li><li>일반 시중에 있는 은행들(중앙은행도 마찬가지)은 빚을 생성(대출로 인해)해서 그 이자로 인해 이익을 창출한다.<br>은행은 대출해 줄 수록 이자를 많이 받을 수 있고, 그러면 그럴 수록 통화량은 증가한다.<br>즉, 새로운 빚이 생성됨과 동시에 새로운 돈이 생성되는 것이다.</li></ol><p>위와 같은 방법으로 인해 돈이 많아졌으니 돈에 대한 공급이 과잉 현상이 발생한다.<br>즉, 돈의 가치가 하락한다.</p><p>돈의 가치가 하락했는데 참외의 수요/공급 상황은 동일하다고 해보자.<br>그럼 더 많은 돈을 지불해야 참외 한 개를 살 수 있게 된다.<br>이렇게 통화량의 증가로 인해 화폐가치가 하락하고, 물가가 오르는 경제 현상을 <code>인플레이션(통화팽창)</code>이라고 한다.</p><p><img src="/images/why-central-banks-creates-money/korea-graphg.png" alt="출처: 한국은행"><br>우리나라 경제를 보면 꾸준하게 통화량도 증가했고, 그와 비슷한 추세로 물가도 같이 상승했음을 알 수 있다.</p><h2 id="중앙은행"><a href="#중앙은행" class="headerlink" title="중앙은행"></a>중앙은행</h2><p>중앙은행(우리나라의 중앙은행은 한국은행이다.)은 아래 권한들을 통해 통화량을 조절한다.</p><h3 id="이자율-통제"><a href="#이자율-통제" class="headerlink" title="이자율 통제"></a>이자율 통제</h3><p>이자율을 통제(올리고 내림)함으로써 어떻게 통화량을 조절할 수 있다는 걸까?</p><p>우선 경기가 안 좋다고 쳐보자.<br>그럼 사람들의 지갑은 무거워 질 것이고, 더더욱 경기는 안 좋아질 것이다.<br>이 때 사람들이 소비를 하게 끔 만드는 방법은 무엇일까?<br>바로 통화량을 늘려 사람들이 돈을 더 많이 가지게 끔 하면 돈을 많이 쓰게 될 것이다.<br>그러면 통화량을 늘려야하는데 이자율만 내려도 통화량은 자연스레 늘어난다.<br>이자율이 내려가면 사람들은 싼 이자에 돈을 빌릴 수 있으니 더 대출을 많이 하게 된다.<br>그럼 대출을 함으로써 새로운 돈이 생성되는 것이다. (통화량 증가)</p><p>반대로 경기가 좋다고 쳐보자.<br>경기가 좋으니 사람들의 지갑은 빵빵할 것이고, 이자율이 조금 높아져도 지갑이 빵빵하니 어느정도 납득할 것이다.<br>하지만 대부분의 사람들이 이자율이 높아지면 내야할 이자가 많기 때문에 전보다는 돈을 많이 빌리지 않게 된다.<br>또한 이자율이 비싸졌으니 비싼 이자를 감당하기 힘들어서 하루 빨리 빚을 갚으려고 할 것이다.<br>이럼으로써 빚은 적게 생성되거나 줄어들게 되다보니 통화량은 줄게 돼있다.</p><h3 id="화폐-발행"><a href="#화폐-발행" class="headerlink" title="화폐 발행"></a>화폐 발행</h3><p>말 그대로 돈을 찍어내는 것이다.<br>이자율 통제는 통화량을 늘릴 수도, 줄일 수도 있지만 화폐 발행은 통화량을 줄일 순 없다.</p><p>또한 양적 완화(quntitative easing)라는 단어도 있는데 이 단어의 뜻은 <code>중앙은행이 화폐를 찍어 통화량을 늘림으로써 경기방어와 신용경색(금융기관에서 돈이 제대로 공급되지 않아 기업들이 어려움을 겪는 현상)을 해소하는 정책</code>이라고 한다.<br>양적 완화는 이자율을 낮췄음에도 불구하고 경기가 회복되지 않는 등 효과가 없을 때 시행한다.</p><h2 id="중앙은행은-왜-화폐를-발행할까"><a href="#중앙은행은-왜-화폐를-발행할까" class="headerlink" title="중앙은행은 왜 화폐를 발행할까?"></a>중앙은행은 왜 화폐를 발행할까?</h2><p>우선 <code>경기가 안 좋아서 시중에 돈을 많이 풀려고</code>라고 생각할 수 있다.<br>하지만 이것보다 더 근본적인 무서운 이유가 존재한다.<br>그것은 <code>대출에는 이자 시스템이 존재하는데, 대출받은 돈 자체가 이자를 발생시키지 않기 때문</code>이다.</p><ol><li>중앙은행에서 여태까지 화폐를 100원만 발행했다고 쳐보자.<br>(통화량 100원)</li><li>100원을 A라는 사람에게 이자 10원과 함께 빌려줬다. (여기서 지급 준비율은 무시한다.)<br>(통화량: 100원, A의 자본: 100원)</li><li>A는 이자까지 갚기 위해 B라는 사람으로부터 보트를 10원에 산다.<br>(통화량: 100원, A의 자본: 90원, B의 자본: 10원)  </li><li>A가 보트를 타고 잡은 물고기를 B가 10원에 산다.<br>(통화량: 100원, A의 자본: 100원, B의 자본: 0원)</li></ol><p>위와 같은 상황에서 A는 아무리 열심히 일을 해도 이자 10원을 갚을 수 없다.<br>애초에 그 10원이란 돈은 존재하지 않기 때문이다.</p><ol><li>따라서 중앙은행에서 <code>이자 10원을 갚게 끔 해주기 위해 화폐를 발행</code>한다.<br>(통화량 110원, A의 자본: 100원, B의 자본: 0원)  </li><li>발행한 10원을 B에게 이자 1원과 함께 빌려준다.<br>(통화량 110원, A의 자본: 100원, B의 자본: 10원)  </li><li>다시 A가 보트를 타고 잡은 물고기를 B가 10원에 산다.<br>(통화량 110원, A의 자본: 110원, B의 자본: 0원)</li></ol><p>이렇게 <code>이자를 갚게 하기 위해 화폐를 발행</code>하고, 기존에 대출받은 사람이 아닌 다른 사람에게 대출해주고, <code>그 사람의 대출금을 내가 빼앗아와야</code> 이자까지 갚을 수 있다.<br>즉, 다른 사람의 대출금을 뺏어야하는 무서운 시스템이다.<br>또한 경기를 회복시키기 위해 화폐를 발행하는 것이 아닌 이자를 갚게 하기 위해서, 누군가 대출을 받게 하기 위해서 화폐를 발행하는 것 또한 정말 무섭다.</p><p>위와 같은 상황에서 B가 이자 11원까지 갚기 위해서는 중앙은행에서 또 화폐를 발행하고, B가 아닌 다른 누군가가 그 돈을 대출하고, 그 대출금을 뺏어와야 이자까지 갚을 수 있다.</p><p>결국 계속해서 누군가의 대출금을 뺏어와야 하는 시스템이고, 누군가의 대출금을 뺏어오지 못하는 가난하고 힘없는 자부터 파산을 하게 되는 아주 잔인한 시스템이다. 마치 폭탄 돌리기 같다…</p><h2 id="통화량이-줄어드는-경우도-있을까-feat-디플레이션"><a href="#통화량이-줄어드는-경우도-있을까-feat-디플레이션" class="headerlink" title="통화량이 줄어드는 경우도 있을까? (feat. 디플레이션)"></a>통화량이 줄어드는 경우도 있을까? (feat. 디플레이션)</h2><p>대부분의 경우에는 통화량이 계속해서 증가한다.<br>그러다가 폭탄 돌리기를 하다 시한폭탄이 터지듯, 누군가 빚을 갚지 못해 파산하는 경우에는 통화량이 줄어든다.</p><ol><li>A가 은행에 100원을 예금한다.<br>(통화량: 100원, 은행 자본: 100원)  </li><li>은행에서 지급 준비율 10%에 의해 10원만 남겨두고 90원을 B에게 대출해준다.<br>(통화량: 190원, 은행 자본: 10원)  </li><li>B가 빚을 갚지 못해 파산한다.<br>(통화량: 100원, 은행 자본: 10원)</li></ol><p>이렇게 누군가 빚을 갚지 못해 파산하는 경우에 통화량이 줄어들고 그에 따라 은행도 타격을 받고, 기존 예금주도 타격을 입는다.<br>이럴 때 <code>디플레이션(통화량의 축소로 물가가 하락하고, 경제활동이 침체되는 현상)</code>이 발생한다.<br>통화량이 축소됐으므로 수중에 갖고 있는 돈이 적다는 뜻이니 당연히 경제 활동은 침체되는 것이다.<br>기업이 위축되고, 생산과 투자를 줄이고 정리해고 하게 된다.<br>그럼 일자리가 줄어들고 돈을 벌기 힘들어진다.</p><p>하지만 무서운 점은 인플레이션 후에 디플레이션이 오는 건 <code>숙명</code>이라고 한다.<br>왜냐하면 경제 호황이 진정한 돈(생산을 통해서 번 돈 등등)이 아닌 빚으로 빌린 돈이기 때문이다.<br>그럼 그 빚이 계속해서 쌓이다가 누군가는 갚지 못하고, 그로 인해 통화량이 줄어들기 때문에 빚을 갚지 못하고, 계속해서 파산에 파산을 꼬리 물듯이 지속되면서 디플레이션이 오는 것이다.</p><p>이런 디플레이션이 오는 이유 중 하나는 갚을 능력이 되지 않는 사람에게까지 대출해주는 것이다.<br>당장 눈앞의 이익에 눈이 멀어 은행에서 나쁜 짓을 한 것이다.<br>그럼 그 사람들이 줄줄이 빚을 갚지 못해 파산할 것이다.<br>모기지 사태에서 이런 일이 벌어졌다는데 정확하게는 공부해봐야겠다.</p><p>물가가 감소되는 사례를 직접 경험하지 못해서(일본은 실제로 디플레이션이 일어난 적이 있다고 한다.) 맨날 물가는 오르기만 한다(인플레이션)고 불평불만 했는데, 오히려 내리는 것(디플레이션)보다 훨씬 나은 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 경제 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자본주의 </tag>
            
            <tag> 경제 </tag>
            
            <tag> 재테크 </tag>
            
            <tag> 인플레이션 </tag>
            
            <tag> 디플레이션 </tag>
            
            <tag> 중앙은행 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>돈은 빚이다.</title>
      <link href="/2019/08/15/money-is-debt/"/>
      <url>/2019/08/15/money-is-debt/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/money-is-debt/thumb.png" alt="돈은 빚이다."></p><p><a href="https://youtu.be/0LYMTsj_eqc" rel="external nofollow noopener noreferrer" target="_blank">EBS 다큐프라임 자본주의 제1부 돈은 빚이다</a>를 보고 나면 더 많은 인사이트를 얻을 수 있다.</p><h2 id="돈은-어떻게-생성되는가"><a href="#돈은-어떻게-생성되는가" class="headerlink" title="돈은 어떻게 생성되는가?"></a>돈은 어떻게 생성되는가?</h2><p>개인이 돈을 만드는 가장 쉬운 방법은 돈을 버는 것이다.<br>좀 더 큰 관점에서 보면 돈 자체를 찍어내는 은행에서 돈을 만들어야 진정한 의미의 돈이 생성되는 것 같다.<br>하지만 이렇게 은행에서 찍어내는 돈은 실제 <code>통화량(시중에 유통되고 있는 화폐의 양)</code>의 극히 일부이다.<br>대부분의 돈은 <code>눈에 보이지 않는다.</code><br>즉 대부분의 돈은 <code>은행에 존재</code>한다.</p><a id="more"></a><h3 id="최초의-은행"><a href="#최초의-은행" class="headerlink" title="최초의 은행"></a>최초의 은행</h3><p>현재는 돈으로 거래를 하지만 과거 영국에선 금으로 거래를 했다.<br>사람들은 자신의 모든 금을 휴대하기 불편하고, 집에 보관하기도 불안하기 때문에 금 세공업자의 금고에 안전하게 보관해놓았다.<br>그 때는 심지어 보관하는데 보관료까지 냈다.<br>지금 생각해보면 은행에서 <code>너네 돈 안전하게 보관하고 있으니 보관료 내놔</code>하는 형태이다.<br>(언젠가 진짜 이런 세상이 올지도 모른다.)</p><p>그리고 사람들은 휴대하기 불편한 금 대신에 휴대하기 편한 <code>금 보관증</code>으로 거래하기 시작했다.<br>금 보관증만 갖고 있으면 금고로 가서 금으로 바꿀 수 있기 때문에 굳이 금으로 거래할 필요가 줄어든 것이다.<br>여기서 금 세공업자는 이런 생각을 하게 된다.<br><code>한 사람이 와서 자신의 모든 금을 찾는 일은 드물고, 모든 사람이 동시에 몰려오지도 않는다.</code><br>그래서 금고에 놀고있는 금들을 대출해주고 이자를 받아 수익을 창출하기 시작한다.</p><p>이런 소문이 흘러서 금고에 금을 맡긴 사람들에게까지 퍼져나갔다.<br>사람들은 자신의 허락도 없이 마음대로 금을 빌려주고, 이익을 얻는 금 세공업자에게 따지기 시작했다.<br>그러자 금 세공업자는 <code>대출로 얻은 이자의 일부를 주겠다</code>라고 금의 주인들과 딜을 하기 시작했다.<br>금의 주인들도 보관료를 내던 마당에서 오히려 이자를 준다니까 고마운 상황이었다.<br>금 세공업자도 조금은 아쉽지만 보관료만 받기 보다 좀 더 쏠쏠한 대출 이자의 일부를 취하는 쪽을 택했다.</p><p>그런데 얼마 지나지 않아 금 세공업자는 더욱 욕심을 내게 된다.<br><code>내 금고에 금이 얼마나 들어있는지는 나 밖에 모른다.</code>는 전제 하에 있지도 않은 금을 빌려주게 되었다.<br>물론 있지도 않은 금의 실물을 빌려줄 수 없으니 <code>금 보관증</code>을 마구 발행함으로써 있지도 않은 금을 만들게 된 것이다.<br>또한 실물 금을 찾는 사람들이 평균적으로 자신이 맡긴 금의 <code>10%</code>를 찾아간다는 사실에 의거하여 금고의 금보다 실제로 <code>10배</code>가 많은 금 보관증을 발행하였다.</p><p>시간이 지나자 이런 소문도 다시 흘러서 금 보관증을 갖고 있는 사람들의 귀에 들어갔다.<br>결국 금 세공업자를 의심한 부자들은 자신의 금을 모두 찾아갔고, 뒤늦게 금 보관증을 들고 온 사람들은 이미 금고는 텅 비었기 때문에 금을 받을 수 없었다.</p><p>이런 사태를 <code>뱅크런(Bankrun, 은행에 돈을 맡긴 사람들이 동시에 돈을 찾는 현상)</code>이라 부르며 현대의 우량한 은행들 조차 뱅크런을 맞으면 파산에 이르게 된다.</p><h3 id="현재의-은행"><a href="#현재의-은행" class="headerlink" title="현재의 은행"></a>현재의 은행</h3><p>최초의 은행과 마찬가지로 은행은 돈이 생기면 대출을 해주고 이자를 통해 수익을 얻어낸다.<br>그리고 그 이자의 일부를 예금자에게 돌려주는 형태도 마찬가지이다.</p><p>하지만 최초의 은행이 10배의 돈을 대출해 줄 수 있던 점과는 다른 점이 있는데 바로 <code>지급 준비율(은행은 예금액의 10%를 지급할 준비, 즉 보유하고 있어야한다.)</code>이다.<br>은행은 지급 준비율이 10%가 돼야한다는 토대를 마련한 게 최초의 은행에서 말한 <strong>사람들이 평균적으로 자신이 맡긴 금의 <code>10%</code>를 찾아간다</strong>는 사실을 바탕으로 만들어졌다. (우리나라의 평균 지급 준비율은 3.5%이다, 즉 더 많은 돈을 빌려줄 수 있다.)</p><p>이 지급 준비율 때문에 시중에는 없던 돈이 탄생한다.<br>간단하게 A가 은행에 100원을 예금했다고 생각해보자.<br>그럼 지급 준비율 10%에 의해 은행은 10원만 은행에 남겨두고 B에게 90원을 대출해준다.<br>이제 <code>통화량</code>은 190원이 된다.<br>여기서 90원의 없던 돈이 생겨났고, 이 돈을 <code>신용통화</code>라고 부른다.</p><p>간단한 계산을 통해 100원이란 돈이 얼만큼 불어나는지 계산해보자.</p><table><thead><tr><th>은행명</th><th>예금액</th><th>대출액</th><th>잔여 예금액</th></tr></thead><tbody><tr><td>A</td><td>100</td><td>90</td><td>10</td></tr><tr><td>B</td><td>90</td><td>81</td><td>9</td></tr><tr><td>C</td><td>81</td><td>72</td><td>9</td></tr><tr><td>D</td><td>72</td><td>64</td><td>8</td></tr><tr><td>E</td><td>64</td><td>57</td><td>7</td></tr><tr><td>F</td><td>57</td><td>51</td><td>6</td></tr><tr><td>G</td><td>51</td><td>45</td><td>6</td></tr><tr><td>H</td><td>45</td><td>40</td><td>5</td></tr><tr><td>I</td><td>40</td><td>36</td><td>4</td></tr><tr><td>J</td><td>36</td><td>32</td><td>4</td></tr><tr><td>K</td><td>32</td><td>28</td><td>4</td></tr><tr><td>L</td><td>28</td><td>25</td><td>3</td></tr><tr><td>M</td><td>25</td><td>22</td><td>3</td></tr><tr><td>N</td><td>22</td><td>19</td><td>3</td></tr><tr><td>O</td><td>19</td><td>17</td><td>2</td></tr><tr><td>P</td><td>17</td><td>15</td><td>2</td></tr><tr><td>Q</td><td>15</td><td>13</td><td>2</td></tr><tr><td>R</td><td>13</td><td>11</td><td>2</td></tr><tr><td>S</td><td>11</td><td>9</td><td>2</td></tr><tr><td>T</td><td>9</td><td>8</td><td>1</td></tr><tr><td>U</td><td>8</td><td>7</td><td>1</td></tr><tr><td>V</td><td>7</td><td>6</td><td>1</td></tr><tr><td>W</td><td>6</td><td>5</td><td>1</td></tr><tr><td>X</td><td>5</td><td>4</td><td>1</td></tr><tr><td>Y</td><td>4</td><td>3</td><td>1</td></tr><tr><td>Z</td><td>3</td><td>2</td><td>1</td></tr><tr><td>AA</td><td>2</td><td>1</td><td>1</td></tr><tr><td>AB</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>100 + 90 + 81 + 72 + 64 + 57 + 51 + 45 + 40 + 36 + 32 + 28 + 25 + 22 + 19 + 17 + 15 + 13 + 11 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 863원</p><p>정확한 계산인지는 모르겠으나 소수점까지 더하면 더 늘어날 것이다.<br>즉 원래 통화량은 100원이었는데 신용통화 763원이 추가되어 통화량은 863원이 됐다.<br>이것이 바로 통화량 대부분의 돈이 생성되는 과정이다.</p><p>지급 준비율이 낮아지면 더 많은 돈을 생성할 수 있다(통화량 증가).</p><h2 id="돈은-빚이다"><a href="#돈은-빚이다" class="headerlink" title="돈은 빚이다."></a>돈은 빚이다.</h2><p>은행은 지급 준비율을 제외한 모든 예금액을 대출해주려고 한다.<br>왜냐하면 이자를 통해 이익을 창출해내기 때문이다.<br>따라서 은행 입장에서는 어떻게든지 간에 대출을 해주고 싶어한다.<br>왜냐하면 은행에서 돈이 놀고 있으면 돈을 벌 수 없기 때문이다.</p><p>그럼 왜 돈은 빚인지 알아보자.</p><ol><li>A가 은행에 100원을 예금했다고 생각해보자.<br>(A 은행의 잔여 예금액 <code>100원</code>, 통화량 <code>100원</code>)</li><li>그럼 지급 준비율 10%에 의해 은행은 10원만 은행에 남겨두고 B에게 90원을 대출해준다.<br>(은행의 잔여 예금액 <code>10원</code>, 통화량 <code>190원</code>)</li></ol><p>위와 같이 통화량 90원은 신용통화로 B가 진 빚에 해당한다.<br>즉, 90원은 실제 은행에서 찍어낸 돈이 아닌 빚이다.<br>즉, 돈은 빚이 됐다.</p><p>위 상황에서 만약 A가 예금액 100원을 찾으려고 하면 어떻게 될까?<br>은행은 예금액을 가지고 있지 않으므로 파산하게 된다.<br>아무리 우량한 은행이라도 뱅크런이 발생하게 되면 파산하게 된다.<br>이런 뱅크런 사태는 금융위기 때 사람들이 한 번에 현금을 찾으러 오면서 발생한다고 알고 있다.<br>대부분 이런 뱅크런 사태는 일어나지 않기 때문에 사람들의 예금액은 은행에 존재하지 않고, 다 대출돼있다.<br>즉, 새로운 <code>빚</code>으로써 새로운 <code>돈</code>이 탄생하게 되는 것이다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 경제 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자본주의 </tag>
            
            <tag> 경제 </tag>
            
            <tag> 재테크 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 람다 캡처링과 final 제약조건</title>
      <link href="/2019/06/30/java-8-lambda-capturing/"/>
      <url>/2019/06/30/java-8-lambda-capturing/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/java-8-lambda-capturing/thumb.png" alt=""></p><p>람다의 바디에서는 파라미터 말고 바디 외부에 있는 변수를 참조할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaCapturing</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Runnable r = () -&gt; System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Runnable r2 = () -&gt; System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>이렇게 람다 시그니처의 <strong>파라미터로 넘겨진 변수가 아닌 외부에서 정의된 변수</strong>를 <strong>자유 변수(Free Variable)</strong>라고 부른다.<br>또한 람다 바디에서 <strong>자유 변수를 참조하는 행위</strong>를 유식한 말로 <strong>람다 캡처링(Lambda Capturing)</strong>이라고 부른다.</p><h2 id="람다-캡처링의-제약-조건"><a href="#람다-캡처링의-제약-조건" class="headerlink" title="람다 캡처링의 제약 조건"></a>람다 캡처링의 제약 조건</h2><p>지역 변수를 람다 캡처링 할 때 아래 두 가지 제약조건이 존재한다.</p><ol><li>지역변수는 final로 선언돼있어야한다.</li><li>final로 선언되지 않은 지역변수는 final처럼 동작해야한다.<br>즉, 값의 재할당이 일어나면 안 된다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaCapturing</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> b = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 인스턴스 변수 a는 final로 선언돼있을 필요도, final처럼 재할당하면 안된다는 제약조건도 적용되지 않는다.</span></span><br><span class="line">            a = <span class="number">123</span>;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지역변수 b는 final로 선언돼있기 때문에 OK</span></span><br><span class="line">        <span class="keyword">final</span> Runnable r2 = () -&gt; System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지역변수 c는 final로 선언돼있지 않지만 final을 선언한 것과 같이 변수에 값을 재할당하지 않았으므로 OK</span></span><br><span class="line">        <span class="keyword">final</span> Runnable r3 = () -&gt; System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 지역변수 d는 final로 선언돼있지도 않고, 값의 재할당이 일어났으므로 final처럼 동작하지 않기 때문에 X</span></span><br><span class="line">        d = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">final</span> Runnable r4 = () -&gt; System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="왜"><a href="#왜" class="headerlink" title="왜??"></a>왜??</h2><p>왜 이런 제약조건이 생기게 돼었을까?<br>왜 인스턴스 변수에는 이런 제약조건이 없는 걸까?  </p><p>우선 JVM의 메모리 구조를 알아야한다.<br>JVM에서 지역 변수는 스택이라는 영역에 생성된다.<br>그리고 실제 메모리와는 달리 JVM에서 스택 영역은 쓰레드마다 별도의 스택이 생성된다.<br>따라서 지역 변수는 <strong>쓰레드끼리 공유가 안 된다.</strong><br>JVM에서 인스턴스 변수는 힙 영역에 생성된다.<br>인스턴스 변수는 <strong>쓰레드끼리 공유가 가능하다.</strong></p><p>람다는 별도의 쓰레드에서 실행이 가능하다.<br>따라서 원래 지역 변수가 있는 쓰레드는 사라져서 해당 지역변수가 사라졌는데도 불구하고,<br>람다가 실행 중인 쓰레드는 살아있을 가능성이 있다.<br>하지만 이 람다에서 사라진 쓰레드의 지역변수를 참조하고 있으면 어떻게 될까?<br>당연히 오류가 날 것이다. 하지만 우리의 예상과는 달리 오류는 나지 않는다.<br>또한 별도의 쓰레드에서 실행된다면 별도의 스택 영역을 가질테고, 그럼 다른 쓰레드의 스택에 있는 지역변수는 참조조차 할 수 없다.<br>왜 오류는 나지 않고, 어떻게 다른 쓰레드의 스택 영역에 있는 지역 변수를 참조할 수 있는 걸까?<br>이는 람다에서 지역 변수(해당 쓰레드의 스택)에 직접적으로 접근하는 게 아니라 변수를 자신(쓰레드)의 스택에 복사하기 때문이다.<br>그렇기 때문에 별도의 쓰레드의 스택에 있는 지역 변수와 동일한 값을 참조할 수 있는 거고, 원래 쓰레드가 사라져도 본인의 쓰레드에서 자신의 할 일을 착실히 수행할 수 있는 것이다.<br>하지만 위와 같이 변수를 복사해서 쓰는데 그 변수의 값이 중구난방으로 변경된다고 하면 해당 복사본을 믿고 쓸 수 있을까?<br>따라서 지역 변수에는 final이어야하거나 final 같이 동작해야한다는 제약 조건이 생긴 것이다.</p><p>그렇다면 인스턴스 변수는 왜 이런 조건이 없는 걸까?<br>이는 인스턴스 변수는 힙에 존재하고, 쓰레드끼리 공유도 가능하기 때문에 별도로 복사할 필요도 없고, 직접 힙에 접근해서 사용하면 되기 때문이다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>어노테이션이 달린 빈의 자동 스캔 (Without Spring Boot)</title>
      <link href="/2019/06/23/auto-scanning-annotation-based-bean/"/>
      <url>/2019/06/23/auto-scanning-annotation-based-bean/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/auto-scanning-annotation-based-bean/thumb.png" alt=""></p><p>스프링 부트부터 접한 스프링 알못이라 스프링에 대해 공부를 하다보니 너무나 모르고 있는 게 많아서 정리해봤다.<br>되게 간단한 건데 스프링 부트부터 접하면 몰라도 코드 짜는데는 문제가 없지만 개인적으로는 알고 있으면 너무나 좋은 내용같다.</p><h2 id="어노테이션-없이-빈-설정"><a href="#어노테이션-없이-빈-설정" class="headerlink" title="어노테이션 없이 빈 설정"></a>어노테이션 없이 빈 설정</h2><p>스프링이 관리하는 객체인 빈으로 생성하기 위해서 아래와 같은 어노테이션이 필수<strong>인 줄 알았</strong>다.<br>@Component, @Configuration, @Bean, @Service, @Controller, @Repository</p><a id="more"></a><p>하지만 직접 코딩을 해보니 이 생각은 거짓이었다.</p><p>우선 느슨한 결합을 위해 인터페이스를 하나 선언한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>인터페이스의 구현체도 하나 만들어준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimonOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>해당 구현체를 의존성으로 갖는 다른 구현체도 만들어보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoupangOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OrderService otherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 스프링 4.3부터 생성자가 하나이면 @Autowired 어노테이션이 생략 가능하다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoupangOrderService</span><span class="params">(OrderService orderSe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.otherService = orderSe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 의존성 주입이 제대로 됐는지 테스트하기 위한 용도의 getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderService <span class="title">getOtherService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> otherService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 CoupangOrderService 빈이 제대로 생성되는지 테스트 코드를 작성해보자. (JUnit5를 사용하였다.)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;CoupangOrderService.class&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoupangOrderService coupangOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(coupangOrderService);</span><br><span class="line">        assertNotNull(coupangOrderService.getOtherService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 테스트를 실행하면 circular reference(순환 참조) 때문에 빈을 생성할 수 없는 오류가 난다.<br><code>Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &#39;coupangOrderService&#39;: Requested bean is currently in creation: Is there an unresolvable circular reference?</code>  </p><p>CoupangOrderService는 OrderService 인터페이스를 의존성으로 받는데 그 구현체가 CoupangOrderService 자신 밖에 없기 때문이다.<br>(@ContextConfiguration(classes = {CoupangOrderService.class})에 의해 ApplicationContext에서는 CoupangOrderService 밖에 모르기 때문이다.)</p><p>그럼 ApplicationContext가 OrderService의 다른 구현체인 TimonOrderService까지 알게 해주자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;CoupangOrderService.class, TimonOrderService.class&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoupangOrderService coupangOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(coupangOrderService);</span><br><span class="line">        assertNotNull(coupangOrderService.getOtherService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 테스트는 성공한다.<br>우리는 빈에 대한 어노테이션을 인터페이스나 구현체 어디에도 사용을 하지 않았는데 빈의 생성도 잘 이뤄졌고, 의존성 주입도 아주 잘 되었다.<br>CoupangOrderService에서 OrderService를 의존성 주입 받는데 OrderService의 구현체는 CoupangOrderService와 TimonOrderService 두 개이다.<br>하지만 스프링에서는 똑똑하게 순환참조 이슈를 피하려고 본인을 제외하고 빈을 찾기 때문에 순환참조 오류가 안 났다.  </p><p>한 번 위 가설이 맞는지 검증해보자.<br>OrderService의 구현체를 하나 더 만들어보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeMakePriceOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>이제 테스트를 돌려보면 아래와 같이 CoupangOrderService에 OrderService를 주입하는데 TimonOrderService를 주입해야할지, WeMakePriceOrderService를 주입해야할지 모른다는 오류가 나온다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;CoupangOrderService.class, TimonOrderService.class, WeMakePriceOrderService.class&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoupangOrderService coupangOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(coupangOrderService);</span><br><span class="line">        assertNotNull(coupangOrderService.getOtherService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type &#39;OrderService&#39; available: expected single matching bean but found 2: timonOrderService,weMakePriceOrderService</code></p><p>OrderService의 구현체는 세 개인데 당연스레 본인(CoupangOrderService)는 빼고 의존성 주입을 시도한 것이다.<br>그럼 위 테스트는 왜 실패한 것인가?<br>기본적으로 스프링은 아래와 같은 순서로 DI를 하게 된다.  </p><ol><li>빈의 타입으로 빈을 검색해서 주입한다.  </li><li>해당 빈의 타입이 두 개 이상이면 빈의 이름으로 검색해서 주입한다.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CoupangOrderService</span><span class="params">(OrderService orderSe)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.otherService = orderSe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderService의 빈은 2개(CoupangOrderService 본인을 제외하고)라서 빈의 이름으로 검색을해야하는데 <strong>orderSe</strong>라는 이름의 빈은 없기 때문이다.<br>빈의 이름은 기본적으로 클래스 이름을 기반으로 생성된다. <del>(규칙은 나중에 찾아보는 걸로…)</del>  </p><p>이제 테스트가 성공하게 제대로 된 빈의 이름으로 바꿔주자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoupangOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OrderService otherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 스프링 4.3부터 생성자가 하나이면 @Autowired 어노테이션이 생략 가능하다.</span></span><br><span class="line">    <span class="comment">// 파라미터로 넘긴 변수 이름이 빈의 이름이 된다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoupangOrderService</span><span class="params">(OrderService timonOrderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.otherService = timonOrderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderService <span class="title">getOtherService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> otherService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="빈-자동-스캔"><a href="#빈-자동-스캔" class="headerlink" title="빈 자동 스캔"></a>빈 자동 스캔</h2><p>우리가 생성한 빈이 많으면 많을 수록 @ContextConfiguration에 다 등록해주기도 부담이다.<br>이럴 때 쓰는 게 @Service, @Component, @Configuration, @Bean과 같은 어노테이션들이다.</p><p>우선 인터페이스와 구현체 어디다 쓰는 게 좋은지 모르니 다 붙여놓자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimonOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeMakePriceOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoupangOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OrderService otherService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoupangOrderService</span><span class="params">(OrderService timonOrderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.otherService = timonOrderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderService <span class="title">getOtherService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> otherService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 빈을 자동으로 스캔해주는 빈을 만들어주자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"some.package"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>해당 패키지에 있는 @Service, @Component, @Configuration, @Bean 요런 어노테이션들이 붙은 빈들은 자동으로 스캔하고 생성해주는 어노테이션이다.<br><del>(자세한 건 나중에 또 알아보자 ㅠㅠ)</del></p><p>이제 테스트에서 Bean 클래스들을 한땀 한땀 넣어주는 부분을 수정해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;ComponentScanConfig.class&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoupangOrderService coupangOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(coupangOrderService);</span><br><span class="line">        assertNotNull(coupangOrderService.getOtherService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Config 파일 하나로 코드가 너무나 쾌적해졌다.<br>이렇게 빈을 자동으로 스캔하고 생성할 때는 <strong>@ComponentScan</strong> 어노테이션이 엄청 큰 도움이 된다.  </p><h2 id="어노테이션은-인터페이스에-구현체에"><a href="#어노테이션은-인터페이스에-구현체에" class="headerlink" title="어노테이션은 인터페이스에? 구현체에?"></a>어노테이션은 인터페이스에? 구현체에?</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>어노테이션을 인터페이스에<strong>만</strong> 붙이면 구현체 타입으로 DI를 받을 수 없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;ComponentScanConfig.class&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//    CoupangOrderService 타입의 빈은 @Service 어노테이션이 안 달려있어서 @ComponentScan에서 검색되지 못한다.    </span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private CoupangOrderService coupangOrderService;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService coupangOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(coupangOrderService);</span><br><span class="line"><span class="comment">//        OrderService 인터페이스에는 getOtherService() 메서드가 없다.</span></span><br><span class="line"><span class="comment">//        assertNotNull(coupangOrderService.getOtherService());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 이번엔 빈을 생성하지 못한다는 에러가 나온다.<br><code>Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &#39;example.domain.OrderService&#39; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}</code><br>왜냐면 인터페이스만 @Service 어노테이션을 붙여서 빈으로 생성이 되는데 인터페이스는 객체로 생성이 불가능하기 때문에 위와 같은 오류가 나는 것이다.  </p><p>그럼 이번엔 구현체에만 @Service 어노테이션을 붙이면 어떻게 될까?  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoupangOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OrderService otherService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoupangOrderService</span><span class="params">(OrderService timonOrderService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.otherService = timonOrderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderService <span class="title">getOtherService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> otherService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 테스트를 고쳐보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;ComponentScanConfig.class&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//    CoupangOrderService는 OrderService를 구현한 것이므로 OrderService 타입으로도 DI 받을 수 있다.</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private OrderService coupangOrderService;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoupangOrderService coupangOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertNotNull(coupangOrderService);</span><br><span class="line">        assertNotNull(coupangOrderService.getOtherService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트를 돌리면 또 순환참조 오류로 실패한다.<br><code>Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &#39;coupangOrderService&#39;: Requested bean is currently in creation: Is there an unresolvable circular reference?</code></p><p>다른 OrderService 구현체에도 @Service 어노테이션을 붙여주자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimonOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeMakePriceOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>이제 테스트를 돌리면 정상적으로 돌아간다.</p><p>인터페이스에 어노테이션 안 붙여도 인터페이스 타입으로 느슨하게 결합해서 DI도 가능하고, 특정 구현체에 기능이 쓰고 싶다면 해당 구현체 타입으로 DI도 가능하고…<br>따라서 내가 봤을 때는 인터페이스에 어노테이션을 붙여놓는 건 딱히 의미가 없는 것 같다. </p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Troubleshooting) 내 로컬에서는 잘 되는데...? (내로잘)</title>
      <link href="/2019/06/11/aws-sg-trobuleshooting/"/>
      <url>/2019/06/11/aws-sg-trobuleshooting/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/aws-sg-trobuleshooting/thumb.jpg" alt="미리보는 교훈: 남탓을 하지 말자"></p><p><img src="/images/aws-sg-trobuleshooting/reporter.png" alt="오늘도 어김없이 외부를 통해 장애가 제보되었다."><br><img src="/images/aws-sg-trobuleshooting/work-on-my-local.png" alt="하지만 내 로컬에서는 잘 됐다. (이럴 때 쓰는 말이 내로잘, 내 로컬에서는 잘 되는데...?)"><br>내 PC에서는 잘 되는데 버그 제보자가 직접 모바일 웹에서 안 되는 걸 보여줬다.<br>그리고 내 모바일에서도 해봤고, 다른 사람들의 모바일에서도 전부 안 됐다. (안드로이드, iOS에서 크롬, 사파리, 삼성 인터넷 가릴 것 없이 다 안 됐다.)  </p><p>PC에서는 잘 되고, 모바일에서는 안 된다… 나는 당연히 프론트 이슈로 여겼다.<br>혹시 서버 쪽 이슈일까봐 액세스 로그를 모니터링해보니 헬스 체크 이외에 로그가 안 찍히길래 자바스크립트 어딘가에서 오류가 나서 API 호출도 못 하는 거라고 확신했다.  </p><a id="more"></a><p>프론트 개발자 분께서 모바일 브라우저 디버깅을 위해 세팅도 다 했는데 브라우저의 콘솔을 보니 에러 로그가 안 찍히는 것이었다.<br><img src="/images/aws-sg-trobuleshooting/charles.png" alt="그리고 혹시나 싶어서 프론트 개발자 분께서 Charles까지 깔아서 확인도 해주셨는데 패킷도 날아가지 않았다.">  </p><p>귀신이 곡할 노릇이라 환경을 완전히 통일시키기 위해 도커로 띄워야하나… 이런 고민까지 하고 있던 찰나에<br>프론트 개발자 분께서 내가 접속한 와이파이(사내 와이파이)와 자신이 모바일로 접속한 와이파이(게스트용 와이파이)의 차이점을 발견하였다.<br>(사내 정책 때문에 모바일에서는 게스트용 와이파이를 쓰고 있었다.)  </p><p><img src="/images/aws-sg-trobuleshooting/security-group.png" alt="뭔가 촉이 와서 Security Group을 전부 오픈했더니 문제가 해결되었다.">  </p><h2 id="분석"><a href="#분석" class="headerlink" title="분석"></a>분석</h2><p><img src="/images/aws-sg-trobuleshooting/why-work-why-not-work.png" alt=""><br>우선 상황은 이랬다.  </p><ul><li>초반에 상품 10개는 잘 불러온다. (왜 잘 불러와지지?)  </li><li>추가로 상품 10개를 더 불러오려고 하면 불러와지지 않는다. (왜 안 불러와지지?)</li></ul><p>계속 고뇌에 빠졌고, 결국 네트워크 지식이 부족한 탓에 이런 일이 일어났었다.</p><h3 id="초반에-상품-10개는-잘-불러온다"><a href="#초반에-상품-10개는-잘-불러온다" class="headerlink" title="초반에 상품 10개는 잘 불러온다."></a>초반에 상품 10개는 잘 불러온다.</h3><p>우선 프론트 엔드에서 렌더링을 빠르게 하려는 이유에서인지 SSR(Server Side Rendering)을 사용했다.<br><img src="/images/aws-sg-trobuleshooting/ssr.png" alt="출처: https://medium.com/walmartlabs/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8"><br>일반적인 CSR(Client Side Rendering)에서는 클라이언트 측에서 AJAX 방식으로 API를 호출했다면,<br>SSR은 클라이언트 측에서 렌더링이 되기 전에 필요한 데이터가 모두 갖춰진 상태로 서버에서 HTML 파일을 내려주는 형태이다.<br>즉, API 호출이 서버에서 일어난다. (이는 <strong>Server to Server</strong>로 API 호출이 일어남을 의미한다.)  </p><p><img src="/images/aws-sg-trobuleshooting/server-to-server-bad.png" alt="Server to Server를 위해서 Public IP를 쓰면 네트워크 밖을 나갔다 들어오기 때문에 레이턴시와 비용이 추가될 수 밖에 없다."><br><img src="/images/aws-sg-trobuleshooting/internal.png" alt="따라서 Server to Server를 위해서는 Internal ELB를 통해 Private IP로만 통신하고 있다."><br><img src="/images/aws-sg-trobuleshooting/internal-sg.png" alt="내부 통신을 위한 Internal ELB의 경우에는 동일한 VPC 내의 요청이라면 허용하도록 Security Group을 구성했다.">  </p><p>위와 같이 Security Group을 세팅하고, 초반에 불러오는 상품은 SSR의 특성상 Server to Server로 호출하기 때문에 API 호출이 성공했던 것이다.</p><h3 id="추가로-상품-10개를-더-불러오려고-하면-불러와지지-않는다"><a href="#추가로-상품-10개를-더-불러오려고-하면-불러와지지-않는다" class="headerlink" title="추가로 상품 10개를 더 불러오려고 하면 불러와지지 않는다."></a>추가로 상품 10개를 더 불러오려고 하면 불러와지지 않는다.</h3><p><img src="/images/aws-sg-trobuleshooting/inbound-mistake.png" alt="나는 이 경우도 Front 서버와 API 서버가 Server to Server로 통신하는 걸로 착각을 했다."><br><img src="/images/aws-sg-trobuleshooting/inbound-real.png" alt="하지만 Front 서버를 경유하지 않고 클라이언트(브라우저)에서 바로 API 서버를 호출하고 있었다."><br><img src="/images/aws-sg-trobuleshooting/public-elb-sg.png" alt="나는 API 서버의 Public ELB는 개발 환경에서만 접근한다고 생각하고 위와같이 구성했었다."><br>위와 같이 구성하니 개발환경이 아닌 경우(게스트 와이파이나 LTE 등등)에는 API 호출이 실패하는 것이었다.<br>이래서 내 로컬(사내 와이파이)에서는 잘 되는데, 버그 제보자의 모바일(게스트 와이파이)에서는 장애가 재현된 것이다.<br>즉, 초기 SSR로 호출하는 API(Server to Server 방식)을 제외하고는 제대로 API 호출이 안 되는 상황이었다.  </p><p>따라서 모든 IP에 대해서 API에 대한 접근을 허용할 수 밖에 없었다.<br>(추후에는 Front 서버를 통해서만 통신하게 끔 변경해야할 것이다.) </p><h2 id="오늘의-교훈은-뭘까-요"><a href="#오늘의-교훈은-뭘까-요" class="headerlink" title="오늘의 교훈은 뭘까~요?"></a>오늘의 교훈은 뭘까<del>~</del>요?</h2><p><img src="/images/aws-sg-trobuleshooting/pokemon.jpg" alt="피..피카츄!!"><br>오늘 느낀 점은 <strong>남탓</strong>을 하지 말자 이다.<br>나는 당연히 프론트 이슈일 줄 알고 뒷짐지고 있었다.<br>그러는 와중에 프론트 개발자 분은 모바일 디버깅 환경까지 세팅하고, Charles(패킷 캡쳐 도구)까지 깔아서 오류를 분석해주셨다.<br>심지어 이번 이슈의 핵심인 와이파이가 다르다는 점까지 발견해주셨다.<br>그동안 나는 뒷짐을 지고 있었다. <del>(그렇다고 일을 안 하고 있던 건 아니고…)</del><br>프론트 개발자 분께서는 충분히 화가 날 수도 있는 상황이었다.<br>그 분의 바쁜 시간을 본인의 이슈가 아닌데도 불구하고 열심히 삽질을 했으니 말이다.  </p><p>요즘 들어 이 이슈, 저 이슈에 관여를 하면서 <code>아... 내가 이 이슈까지 봐야할까? 내가 하고 있는 일이랑은 관련이 적어보이는데...</code>하고 소극적인 태도를 많이 보였다.<br>하지만 이번 일을 계기로 이런 생각을 고쳐먹어야겠다고 다짐했다.</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Network </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Troubleshooting) Thread Dump 분석 도전기</title>
      <link href="/2019/06/11/thread-dump-analyze/"/>
      <url>/2019/06/11/thread-dump-analyze/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/thread-dump-analyze/thumb.png" alt="쓰레드 덤프도 처음인지라 하면서 뭔가 두려웠다."></p><h2 id="사건의-시작"><a href="#사건의-시작" class="headerlink" title="사건의 시작"></a>사건의 시작</h2><p><img src="/images/thread-dump-analyze/alert.png" alt="평화로운 어느날, Alert Manager의 역습"><br>갑자기 Nginx가 Down 됐다는 알림이 와서 해당 서버로 접속해보니 Nginx 서비스는 정상적으로 떠있고…<br>curl도 때려보고, 브라우저에서 직접 URL로 접속해봤을 때 문제가 없었다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># blackbox exporter configuration</span></span><br><span class="line"><span class="attr">modules:</span></span><br><span class="line"><span class="attr">  http_health:</span></span><br><span class="line"><span class="attr">    prober:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">      valid_status_codes:</span> <span class="string">[200]</span></span><br><span class="line"><span class="attr">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="attr">      ip_protocol_fallback:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>80포트에 대해서 http 요청을 보냈을 때 5초 이내에 200 OK가 안 오면 알람을 발생시키게 했는데 내가 테스트 해 본 바로는 아무런 문제도 없었다.<br>(일단 5초라는 관대한 시간으로 걸어놓은 것도 문제였고, 내가 간단히 메인 페이지만 몇 번 들락날락 해본 것도 문제였다.)</p><p>따라서 <code>나는 Alert Manager가 오작동하나 보다... 역시 내가 이 쪽 경험이 부족하다보니 뭔가 잘못 셋팅했나 보다.</code>하며 대수롭지 않게 넘겼다.</p><h2 id="불행의-시작"><a href="#불행의-시작" class="headerlink" title="불행의 시작"></a>불행의 시작</h2><p><img src="/images/thread-dump-analyze/begin-unlucky.png" alt="우리가 먼저 알아차리려고 모니터링 시스템을 열심히 구축했는데 또 외부에서 먼저 제보를 받게 되었다."></p><p>우선 열심히 구축해놓은 모니터링 시스템을 굴릴 수 없으니 EC2 인스턴스 및 JVM 메모리에 대한 지표를 살펴보았다.<br>우선 인스턴스의 CPU나 메모리는 문제가 없었고 JVM 메모리나 GC 쪽에도 문제가 없었다.</p><p><img src="/images/thread-dump-analyze/http-5xx.png" alt="내가 최초로 알림을 받기 시작한 23분 쯤부터 5xx가 점점 발생하기 시작했다."><br><img src="/images/thread-dump-analyze/thread-monitoring.png" alt="쓰레드를 점점 많이 쓰더니 가용 가능한 쓰레드를 전부 쓰고 있었다.">  </p><p><img src="/images/thread-dump-analyze/cto-jjam.png" alt="CTO 님께서는 짬에서 나오는 바이브를 물씬 풍겨주었다."><br>나는 쓰레드 쪽에 문제가 있으니 우선 쓰레드 덤프부터 뜨고 봐야하나? 이 생각이었는데 저 지표를 보자마자 저런 생각이 떠오른다는 건 역시 경험은 무시할 수가 없는 것 같다.</p><p><img src="/images/thread-dump-analyze/rds-cpu.png" alt="해당 시간대의 AWS RDS의 CPU 사용량을 보니 100%를 치고 있었다."></p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>우선 DB 쪽에 장애가 서버까지 전파된 걸 확인했으니 서버 쪽에서 어떤 쿼리를 수행하길래 저런 에러가 나오는지 봐야했다.<br>쓰레드 쪽에 문제가 있다고 판단했으니 우선 jstack으로 쓰레드 덤프를 뜨고 별도의 툴을 깔지 않고 온라인(<a href="https://fastthread.io/" rel="external nofollow noopener noreferrer" target="_blank">fastThread</a>)에서 쓰레드 덤프를 분석해봤다.  </p><p><img src="/images/thread-dump-analyze/thread-group.png" alt="http-nio-8080-exec-xxx 이런 쓰레드 118개나 TIMED_WAITING 상태였다."><br><img src="/images/thread-dump-analyze/http-nio-8080-exec-xxx.png" alt=""><br>나는 뭔가 어플리케이션 코드가 스택 트레이스에 찍혀있길 기대했지만 그런 건 없었다.<br>일단 쓰레드 네임을 보아하니 http 요청에 의한 것으로 판단되니 Nginx의 Access Log를 뒤져보면 뭔가 나오지 않을까 싶었다.  </p><p><img src="/images/thread-dump-analyze/nginx-access-log.png" alt="다른 요청들 사이에 껴서 혼자 8 ~ 9초 정도 처리 시간이 걸렸다."><br>파라미터에도 ALL 하나만 들어가있는 걸 보면 뭔가 전체 조회를 하는 구린 냄새가 나는 코드 같다.<br>눈여겨 볼 점은 처음 발생한 시점이다.<br>11시 20분에 저렇게 느린 요청들이 발생하기 시작했는데, 내가 알람을 받은 건 23분부터 받기 시작했다.<br>아마 5초라는 관대한 시간을 줬기 때문에 더 알람을 늦게 받게된 게 아닌가 싶다.  </p><p><img src="/images/thread-dump-analyze/nginx-access-log-2.png" alt="심지어는 60초까지 걸렸다."><br>이제는 유저가 못참고 페이지를 이탈해서 <a href="https://httpstatuses.com/499" rel="external nofollow noopener noreferrer" target="_blank">HTTP Status Code 499</a>도 나왔다.<br>동일한 API에서 계속해서 10초 이상이 걸리고, 점점 느려지는 걸 보니 해당 API의 문제가 맞다고 80% 정도는 확신을 했다.</p><p>실제로 해당 코드를 보니 페이징 처리나 조건문이 좀 부실했었고, 쿼리를 손 본 후에야 문제를 해결할 수 있었다. </p><h2 id="오늘의-교훈"><a href="#오늘의-교훈" class="headerlink" title="오늘의 교훈"></a>오늘의 교훈</h2><p><img src="/images/thread-dump-analyze/pokemon.jpg" alt="오늘의 교훈은 뭘까~~~요?"><br><del>피…피카츄!!</del><br>Alert Manger가 알림을 줬을 때 난 무시를 했다.<br>아니 무시한 건 아니지만 아주 간단하게만 테스트했다.<br>기계는 사람보다 정확하니 무시하지 말고 좀 더 면밀히 관찰하고 얼른 팀 내에 공유를 해야 앞으로 이런 사태가 발생하지 않을 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Troubleshooting </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Troubleshooting) 레디스 사망일기</title>
      <link href="/2019/05/29/redis-monitoring/"/>
      <url>/2019/05/29/redis-monitoring/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/redis-monitoring/thumb.png" alt="점점 산으로 가는 그래프..."></p><h2 id="사건의-발단"><a href="#사건의-발단" class="headerlink" title="사건의 발단"></a>사건의 발단</h2><p>사내에서 사용하는 어드민(이하 <strong>어드민 A</strong>)/외부에서 사용하는 어드민(이하 <strong>어드민 B</strong>)이 사망하는 사례가 속출하였다.<br>그 시점은 내가 새롭게 서버를 옮긴 이후부터 발생했다.<br>내가 서버를 옮긴 것과 이 일이 관련이 없다고 생각했지만,<br>우선 내가 서버를 옮긴 이후에 발생한 사건이기도 해서 부검을 통해 사인을 밝혀내는 게 우선이었다.</p><a id="more"></a><h2 id="왜-사망했나"><a href="#왜-사망했나" class="headerlink" title="왜 사망했나"></a>왜 사망했나</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.QueryTimeoutException: Redis command timed out; nested exception is com.lambdaworks.redis.RedisCommandTimeoutException: Command timed out</span><br><span class="line">at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:66)</span><br><span class="line">at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)</span><br></pre></td></tr></table></figure><p>elasticsearch에 저장된 에러 로그를 확인해본 결과 위와 같은 스택 트레이스를 남기고 전사하셨다.<br>즉, 레디스가 사망해서 레디스를 사용하는 어드민 서버도 사망한 것이었다.<br>다행인 것은 아예 프로세스 자체가 사망한 게 아니라 Hang에 걸린 상태여서 레디스를 재시작하는 것만으로 사건은 일단락 되었다.<br>하지만 머지않은 시점에 또 다시 사망하는 사례가 발생하였다.</p><h2 id="응급-처치"><a href="#응급-처치" class="headerlink" title="응급 처치"></a>응급 처치</h2><p><img src="/images/redis-monitoring/legacy-redis.png" alt=""><br>우선 어드민 A가 사용하는 레디스(이하 <strong>레디스 A</strong>)와 어드민 B가 사용하는 레디스(이하 <strong>레디스 B</strong>)가 같은 EC2 인스턴스 내에 존재하였다.<br>또한 메모리 1GB라는 소규모 서버에서 구동하다보니 인메모리 기반의 DB인 레디스에는 굉장히 협소하다고 생각했다.<br>하지만 우리가 사용하는 건 로그인 세션을 위해서만 사용하지, 그 이외의 것은 사용하지 않고 있어서 여전히 의아하긴 했다.<br>하지만 문제가 계속해서 발생하다보니 우선은 스케일업을 해야했다.  </p><p><img src="/images/redis-monitoring/new-redis.png" alt=""><br>그 중에 레디스 A보다 레디스 B가 더 자주 뻗어서 레디스 B를 새로운 서버로 옮기기로 했다.<br>트래픽이 그렇게 많지도 않은 어드민 서버의 로그인 세션만 저장하는데<br>메모리를 8GB씩이나 주는 건 약간 오버하는 경향이 없잖아 보였지만 일단 안정성을 챙기고자 좀 빵빵하게 주었다.</p><h2 id="진짜-이유를-찾아서"><a href="#진짜-이유를-찾아서" class="headerlink" title="진짜 이유를 찾아서"></a>진짜 이유를 찾아서</h2><p>나는 이미 8GB로 스케일업 했기 때문에 더이상 이런 사건이 발생하지 않을 것으로 예상했지만,<br>CTO 님께서는 좀 더 정확하게 원인을 분석하자고 하셨다.<br>나도 대충대충 넘어가다보면 영 찜찜하기도 해서 <del>내 역량도 그닥 올라갈 거 같지 않아서</del> 정확하게 원인을 분석해보는 게 좋을 것 같았다.  </p><p><img src="/images/redis-monitoring/monitoring.png" alt="어디서부터 어떻게 접근해야할지 몰랐기 때문에 우선 레디스를 모니터링하기로 했는데, 이미 사내에 구축한 모니터링 시스템(Exporter - Prometheus - Grafana)이 있기 때문에 이를 이용하기로 했다.">  </p><p>우선 모니터링하기 위해선 지표(Metric)을 수집해야한다.<br>그래서 가장 유명한 <a href="https://github.com/oliver006/redis_exporter" rel="external nofollow noopener noreferrer" target="_blank">Redis Exporter</a>를 찾아서 적용해보려고 했다.<br>해당 Exporter는 Redis의 <a href="https://redis.io/commands/INFO" rel="external nofollow noopener noreferrer" target="_blank">INFO</a> 커맨드의 출력 결과를 수집해서 <code>/metrics</code>라는 HTTP 엔드포인트로 노출하는 역할을 한다.<br>그럼 Prometheus에서 일정 주기마다 Pulling 해서 저장하고, 그 데이터를 기반으로 Grafana라는 대시보드를 통해 볼 수 있다.   </p><p>하지만 해당 Exporter는 <a href="https://github.com/oliver006/redis_exporter/issues/262" rel="external nofollow noopener noreferrer" target="_blank">Port를 옵션으로 받는 게 아니</a>라 <a href="https://github.com/oliver006/redis_exporter/blob/7a06cf8af9e28ad109018d067ff653edf08e664f/main.go#L46" rel="external nofollow noopener noreferrer" target="_blank">하드코딩</a> 돼있다.<br>Redis Exporter를 하나만 띄울 거라면 상관 없지만, 우리는 나중에 레디스 A도 업어와야하기 때문에 Redis Exporter를 하나 더 띄워야하는 경우였다.  </p><p><img src="/images/redis-monitoring/redis-exporter.png" alt=""><br>따라서 주객이 전도된 것 같지만 지표 수집을 위해서 기존에 Host OS에 띄워놓은 Redis를 Docker Container로 띄우고,<br>Redis Exporter도 Docker Container로 띄워서 각 컨테이너끼리 통신하게 끔 하였다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  admin-b-redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:5.0.5-alpine</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">admin-b-redis</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">6380</span><span class="string">:6379</span></span><br><span class="line"><span class="attr">  admin-b-redis-exporter:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">oliver006/redis_exporter:v1.0.0-alpine</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">admin-b-redis-exporter</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">REDIS_ADDR=redis://admin-b-redis</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">REDIS_EXPORTER_REDIS_ONLY_METRICS=true</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9122</span><span class="string">:9121</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">on-failure</span></span><br></pre></td></tr></table></figure><p>또한 레디스 B 뿐만 아니라 기존 서버에서 레디스 A도 모니터링을 붙여놓았다.</p><p><img src="/images/redis-monitoring/legacy-monitoring.png" alt="레디스 A를 재시작 한 이후에 모니터링 해보니 점점 산으로 간다..."><br>레디스 A는 우리 사내에서 사용하는 어드민이 사용하는 레디스다.<br>계열사까지 합쳐도 전사 직원이 1,000명도 안 될텐데 생성된 키만 70,000개를 넘었다. (실제로 해당 어드민을 사용하는 유저는 100명도 안 되는데 말이다.)<br>이는 분명히 이상했지만, 명확하게 이렇게 생성된 원인을 파악할 수 없었다. (못난 나레기 ㅠㅠ…)  </p><p><img src="/images/redis-monitoring/legacy-monitoring-1-day.png" alt=""><br>우선 스프링 레디스 세션에 설정한 만료기간인 하루가 지나야 뭔가 볼 수 있을 것 같아 날이 밝기를 기다렸다.<br>그러자 위와 같이 그래프의 양상이 바뀌었다.  </p><p><img src="/images/redis-monitoring/expired-graph.png" alt="그래프의 양상이 바뀐 시점부터 분명 뭔가 만료는 되고 있고..."><br><img src="/images/redis-monitoring/command-call-graph.png" alt="하지만 주말 새벽 시간에도 꾸준히 뭔가 call이 일어나고 있다."></p><p>여기서 내린 추측은 <code>세션이 만료됨과 동시에 누군가 계속 세션을 생성해서 그래프가 현상유지가 되는 것</code>이라고 전제를 깔고 분석하기 시작했다.<br>그래서 우선 Nginx의 Access Log부터 까보기로 했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:32+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;ELB-HealthChecker/2.0&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:34+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:34+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:35+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;ELB-HealthChecker/2.0&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:40+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:44+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:44+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:50+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:54+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:54+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:00+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:02+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;ELB-HealthChecker/2.0&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:04+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:04+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:05+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;ELB-HealthChecker/2.0&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:10+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:14+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:14+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:20+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:24+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:24+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br></pre></td></tr></table></figure><p>ELB와 Consul은 Health Check Endpoint를 제대로 찌르고 있다.<br>하지만 <code>Go-http-client/1.1</code>라는 Agent는 계속해서 <code>/</code>을 찌르는데 이 때 바로 세션이 생성되는 것이다.<br>(추후에 <code>/login</code>으로 302 redirect 되지만 실제 세션 생성 시점은 그 이전이다.<br>비로그인 유저의 세션을 만드는 이유는 해당 세션을 가지고 동시 접속자 체크, 쇼핑몰 등등에서 비회원에게 장바구니 기능 제공 등등의 기능에서 사용이 가능하기 때문이다.<br>라고 <a href="https://www.facebook.com/groups/springkorea/permalink/1993894000722219/" rel="external nofollow noopener noreferrer" target="_blank">한국 스프링 사용자 모임에 질문</a>한 결과 알게 되었다.)  </p><p>내부 아이피를 직접 찌르고 있기 때문에 외부 크롤러나 봇에 의한 것이라는 전제는 일단 접어두었다. <del>(AWS 계정이 해킹당했을 거라는 끔찍한 상상은 하지 않았다.)</del><br>그리고 한 가지 든 의심이 서버의 헬스 체크를 해서 슬랙으로 알림을 주기 위해 사용한 <a href="https://github.com/prometheus/blackbox_exporter" rel="external nofollow noopener noreferrer" target="_blank">Blackbox Exporter</a>의 설정에 의해 Prometheus에서 위와 같이 헬스체크를 하는 게 아닐까 의심이 되었다.<br>그리고 <a href="https://github.com/prometheus/prometheus/issues/2440" rel="external nofollow noopener noreferrer" target="_blank">의심은 확신</a>으로 접어들기 시작했다.  </p><p>곧장 Prometheus에서 헬스 체크 엔드포인트를 어떻게 불러오는지 확인을 해보았다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">  evaluation_interval:</span> <span class="number">1</span><span class="string">s</span></span><br></pre></td></tr></table></figure><p>내가 수집 주기를 <code>scrape_interval: 10s</code>로 설정해놨고, 아래는 172.12.1.189:80을 찌른 로그만 추려본 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:34+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:34+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:44+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:44+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:54+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:41:54+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:04+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:04+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:14+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:14+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:24+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET / HTTP/1.1&quot;,&quot;status&quot;: &quot;302&quot;,&quot;body_bytes_sent&quot;:&quot;0&quot;,&quot;request_time&quot;:&quot;0.010&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-24T18:42:24+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /login HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;1769&quot;,&quot;request_time&quot;:&quot;0.012&quot;,&quot;http_referrer&quot;:&quot;http://172.12.1.189:80&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br></pre></td></tr></table></figure><p>정확히 10초 주기로 172.12.1.189:80을 찔렀고, 점점 강한 확신으로 변해가고 있다.</p><p>Prometheus에서 Blackbox Exporter와 관련된 설정을 또 살펴보자.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'blackbox_exporter_http'</span></span><br><span class="line"><span class="attr">    metrics_path:</span> <span class="string">/probe</span></span><br><span class="line"><span class="attr">    params:</span></span><br><span class="line"><span class="attr">      module:</span> <span class="string">[http_2xx]</span></span><br><span class="line"><span class="attr">    consul_sd_configs:</span></span><br><span class="line"><span class="attr">      - server:</span> <span class="string">'http://consul-server-001.dns:8500'</span></span><br><span class="line"><span class="attr">      - server:</span> <span class="string">'http://consul-server-002.dns:8500'</span></span><br><span class="line"><span class="attr">      - server:</span> <span class="string">'http://consul-server-003.dns:8500'</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_consul_tags]</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">.*,blackbox_exporter_http,.*</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__address__]</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__param_target</span> <span class="comment"># 여기가 중요</span></span><br><span class="line"><span class="attr">      - target_label:</span> <span class="string">'__address__'</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">'blackbox-exporter:9115'</span></span><br></pre></td></tr></table></figure><p>유동적으로 늘어나고 줄어드는 인스턴스에 대비하기 위해 consul을 사용하였다.<br>우선 consul에 등록된 태그 중에 <code>blackbox_exporter_http</code>란 값을 가지고 있는 서비스를 골라내고<br><code>__address__</code> 레이블에 설정된 값(<strong>ip:port</strong>)을 그대로 <code>__param_target</code>에 설정되는 것에서부터 문제가 시작됐다.<br>prometheus는 <code>__param_target</code>에 설정된 값을 토대로 헬스체크 한다는 것을 테스트를 통해 밝혔다.<br>이제는 완전한 확신을 했다.</p><p>우선 consul client가 설치된 어드민 A서버로 가서 consul에 어떤 service들을 등록하게 했는지 설정부터 살펴보았다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"services"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"Nginx"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"b2b-admin"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [<span class="string">"blackbox_exporter_http"</span>],</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="attr">"check"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"Nginx Health Check"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Nginx Status"</span>,</span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://localhost/health"</span>,</span><br><span class="line">        <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="string">"10s"</span>,</span><br><span class="line">        <span class="attr">"timeout"</span>: <span class="string">"1s"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"Server:8080"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"b2b-admin"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [<span class="string">"blackbox_exporter_http"</span>],</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">8080</span>,</span><br><span class="line">      <span class="attr">"check"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"Server:8080 Health Check"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Server:8080 Status"</span>,</span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://localhost:8080/health"</span>,</span><br><span class="line">        <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="string">"10s"</span>,</span><br><span class="line">        <span class="attr">"timeout"</span>: <span class="string">"1s"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"Server:8081"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"b2b-admin"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [<span class="string">"blackbox_exporter_http"</span>],</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">8081</span>,</span><br><span class="line">      <span class="attr">"check"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"Server:8081 Health Check"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Server:8081 Status"</span>,</span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://localhost:8081/health"</span>,</span><br><span class="line">        <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="string">"10s"</span>,</span><br><span class="line">        <span class="attr">"timeout"</span>: <span class="string">"1s"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 이제 보니 Nginx 말고 8080 및 8081 포트까지 찌르게 되어있었다.<br>(우리는 내부적으로 빠른 롤백을 위해 한 서버 인스턴스에 두 개의 어플리케이션 서버를 띄운 후 Nginx Upstream Server를 바꾸는 Blue/Green Deployment 전략을 사용 중이다.)<br>8080/8081 포트는 Nginx를 타지 않고 직접 프라이빗 IP를 찌르기 때문에 Access Log에 남지는 않았지만 세션도 생성됐을거라고 추측된다.  </p><p>우선 Prometheus에게 health check endpoint를 넘길 수 있게 끔 수정해야된다.  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"services"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"Nginx"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"b2b-admin"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [<span class="string">"blackbox_exporter_http"</span>],</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="attr">"health_check_endpoint"</span>: <span class="string">"health"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"Server:8080"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"b2b-admin"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [<span class="string">"blackbox_exporter_http"</span>],</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">8080</span>,</span><br><span class="line">      <span class="attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="attr">"health_check_endpoint"</span>: <span class="string">"health"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"Server:8081"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"b2b-admin"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [<span class="string">"blackbox_exporter_http"</span>],</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">8081</span>,</span><br><span class="line">      <span class="attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="attr">"health_check_endpoint"</span>: <span class="string">"health"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>meta.health_check_endpoint</code>를 사용하게 끔 Prometheus 설정 파일도 바꿔주자.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'blackbox_exporter_http'</span></span><br><span class="line"><span class="attr">    metrics_path:</span> <span class="string">/probe</span></span><br><span class="line"><span class="attr">    params:</span></span><br><span class="line"><span class="attr">      module:</span> <span class="string">[http_2xx]</span></span><br><span class="line"><span class="attr">    consul_sd_configs:</span></span><br><span class="line"><span class="attr">      - server:</span> <span class="string">'http://consul-server-001.dns:8500'</span></span><br><span class="line"><span class="attr">      - server:</span> <span class="string">'http://consul-server-002.dns:8500'</span></span><br><span class="line"><span class="attr">      - server:</span> <span class="string">'http://consul-server-003.dns:8500'</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_consul_tags]</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">.*,blackbox_exporter_http,.*</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_consul_service_metadata_health_check_endpoint]</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__param_target</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">'(.*)(\/*);(.*)'</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">'$1/$3'</span></span><br><span class="line"><span class="attr">      - target_label:</span> <span class="string">'__address__'</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">'blackbox-exporter:9115'</span></span><br></pre></td></tr></table></figure><p>위와 같이 이제 설정을 바꾼 후 다시 Nginx의 Access log를 뒤져보았다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:57:52+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:57:54+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;207&quot;,&quot;request_time&quot;:&quot;0.004&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:02+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.000&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:04+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;207&quot;,&quot;request_time&quot;:&quot;0.004&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:12+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:14+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;207&quot;,&quot;request_time&quot;:&quot;0.004&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:15+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;207&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;ELB-HealthChecker/2.0&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:19+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;207&quot;,&quot;request_time&quot;:&quot;0.005&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;ELB-HealthChecker/2.0&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:22+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:24+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;207&quot;,&quot;request_time&quot;:&quot;0.003&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:32+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;localhost&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;6&quot;,&quot;request_time&quot;:&quot;0.001&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Consul Health Check&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2019-05-26T13:58:34+00:00&quot;,&quot;remote_addr&quot;:&quot;&quot;,&quot;host&quot;:&quot;172.12.1.189:80&quot;,&quot;request&quot;:&quot;GET /health HTTP/1.1&quot;,&quot;status&quot;: &quot;200&quot;,&quot;body_bytes_sent&quot;:&quot;207&quot;,&quot;request_time&quot;:&quot;0.003&quot;,&quot;http_referrer&quot;:&quot;&quot;,&quot;http_user_agent&quot;:&quot;Go-http-client/1.1&quot;&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>Go-http-client/1.1</code>라는 Agent도 <code>/health</code>을 찌르기 시작했다.<br>그 이후에 이제 레디스 A를 모니터링 해봤다.  </p><p><img src="/images/redis-monitoring/legacy-monitoring-2.png" alt="그래프가 쭉쭉 떨어지는 걸 봐서 잘 해결된 것 같다."></p><h2 id="진짜-진짜로-죽은-이유"><a href="#진짜-진짜로-죽은-이유" class="headerlink" title="진짜 진짜로 죽은 이유"></a>진짜 진짜로 죽은 이유</h2><p>레디스 A와 같이 그래프가 현상유지만 됐으면 별 문제가 되지 않는다.<br>램은 1GB이지만, 실제로 사용량은 100MB도 되지 않았으므로 전혀 문제될 게 없다.<br>문제는 레디스 A가 아닌 레디스 B였다.<br>레디스 B는 어드민 B(외부에서 사용하는 어드민)이 사용하는 레디스이다.<br>해당 프로젝트는 세션의 만료기간을 Integer.MAX_VALUE(2³¹ − 1 = 2,147,483,647)로 잡아놓았다.<br>나는 해당 프로젝트의 개발에 참여하지 않아 잘 모르겠는데 아마 외부에서 사용하는 사람들이라면 매번 로그인하는 걸 번거롭게 생각해서 직접 요구사항이 들어오지 않았을까 싶다.<br><img src="/images/redis-monitoring/integer_max_value_to_year.png" alt="무려 68년동안이나 세션이 유지된다.">  </p><p>거의 평생동안 쓰레기 세션이 만들어진 채로 계속 유지가 된 거다.<br><img src="/images/redis-monitoring/forever-session-monitoring.png" alt="그 결과 500mb가 넘는 쓰레기 세션들이 만들어지고 있었다."><br>1GB 장비에서 500mb가 넘는 메모리는 엄청난 장애를 동반할 수 있다.<br>계속 유지되다가 버티지 못하고 레디스가 뻗고, 해당 레디스를 사용하는 서버도 뻗고, 다른 레디스 및 서버에도 영향을 미친 것으로 보인다.  </p><p><img src="/images/redis-monitoring/forever-session-garbage.png" alt=""><br>헬스 체크 엔드포인트를 변경한 이후에는 새로운 세션은 거의 만들어지지 않고 계속 현상 유지만 된 것이다.<br>500MB가 넘는 쓰레기 세션을 68년이 넘는 시간동안이나 끌고 가야하는 문제에 직면하게 되었다.<br>일단 로그인이 풀리겠지만 쓰레기 세션이 너무 많은 관계로 한 번 털고 가고(레디스 재시작), 세션의 만료기간도 좀 줄이기로 하였다.   </p><p><img src="/images/redis-monitoring/after-garbage-collection.png" alt=""><br>쓰레기 세션을 한 번 털고 나니 메모리 사용량이 확 줄어들었다.  </p><h2 id="이후-상황"><a href="#이후-상황" class="headerlink" title="이후 상황"></a>이후 상황</h2><p><img src="/images/redis-monitoring/admin-a-30-days.png" alt="어드민 A(세션 유지기가 1일)100MB를 치던 키가 쭉쭉 떨어지는 걸 볼 수 있다."><br>재밌는 건 중간에 줄어들다가 현상유지되는 구간이다.<br>이 구간은 내 실수로 두 대의 서버가 떠있는데 한 대의 서버의 헬스 체크 엔드포인트만 수정하고, 나머지 한대는 제대로 수정하지 않아서 현상 유지가 되었다.<br>(Consul 클라이언트 프로세스를 죽이고 다시 띄웠는데도 Consul 서버에서는 해당 노드와 서비스들이 좀비처럼 살아있었다 ㅠㅠ…)<br><img src="/images/redis-monitoring/admin-a-24-hours.png" alt="지금은 뭐 피크 타임 때도 2메가 쓸까 말까이다."><br><img src="/images/redis-monitoring/admin-b-30-days.png" alt="어드민 B(세션 유지기간 68년)의 경우에는 너무 쓰레기 세션이 많아서 한 번 털고 갔다."><br><img src="/images/redis-monitoring/admin-b-24-hours.png" alt="얘는 피크 때 그나마 6~7메가 정도를 쓰고 있다.">  </p><p>솔직히 말해서 스케일 아웃은 괜히했고, 애초에 로그인 세션만 사용하는데 비정상적으로 키가 많이 생성되고 용량 차지를 많이하는 것부터가 이상했다.<br>다음부터는 좀 더 조심히 일하고 현상 파악을 해야겠다. </p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Redis </tag>
            
            <tag> Monitoring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JVM) Garbage Collection Advanced</title>
      <link href="/2019/05/11/jvm-gc-advanced/"/>
      <url>/2019/05/11/jvm-gc-advanced/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jvm-gc-advanced/thumb.jpeg" alt="출처: https://medium.com/@iacomini.riccardo/hadoop-namenode-garbage-collector-tuning-7f6a029e9012"></p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p><img src="/images/jvm-gc-advanced/optimizing-java.jpeg" alt=""><br>이 글은 이일웅 님께서 번역하신 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14796595" rel="external nofollow noopener noreferrer" target="_blank">자바 최적화</a>란 책을 읽던 도중 공부한 내용을 정리한 글입니다.<br>절대 해당 책의 홍보는 아니며 좋은 책을 써준 사람과 번역해주신 분께 진심으로 감사하는 마음에 썼습니다.<br>이 글을 읽어보시기 전에 <a href="/2019/05/07/jvm-gc-basic/">Garbage Collection Basic</a> 편을 읽어보시면 더 도움이 될 것입니다 :) </p><a id="more"></a><h2 id="Mark-and-Sweep-Algorithm"><a href="#Mark-and-Sweep-Algorithm" class="headerlink" title="Mark and Sweep Algorithm"></a>Mark and Sweep Algorithm</h2><p>Basic 편에서는 간단하게 Young/Old Generation과 Mark and Sweep 알고리듬에 대해서 간단하게 알아보았다.<br>해당 알고리듬을 사용하는 GC를 <strong>scavenge garbage collector</strong>라고도 부른다.<br>Mark and Sweep Algorith의 단점은 GC를 수행하는 동안 Stop the World(이하 STW)가 발생한다는 것이다.<br>![출처: <a href="https://www.youtube.com/watch?v=_cNXjmuhCCc]/images/jvm-gc-advanced/stop-the-world.png" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=_cNXjmuhCCc]/images/jvm-gc-advanced/stop-the-world.png</a>) </p><p>그럼 이제 해당 알고리듬을 사용하는 GC 알고리듬에는 뭐가 있는지 알아보자.</p><h3 id="Serial-GC"><a href="#Serial-GC" class="headerlink" title="Serial GC"></a>Serial GC</h3><p><strong>프로덕션에서 절대 사용하면 안 되는 GC이다.</strong> (싱글 코어 CPU를 사용하는 서버를 제외하고… <del>설마 아직도??</del>)<br>CPU 코어를 한 개만 사용하기 때문에, 해당 GC는 싱글 코어 환경에서만 적합하다. (쓰레드 간의 컨텍스트 스위칭도 적기 때문에…)<br>Young/Old Generation 모두 Mark and Sweep 알고리듬을 사용하여 GC를 수행한다.<br>Young Generation에서는 gc 수행 시간을 줄이고자 memory compaction을 수행하지 않고 survivor 영역을 전전긍긍하다 Old Generation으로 승진시켜버린다.<br>Old Generation은 survivor 영역처럼 별도의 메모리 영역이 없다보니 memory compaction도 하고, 메모리 사이즈도 크다보니 수행 시간이 길다. (그만큼 STW도 길다…)</p><p>-XX:+UseSerialGC 파라미터를 주고 실행하면 적용된다.</p><h3 id="ParallelGC-Young-ParallelOldGC-Old"><a href="#ParallelGC-Young-ParallelOldGC-Old" class="headerlink" title="ParallelGC(Young) / ParallelOldGC(Old)"></a>ParallelGC(Young) / ParallelOldGC(Old)</h3><p>Java 7<del>8의 기본 GC이며 <a href="#Serial-GC">Serial GC</a>의 멀티 코어 판이다.<br>‘Serial GC에서 하던 걸 다수의 코어(및 쓰레드)가 하다보니 더 빠르게 수행하겠구나</del>‘정도로 받아들이고 있다.</p><p>둘은 쌍쌍바 같은 녀석이라 -XX:+UseParallelGC 파라미터를 주면 자동으로 -XX:+UseParallelOldGC 파라미터가 활성화되고,<br>-XX:+UseParallelOldGC 파라미터를 주면 자동으로 -XX:+UseParallelGC 파라미터가 활성화된다.</p><h2 id="Tri-color-Marking-Algorithm"><a href="#Tri-color-Marking-Algorithm" class="headerlink" title="Tri-color Marking Algorithm"></a>Tri-color Marking Algorithm</h2><p>Tri-color Abstraction으로도 불리는 것 같으며 ‘자바 최적화’란 책에서는 ‘삼색 마킹 알고리즘’이라고 번역하였다.<br>Tri라는 접두사는 숫자 3을 의미하며, 총 3가지 색을 써서 마킹하는 알고리듬을 뜻한다.<br><a href="/2019/05/07/jvm-gc-basic/#Mark-and-Sweep-Algorithm">Mark and Sweep Algorithm</a>에서는 2가지 색(마킹되었거나, 마킹되지 않았거나)을 쓴 것과 차이점을 지닌다.<br>이 알고리듬은 동시성 알고리듬과 GC의 정확성을 증명했다는데, 즉 어플리케이션이 멈추지 않으면서 GC를 <strong>동시</strong>에 <strong>정확</strong>하게 쓰기 위해 나온 알고리듬 같다.  </p><p>먼저 알고리듬을 알아보기 전에 각각의 색에는 무엇이 있고, 어떤 역할을 하는지 알아보자.  </p><ol><li>회색(Grey)<br>해당 객체가 참조하고 있는 객체를 식별하지 않은, 즉 처리가 되지 않은 객체</li><li>검은색(Black)<br>해당 객체가 참조하고 있는 객체를 모두 식별한, 즉 모든 처리를 끝마친 객체</li><li>흰색(White)<br>해당 객체를 참조하고 있는 객체가 아무런 객체도 없는 객체, 수집 대상이 되는 객체</li></ol><p><img src="/images/jvm-gc-advanced/tri-color-marking-01.png" alt="Stack과 같은 GC Root(외부에서 힙 메모리에 대한 레퍼런스를 갖고 있는 메모리 풀?)에 있는 객체를 전부 회색으로 표시한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-02.png" alt="마킹 스레드가 회색 객체를 랜덤하게 돌아다니면서 해당 회색 객체가 참조하고 있는 객체를 전부 회색으로 마킹한 후 본인을 검은색으로 마킹한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-03.png" alt="또 마킹 스레드가 랜덤하게 회색 객체를 돌아다니다가 참조하고 있는 객체가 없음을 확인했으니 자신을 검은색으로 마킹한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-04.png" alt="또 마킹 스레드가 랜덤하게 회색 객체를 돌아다니다가 참조하고 있는 객체가 없음을 확인했으므로 본인을 검은색으로 마킹한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-05.png" alt="또 마킹 스레드가 랜덤하게 회색 객체를 돌아다니다가 참조하고 있는 객체가 없음을 확인했으므로 본인을 검은색으로 마킹한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-06.png" alt="또 마킹 스레드가 랜덤하게 회색 객체를 돌아다니다가 참조하고 있는 객체는 회색으로 마킹하고 본인은 검은색으로 마킹한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-07.png" alt="또 마킹 스레드가 랜덤하게 회색 객체를 돌아다니다가 참조하고 있는 객체는 회색으로 마킹하고 본인은 검은색으로 마킹한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-08.png" alt="또 마킹 스레드가 랜덤하게 회색 객체를 돌아다니다가 참조하고 있는 객체가 없음을 확인했으므로 본인을 검은색으로 마킹한다."><br><img src="/images/jvm-gc-advanced/tri-color-marking-09.png" alt="회색 객체가 없을 때까지 위 작업을 반복하고 흰색 객체를 전부 수거해간다.">  </p><h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>Mark and Sweep Algorithm과 달리 Tri-color Marking Algorithm은 어플리케이션과 동시에 수행된다.<br>따라서 마킹하는 도중에 어플리케이션 스레드(책에선 Mutator라고 표기)에서 수정 사항이 반영되기 때문에 라이브 객체가 수집되는 현상이 발생될 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aInstance.setSomeField(cInstance);</span><br></pre></td></tr></table></figure><p><img src="/images/jvm-gc-advanced/tri-color-marking-issue-01.png" alt="A라는 객체는 검은색으로 마킹돼있기 때문에 참조하는 객체에 대한 처리가 모두 끝난 객체이다.">  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aInstance.setSomeField(cInstance);</span><br><span class="line"></span><br><span class="line"><span class="comment">// blah blah...</span></span><br><span class="line"></span><br><span class="line">aInstance.setSomeField(bInstance);</span><br></pre></td></tr></table></figure><p><img src="/images/jvm-gc-advanced/tri-color-marking-issue-02.png" alt="A가 C에서 B를 바라보게 끔 변경되었다."><br>여기서 두 가지 문제점이 발생한다.  </p><ol><li>A는 검은색 객체로 모든 작업이 끝난 객체다.<br>또한 B는 흰색으로 마킹돼있다, 즉 수집의 대상이다.<br>라이브 객체를 수집하기 때문에 추후에 NPE(NullPointerException)이 발생할 가능성이 존재한다.</li><li>C는 회색 객체로 마킹돼있고, 나중에 검은색 객체로 바뀐다.<br>즉, C는 GC 루트로부터 아무도 참조하지 않는 객체가 된 죽은 객체인데도 불구하고 흰색으로 마킹되지 않는다.<br>따라서 수집 대상이 되지 않기 때문에 메모리 릭을 유발할 수 있다. (물론 다음 GC에서 수거해가겠지만…)<br>이렇게 아무도 참조하고 있지 않은데 혼자 남아있는 객체를 부유 가비지(Floating Garbage)라고 부른다.</li></ol><p>위와 같은 경우에는 애플리케이션 스레드가 객체를 변경했을 때 재마킹하게 끔하거나,<br>알고리듬을 깨버릴만한 모든 변경 사항을 큐 형태로 넣어놓고 GC의 main phase가 끝난 다음에 fixup phase에서 바로 잡는 방법 등등이 존재한다. </p><h3 id="CMS-Concurrent-Mark-Sweep-GC"><a href="#CMS-Concurrent-Mark-Sweep-GC" class="headerlink" title="CMS(Concurrent Mark Sweep) GC"></a>CMS(Concurrent Mark Sweep) GC</h3><p>CMS GC는 Tri-color Marking Algorithm을 사용하기 때문에 GC와 함께 어플리케이션을 돌릴 수 있다.<br>그렇다고 해서 아예 STW가 없는 건 아닌데 Parallel(Old)GC에 비하면 훨씬 짧다.<br>즉, 레이턴시에 엄청 민감한 경우에 적합한 GC라고 볼 수 있다.<br>절반은 GC 돌리고, 절반은 어플리케이션 스레드를 돌리는 것이다. (물론 평상시에는 100% 어플리케이션이 쓰겠지만…)<br>CMS GC는 Old Generation 전용 GC이고, 해당 GC를 사용하면 자동적으로 Young Generation 전용으로 ParNewGC를 사용한다.<br>(Java 8에서 -XX:+UseConcMarkSweepGC -XX:-UseParNewGC 이 조합이 Deprecate 되었다.<br>그냥 -XX:+UseConcMarkSweepGC만 사용하면 된다.)<br>ParNewGC에 대해선 좀 이따 간단히 설명하겠다.</p><p>CMS GC의 장점은 아래와 같다.</p><ol><li>어플리케이션 스레드가 오랫동안 멈추지 않는다. (짧게 짧게 쪼개서 멈춘다.)  </li></ol><p>CMS GC의 단점은 아래와 같다.  </p><ol><li>GC 풀 사이클 자체는 Parallel(Old)GC 보다 길다.  </li><li>GC가 도는 도중에는 어플리케이션 스레드가 절반만 돌기 때문에 처리율이 감소한다. </li><li>Mark and Sweep 알고리듬에 비해 하는 일도 많고 복잡하다보니 메모리, CPU를 더 많이 쓴다.  </li><li>CMS GC는 Old Generation의 메모리 Compaction을 수행하지 않으므로 단편화가 발생한다.</li></ol><p>역시 은총알은 없는 것 같다… ㅠㅠ</p><p>CMS GC는 어플리케이션 쓰레드와 같이 돌기 때문에 좀 복잡하게 동작한다.  </p><ol><li><p>초기 마킹(Initial Mark, <strong>STW 발생</strong>)<br><img src="/images/jvm-gc-advanced/cms-01.png" alt="GC Root나 Young Generation에서 참조하는 객체를 회색으로 마킹한다."><br>이렇게 마킹해놓으면 마킹 단계에서 다른 메모리 영역은 신경쓰지 않고 하나의 GC 풀에만 신경쓰면 된다.  </p></li><li><p>동시 마킹(Concurrent Mark)<br><img src="/images/jvm-gc-advanced/cms-02.png" alt="마킹 쓰레드와 어플리케이션 쓰레드가 동시에 돌기 때문에 객체 참조 간에 변경 사항이 발생한다.">  </p></li><li><p>동시 사전 정리(Concurrent Preclean)<br><img src="/images/jvm-gc-advanced/cms-03.png" alt="Old Generation 영역을 일정 공간으로 나누어 Card라 불리는 곳에 저장한다."><br>그리고 Initial Mark 이후에 참조 간에 변경이 생긴 곳을 Dirty Card라고 부른다.<br>자세한 내용은 <a href="http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html" rel="external nofollow noopener noreferrer" target="_blank">The JVM Write Barrier - Card Marking</a>을 참고하자.<br><img src="/images/jvm-gc-advanced/cms-04.png" alt="사전 정리를 해야 Dirty Card에서 일반 Card가 될 수 있다."><br>이 phase의 목적은 5단계(재마크, Final Remark) 시에 STW 시간을 줄이기 위함이다.</p></li><li><p>Abort 가능한 동시 사전 정리(Concurrent Abortable Precelan)<br>이 phase의 목적 역시 5단계(재마크, Final Remark) 시에 STW 시간을 줄이기 위함이다.<br>해당 phase는 이름부터 Abortable이 들어가기 때문에 아래와 같은 조건 의해 Abort 될 수 있다.<br>반복 횟수를 넘거나, 정해진 시간을 초과하거나, 사전 정리가 효과적으로 이루어졌거나 등등… (JVM 옵션으로 설정 가능한 것들도 있다.)  </p></li><li><p>재마크 (Final Remark, <strong>STW 발생</strong>)<br><img src="/images/jvm-gc-advanced/cms-05.png" alt="Old Generation의 모든 live object를 마킹한다.">  </p></li><li><p>동시 쓸어담기 (Concurrent Sweep)<br><img src="/images/jvm-gc-advanced/cms-06.png" alt="어플리케이션 스레드가 돌아감과 동시에 하얀색으로 마킹된 오브젝트를 전부 수거해간다.">  </p></li><li><p>동시 리셋 (Concurrent Reset)<br><img src="/images/jvm-gc-advanced/cms-07.png" alt="어플리케이션 스레드가 돌아감과 동시에 마킹했던 내용들을 리셋한다."></p></li></ol><h4 id="CMF-Concurrent-Mode-Failure"><a href="#CMF-Concurrent-Mode-Failure" class="headerlink" title="CMF(Concurrent Mode Failure)"></a>CMF(Concurrent Mode Failure)</h4><p>ParallelOldGC는 긴 STW를 가지는 대신에 CMS는 짧은 두 번의 STW만 있으므로 지연이 매우 적다.  </p><p>하지만 Old Generation을 GC하고 있는 와중에 동시에 Eden 영역도 차게 되는데, 이러다 Eden 영역이 꽉찬 경우에는 어떻게 될까?<br>Young Generation을 GC해야하는데 ParNewGC도 STW를 유발하는데 쓰레드 절반은 Minor GC, 쓰레드 절반은 Major GC를 수행하고 있기 때문에 Minor GC는 ParallelGC 보다 느리다.<br>또한 Minor GC 이후에 적당한 나이를 먹은 객체는 Old Generation으로 <a href="/2019/05/07/jvm-gc-basic/#Promotion">승진</a>시켜야하는데,<br>CMS GC는 메모리 컴팩션을 하지 않기 때문에 메모리 단편화가 발생하기 때문에 ParallelGC 보다 더 적은 객체를 Old Generation으로 승진시킨다.<br>(-XX:InitialTenuringThreshold와 -XX:MaxTenuringThreshold의 기본 값을 좀 높여서 사용하는 걸까…?)<br>또한 Old Generation으로 승진시킴과 동시에 Old Generation은 아직 GC 중이기도 하고해서 좀 더 긴밀한 조정을 하게되는데 이것도 ParNewGC와 ParallelGC와의 차이점이다.</p><p>또한 객체의 할당률이 급증해서 <a href="/2019/05/07/jvm-gc-basic/#Premature-Promotion">조기 승진</a>이 일어나기도 하고,<br>급기야 승진한 객체가 너무 많은 경우에는 Old Generation 조차 꽉차는 경우가 존재한다. (단편화로 인해 연속된 메모리 공간을 확보하지 못하는 것도 한 몫 한다.)<br>이런 경우에는 어쩔 수 없이 CMS GC에서 ParallelOldGC로 바뀌게 되고, STW가 발생한다.</p><p>CMF가 발생하지 않게 하려면, Old Generation이 꽉 차기 전에 얼른얼른 GC를 수행해야하는데<br>-XX:CMSInitiatingOccupancyFraction 파라미터로 정할 수 있고 기본값은 75이다. (Old Generation의 75%가 차면 GC 시작)</p><p>CMS는 내부적으로 사용 가능한 빈 공간을 ‘프리 리스트’라는 걸 통해 관리한다.<br>Concurrent Sweep 단계에서 Sweeper 쓰레드는 다음의 일을 한다.  </p><ol><li>여유 공간을 더 큰 덩어리로 만든다.  </li><li>단편화로 인해 CMF가 발생하지 않도록 연속된 빈 블록들을 하나로 뭉친다.</li></ol><p>하지만 Sweeper는 어플리케이션 쓰레드와 동시에 작동하므로 쓰레드가 적절히 동기화되지 않는 한 새로 할당된 블록이 잘못 수집될 가능성이 존재한다.<br>따라서 Sweeper 쓰레드는 프리 리스트를 잠근 후에 작업한다.</p><h3 id="G1-GC-Garbage-First-GC"><a href="#G1-GC-Garbage-First-GC" class="headerlink" title="G1 GC(Garbage First GC)"></a>G1 GC(Garbage First GC)</h3><p>G1 GC는 자바 6에 실험적으로 등장하여 자바 8u40 이후부터 쓸만큼의 성능 및 안정성을 발휘하기 시작했고, <strong>자바 9부터 기본 GC</strong>로 채택됐다. (자바 12가 나온 현재도 기본 GC이다.)<br>G1 GC는 처음부터 CMS를 대체할 목적으로 설계되었는데 CMS GC를 사용중인데 아무런 문제가 없는데 성급하게 바꾸는 행위는 하지 않는 게 좋다.<br>굳이 바꾸지 않아도 바꾸는 건 안정성을 떨어뜨리는 행위이며 조금이라도 처리율을 높이고 싶어서 올리고 싶다면 충분한 테스트를 거친 이후에 하자.</p><p><img src="/images/jvm-gc-advanced/g1-gc-01.png" alt="G1 GC는 Young(Eden/Survivor) Generation 및 Old Generation이 존재하는데 각 Generation이 연속된 메모리 공간일 필요가 없다는 게 큰 차이점이다. (물론 힙 메모리 자체로 봤을 때는 각 Region은 연속된 메모리 공간에 할당된다.)"><br>즉, Survivor 영역도 기존에는 2개였는데 G1 GC에서는 그러한 개념도 사라졌다.<br>또한 거대한 객체(Humongous Object)를 저장하는 ‘거대 영역(Humongous Region)’이라는 특수한 영역도 존재한다.(Humongous Object는 Old Generation에 바로 할당된다.)<br>Humongous Object라고 식별하는 기준은 리전 사이즈의 50%를 넘는 객체면 된다.   </p><p>G1 GC는 처음부터 CMS를 대체할 목적으로 중단 시간이 짧은 수집기로 설계했기 때문에 아래와 같은 특징이 있다.    </p><ol><li>수십 GB 이상의 힙에서도 짧은 STW를 지향한다.  </li><li>객체 할당과 Old Generation으로 승진이 많은 경우에도 메모리 Compaction을 하기 때문에 CMS처럼 Full GC가 돌지 않는다.  </li><li>짧은 STW와 예측 가능한 STW 시간  </li></ol><p>-XX:MaxGCPauseMillis라는 옵션으로 지정할 수 있는데 100(ms) 이하로 지정하면 이를 어길 가능성이 크다고 한다.</p><ol><li>Java 10부터 Full GC 시에 Multi Thread로 작동한다. (<a href="https://bugs.openjdk.java.net/browse/JDK-8172890" rel="external nofollow noopener noreferrer" target="_blank">JEP 307: Parallel Full GC for G1</a>)<br>참고로 CMS GC는 Full GC 시에 Single Thread로 동작하는 것으로 알고 있는데, 지금은 고쳐졌는지 모르겠다.<br>애초에 CMS GC를 대체할 목적으로 G1 GC 개발에 몰두했을 거 같기 때문에 안 고쳤을 것 같다…</li></ol><p>G1 GC는 힙을 ‘영역(Region)’이라는 것으로 구성한다. (일단 힙크기는 4GiB라고 가정해보자.)<br>영역의 크기 = 힙크기 / 2048 =&gt; 4096 / 2048 = 2(MiB)<br>만약 딱 나누어떨어지지 않는다면 크기 값게 가장 가까운 수치로 반올림하여 계산한다.<br>영역의 크기는 1, 2, 4, 8, 16, 32 MiB 중에 정해진다.  </p><h4 id="Why-G1"><a href="#Why-G1" class="headerlink" title="Why G1?"></a>Why G1?</h4><p>이름이 왜 G1(Garbage First)일까?<br>G1 GC는 살아있는 객체를 마킹한 후에 리전 별로 얼만큼을 살려둬야하는지 알 수 있다. (생존률?)<br>그 다음 G1 GC는 리전 중에 모든 객체가 죽은 리전(유효한 객체가 없는 리전, 즉 <strong>Garbage</strong>만 있는 Region)부터 회수를 한다.<br>메모리 회수를 먼저 하면 빈 공간 확보를 더 빨리 할 수 있다.<br>빈 공간 확보를 더 빨리 한다는 건 조기 승격이나 급격히 할당률이 늘어나는 경우를 방지할 수 있다.<br>이렇게 되면 Old Generation이 비교적 한가해지게 된다.</p><p>다른 컬렉터들과 달리 G1 GC는 죽어있는 객체만 있는 Region(Garbage)을 처음에(First) 수거하기 때문에 이런 이름이 붙게 됐다.  </p><h4 id="G1-GC는-어떻게-대용량-힙에서-낮은-중단-시간을-가질-수-있게-되었을까"><a href="#G1-GC는-어떻게-대용량-힙에서-낮은-중단-시간을-가질-수-있게-되었을까" class="headerlink" title="G1 GC는 어떻게 대용량 힙에서 낮은 중단 시간을 가질 수 있게 되었을까?"></a>G1 GC는 어떻게 대용량 힙에서 낮은 중단 시간을 가질 수 있게 되었을까?</h4><p>힙 용량이 커지면 커질 수록 객체의 갯수가 많아지고, 객체의 갯수가 많아지면 GC 수행시간이 길어지고, 그러다보면 STW 시간도 당연히 늘어나게 된다.<br>근데 G1 GC는 어떻게 그렇게 빨리 대용량 힙을 GC할 수 있는 걸까??</p><ol><li>GC 시에 전체 Heap에 대해서 GC를 수행해도 되지 않는다.<br>GC 해야하는 Region만 GC를 하면 되기 때문이다.<br>이 GC 해야만하는 Region을 뒤질 때도 좀 더 특수한 기법을 쓴다.<br>바로 Region 별로 RSet(Remembered Set)을 두고, 이 RSet만 뒤져서 추적을 하면 되기 때문이다.<br>RSet에는 외부에서 힙 영역 내부를 참조하는 레퍼런스를 관리하기 위한 정보들이 저장돼있다.  </li><li>Old Generation Compaction을 하는데 전체 Old Generation 대해서 Compaction을 하지 않아도 된다.<br>해당 Region에 대해서만 Compaction을 하면된다.  </li><li>Garbage를 먼저 수집해간다.<br>이는 G1 GC의 이름의 유래에서도 설명했는데 빈 공간을 먼저 확보하기 때문에 메모리의 여유 공간이 확보가 많이 된다.<br>여유 공간이 확보가 빨리 빨리 되니 그만큼 GC 빈도도 줄어들게 되는 것이다.</li></ol><h4 id="Evacuation"><a href="#Evacuation" class="headerlink" title="Evacuation"></a>Evacuation</h4><p>Minor GC 이후에 Survivor Space로 객체를 옮기거나 Old Generation으로 객체를 옮겨야한다.<br>이 때 G1 GC는 해당 객체를 기존의 Region 혹은 새 Region에 복사후에 메모리를 compact시킨다.<br>마치 전쟁통에 <strong>피난(Evacuation)</strong>가는 느낌 때문인지 이러한 행위를 Evacuation이라고 부른다.</p><p>Major GC 시에도 마찬가지다.<br>Old Generation Region에 있는 생존 객체를 다른 리전으로 피난(Evacuation)시킨 후 해당 메모리를 Compact한다.<br>하지만 Old Generation의 특수한 리전인 Humongous Region에 대해서는 Evacuation이 발생하지 않는다.<br>그냥 해당 리전의 객체(Humongous Object)가 더 이상 참조하는 객체가 없어서 사망하셨으면 바로 회수해간다.</p><h4 id="G1-GC-Cycle"><a href="#G1-GC-Cycle" class="headerlink" title="G1 GC Cycle"></a>G1 GC Cycle</h4><p><img src="/images/jvm-gc-advanced/g1-gc-cycle.png" alt="출처: https://docs.oracle.com/en/java/javase/12/gctuning/garbage-first-garbage-collector.html#GUID-F1BE86FA-3EDC-4D4F-BDB4-4B044AD83180"><br>위 그림은 알고리듬의 Phase 및 STW가 발생하는 걸 표현한 것이다.  </p><p>모든 원은 STW가 발생함을 나타낸 것이고, 그 크기에 따라 시간이 달라진다고 생각하면 될 것 같다.<br>파란원은 Minor GC가 진행함에 따라 STW가 발생하는 것이고,<br>주황원은 Major GC가 진행하면서 객체를 마킹하느라고 생기는 STW이고,<br>빨간원은 Mixed Collection(Minor/Major GC)을 진행함에 따라 STW가 발생하는 것이다.  </p><p>Young Only Phase는 이름에서 보듯이 Young Only (Garbage Collection) Phase라고 이해하면 될 것 같다.<br>여기서 Major GC가 일어나긴 하지만 마킹만 하는 단계고, 메모리를 회수해가는 단계는 아니기 때문이다.<br>파란원이 Minor GC 때문에 생긴 STW이다.<br>이렇게 평화롭게 Minor GC만 수행하다가 -XX:InitiatingHeapOccupancyPercent에 지정한 값을 초과하는 순간 Major GC도 시작한다.<br>Major GC의 첫단계는 Initial Mark이며 Minro GC와 동시에 수행되며 둘 다 STW를 수반한다. (따라서 다른 파란원보다 크기가 크다.)<br>그 이후에 어플리케이션 쓰레드, Minor GC, Concurrent Mark가 동시에 수행되는데 Remark가 수행되는 순간 다른 작업은 멈추게 된다.<br>그리고 주황색 원에서 보다싶이 Remark가 수행되면서 STW가 발생한다. (일반 파란원보다 긴 시간이 필요하다.)<br>그 이후에 또 짜잘하게 Minor GC가 수행되다가 주황색 원에서 보다싶이 Cleanup을 수행한다.  </p><p>이제 Young Only Phase가 끝나고 Space Reclamation(공간 회수) Phase가 시작된다.<br>Space Reclamation Phase는 이름에서 보다싶이 Young Only Phase에서 마킹한 리전(Space)의 메모리를 수집(Reclamation)하는 단계이다.<br>Space Reclamation Phase에서는 Mixed Collection(Minor/Major GC)이 수행되는데 이는 빨간원으로 표시했다.<br>Mark 단계가 없어서인지 Space Reclamation Phase에서는 STW 빈도가 훨씬 줄어든 모습을 볼 수 있다.</p><p>Space Reclamation Phase가 끝나면 다시 Young Only Phase로 돌아가서 Minor GC만 메모리를 수집하게 된다.<br>이렇게 G1 GC는 Young Only Phase와 Space Reclamation Phase를 번갈아 수행하는 싸이클을 갖고 있다.  </p><h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><p>이제부터는 각 GC 및 단계를 좀 더 면밀히 관찰해보자.<br>아래 나오는 모든 그림의 출처는 <a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html" rel="external nofollow noopener noreferrer" target="_blank">Getting Started with the G1 Garbage Collector - Oracle</a>이다.</p><h5 id="Minor-GC-Young-Generation"><a href="#Minor-GC-Young-Generation" class="headerlink" title="Minor GC (Young Generation)"></a>Minor GC (Young Generation)</h5><p>Minor GC는 기존 GC들과 크게 다르지 않다.<br>물론 멀티 쓰레드에서 병렬로 돌아간다.<br><img src="/images/jvm-gc-advanced/g1-gc-02.png" alt="연속되지 않은 메모리 공간에 Young Genration이 Region 단위로 메모리에 할당돼있다."><br><img src="/images/jvm-gc-advanced/g1-gc-03.png" alt="live object가 suvivor region이나 old generation으로 evacuation(피난, copy or move)된다."><br>이 단계에서 STW가 발생하고, Eden과 Survivor의 사이즈는 다음 Minor GC를 위해 재계산 된다.<br><img src="/images/jvm-gc-advanced/g1-gc-04.png" alt="Minor GC를 모두 마친 후의 모습이다.">  </p><h5 id="Major-GC-Old-Generation"><a href="#Major-GC-Old-Generation" class="headerlink" title="Major GC (Old Generation)"></a>Major GC (Old Generation)</h5><p><img src="/images/jvm-gc-advanced/g1-gc-05.png" alt="Initial Mark는 STW를 발생시킨다."><br>Initial Mark는 Survivor Region에서 Old Region을 참조하는 게 있는지 파악해서 Mark하는 단계이다.<br>Survivor Region에 의존적이기 때문에 Survivor Region은 깔끔한 상태여야하고,<br>Survivor Region이 깔끔하려면 Minor GC가 전부 끝난 상태여야한다.<br>따라서 Initial Mark가 Minor GC에 의존적이다.  </p><p><img src="/images/jvm-gc-advanced/g1-gc-06.png" alt="X 표시한 Region은 모든 객체가 사망한 Empty Region이다."><br>Concurrent Mark 단계에서는 Old Generation 내에 생존해있는 모든 객체를 마크하고 다닌다.<br>STW가 없기 때문에 어플리케이션 쓰레드와 동시에 돌고, 종종 Minor GC한테 인터럽트 당한다.  </p><p><img src="/images/jvm-gc-advanced/g1-gc-07.png" alt="Concurrent Mark에서 X 표시 친 Empty Region을 바로 회수해버린다."><br>Remark Phase 역시 STW를 수반한다.<br>또한 Concurrent Mark 단계에서 깔짝깔짝 마킹하던 걸 완전히 끝내버린다.<br>그리고 SATB(snapshot-at-the-beginning) 기법을 쓰기 때문에 CMS GC보다 더 빠르다.<br>여기서 SATB는 <code>수집 사이클을 시작할 때 접근 가능하거나 그 이후에 할당된 객체를 라이브 객체로 간주하는 기법</code>이다.</p><p><img src="/images/jvm-gc-advanced/g1-gc-08.png" alt="Old Generation에서도 evacuation(피난, 살아있는 객체를 copy or move)이 발생한다."><br>이 단계는 STW를 수반하지 않는다.<br>Remark에서 제일 수집하기 쉬운 Empty Region을 수집해갔으니 이제 그 다음으로 수집하기 쉬운 영역을 수집해갈 차례다.<br>Empty Region 다음으로 수집하기 쉬운 Region은 생존률이 제일 낮은 Region이고 생존률이 낮은 순으로 순차적으로 수거해가는 것이다.<br>먼저 해당 region을 피난(copy or move)시키고, 수집해간다.<br>G1 GC는 이렇게 Garbage의 수집을 우선(First)해서 계속해서 여유 공간을 신속하게 확보해둔다.  </p><p>또한 Cleanup 단계에서는 아래와 같은 일을 한다. </p><ul><li>Performs accounting on live objects and completely free regions. (STW 발생)<br>살아있는 객체와 완전히 비어있는 region을 계산함(번역이 맞는지 확인해주십시오 ㅠㅠ)</li><li>RSet을 정리(STW 발생)</li><li>빈 리전을 정리하고나서 Free List에 추가(Concurrent)</li></ul><p><img src="/images/jvm-gc-advanced/g1-gc-09.png" alt="Major GC 이후 깔끔하게 정리된 Old Generation의 모습이다."></p><h2 id="Epsilon-Collector"><a href="#Epsilon-Collector" class="headerlink" title="Epsilon Collector"></a>Epsilon Collector</h2><p>이 컬렉터는 GC를 전혀 수행하지 않는 컬렉터이다.<br>따라서 <strong>실서버 운영 환경에서는 절대 절대 쓰면 안된다.</strong>  </p><p>다음의 경우에 적합하다.  </p><ul><li>성능 테스트 전용<br>정확한 성능 테스트를 해야하는데 GC가 돌아감에 의해 영향을 미칠 수도 있기 때문에<br>이마저도 없앤 후에 성능 테스트를 하고 싶을 때 사용한다.<br><a href="https://openjdk.java.net/projects/code-tools/jmh/" rel="external nofollow noopener noreferrer" target="_blank">JMH</a>란 툴로 마이크로벤치마킹 할 때 이런 GC가 영향을 미치는 테스트도 있는 모양이다.</li><li>할당률이 낮거나 0인 자바 앱 등등<br>존재하기나 할까… 싶다.</li><li>회귀 테스트(정확히 뭔지 모르겠음)<br>변경된 코드 때문에 메모리 할당률이 급격히 달라지지 않았나 확인할 때 유용하다고 한다.</li></ul><p>혹시나 사용하고 싶다면 <code>-XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC</code> 옵션을 주자.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>은총알은 없는 것 같습니다.<br>모든 GC에는 각자 장단점이 있으니 충분하고 검증된 테스트를 통해 본인의 상황에 맞는 GC를 고르는 역량을 길러야합니다. (이러고 작성자는 무조건 G1 GC를 디폴트로 쓰고 있습니다 ㅠㅠ)<br>또한 작성자의 역량 부족으로 인해 <a href="https://wiki.openjdk.java.net/display/zgc/Main" rel="external nofollow noopener noreferrer" target="_blank">Z GC</a>에 대해서는 다루지 못했습니다.<br>또한 Hotspot VM 계열의 GC만 다루었습니다. (제가 OpenJDK만 사용하고 있고, 다 다루기에는 이해하기도 힘들기도 하고 많기도 해서 ㅠㅠ…)<br>혹시나 다른 VM 계열의 GC(셰난도아(Shenandoah), C4, IBM J9)가 궁금하신 분은 이일웅 님께서 번역하신 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14796595" rel="external nofollow noopener noreferrer" target="_blank">자바 최적화</a>란 책을 참고하시면 좋을 것 같습니다.<br>다시 한 번 거듭 말씀드리지만 절대 해당 책의 홍보는 아니며 좋은 책을 써준 사람과 번역해주신 분께 진심으로 감사하는 마음에 썼습니다.</p><h2 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h2><ul><li><a href="https://plumbr.io/handbook/garbage-collection-algorithms-implementations/concurrent-mark-and-sweep" rel="external nofollow noopener noreferrer" target="_blank">Concurrent Mark and Sweep | Plumbr</a>  </li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html" rel="external nofollow noopener noreferrer" target="_blank">Concurrent Mark Sweep (CMS) Collector - Oracle</a>  </li><li><a href="https://d2.naver.com/helloworld/1329" rel="external nofollow noopener noreferrer" target="_blank">Java Garbage Collection - Naver D2</a>  </li><li><a href="https://ko.wikipedia.org/wiki/%EC%93%B0%EB%A0%88%EA%B8%B0_%EC%88%98%EC%A7%91_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99" rel="external nofollow noopener noreferrer" target="_blank">쓰레기 수집 (컴퓨터 과학) - 위키피디아</a></li><li><a href="http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html" rel="external nofollow noopener noreferrer" target="_blank">The JVM Write Barrier - Card Marking</a> </li><li><a href="https://docs.oracle.com/en/java/javase/12/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE" rel="external nofollow noopener noreferrer" target="_blank">Java 12 HotSpot VM Options - Oracle</a></li><li><a href="https://docs.oracle.com/en/java/javase/12/gctuning/garbage-first-garbage-collector.html#GUID-ED3AB6D3-FD9B-4447-9EDF-983ED2F7A573" rel="external nofollow noopener noreferrer" target="_blank">Java 12 Garbage-First Garbage Collector - Oracle</a>  </li><li><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html" rel="external nofollow noopener noreferrer" target="_blank">Getting Started with the G1 Garbage Collector - Oracle</a>  </li><li><a href="https://imp51.tistory.com/entry/G1-GC-Garbage-First-Garbage-Collector-Tuning" rel="external nofollow noopener noreferrer" target="_blank">JVM 튜닝</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JVM) Garbage Collection Basic</title>
      <link href="/2019/05/07/jvm-gc-basic/"/>
      <url>/2019/05/07/jvm-gc-basic/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jvm-gc-basic/thumb.png" alt="PermGen은 자바 8에서 Metaspcae로 대체됐다. 이미지 출처: https://help.sap.com/">  </p><h2 id="읽기-전-주의사항-그림을-보는-법"><a href="#읽기-전-주의사항-그림을-보는-법" class="headerlink" title="읽기 전 주의사항(그림을 보는 법)"></a>읽기 전 주의사항(그림을 보는 법)</h2><p>그림을 그리다보니 Stack에 있는 동그라미 모양과 힙 메모리에 있는 동그라미 모양이 동일한 그림들이 많이 있습니다.<br>이건 <strong>둘이 동일한 메모리를 의미하는 게 아니라 그냥 스택에서 힙을 참조</strong>한다는 걸 그린 건데,<br>사실 둘의 모양을 다르게 그려야하는데 아무 생각없이 복붙해서 그리다보니 이렇게 그리게 되었고…<br>되돌리기에는 너무 많이 그림을 그려놔서(히스토리 추적이 안 되게 막 그려서…) 귀챠니즘으로 인해 그림을 수정하지 않았습니다.<br>이 점 참고하셔서 보시길 바랍니다!</p><a id="more"></a><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p><img src="/images/jvm-gc-basic/optimizing-java.jpeg" alt=""><br>이 글은 이일웅 님께서 번역하신 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14796595" rel="external nofollow noopener noreferrer" target="_blank">자바 최적화</a>란 책을 읽던 도중 공부한 내용을 정리한 글입니다.<br>절대 해당 책의 홍보는 아니며 좋은 책을 써준 사람과 번역해주신 분께 진심으로 감사하는 마음에 썼습니다. </p><p>자바는 C언어와 달리 프로그래머가 일일이 쓰지 않는 메모리(가비지)를 회수할 필요가 없게 끔 가비지 컬렉터가 알아서 열일한다.<br>자바의 모든 가비지 컬렉션에는 Stop the World(어플리케이션 스레드를 모두 멈추기 때문에 어플리케이션이 멈추게 된다.)가 발생하고 GC 쓰레드만 열일하게 된다.<br><img src="/images/jvm-gc-basic/stop-the-world.png" alt="죠죠의 기묘한 모험이 떠오르는 건 왜일까... 출처: https://www.youtube.com/watch?v=_cNXjmuhCCc"><br>저수준 세부를 일일이 신경쓰지 않는 대가로 저수준 제어권을 포기한다는 사상이 자바의 핵심이다.</p><blockquote><p>자바는 블루 컬러(주로 생산직에 종사하는 육체 노동자) 언어입니다.<br>  박사 학위 논문 주제가 아니라 일을 하려고 만든 언어죠.<br>  — 제임스 고슬링(자바의 아버지) —</p></blockquote><p>즉, 일일이 메모리 해제하는 걸 ‘박사 학위 논문 주제’ 급의 어려운 일이라고 자바에서 여기는 것이다.<br>이런 어려운 일은 우리가 할테니 너희는 일을 해라!(비즈니스 로직이나 짜라!) 이런 뉘앙스 같다.</p><p>GC는 아래 두 가지 원칙을 준수해야한다. (프로그래머가 일일이 메모리 해제하다간 이런 유형의 휴먼 에러가 발생한다는 걸 보여준다.)</p><ul><li>반드시 모든 가비지(쓰지 않는 메모리)를 수집(free)해야한다.<br>메모리만 엄~청 빵빵하다면 가비지가 많더라도 굳이 메모리 해제할 필요가 없다.<br>사실 GC도 메모리가 부족할 때만 수행한다.</li><li>살아있는 객체(접근 가능한 객체)는 절대로 수집해선 안 된다.<br>C언어에서는 살아있는 객체(접근 가능한 객체)를 해제하면 Dangling pointer가 만들어지고, 어플리케이션이 뻗거나 해당 메모리에 다른 데이터가 할당돼서 해당 데이터를 더럽히는 등의 버그가 발생하게 된다.<br>자바에서는 살아있는 객체를 수집해가면 나중에 참조하는 쪽에서 NPE(NullPointerException) 등등이 발생할 가능성이 높다.</li></ul><h2 id="Mark-and-Sweep-Algorithm"><a href="#Mark-and-Sweep-Algorithm" class="headerlink" title="Mark and Sweep Algorithm"></a>Mark and Sweep Algorithm</h2><p>자바의 GC 알고리듬의 기본은 Mark(살아있는 객체를 표시) and Sweep(쓸어담기) 알고리듬이다.</p><p><img src="/images/jvm-gc-basic/mark-and-sweep-01.png" alt="GC 루트(스택 프레임, 전역 객체 등등과 같이 메모리 풀 외부에서 내부를 가리키는 포인터)로부터 살아있는 객체(접근 가능한 객체)를 찾는다."><br><img src="/images/jvm-gc-basic/mark-and-sweep-02.png" alt="살아있는 객체를 찾으면 mark bit를 true(혹은 1)로 세팅한다."><br><img src="/images/jvm-gc-basic/mark-and-sweep-03.png" alt="모든 객체에 대해 마크가 끝났으면 이제 mark bit가 false(혹은 0)인 객체를 찾는다."><br><img src="/images/jvm-gc-basic/mark-and-sweep-04.png" alt="mark bit가 false(혹은 0)인 객체는 죽은 객체(접근 불가능한 객체)이므로 가비지 컬렉터가 수거해간다."></p><h2 id="Weak-Generational-가설"><a href="#Weak-Generational-가설" class="headerlink" title="Weak Generational 가설"></a>Weak Generational 가설</h2><blockquote><p>JVM 및 유사 소프트웨어에서 객체 수명은 이원적 분포 양상을 보인다.<br>대부분의 객체는 아주 짧은 시간만 살아있지만, 나머지 객체는 기대 수명이 훨씬 길다.</p></blockquote><p>이 법칙은 사람들이 실제 실험과 경험을 토대로 얻어냈다.<br>따라서 GC의 대상인 힙은 아래 두 가지가 핵심이라는 결론이 나왔다.</p><ul><li>젊은 객체를 빠르게 수집할 수 있도록 설계해야한다.</li><li>늙은 객체와 단명 객체를 떼어놓는 게 가장 좋다.</li></ul><p>Hotspot VM은 Weak Generational 가설을 활용해 아래와 같은 규칙을 만들었다.</p><ul><li>객체마다 generational count(객체가 지금까지 무사통과한 가비지 컬렉션 횟수)를 센다.</li><li>새로운 객체는 Young Generation이라는 공간에 생성된다.</li><li>장수했다고 할 정도로 충분히 오래 살아남은 객체들은 별도의 메모리 영역(Old Generation 또는 Tenured Generation)에 보관된다.</li></ul><p>또한 Weak Generational 가설 중에 <strong>‘늙은 객체가 젊은 객체를 참조할 일은 거의 없다.’</strong>는 내용도 있는데 아예 없는 건 아니므로<br>Hotspot VM에서는 카드 테이블(JVM이 관리하는 바이트 배열로 각 요소는 Old Generation 공간의 512 바이트 영역을 가리킨다.)이라는 자료구조에 늙은 객체가 젊은 객체를 참조하는 정보를 기록한다.<br>따라서 Young Generation의 GC가 수행될 때 늙은 객체가 젊은 객체를 참조하는지도 확인해봐야한다.<br>하지만 이 때는 늙은 객체를 전부 뒤져보는 게 아니라 카드 테이블만 뒤져보면 돼서 GC의 수행 속도를 높여준다.</p><p><img src="/images/jvm-gc-basic/c-01.png" alt="또한 메모리의 raw address를 가지고 데이터에 접근(역참조) 가능한 C언어 같은 언어는 이렇게 이분법적으로 메모리 영역을 나눈 구조와 맞지 않는다."><br><img src="/images/jvm-gc-basic/c-02.png" alt="Young Generation에서 Old Generation으로 이동한 데이터는 메모리의 raw address도 바뀔텐데, 해당 raw address로 역참조를 했을 때 메모리 재할당으로 인해 다른 값이 튀어나올 가능성이 높기 때문이다."><br>다행히 자바는 메모리의 raw address를 사용하지도 않고, offset 연산자(. 연산자)만으로 필드나 메서드에 액세스 할 수 있기 때문에 이런 문제로부터 자유롭다.</p><h2 id="Young-Generation"><a href="#Young-Generation" class="headerlink" title="Young Generation"></a>Young Generation</h2><p>Weak Generational 가설에 따라 단명하는 젊은 객체들만 모아놓은 공간이다.<br>대부분의 객체가 Young Generation에서 사망하시고, 새로 생성된 객체가 할당되기 때문에 GC가 자주 일어나는 영역이다.<br>GC가 일어나는 동안 Stop the World가 발생하는데 이 빈도가 매우 잦기 때문에 Young Generation의 GC는 수행 시간이 짧아야한다.<br>수행 시간이 짧으려면 수거해가는 객체의 수를 줄이면 되고, 객체의 수를 줄이려면 영역의 사이즈를 적당히 줄이면 된다.<br>수행 시간이 짧은 GC이기 때문에 Minor GC라고 부르는 게 아닐까?</p><p>Young Generation 사이즈를 지정하는 JVM flag는 -XX:NewSize와 -XX:MaxNewSize이며<br>-XX:NewRatio 속성을 통해 Old Generation 사이즈와 Young Generation 사이즈의 비율을 정할 수 있다.<br>예를 들어 -XX:NewRatio=3으로 지정하면 1:3=Young:Old 라고 보면 된다.<br>(Young은 힙 메모리의 1/4를 먹고, Old는 힙 메모리의 3/4를 먹게 되는 것이다.)  </p><blockquote><p>The parameters NewSize and MaxNewSize bound the young generation size from below and above.<br>Setting these to the same value fixes the young generation,<br>just as setting -Xms and -Xmx to the same value fixes the total heap size.<br>This is useful for tuning the young generation at a finer granularity than the integral multiples allowed by NewRatio.<br><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html</a></p></blockquote><p>-XX:NewRatio 파라미터보다는 -XX:NewSize와 -XX:MaxNewSize의 사이즈를 동일하게 설정하는 게 튜닝하는데 더 좋다고 한다.<br>아마 동일하게 설정하는 이유는 해당 영역의 사이즈가 동적으로 줄어들고 늘어나게 되면, GC에도 영향을 미치고 기타 Ratio 관련 설정을 재계산해야되기 때문에 성능에 영향을 미치지 않기 때문 아닐까…?</p><p>또한 Young Generation의 GC는 자주 일어나기 때문에 수행 시간이 매우 짧아야하니 적어도 Old Generation의 사이즈보다 적게 할당하는 게 일반적이라고 한다.<br>다만 객체의 수명이 긴 객체들이 많거나 새로운 객체의 할당이 별로 없는 객체의 경우는 Young Generation의 사이즈를 좀 더 과감하게 줄이는 등 케이스 바이 케이스로 사이즈를 정해야할 것 같다.<br>이 모든 결정은 추측이 아닌 모니터링을 통해 할당 비율이라던지 기타 등등의 데이터들을 수치화해서 정확한 데이터 기반으로 의사 결정을 내려야할 것이다. <del>(말이 쉽지 ㅠㅠ 어떻게 하는지도 모른다…)</del></p><h3 id="Eden-Space"><a href="#Eden-Space" class="headerlink" title="Eden Space"></a>Eden Space</h3><p>Young Generation의 일부분이다.<br><img src="/images/jvm-gc-basic/eden-space-01.png" alt="새롭게 생성된 객체의 용량이 Eden Space의 용량보다 큰 경우를 제외하고는 Eden 영역에 할당된다."><br><img src="/images/jvm-gc-basic/eden-space-02.png" alt="그러다가 새롭게 할당할 객체의 메모리 확보를 하지 못한 경우, 즉 Eden 영역이 꽉 찬 경우에 Minor GC를 수행하게 된다."><br><img src="/images/jvm-gc-basic/eden-space-03.png" alt="이 때 GC를 수행하게 되면 메모리 단편화가 생기게 되고 이로 인해 객체를 할당할 전체적인 용량은 확보됐지만 연속된 메모리 공간이 없게 된다."><br>OS 레벨에서는 연속된 메모리 공간에 할당하지 않고 쪼개서 할당해도 되긴 하지만 할당하는 데도 오랜 시간이 걸리고, 데이터를 불러올 때도 순차적인 접근이 아니기 때문에 오래 걸리게 된다.<br>또한 JVM의 메모리 할당은 <a href="#알아두면-좋을-상식">알아두면 좋을 상식</a>에도 나오다시피 bump-the-pointer라는 기술을 써서 저렇게 중간에 메모리를 할당하는 일은 없다.<br><img src="/images/jvm-gc-basic/eden-space-04.png" alt="아니면 GC 이후에 메모리 Compaction을 수행해야하기 때문에 오버헤드가 발생할 수 밖에 없다.">  </p><h3 id="Survivor-Space"><a href="#Survivor-Space" class="headerlink" title="Survivor Space"></a>Survivor Space</h3><p>위에서 언급한 Eden 영역에서 GC로 인해 생기는 오버헤드를 줄이고자 생긴 영역이다.<br>이 영역 또한 Young Generaion의 일부이다.<br>Survivor 영역은 동일한 사이즈의 두 개의 영역으로 구분되는데 각각의 이름은 from과 to이다.<br>(VisualVM 같은 모니터링 툴에는 S0, S1으로 표시되곤 한다.)<br><img src="/images/jvm-gc-basic/survivor-space-01.png" alt="Eden 영역에서 생존한 객체들이 Survivor 영역의 연속된 메모리 공간으로 넘어오게 되고"><br><img src="/images/jvm-gc-basic/survivor-space-02.png" alt="Eden 영역은 싹 비우게 됨으로써 Eden 영역의 제일 처음부터 할당하면 되므로 Eden 영역의 메모리 단편화 문제를 해결했다.">  </p><p>또한 -XX:SurvivorRatio 속성을 통해 Eden Space 사이즈와 Survivor Generation 사이즈의 비율을 정할 수 있다.<br>예를 들어 -XX:SurvivorRatio=6으로 지정하면 1:6=Survivor:Eden 라고 보면 된다.<br>(Suivovr는 Young Generation의 1/7를 먹고, Eden은 Young Generation의 6/7를 먹게 되는 것이다.)<br>즉, 두 Survivor 영역의 합보다 Eden 영역의 메모리가 더 크다.<br>(생존해서 Survivor 영역에 존재하는 객체보다 새롭게 생성돼서 Eden 영역에 할당되는 객체가 훨씬 많으므로…)</p><blockquote><p>You can use the parameter SurvivorRatio can be used to tune the size of the survivor spaces, but this is often not important for performance.<br>  <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html</a></p></blockquote><p>퍼포먼스에 영향을 주는 경우는 드물다고 적혀있지 않으니 굳이 쓸 필요는 없을 것 같다.</p><h4 id="Survivor-Space는-왜-2개일까"><a href="#Survivor-Space는-왜-2개일까" class="headerlink" title="Survivor Space는 왜 2개일까?"></a>Survivor Space는 왜 2개일까?</h4><p><img src="/images/jvm-gc-basic/survivor-space-03.png" alt="그 이유는 Minor GC의 대상이 Eden에만 국한되는 게 아니라 Survivor 영역까지 Minor GC를 하기 때문이다."><br><img src="/images/jvm-gc-basic/survivor-space-04.png" alt="Survivor 영역을 Minor GC를 수행하면 어떻게 될까? Eden 영역만 존재할 때와 마찬가지로 Survivor 영역에도 메모리 단편화가 존재하게 된다.">  </p><p><a href="#알아두면-좋을-상식">알아두면 좋을 상식</a>에도 나오다시피 bump-the-pointer라는 기술을 써서 중간에 빈 공간이 있더라도 해당 공간에 할당하지 않는다.<br>그럼 Survivor Space의 단편화를 없애려면 어떻게 하면 될까?<br><img src="/images/jvm-gc-basic/survivor-space-05.png" alt="Eden 영역에서 Survivor 영역을 만든 것과 같이 새로운 영역을 추가하면 된다!"><br>따라서 새롭게 영역을 추가하다보니 Survivor Space가 두 개가 된 거다.</p><h3 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h3><p>그럼 이제 Young Generation에서 일어나는 Minor GC에 대해서 알아보자.<br>(물론 JVM 플래그를 어떻게 주느냐에 따라서 Minor GC의 알고리듬이 달라질 수 있고, 여기서 설명하는 Minor GC의 알고리듬은 아주 간단하고 기본적인 수준에서 설명하고 있다.)</p><p><img src="/images/jvm-gc-basic/minor-gc-01.png" alt="새롭게 생성된 객체는 전부 Eden Space에 할당된다. 이 때 객체의 generational count는 0이다."><br><img src="/images/jvm-gc-basic/minor-gc-02.png" alt="새롭게 생성된 객체를 또 할당하려는데 Eden Space에 할당할 공간이 없으면 Minor GC를 수행하게 된다. 이제부터 Stop the World의 시작이다."><br><img src="/images/jvm-gc-basic/minor-gc-03.png" alt="Eden 영역에 할당된 객체를 순회하면서 GC 루트로부터 접근 가능한 객체만 mark를 한다."><br><img src="/images/jvm-gc-basic/minor-gc-04.png" alt="생존한 모든 객체(mark 당한 객체)는 Survivor Space로 복사한다."><br><img src="/images/jvm-gc-basic/minor-gc-05.png" alt="GC로부터 살아남은 객체는 이제 generational count가 1로 증가한다. (이렇게 generational count를 1씩 늘리는 프로세스를 aging이라고 부른다... 나이를 먹어가는 ㅠㅠ)"><br><img src="/images/jvm-gc-basic/minor-gc-06.png" alt="Eden Space를 비운다. (Sweep) 이제 Stop the World가 끝났다."><br><img src="/images/jvm-gc-basic/minor-gc-07.png" alt="이제 Eden Space의 공간 확보가 됐으니 새롭게 생성된 객체를 Eden Space에 할당한다."><br><img src="/images/jvm-gc-basic/minor-gc-08.png" alt="새롭게 생성된 객체를 또 할당하려는데 Eden Space에 할당할 공간이 없으면 Minor GC를 수행하게 된다. (Stop the World의 시작)"><br><img src="/images/jvm-gc-basic/minor-gc-09.png" alt="이번에는 Eden 영역과 더불어 Survivor Space에 할당된 객체를 순회하면서 GC 루트로부터 접근 가능한 객체만 mark를 한다."><br><img src="/images/jvm-gc-basic/minor-gc-10.png" alt="Survivor Space에서 생존하지 못한(mark 당하지 않은) 모든 객체를 수거해간다. (Sweep)"><br><img src="/images/jvm-gc-basic/minor-gc-11.png" alt="이 때 Survivor Space에서 생존한 객체는 generational count가 2로 증가한다."><br><img src="/images/jvm-gc-basic/minor-gc-12.png" alt="Eden Space에서 mark된(생존한) 객체는 Survivor Space로 복사된다."><br><img src="/images/jvm-gc-basic/minor-gc-13.png" alt="이 때 Eden에서 복사되는 객체는 generational count가 1로 증가한다."><br><img src="/images/jvm-gc-basic/minor-gc-14.png" alt="이제 Eden Space를 비워준다, Sweep. (Stop the World의 끝)"><br><img src="/images/jvm-gc-basic/minor-gc-15.png" alt="이제 새로운 객체를 할당하면 된다."><br><img src="/images/jvm-gc-basic/minor-gc-16.png" alt="위 과정들을 반복하다가 또 Eden Space가 꽉 차서 GC를 수행하게 됐다고 가정하자. (Stop the world의 시작)"><br><img src="/images/jvm-gc-basic/minor-gc-17.png" alt="모든 과정을 마치고 이제 Eden Space에서 생존한 객체들을 Survivor Space로 옮기려고 했더니 Survivor Space에 연속된 메모리 공간을 확보하지 못해서 더 이상 메모리 할당이 불가능하다고 가정해보자."><br><img src="/images/jvm-gc-basic/minor-gc-18.png" alt="이 때 From Survivor Space에서 생존한 모든 객체들을 To Survivor Space의 연속된 공간에 먼저 옮기고, 그 후에 Eden Space에서 생존한 객체를 To Survivor Space의 연속된 공간에 옮긴다."><br>To Survivor Space에 Eden Space에 있는 내용보다 From Survivor Space에 있는 내용을 먼저 복사하는 이유는<br>generational count가 적은 객체(Eden Space에 거주중인 객체들)보다 generational count가 높은 객체(From Survivor Space에 거주중인 객체들)의<br>수명이 더 길 가능성이 높기 때문이다. (Weak Generational 가설에 의해…)<br>수명이 더 길 가능성이 높은 메모리를 먼저 배치하는 이유는 메모리의 단편화를 줄이기 위함이다.<br><img src="/images/jvm-gc-basic/minor-gc-19.png" alt="생존한 모든 객체를 옮겼으므로 From Survivor Space와 Eden Space를 비운다."><br><img src="/images/jvm-gc-basic/minor-gc-20.png" alt="기존 From Survivor Space의 역할을 To Survivor Space가 대신하게 됐으므로 둘의 이름을 바꾼다. (Stop the World의 끝)"><br><img src="/images/jvm-gc-basic/minor-gc-21.png" alt="GC가 끝났으므로 새로운 객체를 Eden Space에 할당한다."><br><img src="/images/jvm-gc-basic/minor-gc-22.png" alt="위 과정을 반복하다가 생존을 반복한 From Survivor Space에 있는 객체가 적당히 나이를 먹었다고 가정해보자."><br><img src="/images/jvm-gc-basic/minor-gc-23.png" alt="그럼 해당 객체는 Promotion(승진)을 한다."><br><img src="/images/jvm-gc-basic/minor-gc-24.png" alt="그러다 다시 Minor GC를 해야되게 됐다."><br><img src="/images/jvm-gc-basic/minor-gc-25.png" alt="이 경우에는 흔치 않게 Old Generation에서 Young Generation을 참조하고 있어서 GC 로직이 복잡해보이는데 간단하게 카드 테이블에 저장된 객체만 추가로 검사해서 Old Generation에서 Young Generation으로 참조 중인 객체를 쉽고 빠르게 찾을 수 있다.">  </p><h4 id="Promotion"><a href="#Promotion" class="headerlink" title="Promotion"></a>Promotion</h4><p>아래 나오는 그림에서 동그라미 안의 숫자는 객체의 나이(객체가 GC로부터 살아남은 횟수)를 의미한다.<br><img src="promotion-01.png" alt="Promotion(승진)은 Young Generation에서 적당히 나이를 먹어서(GC로 부터 살아남아서 계속해서 generational count가 늘어나서 적당한 generational count가 됐음을 의미)"><br><img src="promotion-02.png" alt="이제 Old Generation으로 갈 나이가 됐으니 Old Generation으로 이동하는 걸 의미한다."><br>generational count가 어느정도 있으려면<del>(짬밥을 어느정도 먹었으려면)</del> 당연히 Survivor Space에 있는 객체가 이동됨을 의미한다.</p><p>적당한 나이는 -XX:InitialTenuringThreshold와 -XX:MaxTenuringThreshold 파라미터로 정할 수 있다.<br>(Old 영역으로 승진하는 객체의 갯수나 비율이 많아지면 자동으로 TenuringThreshold를 늘리는 원리인지 뭔지 잘 모르겠다…)    </p><h4 id="Premature-Promotion"><a href="#Premature-Promotion" class="headerlink" title="Premature Promotion"></a>Premature Promotion</h4><p>적당한 나이(TenuringThreshold)를 먹지 않았는데 어쩔 수 없이 Old Generation으로 이동하는 행위를 premature promotion(조기 승진)이라고 부른다.<br>아래 나오는 그림에서 동그라미 안의 숫자는 객체의 나이(객체가 GC로부터 살아남은 횟수)를 의미한다.<br><img src="/images/jvm-gc-basic/premature-promotion-01.png" alt="주로 메모리 할당이 잦다보니 Survivor Space에 적당한 공간이 없어서"><br><img src="/images/jvm-gc-basic/premature-promotion-02.png" alt="나이를 먹지 않았음에도 Old Generation으로 옮겨지는 경우도 Premature Promotion이고,"><br><img src="/images/jvm-gc-basic/premature-promotion-03.png" alt="새롭게 할당될 객체의 용량이 Eden Space의 용량보다 큰 경우에는"><br><img src="/images/jvm-gc-basic/premature-promotion-04.png" alt="바로 Old Generation에 할당되게 되는데 이 경우에도 Premature Promotion이고,"><br><img src="/images/jvm-gc-basic/premature-promotion-04.png" alt="원래 같으면 Eden Space의 내용이 From Survivor Space 영역의 바로 아래 공간에 할당되면 되는데, -XX:TargetSurvivorRatio(기본값 50)에 의해 할당되지 못하는 경우가 있다."><br>-XX:TargetSurvivorRatio는 Minor GC 이후의 From Survivor Space의 사용률(%)을 제한하는 옵션이다.<br><img src="/images/jvm-gc-basic/premature-promotion-06.png" alt="적당한 나이가 되지 않은 어린 객체가 Old Generation으로 이동하는 것도 Premature Promotion이다."></p><p>이 premature promotion의 경우에는 Old Generation에 놓기 때문에 Major GC 혹은 Full GC가 일어나기 전에는 회수해가지 않으며<br>적당한 나이를 먹지 않고 와서 단명할 가능성이 높음에도 불구하고 쓸데없이 Old Generation을 차지하고 있기 때문에<br>Major GC 혹은 Full GC의 발생 빈도를 늘려 어플리케이션 전반에 영향을 미치기 때문에 적절하게 Young Generation과 관련된 사이즈를 정하는 게 중요하다.</p><h2 id="Old-Generation"><a href="#Old-Generation" class="headerlink" title="Old Generation"></a>Old Generation</h2><p>객체가 적당한 나이를 먹거나 조기 승진을 통해 넘어온 객체들이 존재하는 영역이다.<br>Tenure Generation이라고도 부른다.<br>해당 영역에 존재하는 객체들을 Young Generation에 있는 객체들보다 회수당할 가능성이 적다는 게 Weak Generational 가설이다.<br>또한 대부분의 객체가 Young Generation에서 사망하시기 때문에 Old Generation으로 오는 객체는 Young Generation에 할당되는 객체의 비율에 비해 현저히 낮다.</p><h3 id="Major-GC"><a href="#Major-GC" class="headerlink" title="Major GC"></a>Major GC</h3><p>Major GC 역시 Old Generation이 꽉 찼을 때 수행된다.<br>기본적으로 Old Generation은 메모리 할당률이 낮기 때문에 GC가 일어나는 빈도가 적다.<br>또한 대부분 Old Generation은 Young Generation 보다 용량을 크게 잡기 때문에 객체의 갯수도 많아서 GC 시간이 길다.<br>GC의 시간이 길다는 것은 그만큼 Stop the World, 어플리케이션이 멈추는 시간도 길다는 의미고 그런 의미에서 Major GC(주요한 GC)라고 이름을 붙인 게 아닐까 싶다.<br>또한 Old Generation은 Young Generation과 같이 Survivor Space가 존재하는 게 아니기 때문에 메모리 단편화도 신경써야하고 관리해야할 객체도 많다보니 훨씬 알고리듬이 복잡해진다.<br>이에 대해선 다음에 글을 써볼 예정이다.</p><h2 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h2><p>Minor GC + Major GC를 Full GC라고 부른다.<br>정확히 언제 일어나는지 모르겠지만 Old Generation GC에 대해 좀 더 자세히 공부하고 다시 작성해야겠다.</p><h2 id="Permanent-Generation"><a href="#Permanent-Generation" class="headerlink" title="Permanent Generation"></a>Permanent Generation</h2><p>JVM의 Method Area를 Hotspot VM에서 Permanent Generation(줄여서 PermGen)으로 부르기 시작하면서 다른 VM에서도 PermGen이라고 부르는 것 같다.<br>PermGen은 자바 8에서 사라졌다.<br>PermGen에는 클래스의 메타데이터, 메서드의 메타데이터, 상수풀, static 변수 등등이 들어간다.<br>PermGen은 이름만 들어보면 Permanent(영구적인)가 들어가다보니 영구히 존재하는 데이터들만 저장될 거 같은데 필수는 아니지만 GC가 수행되기도 한다.<br>GC가 수행된다는 관점에서인지 이 영역을 힙 메모리로 보는 사람도 있는데 나는 클래스의 인스턴스가 저장되는 것도 아니고<br>-Xmx, -Xms와는 별개로 사이즈가 지정되다보니 힙메모리가 아니라고 생각하고 있다.<br>-XX:PermSize와 -XX:MaxPermSize로 사이즈를 지정할 수 있고, GC를 수행하지 않는다면 용량이 부족해질 수 있고 아래와 같은 OOME가 난다.<br><code>java.lang.OutOfMemoryError: PermGen space</code><br>이러한 에러가 나는 이유는 여러가지가 있는데 대표적으로 다음과 같다.</p><ul><li>collection을 static으로 만들고 계속해서 요소를 추가하는 경우(이런 실수를 범하면 절대 안된다.)</li><li>서버를 재시작하지 않고 변경 내역을 바로바로 반영해주는 HotDeploy를 계속해서 사용하다보면 Class와 Method의 메타데이터가 계속해서 쌓이게 되는데<br>서버를 주기적으로 재시작해주지 않고, 계속해서 HotDeploy 하는 경우(실서버에서 이런 경우는 거의 없을 것이다.)</li></ul><h2 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h2><p>자바 8부터 PermGen의 역할을 Metadata 영역에서 맡기 시작했고 Native 영역으로 옮겨졌다. (즉 OS에서 관리한다는 의미)<br>PermGen 중에 일부만 Metadata 영역에서 맡기 시작했고, 상수풀이나 static 변수는 Heap 메모리로 옮겨져왔다.<br>즉, 개발자가 실수하기 쉽거나 변경이 잦은 내용들은 힙 메모리로 끌고와서 GC의 대상이 되게 하고, 정말 변경이 될 가능성이 적은 내용들만 Native 영역으로 옮겨버렸다.<br>문제는 Native 영역은 dump를 떠도 안 나와서 분석하기 힘들다는데 이럴 일은 아마 거의 없을 것이다…<br>Metadata에 대한 관리는 OS에서 함으로 믿고 맡겨도 된다고 생각하지만(개발자가 직접하는 것보다 낫지 않을까?),<br>혹시 이 쪽을 튜닝해야하거나 OOME(java.lang.OutOfMemoryError: Metadata space)가 발생한 경우에는 -XX:MetaspaceSize와 -XX:MaxMetaspaceSize 파라미터를 사용해보자.</p><h2 id="OutOfMemoryException"><a href="#OutOfMemoryException" class="headerlink" title="OutOfMemoryException"></a>OutOfMemoryException</h2><p>주로 OOME라고 줄여부르며 메모리 공간이 부족해서 나는 예외로 어플리케이션 자체가 뻗는 현상이 발생한다.<br>이 예외가 발생했을 때는 메모리 릭(메모리 결함)이 발생한 경우이고 Heap 메모리나 PermGen(Metaspace) 등등의 영역이 부족할 때 발생하는데<br>어떤 메모리가 부족한 건지, 아니면 왜 이 오류가 났는지 Stacktrace를 찍고 사망한다.</p><p>여기서는 힙 메모리가 부족해서 OOME가 발생한 경우의 원인에 대해서만 설명하겠다.<br>우선 메모리가 부족하면 가비지 컬렉터는 힙메모리의 가비지 컬렉션을 수행한다.<br>가비지 컬렉션을 수행했음에도 불구하고 새로운 객체를 더이상 할당할 수 없는 경우에 OOME가 발생하게 된다.<br>이 때는 아주 급한 경우에는 일단 -Xmx와 -Xms로 메모리를 늘리고 보고,<br><img src="/images/jvm-gc-basic/mat.png" alt="">  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError </span><br><span class="line">-XX:HeapDumpPath=<span class="variable">$&#123;PATH&#125;</span>/<span class="variable">$&#123;FILE_NAME&#125;</span>.hprof</span><br></pre></td></tr></table></figure><p>위 두가지 설정을 주고 실행해서 재발하면 힙덤프를 생성하거나 아니면<br>jmap 등등으로 살아있는 서버의 힙덤프를 떠서 어디서 메모리 릭이 발생했는지 Eclipse MAT 등등으로 분석하거나</p><p><img src="/images/jvm-gc-basic/visual-vm.png" alt="">  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote</span><br><span class="line">-Dcom.sun.management.jmxremote.port=<span class="variable">$&#123;JMX_PORT&#125;</span></span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span></span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span></span><br><span class="line">-Dcom.sun.management.jmxremote.rmi.port=<span class="variable">$&#123;RMI_PORT&#125;</span></span><br><span class="line">-Djava.rmi.server.hostname=<span class="variable">$&#123;HOST_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>위 설정 등등을 줘서 VisualVM으로 서버에 실제로 떠있는 어플리케이션 등등을 모니터링하는 방법이 있다.</p><h2 id="알아두면-좋을-상식"><a href="#알아두면-좋을-상식" class="headerlink" title="알아두면 좋을 상식"></a>알아두면 좋을 상식</h2><ul><li>Hotspot VM의 GC는 Arena라는 메모리 영역에서 작동한다.</li><li>Hotspot VM은 시작 시 메모리를 유저 공간에 할당/관리한다.<br>따라서 힙 메모리를 관리할 때 시스템 콜을 하지 않으므로 커널 공간으로 컨텍스트 스위칭을 하지 않아서 성능 향상에 도움이 된다.</li><li>Hotspot VM은 할당된 메모리 가장 마지막의 다음 영역을 가리켜 연속된 빈 공간에 효율적으로 빠르게 할당하는 bump-the-pointer라는 기술을 사용했다.</li><li>Hotspot VM은 멀티 스레드 환경에서 객체를 할당할 때 스레드 간의 경합 등등의 문제를 줄이고자 TLAB(Thread Local Allocation Buffer)를 사용했다.<br>Eden Space를 여러 버퍼로 나누어 각 어플리케이션 스레드에게 할당함으로써 자기 자신이 사용해야 할 버퍼를 바로 찾게되고, 리소스를 공유해서 생기는 문제를 없애버렸다.<br>만약 본인에게 할당된 TLAB가 부족할 경우에는 크기를 동적으로 조정한다.</li></ul><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>해당 글을 읽고 <a href="/2019/05/11/jvm-gc-advanced/">Garbage Collection Advanced</a> 편을 읽어보시면 GC에 대해 더 깊게 이해하실 수 있을 겁니다 :)</p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://d2.naver.com/helloworld/1329" rel="external nofollow noopener noreferrer" target="_blank">Naver D2 - Java Garbage Collection</a>  </li><li><a href="https://d2.naver.com/helloworld/1230" rel="external nofollow noopener noreferrer" target="_blank">Naver D2 - JVM Internal</a>  </li><li><a href="https://www.youtube.com/watch?v=DoJr5QQYsl8" rel="external nofollow noopener noreferrer" target="_blank">The JVM and Java Garbage Collection - OLL Live (Recorded Webcast Event)</a>  </li><li><a href="https://starplatina.tistory.com/entry/JDK8%EC%97%90%EC%84%A0-PermGen%EC%9D%B4-%EC%99%84%EC%A0%84%ED%9E%88-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B3%A0-Metaspace%EA%B0%80-%EC%9D%B4%EB%A5%BC-%EB%8C%80%EC%8B%A0-%ED%95%A8" rel="external nofollow noopener noreferrer" target="_blank">JDK8에선 PermGen이 완전히 사라지고 Metaspace가 이를 대신 함.</a>  </li><li><a href="https://brunch.co.kr/@heracul/1" rel="external nofollow noopener noreferrer" target="_blank">JDK8 적용 후, 심각한 성능저하가 발생한다면?</a></li><li><a href="https://yckwon2nd.blogspot.com/2015/03/java8-permanent.html" rel="external nofollow noopener noreferrer" target="_blank">JAVA8 Permanent 영역은 어디로 가는가</a>  </li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/memleaks002.html" rel="external nofollow noopener noreferrer" target="_blank">Understand the OutOfMemoryError Exception - Oracle Docs</a>  </li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html" rel="external nofollow noopener noreferrer" target="_blank">Sizing the Generations - Oracle Docs</a>  </li><li><a href="https://plumbr.io/blog/garbage-collection/minor-gc-vs-major-gc-vs-full-gc" rel="external nofollow noopener noreferrer" target="_blank">Minor GC vs Major GC vs Full GC</a>  </li><li><a href="https://blog.codecentric.de/en/2012/08/useful-jvm-flags-part-5-young-generation-garbage-collection/" rel="external nofollow noopener noreferrer" target="_blank">Useful JVM Flags – Part 5 (Young Generation Garbage Collection)</a></li><li><a href="http://www.herongyang.com/Java-GC/Serial-TargetSurvivorRatio-Second-Tenuring-Condition.html" rel="external nofollow noopener noreferrer" target="_blank">“-XX:TargetSurvivorRatio” - Second Tenuring Condition</a>  </li></ul><p>그 외 더 많은 거 같은데 기억이 잘 나지 않는다…</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(삽질기) SSH 터널링을 통해 원격지에 존재하는 도커 컨테이너 안의 JMX 모니터링하기</title>
      <link href="/2019/05/05/jmx-monitoring-inside-docker-container-over-ssh-tunneling/"/>
      <url>/2019/05/05/jmx-monitoring-inside-docker-container-over-ssh-tunneling/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/thumb.png" alt="네가 알던 로컬호스트가 아냐! (로컬호스트처럼 보이지만 실제론 원격지에 있는 서버에 붙었음을 의미)"></p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>JMX를 모니터링 하려면 <a href="https://visualvm.github.io/" rel="external nofollow noopener noreferrer" target="_blank">VisualVM</a>이나 JDK에 기본적으로 내장돼있는 <a href="http://openjdk.java.net/tools/svc/jconsole/" rel="external nofollow noopener noreferrer" target="_blank">JConsole</a>을 사용해야한다.</p><h2 id="로컬에서-JMX-모니터링하기"><a href="#로컬에서-JMX-모니터링하기" class="headerlink" title="로컬에서 JMX 모니터링하기"></a>로컬에서 JMX 모니터링하기</h2><p>우선 로컬에 어플리케이션을 띄우고 JMX 모니터링하기란 참 쉽다.<br>우선 자바 어플리케이션을 띄워보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar air.jar</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="01.png" alt="그리고 모니터링 툴을 보면 바로 해당 어플리케이션이 잡혀있다."></p><h2 id="도커-컨테이너-안의-JMX-모니터링-하기"><a href="#도커-컨테이너-안의-JMX-모니터링-하기" class="headerlink" title="도커 컨테이너 안의 JMX 모니터링 하기"></a>도커 컨테이너 안의 JMX 모니터링 하기</h2><p>우선 도커 이미지 파일부터 만들어야한다.  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jdk-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY build/libs/air.jar .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD (java \</span></span><br><span class="line"><span class="bash">          -Dcom.sun.management.jmxremote \</span></span><br><span class="line"><span class="bash">          -Dcom.sun.management.jmxremote.port=9090 \</span></span><br><span class="line"><span class="bash">          -Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span> \</span></span><br><span class="line"><span class="bash">          -Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span> \</span></span><br><span class="line"><span class="bash">          -Dcom.sun.management.jmxremote.rmi.port=9090 \</span></span><br><span class="line"><span class="bash">          -Djava.rmi.server.hostname=localhost \</span></span><br><span class="line"><span class="bash">          -jar air.jar)</span></span><br></pre></td></tr></table></figure><p>jmxremote.port와 jmxremote.rmi.port를 달리 해도 되는데 그럼 docker container의 port 2개를 host os port 2개랑 바인딩해야한다.<br>그냥 둘을 하나로 통일하면 하나만 바인딩하면 되기 때문에 굳이 두 개로 해야할 필요성을 느끼진 못했다.<br>java.rmi.server.hostname에 로컬의 사설 IP(private ip)를 넣어도 되는데 굳이 귀찮게 그렇게 할 필요성도 느끼지 못했다.<br>또한 SSH Tunneling을 거치게 됐을 때 서버의 사설 IP를 적었을 때는 접속이 불가능했으므로 <strong>무조건 localhost라고 적어주자.</strong> </p><p>해당 이미지를 빌드하고 이제 이미지를 container로 띄워보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JMX를 모니터링 하는 것이기 때문에 어플리케이션의 포트는 바인딩하지 않았다.</span></span><br><span class="line"><span class="comment"># JMX remote port(9090)와 다른 포트를 Host OS에 매핑하면 모니터링이 불가능하다.</span></span><br><span class="line"><span class="comment"># 9091:9090 이렇게 하면 못 붙는다 무조건 9090:9090(jmx remote port를 다르게 했다면 해당 포트를...)을 바인딩 해야한다.</span></span><br><span class="line"><span class="comment"># 혹시 jmx remote port와 jmx remote rmi port를 다르게 했다면 두 포트를 모두 바인딩 시켜줘야한다.</span></span><br><span class="line"><span class="comment"># jmx remote port가 9090이고 jmx remote rmi port가 9091이라면 -p 9090:9090 -p 9091:9091 이렇게 해줘야한다.</span></span><br><span class="line">docker run -p 9090:9090 air</span><br></pre></td></tr></table></figure><p>Host OS에 자바 어플리케이션이 뜬 게 아니라 컨테이너 안에서 뜬 거고, HostOS는 JMX remort port만 바인딩 된 거기 때문에 모니터링 툴을 보면 바로 잡혀있지 않다.<br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/02.png" alt="좌측 상단의 해당 버튼을 클릭해주자."><br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/03.png" alt="localhost와 jmx remote port를 입력해주고 적당히 보기 쉬운 이름으로 Display name에 채워주고 스크린샷을 따라서 작성한 후에 OK 버튼을 눌러주자."><br>만약 jmx remote port와 jmx remote rmi port를 다르게 했더라도 입력하는 포트는 jmx remote port를 입력해줘야한다.<br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/04.png" alt="성공적으로 불러와졌다."><br>아쉽지만 도커 컨테이너로 띄우게 되면 쓰레드 덤프는 떠지지만 힙 덤프는 안 떠진다.<br><strong>혹시 도커 컨테이너로 띄웠을 때도 힙 덤프를 뜨게 하려면 어떻게 해야하는지 댓글에 남겨주시면 정말 감사하겠습니다.</strong></p><h2 id="SSH-Tunneling을-통해-원격지의-JMX-모니터링하기"><a href="#SSH-Tunneling을-통해-원격지의-JMX-모니터링하기" class="headerlink" title="SSH Tunneling을 통해 원격지의 JMX 모니터링하기"></a>SSH Tunneling을 통해 원격지의 JMX 모니터링하기</h2><p>서버를 퍼블릭 존에 두는 건 매우 위험하다. (크래커가 직접 SSH로 붙을 가능성이 존재하거나 각종 공격에 직접적으로 노출되기 때문에…)<br>따라서 프라이빗 존에 둬야하는데 VPN을 쓸 경제적 여력이 안 되는 가난한 환경이나 VPN을 적용하지 않은 환경에서는 매우 귀찮아진다.<br><del>(우리 회사가 가난하다는 게 아니다.)</del><br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/aws-bastion-host.png" alt="따라서 퍼블릭 존에 Bastion Host를 두고 해당 Host를 경유해 프라이빗 존에 있는 서버에 접근하게 된다."><br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/aws-ssh-local-port-forwading.png" alt="이런 환경에서는 Bastion Host를 거쳐 SSH Tunneling의 일종인 Local Port Forwading을 해야한다."><br>기본적인 명령어는 위 사진에서 보는 바와 같고 명령어의 예시를 들어보겠다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JMX remote port(9090)와 다른 포트를 Localhost에 매핑하면 모니터링이 불가능하다.</span></span><br><span class="line"><span class="comment"># 9091:$&#123;application_server_ip&#125;:9090 이렇게 하면 못 붙는다.</span></span><br><span class="line"><span class="comment"># 무조건 9090:$&#123;application_server_ip&#125;:9090(jmx remote port를 다르게 했다면 해당 포트를...)을 바인딩 해야한다.</span></span><br><span class="line">ssh -N -L 9090:<span class="variable">$&#123;application_server_ip&#125;</span>:9090 -i ~/.ssh/key.pem ec2-user@&#123;bastion_host_ip&#125;</span><br></pre></td></tr></table></figure><p>이번에도 역시 Host OS에 자바 어플리케이션이 뜬 게 아니라 원격지의 도커 컨테이너 안에서 뜬 거고, Localhost에는 JMX remort port만 바인딩 된 거기 때문에 모니터링 툴을 보면 바로 잡혀있지 않다.<br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/02.png" alt="좌측 상단의 해당 버튼을 클릭해주자."><br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/05.png" alt="localhost와 jmx remote port를 입력해주고 적당히 보기 쉬운 이름으로 Display name에 채워주고 스크린샷을 따라서 작성한 후에 OK 버튼을 눌러주자."><br><img src="/images/jmx-monitoring-inside-docker-container-over-ssh-tunneling/06.png" alt="정상적으로 접속됐다."></p><p>JMX remote port(9090)와 다른 포트를 매핑하는 바람에 몇 시간을 삽질했는지 모르겠다…<br><strong>혹시 이거보다 더 간단하게 연결하는 방법이 있다면 댓글로 남겨주시면 정말 감사하겠습니다.</strong></p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://stackoverflow.com/questions/1609961/visualvm-over-ssh" rel="external nofollow noopener noreferrer" target="_blank">VisualVM over ssh</a>  </li><li><a href="https://www.popit.kr/docker-jmx-profiling-tip/" rel="external nofollow noopener noreferrer" target="_blank">Docker 안에 숨어 있는 Web application JMX profiling Tip</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 삽질 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JMX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Troubleshooting) Hibernate MultipleBagFetchException 정복하기</title>
      <link href="/2019/05/01/hibernate-multiple-bag-fetch-exception/"/>
      <url>/2019/05/01/hibernate-multiple-bag-fetch-exception/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/hibernate-multiple-bag-fetch-exception/thumb.jpg" alt="이미지 출처: https://pgr21.com/pb/pb.php?id=humor&amp;no=166185"></p><h2 id="Trouble"><a href="#Trouble" class="headerlink" title="Trouble"></a>Trouble</h2><p>Spring Data JPA를 이용하다보면 종종 <code>org.hibernate.loader.MultipleBagFetchException: cannot simultaneously fetch multiple bags</code>이란 메세지를 보게 된다.<br>우선 어떤 상황에 나타나는지 한 번 살펴보자.  </p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"mother"</span>, cascade = CascadeType.ALL, fetch = FetchType.EAGER)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Daughter&gt; daughters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"mother"</span>, cascade = CascadeType.ALL, fetch = FetchType.EAGER)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Son&gt; sons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mother</span><span class="params">(<span class="keyword">final</span> Long id, <span class="keyword">final</span> List&lt;Daughter&gt; daughters, <span class="keyword">final</span> List&lt;Son&gt; sons)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(daughters == <span class="keyword">null</span>) <span class="keyword">this</span>.daughters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            daughters.forEach(daughter -&gt; daughter.setMother(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">this</span>.daughters = daughters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sons == <span class="keyword">null</span>) <span class="keyword">this</span>.sons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sons.forEach(son -&gt; son.setMother(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">this</span>.sons = sons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bearDaughters</span><span class="params">(<span class="keyword">final</span> List&lt;Daughter&gt; babyDaughters)</span> </span>&#123;</span><br><span class="line">        babyDaughters.forEach(daughter -&gt; daughter.setMother(<span class="keyword">this</span>));</span><br><span class="line">        daughters.addAll(babyDaughters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bearSons</span><span class="params">(<span class="keyword">final</span> List&lt;Son&gt; babySons)</span> </span>&#123;</span><br><span class="line">        babySons.forEach(son -&gt; son.setMother(<span class="keyword">this</span>));</span><br><span class="line">        sons.addAll(babySons);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엄마가 있고, 아들/딸들이 있는데 아들/딸들을 EAGER로 fetch해 올 때 발생한다.<br><strong>(즉, OneToMany, ManyToMany인 Bag 두 개 이상을 EAGER로 fetch할 때 발생한다.)</strong><br>EAGER로 땡겨오면 N+1 쿼리 문제가 존재하기 때문에 fetchType을 전부 LAZY로 바꾼 후 한 방 쿼리로 불러와도 문제는 재발한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MotherRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Mother</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@EntityGraph</span>(attributePaths = &#123;<span class="string">"daughters"</span>, <span class="string">"sons"</span>&#125;)</span><br><span class="line">    <span class="function">List&lt;Mother&gt; <span class="title">findAllWithChildrenBy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bag"><a href="#Bag" class="headerlink" title="Bag"></a>Bag</h2><p>우선 MultipleBagFetchException 파일을 둘러보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exception used to indicate that a query is attempting to simultaneously fetch multiple</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.hibernate.type.BagType bags&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>여러 BagType을 동시에 fetch 해 올 때 발생하는 예외라고 한다.<br>그럼 Bag이 뭘까…?  </p><blockquote><p>A generalization of the notion of a set is that of a multiset or bag, which is similar to a set but allows repeated (“equal”) values (duplicates).<br>  <a href="https://en.wikipedia.org/wiki/Set_(abstract_data_type)#Multiset" rel="external nofollow noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/Set_(abstract_data_type)#Multiset</a></p></blockquote><blockquote><p>A Bag is a java collection that stores elements without caring about the sequencing, but allow duplicate elements in the list.<br>  A bag is a random grouping of the objects in the list.<br>  <a href="https://en.wikipedia.org/wiki/Set_(abstract_data_type)#Multiset" rel="external nofollow noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/Set_(abstract_data_type)#Multiset</a></p></blockquote><blockquote><p>A <bag> is an unordered collection, which can contain duplicated elements.<br>  That means if you persist a bag with some order of elements, you cannot expect the same order retains when the collection is retrieved.<br>  There is not a “bag” concept in Java collections framework, so we just use a java.util.List corresponds to a <bag>.<br>  <a href="https://stackoverflow.com/questions/13812283/difference-between-set-and-bag-in-hibernate" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/13812283/difference-between-set-and-bag-in-hibernate</a></bag></bag></p></blockquote><p>즉, Bag(Multiset)은 Set과 같이 순서가 없고, List와 같이 중복을 허용하는 자료구조이다.<br>하지만 자바 컬렉션 프레임워크에서는 Bag이 없기 때문에 하이버네이트에서는 List를 Bag으로써 사용하고 있는 것이다.</p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>우선 두 Bag을 Set으로 바꾸면 우리가 원하는대로 한 방 쿼리로 날아간다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"mother"</span>, cascade = CascadeType.ALL)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Daughter&gt; daughters = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"mother"</span>, cascade = CascadeType.ALL)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Son&gt; sons = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mother</span><span class="params">(<span class="keyword">final</span> Long id, <span class="keyword">final</span> Set&lt;Daughter&gt; daughters, <span class="keyword">final</span> Set&lt;Son&gt; sons)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(daughters == <span class="keyword">null</span>) <span class="keyword">this</span>.daughters = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            daughters.forEach(daughter -&gt; daughter.setMother(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">this</span>.daughters = daughters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sons == <span class="keyword">null</span>) <span class="keyword">this</span>.sons = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sons.forEach(son -&gt; son.setMother(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">this</span>.sons = sons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bearDaughters</span><span class="params">(<span class="keyword">final</span> Set&lt;Daughter&gt; babyDaughters)</span> </span>&#123;</span><br><span class="line">        babyDaughters.forEach(daughter -&gt; daughter.setMother(<span class="keyword">this</span>));</span><br><span class="line">        daughters.addAll(babyDaughters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bearSons</span><span class="params">(<span class="keyword">final</span> Set&lt;Son&gt; babySons)</span> </span>&#123;</span><br><span class="line">        babySons.forEach(son -&gt; son.setMother(<span class="keyword">this</span>));</span><br><span class="line">        sons.addAll(babySons);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실무에서 급하면 딱 이 수준까지만 하면 끝이고 이제 왜 Multiple Bag을 Fetch해 올 수 없는지 알아보자.  </p><p>우선 두 Bag 중 하나만 Set으로 바꾼 후 결과를 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"mother"</span>, cascade = CascadeType.ALL)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Daughter&gt; daughters = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"mother"</span>, cascade = CascadeType.ALL)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Son&gt; sons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mother</span><span class="params">(<span class="keyword">final</span> Long id, <span class="keyword">final</span> Set&lt;Daughter&gt; daughters, <span class="keyword">final</span> List&lt;Son&gt; sons)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(daughters == <span class="keyword">null</span>) <span class="keyword">this</span>.daughters = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            daughters.forEach(daughter -&gt; daughter.setMother(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">this</span>.daughters = daughters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sons == <span class="keyword">null</span>) <span class="keyword">this</span>.sons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sons.forEach(son -&gt; son.setMother(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">this</span>.sons = sons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bearDaughters</span><span class="params">(<span class="keyword">final</span> Set&lt;Daughter&gt; babyDaughters)</span> </span>&#123;</span><br><span class="line">        babyDaughters.forEach(daughter -&gt; daughter.setMother(<span class="keyword">this</span>));</span><br><span class="line">        daughters.addAll(babyDaughters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bearSons</span><span class="params">(<span class="keyword">final</span> List&lt;Son&gt; babySons)</span> </span>&#123;</span><br><span class="line">        babySons.forEach(son -&gt; son.setMother(<span class="keyword">this</span>));</span><br><span class="line">        sons.addAll(babySons);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 MotherRepository#findAllWithChildrenBy() 메서드를 통해 호출하면 아래와 같은 결과를 볼 수 있다.<br>일단 날아간 쿼리는 아래와 같다. (혹시나 join 했을 때 자식들이 없을까봐 엄마라도 불러오려고 기본적으로 outer join을 하고 있다.)  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    mother0_.id <span class="keyword">as</span> id1_1_0_,</span><br><span class="line">    daughters1_.id <span class="keyword">as</span> id1_0_1_,</span><br><span class="line">    sons2_.id <span class="keyword">as</span> id1_2_2_,</span><br><span class="line">    daughters1_.mother_id <span class="keyword">as</span> mother_i2_0_1_,</span><br><span class="line">    daughters1_.mother_id <span class="keyword">as</span> mother_i2_0_0__,</span><br><span class="line">    daughters1_.id <span class="keyword">as</span> id1_0_0__,</span><br><span class="line">    sons2_.mother_id <span class="keyword">as</span> mother_i2_2_2_,</span><br><span class="line">    sons2_.mother_id <span class="keyword">as</span> mother_i2_2_1__,</span><br><span class="line">    sons2_.id <span class="keyword">as</span> id1_2_1__ </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    mother mother0_ </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">    daughter daughters1_ </span><br><span class="line">        <span class="keyword">on</span> mother0_.id=daughters1_.mother_id </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">    son sons2_ </span><br><span class="line">        <span class="keyword">on</span> mother0_.id=sons2_.mother_id</span><br></pre></td></tr></table></figure><p><img src="/images/hibernate-multiple-bag-fetch-exception/01.png" alt="주목할 부분은 파란색으로 쳐놓은 부분이다."><br>Set으로 저장한 딸들은 중복없이 잘 불러와졌고, List(Bag)로 저장한 아들들은 중복있이 잘 불러와졌다.<br>(List라고 무조건 중복이 발생하는 건 아니다. 단일 List(Bag)만 Fetch 해오면 중복없이 잘 불러온다.)  </p><p>이 결과를 Row로 표시해보자면 다음과 같다.  </p><table><thead><tr><th>mother.id</th><th>daughter.id</th><th>son.id</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>2</td></tr><tr><td>1</td><td>1</td><td>3</td></tr><tr><td>1</td><td>2</td><td>1</td></tr><tr><td>1</td><td>2</td><td>2</td></tr><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>3</td><td>1</td></tr><tr><td>1</td><td>3</td><td>2</td></tr><tr><td>1</td><td>3</td><td>3</td></tr></tbody></table><p>만약 daughters 마저도 중복도 보장이 안 되고, 순서도 보장이 안 됐다면 어떤 기준을 가지고 Row를 매핑할 수 있을까?<br>(뭐, 물론 이 경우에는 될 수도 있겠지만 좀 더 엔터티의 관계가 복잡한 경우에는 매핑이 불가능하거나 너무 복잡해지는 거 아닐까?)<br>그렇기 때문에 Multiple Bag은 Fetch가 안 되는 게 아닐까 싶다.</p><p>실제로 List로 저장한 데이터를 하이버네이트에서는 BagType으로 취급하고 있고, Set으로 저장한 데이터는 SetType으로 취급하고 있다.<br>ListType 클래스도 있긴 한데 언제 어떻게 써야하는지는 잘 모르겠다 ㅠㅠ…</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> Troubleshooting </tag>
            
            <tag> JPA </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(삽질기) Spring Data JPA에서 Entity Manager 관련 삽질기</title>
      <link href="/2019/05/01/jpa-entity-manager-with-test/"/>
      <url>/2019/05/01/jpa-entity-manager-with-test/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jpa-entity-manager-with-test/thumb.png" alt="이미지 출처: http://bemil.chosun.com/nbrd/bbs/view.html?b_bbs_id=10044&amp;pn=0&amp;num=128739"></p><p>오랜만에 Spring Data JPA를 가지고 뭔가 뻘뻘 대보고 있었다.<br>하지만 내 의도대로 동작하지 않았다.<br>아래 코드를 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MotherTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SomeEntityRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repository.save(<span class="keyword">new</span> SomeEntity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repository.findById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>우선 테스트를 돌릴 때마다 DB를 초기화했다. (인메모리 DB인 H2를 사용했다.)<br>따라서 테스트 할 데이터를 setup 메서드를 통해 데이터를 DB에 밀어넣고 있었다.<br>그리고 테스트 케이스에서 해당 엔터티를 불러오는 간단한 코드인데 나는 select 쿼리가 날아갈 줄 알았다.<br>하지만 insert 쿼리만 날아가고, 이거 가지고 코드를 이리저리 바꿔보며 온갖 삽질을 한 것 같다.  </p><p>왜 select 쿼리가 찍히지 않을까… 한 2시간 가까이를 이거 때문에 계속 삽질하고 있었다.<br>그리고 스프링 관련 커뮤니티에 질문하려고 <code>아마 SomeEntity 엔터티가 생성되면서 ID 값이 어딘가에 저장돼서 동일한...</code>까지 딱 치고 있는데<br><strong>어딘가 저장</strong>에 딱 꽂혀서 아! 맞다! 하고 그동안 JPA를 안 쓴 지 오래돼서 까먹었구나… 하고 한참동안 너무 허무했었다.  </p><p>답은 JPA의 동작 방식에 있었다.<br>기본적으로 JPA는 select 쿼리를 DB에 날리기 전에 엔터티 매니저를 뒤짐으로써 성능을 향상시킨다.<br>바로 save 메서드 당시에 엔터티 매니저에 해당 엔터티를 저장한 것이다.<br>엔터티 매니저에 없는 다른 ID를 조회하거나 @Id 어노테이션이 붙지 않은 다른 필드를 조건에 줄 경우에는 실제로 select 쿼리가 날아갔다.</p><p>그럼 setup 메서드와 test 메서드에서 사용하는 엔터티 매니저가 동일하다는 것을 어떻게 알 수 있을까?<br>기본적으로 엔터티 매니저는 thread safe하지 않아서 thread 별로 한 개의 엔터티 매니저 생성을 권장하는 것으로 알고 있다.<br>따라서 Spring Data JPA에서도 그렇게 하지 않았을까…?  </p><p>아래 테스트 코드를 통해 내가 생각한 가설이 맞는 거 같다. (멀티 스레드 환경에서 돌려본 건 아니긴 하지만…)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MotherTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SomeEntityRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager em;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SomeEntity entity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        entity = <span class="keyword">new</span> SomeEntity();</span><br><span class="line">        </span><br><span class="line">        assertFalse(em.contains(entity));</span><br><span class="line"></span><br><span class="line">        repository.save(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(Long.valueOf(<span class="number">1L</span>), entity.getId());</span><br><span class="line">        assertTrue(em.contains(entity));</span><br><span class="line"></span><br><span class="line">        repository.findById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본에 충실해야겠다 ㅠㅠ…</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 삽질 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Troubleshooting) 생애 첫 Heap 메모리 분석기 (feat. Eclipse MAT)</title>
      <link href="/2019/04/28/heap-memory-analytics-with-eclipse-mat/"/>
      <url>/2019/04/28/heap-memory-analytics-with-eclipse-mat/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/heap-memory-analytics-with-eclipse-mat/thumb.png" alt=""></p><p>어느 날 서비스가 갑자기 다운되는 사례가 발생했다.<br>다행히 서버를 이중화시켜놓아서 장애가 발생하진 않았지만 그래도 왜 다운된 건지 원인 분석을 해야했다.<br>나의 실수로 인해 WAS 로그는 제대로 남겨져있지 않았고, CTO 님께서 힙 덤프 같은 거라도 떠져있나 보라고 하셔서 지푸라기라도 잪는 심정으로 기대를 했는데 희망을 저버리지 않았다. </p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError \</span><br><span class="line">-XX:HeapDumpPath=./jvm.hprof</span><br></pre></td></tr></table></figure><p>위 옵션으로 인해 OOME(Out of Memory Exception) 발생 시 힙 덤프를 뜨게 해놓았는데 다행히 힙 덤프가 존재했다.  </p><p>여기서 힙 덤프는 힙 메모리의 내용을 그대로 떠놓은 파일이다.<br>따라서 힙 메모리에 어떤 객체들로 가득 채워져있었는지 분석할 수 있게 되었다.<br><strong>여기서 흥분해서 서버에서 vi 등등을 이용해 힙 덤프 파일을 열면 안 된다. (용량이 큰 로그 및 다른 파일도 물론 서버에서 절대 열면 안 된다.)</strong><br>여는 순간 힙 메모리 사이즈만큼 <strong>서버의 메모리를 사용하게 돼서 서버가 다운</strong>될 수도 있다.<br>무조건 scp 등등의 명령어를 통해 로컬로 복사한 후에 열어보는 습관을 가지자.</p><h2 id="Eclipse-Memory-Analyzer-MAT"><a href="#Eclipse-Memory-Analyzer-MAT" class="headerlink" title="Eclipse Memory Analyzer (MAT)"></a><a href="https://www.eclipse.org/mat/" rel="external nofollow noopener noreferrer" target="_blank">Eclipse Memory Analyzer (MAT)</a></h2><p><a href="https://spoqa.github.io/2012/02/06/eclipse-mat.html" rel="external nofollow noopener noreferrer" target="_blank">Eclipse Memory Analyzer 소개</a>와 <a href="https://d2.naver.com/helloworld/1326256" rel="external nofollow noopener noreferrer" target="_blank">하나의 메모리 누수를 잡기까지</a>에서 힙 덤프를 분석하는데 Eclipse MAT를 사용했다길래 나도 한 번 사용해보았다.<br><a href="https://www.eclipse.org/mat/downloads.php" rel="external nofollow noopener noreferrer" target="_blank">다운로드</a> 페이지에서 OS에 맞는 어플리케이션을 받으면 되는데 나는 MacOSX 버전을 다운받았다.  </p><p><img src="/images/heap-memory-analytics-with-eclipse-mat/01.png" alt="식별되지 않은 개발자가 만든 앱이라고 실행되지 않는다... 역시 보안에 빡센 애플"><br><img src="/images/heap-memory-analytics-with-eclipse-mat/02.png" alt="Security &amp; Privacy의 General 탭에서 빨간색 표시친 곳에서 Open Anyway를 누르자."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/03.png" alt="그럼 MAT를 열 수 있게 된다."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/04.png" alt="함정카드 발동... 아직도 열 수가 없다."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/05.png" alt="MAT를 Applications 디렉토리로 옮긴 후에 열어보자."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/06.png" alt="드디어 정상적으로 열렸다 ㅠㅠ... 이제 빨간색 표시친 Open a Heap Dump를 통해 로컬로 복사한 힙 덤프 파일을 열어보자."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/07.png" alt="Heap Dump 파싱이 끝난 후 Leak Suspects Report를 체크 후 finish를 누르자."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/08.png" alt="Leak Suspects Report를 보니 com.mysql.jdbc.JDBC42ResultSet 클래스의 인스턴스가 1.8GB나 존재했다.">  </p><p>일단 툴의 사용방법도 잘 몰라서 무작정 메세지를 가지고 검색해보았다.<br>우선 최대한 일반적인 메세지만 뽑아서 <code>One instance of &quot;com.mysql.jdbc.JDBC42ResultSet&quot; loaded by</code>를 통해 구글링을 하니<br><a href="https://bugs.mysql.com/bug.php?id=90240" rel="external nofollow noopener noreferrer" target="_blank">MySQL Bugs: #90240: Possible memory leak in JDBC42PreparedStatement</a>란 글이 눈에 띄었다.<br>메모리 릭? 버그? 그럼 우리가 쓰고 있는 MySQL 관련된 무언가에서 버그가 존재한다는 것인가?란 생각이 들었다.  </p><blockquote><p>Please try with MySQL connector 5.1.45 or 5.1.44 versions and let us know if memory leak happening.</p></blockquote><p>위와 같이 답변이 달린 걸 보고 음… 역시 MySQL 버그인가 보구나… MySQL connector 버전을 올려보자~ 하고 gradle의 디펜던시를 보니 해당 버전보다도 높았다.<br>그래서 뭐지? 하고 답변을 끝까지 쭉 봤더니</p><blockquote><p>It was an application error loading too many rows in memory, nothing to do with the connector.</p></blockquote><p>어플리케이션에서 너무 많은 row를 로딩해서 생긴 문제라고 했다.<br>CTO 님께 말씀드려보니 CTO 님도 보시더니 아마도 저 문제가 맞을 거라고 하셨다.<br>그리고 우리가 저렇게 Row를 많이 불러올만한 쿼리를 쓰는 게 주문 내역 등등을 엑셀로 다운로드 받는 기능에서 날 거라고 말씀해주셨다.<br>따라서 해당 소스코드를 분석해봤는데 카운트 쿼리를 통해 사전에 너무 많은 Row를 불러오는 걸 방지하고 있었다.<br>그럼 어디서 이렇게 많은 Row를 불러오는 쿼리를 사용하지…? 도무지 이해가 가지 않았다.<br>그래서 다른 시니어 개발자 분의 도움을 받아 MAT의 간단한 사용 방법을 익혔다.  </p><h2 id="분석-및-해결"><a href="#분석-및-해결" class="headerlink" title="분석 및 해결"></a>분석 및 해결</h2><p><img src="/images/heap-memory-analytics-with-eclipse-mat/09.png" alt="Leak Suspects Report에서 Details를 클릭하자."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/10.png" alt="그럼 위와 같은 정보를 발견할 수 있는데 위 정보를 토대로 대략 120만 Row의 데이터를 불러왔다는 걸 알 수 있다."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/11.png" alt="최상위 Object를 클릭해서 List objects &gt; with outgoing references를 클릭하자."><br>incoming이면 해당 object를 참조하는 object를, outgoing이면 해당 object가 참조하고 있는 object를 포함해서 보여준다.<br>자세한 설명은 <a href="https://dzone.com/articles/eclipse-mat-incoming-outgoing-references" rel="external nofollow noopener noreferrer" target="_blank">Eclipse MAT — Incoming, Outgoing References</a>를 참고하자.  </p><p><img src="/images/heap-memory-analytics-with-eclipse-mat/12.png" alt="해당 Object에서 참조 중인 수많은 Row 데이터들을 볼 수 있다."><br><img src="/images/heap-memory-analytics-with-eclipse-mat/13.png" alt="임의의 Row를 까봤는데 metadata라는 의미심장한 필드가 보이고 그 안에 완벽하진 않지만 쿼리문이나 테이블 이름 등등의 정보를 볼 수 있다."><br>다른 Row들도 까봤더니 모두 동일한 필드 및 테이블에서 데이터를 가지고 오고 있었다.<br>이를 통해 해당 테이블의 모든 Row를 가져오는 거라고 의심했고 해당 테이블을 실제로 보니 대략 120만 Row의 데이터가 있었다.<br>실제로 소스코드도 보았더니 해당 테이블을 토대로 엑셀을 다운로드 받는 기능이 어딘가에 <del>숨겨져</del>있었고 제대로 조건문이 걸려있지 않았다.<br>또한 Nginx의 Access log를 보니 힙 덤프가 떠지기 바로 직전에 해당 API를 호출한 이력도 있었다.</p><p>결국 해당 쿼리문에 조건을 추가해서 배포함으로써 해당 이슈는 일단락 짓게 되었다.<br>어찌보면 별 거 아니고, 내가 로그를 제대로 남겼더라면 힙덤프까지 안 봤을지도 몰랐겠지만<br>내가 로그를 남기지 않는 실수로 인해 힙 덤프를 분석해볼 수 있는 값진 기회가 주어졌다. <del>(절대로 노린 건 아니다.)</del><br>앞으로 이런 일이 있으면 안 되겠지만, 이런 일을 경험해보지 않고서 더 좋은 개발자로 다가가긴 힘든 것 같다.<br>역시 소프트웨어는 개발도 중요하지만 그 후에 유지보수를 해나가는 경험 또한 매우 중요한 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Troubleshooting </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Troubleshooting) Nginx upstream에 AWS ELB DNS를 걸 때 주의사항</title>
      <link href="/2019/04/28/nginx-proxy-aws-elb/"/>
      <url>/2019/04/28/nginx-proxy-aws-elb/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/nginx-proxy-aws-elb/thumb.png" alt="ALB는 Cross-Zone Load Balancing 옵션이 무조건 활성화돼있다."><br>얼마 전에 서버를 새롭게 이전했다.<br>기존에 있던 local의 upstream server 대신에 새로운 서버로 업스트림을 걸어놨다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://elb-dns.ap-northeast-2.elb.amazonaws.com;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>LB에 바로 도메인을 붙여도 되지만 롤백을 최대한 빨리하기 위해 기존 서버에서 LB로 업스트림 걸어놓았다.</p><ol><li>만약 새로운 서버에서 문제가 생겼다고 가정  </li><li>이 때 LB에 바로 도메인을 달아놓았다면…<br>2-1. 기존의 서버로 다시 도메인 변경<br>2-2. DNS 캐시가 날아갈 때까지 유저에게 장애 발생<br>2-3. 클라이언트의 설정에 따라서 DNS 캐시가 언제 날아갈지 모르는 상황… (과연 일반 유저들이 브라우저의 DNS 캐시 지우는 방법을 알고 있을까?)</li><li>이 때 기존 서버는 내비두고 LB로 업스트림을 걸어놓았다면…<br>3-1. 기존 로컬 서버를 업스트림 서버로 변경<br>3-2. nginx -s reload<br>3-3. 수 초 이내로 원래 서버로 원복</li></ol><h2 id="Trouble"><a href="#Trouble" class="headerlink" title="Trouble"></a>Trouble</h2><p>하지만 문제는 며칠 후 발생했다.<br>ELB의 DNS로 접속하면 잘 되는데 기존 서버 도메인으로 접속하면(LB를 upstream으로 걸어놓은) 1분 가까운 시간이 흐른 후에 502 Bad Gateway가 나는 것이었다.<br>우선 급한 마음에 <code>nginx -s reload</code> 명령어를 입력했더니 다시 또 정상 동작하는 것이었다.<br>Nginx의 Access Log까지는 정상적으로 남은 걸 보니 LB를 찾지 못해서 일정 시간동안 기다리다가 502를 뱉었던 것 같았다.<br>나는 딱히 설정을 바꾼 것도 없는데… 잘 동작하니 귀신이 곡할 노릇이었다.  </p><h2 id="ELB-동작-방식"><a href="#ELB-동작-방식" class="headerlink" title="ELB 동작 방식"></a>ELB 동작 방식</h2><p><a href="https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/" rel="external nofollow noopener noreferrer" target="_blank">Best Practices in Evaluating Elastic Load Balancing</a>을 보면 다음과 같은 구문이 나온다.</p><blockquote><p>The controller will also monitor the load balancers and manage the capacity that is used to handle the client requests.<br>  The Elastic Load Balancing service will update the Domain Name System (DNS) record of the load balancer when it scales so that the new resources have their respective IP addresses registered in DNS.<br>  The DNS record that is created includes a Time-to-Live (TTL) setting of 60 seconds, with the expectation that clients will re-lookup the DNS at least every 60 seconds.<br>  컨트롤러는 로드 밸런서를 모니터링하고 클라이언트의 요청을 핸들링하는 capacity를 관리한다.<br>  Elastic Load Balancing은 스케일링할 때 로드 밸런서의 DNS 레코드를 업데이트한다. (새로운 리소스의 IP는 DNS에 등록된다.)<br>  DNS 레코드의 TTL은 60초로 세팅돼있고, 60초가 지나면 클라이언트는 다시 lookup한다.</p></blockquote><p>ELB는 트래픽에 따라서 알아서 스케일링되는 모양이다.<br>또한 TTL은 60초이다.<br>따라서 ELB의 아이피 주소는 매우 유동적이다. (늘어났다가 줄어들었다가… 혹은 LB가 다운되면 새로 생성한다던지…)</p><h2 id="Nginx-동작-방식"><a href="#Nginx-동작-방식" class="headerlink" title="Nginx 동작 방식"></a>Nginx 동작 방식</h2><p><a href="https://www.nginx.com/blog/dns-service-discovery-nginx-plus/" rel="external nofollow noopener noreferrer" target="_blank">Using DNS for Service Discovery with NGINX and NGINX Plus</a>  </p><blockquote><p>NGINX caches the DNS records until the next restart or configuration reload, ignoring the records’ TTL values.<br>  NGINX는 restart나 reload가 발생할 때까지 DNS record를 캐시하고 record의 TTL을 무시한다.</p></blockquote><p>즉, ELB의 TTL인 60초는 무시되고, 설정파일을 읽을 당시에 DNS Lookup이 진행되기 때문에 ELB Scaling이 진행된 후에는 정상 동작하리란 보장을 할 수 없다.<br>설정파일을 읽을 당시에 DNS Lookup을 통해 얻어온 LB의 IP 주소가 트래픽 감소에 의해 더 이상 유효하지 않은 IP 주소가 됐을 가능성이 높기 때문이다.  </p><h1 id="Shooting"><a href="#Shooting" class="headerlink" title="Shooting"></a>Shooting</h1><p><a href="https://www.nginx.com/blog/dns-service-discovery-nginx-plus/" rel="external nofollow noopener noreferrer" target="_blank">Using DNS for Service Discovery with NGINX and NGINX Plus</a></p><blockquote><p>When you use a variable to specify the domain name in the proxy_pass directive, NGINX re‑resolves the domain name when its TTL expires.<br>  You must include the resolver directive to explicitly specify the name server (NGINX does not refer to /etc/resolv.conf).<br>  By including the valid parameter to the resolver directive, you can tell NGINX to ignore the TTL and re‑resolve names at a specified frequency instead.<br>  proxy_pass directive의 domain name에 변수를 명시할 경우, NGINX는 domain name의 TTL이 만료됐을 때 다시 resolve한다.<br>  resolver directive에 name server를 꼭 명시해줘야한다. (NGINX는 /etc/resolv.conf 파일을 참조하지 않는다.)<br>  resolver directive에 valid parameter를 명시하면 TTL을 무시하고 valid parameter의 주기로 다시 resolve한다.</p></blockquote><p>우리가 해야할 일은 이제 다음과 같다.</p><ol><li><code>/etc/resolv.conf</code> 파일을 참조하여 resolver directive에 name server를 명시해준다.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br><span class="line"><span class="comment"># ; generated by /usr/sbin/dhclient-script</span></span><br><span class="line"><span class="comment"># search ap-northeast-2.compute.internal</span></span><br><span class="line"><span class="comment"># options timeout:2 attempts:5</span></span><br><span class="line"><span class="comment"># nameserver 10.12.0.2</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        resolver 10.12.0.2;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://elb-dns.ap-northeast-2.elb.amazonaws.com;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>resolver directive에 valid parameter에 ELB DNS의 TTL인 60보다 작은 값을 세팅한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        resolver 10.12.0.2 valid=30s;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://elb-dns.ap-northeast-2.elb.amazonaws.com;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>proxy_pass directive의 domain name에 변수를 명시한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        resolver 10.12.0.2 valid=30s;</span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$elb</span>-dns elb-dns.ap-northeast-2.elb.amazonaws.com;</span><br><span class="line">            proxy_pass http://<span class="variable">$elb</span>-dns;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>nginx -s reload</code>를 통해 다운타임 없이 설정파일을 재적용한다.</p></li></ol><h2 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h2><ul><li><a href="https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/" rel="external nofollow noopener noreferrer" target="_blank">Best Practices in Evaluating Elastic Load Balancing</a></li><li><a href="https://stackoverflow.com/questions/3821333/amazon-ec2-elastic-load-balancer-does-its-ip-ever-change" rel="external nofollow noopener noreferrer" target="_blank">Amazon EC2 Elastic Load Balancer: Does its IP ever Change?</a></li><li><a href="https://medium.com/@circlee7/nginx-proxy-pass-%EC%9D%98-aws-elb-%EC%97%B0%EA%B2%B0-%EC%84%A4%EC%A0%95-f0c4b792ef71" rel="external nofollow noopener noreferrer" target="_blank">Nginx proxy_pass 의 AWS ELB 연결 문제</a></li><li><a href="http://tech.kkung.net/blog/nginx-with-elb/" rel="external nofollow noopener noreferrer" target="_blank">Nginx를 ELB Reverse Proxy로 사용할때 주의 점</a></li><li><a href="https://serverfault.com/questions/560632/some-nginx-reverse-proxy-configs-stops-working-once-a-day" rel="external nofollow noopener noreferrer" target="_blank">Some nginx reverse proxy configs stops working once a day</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Troubleshooting </tag>
            
            <tag> ELB </tag>
            
            <tag> Nginx </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>무중단 배포란...?</title>
      <link href="/2019/04/21/non-stop-deployment/"/>
      <url>/2019/04/21/non-stop-deployment/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/non-stop-deployment/thumbs.jpg" alt=""></p><p>실제로 우리가 간단하게 서버를 배포하는 시나리오를 생각해보자.</p><ol><li>80포트(혹은 다른 포트)에 우리의 서버를 띄운다.</li><li>새롭게 배포할 내용이 있다고 하면 포트가 충돌나면 안 되기 때문에 서버를 다운시킨다.  </li><li>(옵션) 유저의 이탈을 방지하고자 공사중 이미지를 띄운다.  </li><li>80포트(혹은 다른 포트)에 새롭게 배포할 서버를 띄운다.</li></ol><a id="more"></a><p>만약 서버가 뜨는데 30초가 걸린다고 하면 최소 30+@초만큼 다운타임(유저에게 서비스가 불가능한 시간)이 발생한다.<br>현대의 어플리케이션이라면 유저에게 최상의 경험을 제공해주기위해 이런 다운타임이 없는 무중단 배포를 지원해야한다.  </p><h3 id="필요-조건"><a href="#필요-조건" class="headerlink" title="필요 조건"></a>필요 조건</h3><p><strong>두 대 이상의 서버(혹은 서버 어플리케이션을 두 개)를 서비스해야한다.</strong><br>다운타임이 발생하지 않으려면 실제 서비스 중인 서버와 새롭게 배포한 서버가 동시에 존재해야한다.<br>비용을 줄이려면 배포할 때만 새롭게 서버를 띄우고 배포가 완료된 후에 기존 서버는 죽이면 된다.</p><h3 id="Rolling-Deployment"><a href="#Rolling-Deployment" class="headerlink" title="Rolling Deployment"></a>Rolling Deployment</h3><p><img src="/images/non-stop-deployment/elb-basic.png" alt="SPOF를 피하려면 어플리케이션 서버는 물론이고 로드 밸런서도 이중화해야한다."><br>HA(High Availability)을 위해 프로덕션 환경은 2대 이상의 서버로 구성한다.<br>이런 환경에서 무중단 배포하기 가장 간단한 방법이 바로 Rolling 배포이다.<br>시나리오는 다음과 같다.  </p><ol><li>서버 1을 로드 밸런서에서 뺀다.  </li><li>서버 1에 배포한다.  </li><li>서버 1을 다시 로드 밸런서에 넣는다.  </li><li>서버 2를 로드 밸런서에서 뺀다.  </li><li>서버 2에 배포한다.  </li><li>서버 2를 다시 로드 밸런서에 넣는다.</li></ol><p>위와 같이 하면 다운타임 없이 배포가 가능하다.<br>배포해야할 서버가 너무 많다면 1대씩 배포하면 너무 느리니 N대 단위로 배포하기도 한다.<br>하지만 배포가 끝나기 전까지는 누구는 이전 버전을 서비스 받고, 누구는 신규 버전을 서비스 받는 등의 문제가 존재한다.<br>또한 1대에 배포하는 거보다 최소 2배 이상 느리다. (아무리 못해도 2번 이상의 배포가 진행되기 때문에)</p><h3 id="Canary-Deployment"><a href="#Canary-Deployment" class="headerlink" title="Canary Deployment"></a>Canary Deployment</h3><p><img src="/images/non-stop-deployment/canary.png" alt=""><br>광부들이 광산에서 유독가스가 나오는 것을 알아내기 위해서 가스에 민감한 카나리아(조류)를 광산 안에서 키웠다고 해서 유래된 배포이다.<br>소수의 유저(혹은 사내)만 사용하는 환경(Canary 환경)에 신규 버전을 배포하고 문제가 없다고 판단됐을 때 다른 모든 서버에 배포한다.<br>Canary 환경은 뭐 QA Phase가 될 수도 있고, 랜덤하게 유저를 Canary 환경으로 라우팅시킬 수도 있고 구현하기 나름이다.  </p><h3 id="Blue-Green-Deployment"><a href="#Blue-Green-Deployment" class="headerlink" title="Blue/Green Deployment"></a>Blue/Green Deployment</h3><p><img src="/images/non-stop-deployment/thumbs.jpg" alt=""><br><strong>실제로 서비스 중인 환경(Blue)</strong>과 <strong>새롭게 배포할 환경(Green)</strong>을 세트로 준비해서 배포하는 방식을 말한다.<br>장점으로는 새롭게 배포할 환경에만 배포하면 되기 때문에 배포 속도가 매우 빠르다. (배포할 서버가 N대라 하더라도 N대의 Green 서버에 동시에 배포하면 되기 때문에)<br>또한 언제나 Green 환경이 떠있기 때문에 만약에 잘못된 버전으로 배포를 했을 경우에 신속하게 롤백이 가능하다. (수 백대의 서버에 거의 수 초 이내에 롤백이 가능함.)<br>물론 언제나 Green 환경이 떠있어야하기 때문에 비용이 두 배로 든다는 단점도 있다.<br>또한 Green 환경에서 Scheduler와 같은 배치성 Job이 도는 경우에 레거시 버전으로 돌기 때문에 장애가 발생할 가능성도 존재한다.<br>(이럴 때는 배포를 연속적으로 두 번 해서 Blue와 Green의 버전을 일치시키는 것 이외에는 딱히 떠오르지 않는다 ㅠㅠ…)</p><p>이렇게 설명하면 이해가 잘 안 가니 그림과 함께 이해해보자.<br>(그림에서는 Nginx를 프록시 서버로 사용했지만 Apache 등등을 사용해도 무방하다.<br>또한 하나의 서버에 두 대의 어플리케이션을 띄우는 걸로 설명했지만 별도의 서버에 하나의 어플리케이션만 각각 띄워서 구성해도 된다.)</p><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><p><img src="/images/non-stop-deployment/blue-green-02.png" alt="젠킨스와 같은 CI를 사용해서 Green 환경에 배포를 완료한다."></p><p><img src="/images/non-stop-deployment/blue-green-03.jpg" alt="Nginx와 같은 프록시 서버에서 80포트로 들어오면 Green 환경으로 라우팅하도록 설정한다.">  </p><h4 id="Rollback"><a href="#Rollback" class="headerlink" title="Rollback"></a>Rollback</h4><p><img src="/images/non-stop-deployment/blue-green-04.jpg" alt="만약에 새로 배포한 Blue 환경에서 버그가 발생했다고 가정해보자.">  </p><p><img src="/images/non-stop-deployment/blue-green-05.jpg" alt="이 때 프록시 서버에서 80포트의 라우팅을 Green 환경으로만 옮겨서 Blue와 Green을 바꾸기만 하면 롤백이 끝난다.">  </p><p><img src="/images/non-stop-deployment/blue-green-06.jpg" alt="물론 Green 환경이 사망해계신 상태에서는 롤백이 불가능하다."></p><p>더 자세한 설명은 <a href="https://martinfowler.com/bliki/BlueGreenDeployment.html" rel="external nofollow noopener noreferrer" target="_blank">Martin Fowler가 쓴 블로그 글</a>을 참고하자.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Docker) Spring Boot Application Image 최적화하기</title>
      <link href="/2019/04/16/spring-boot-docker-image-optimization/"/>
      <url>/2019/04/16/spring-boot-docker-image-optimization/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/spring-boot-docker-image-optimization/thumb.png" alt=""></p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>이 글에서 Docker와 Spring Boot, Gradle에 대한 기본적인 지식은 있다고 판단하고 설명한다.<br>프로젝트는 <a href="https://github.com/perfectacle/spring-boot-docker-demo" rel="external nofollow noopener noreferrer" target="_blank">spring-boot-docker-demo 저장소</a>에서 단계별로 브랜치를 확인해보면 된다.<br>이해를 돕기 위해 docker image tag 단위로 branch를 땄다.</p><a id="more"></a><p>프로젝트의 build.gradle은 아래와 같다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.4.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">archivesBaseName = <span class="string">'demo'</span></span><br><span class="line">group = <span class="string">'com.example'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-webflux'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">    testImplementation <span class="string">'io.projectreactor:reactor-test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="가장-간단한-Spring-Boot-Docker-Image-만들기"><a href="#가장-간단한-Spring-Boot-Docker-Image-만들기" class="headerlink" title="가장 간단한 Spring Boot Docker Image 만들기"></a>가장 간단한 Spring Boot Docker Image 만들기</h2><p>이 상태에서 gradle wrapper를 이용해 build를 수행해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>그렇다면 build/libs 디렉토리에 <strong>demo-0.0.1-SNAPSHOT.jar</strong>란 파일이 만들어진다.<br>(build.gradle의 archivesBaseName과 version 값에 의해 위와 같은 이름으로 생성된다.)</p><p>이제 실행 가능한 jar 파일이 생성됐으니 Docker 이미지를 만들어서 해당 jar 파일을 실행하게 만들어보기 위해서 Dockerfile을 생성하자.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY build/libs/demo-0.0.1-SNAPSHOT.jar .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD java -jar demo-0.0.1-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><p>이제 이미지를 빌드해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t $&#123;imageName&#125;:$&#123;tagName&#125; .</span></span><br><span class="line"><span class="comment"># 예제에서는 이해를 돕기 위해 임의로 이미지와 태그 이름을 임의로 설정함.</span></span><br><span class="line"><span class="comment"># perfectacle은 글쓴이의 docker hub 아이디이므로 본인의 docker hub 아이디를 입력해야 docker hub repository 충돌이 일어나지 않는다.</span></span><br><span class="line"></span><br><span class="line">docker build -t perfectacle/spring-boot-demo:basic .</span><br></pre></td></tr></table></figure><p>이제 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run --rm -d -p $&#123;hostPort&#125;:$&#123;containerPort&#125; --name $&#123;containerName&#125; $&#123;imageName&#125;:$&#123;tagName&#125;</span></span><br><span class="line"><span class="comment"># --rm 옵션은 컨테이너를 stop 하면 자동으로 컨테이너를 죽여버린다.</span></span><br><span class="line"><span class="comment"># -d 옵션은 백그라운드에서 컨테이너를 실행한다는 옵션이다.</span></span><br><span class="line"><span class="comment"># 예제에서는 이해를 돕기 위해 포트나 컨테이너 이름 등등의 값을 임의로 설정함.</span></span><br><span class="line"></span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:basic</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 프로젝트의 com.example.demo.Router 파일에서 GET / 에 대한 라우터, 핸들러를 만들어두었다.</span></span><br><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok</span></span><br></pre></td></tr></table></figure><p>ok라는 텍스트가 출력이 됐다면 성공적으로 컨테이너가 뜬 것이다.<br>혹시나 <code>curl: (52) Empty reply from server</code>란 오류가 뜬다면 서버가 아직 뜨지 않은 것이니 10초 정도 기다렸다가 다시 시도해보자.</p><p>이제 <a href="https://hub.docker.com/" rel="external nofollow noopener noreferrer" target="_blank">Docker Hub</a>에 우리가 작업한 이미지를 올려보자.<br>(물론 Docker Hub에 Repository가 존재하는 상태로 시작해야한다.)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker push $&#123;repositoryName&#125;:$&#123;tagName&#125;</span></span><br><span class="line">docker push perfectacle/spring-boot-demo:basic</span><br><span class="line"></span><br><span class="line"><span class="comment"># The push refers to repository [docker.io/perfectacle/spring-boot-demo]</span></span><br><span class="line"><span class="comment"># b61d0959344e: Pushing [================&gt;                                  ]  6.096MB/18.22MB</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Mounted from library/openjdk </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Mounted from library/openjdk </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Mounted from library/openjdk </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Mounted from library/openjdk </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Mounted from library/openjdk </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Mounted from library/openjdk</span></span><br></pre></td></tr></table></figure><p>Docker Image는 여러 레이어로 겹겹이 쌓여있다.<br>우리가 Dockerfile에 선언한 <code>FROM openjdk:11-jre-slim</code> 부분에 의해 openjdk:11-jre-slim 이미지의 레이어에서부터 쌓아가는 것이다.<br>4bbad98352e9 ~ 5dacd731af1b까지가 openjdk:11-jre-slim 이미지의 레이어를 사용한 것이다.<br>그리고 제일 윗 라인에 b61d0959344e 이 부분이 Dockerfile의 <code>COPY build/libs/demo-0.0.1-SNAPSHOT.jar .</code>에 의해 생긴 레이어이다.<br>바로 저 jar 파일이 하나의 레이어를 차지하고 있는 것이다.<br>그럼 이 레이어란 건 어떻게 쓰이는지는 좀이따 살펴보자.</p><p>이제 어플리케이션 코드를 한 번 수정해보자.<br><code>com.example.demo.Router</code> 파일을 아래와 같이 수정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.reactive.function.server.RequestPredicates.GET;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(GET(<span class="string">""</span>),</span><br><span class="line">                                     serverRequest -&gt; ServerResponse.ok()</span><br><span class="line">                                                                    .contentType(MediaType.TEXT_PLAIN)</span><br><span class="line">                                                                    .body(BodyInserters.fromObject(<span class="string">"ok!"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ok</code>에서 <code>ok!</code>로 바꿨을 뿐이다.  </p><p>이제 다시 소스 코드를 빌드해주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>바뀐 소스 코드를 토대로 도커 이미지를 만들자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:basic-change-app .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 포트 및 컨테이너 이름 충돌을 방지하고자 전에 띄워놨던 컨테이너를 멈추자.</span></span><br><span class="line"><span class="comment"># 이전에 --rm 옵션을 줬기 때문에 stop을 하면 자동으로 컨테이너까지 죽여버린다.</span></span><br><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:basic-change-app</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:basic-change-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 54f0c4fe51ff: Pushing [=&gt;                                                 ]  590.8kB/18.22MB</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>레이어의 진가가 여기서 나온다.<br>4bbad98352e9 ~ 5dacd731af1b까지가 openjdk:11-jre-slim 이미지의 레이어이고,<br>perfectacle/spring-boot-demo:basic 이미지에서 이미 사용했고 해당 이미지는 이미 Docker Hub에 올려두었다.<br>따라서 해당 레이어를 <strong>재활용</strong>하는 것이다.<br>이건 push 뿐만 아니라 pull에도 해당하는 내용이다.<br>실제 디스크에서 차지하는 용량도 해당 레이어를 재활용하기 때문에 이미지 push/pull 속도 및 용량 측면에서도 매우 효율적이다.  </p><h2 id="Spring-Boot-Docker-Image-최적화하기"><a href="#Spring-Boot-Docker-Image-최적화하기" class="headerlink" title="Spring Boot Docker Image 최적화하기"></a>Spring Boot Docker Image 최적화하기</h2><p>이렇게 레이어를 잘 구성해서 재활용할 수 있는 부분을 최대한 늘리는 게 이번 포스트에서 진행할 최적화의 한 방법이다.<br>하지만 우리는 레이어를 잘 활용하고 있지 못하고 있다.  </p><p>basic 태그의 이미지를 올릴 때도 <code>b61d0959344e: 18.22MB</code>를 업로드 했고,<br>basic-change-app 태그의 이미지를 올릴 때도 <code>54f0c4fe51ff: 590.8kB/18.22MB</code>를 업로드 했다.<br>우리가 변경한 부분은 매우 작은 것 같은데, 왜 이렇게 많은 용량을 업로드하는 것일까?<br>그건 우리가 jar 파일을 하나의 레이어로 구성했기 때문이다. </p><p>우선 jar 파일이 어떻게 구성돼있는지 한 번 까보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build/libs</span><br><span class="line">tar -xvf demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 우리가 여기서 눈여겨 볼 것은 BOOT-INF 디렉토리이다.</span></span><br><span class="line"><span class="comment"># BOOT-INF META-INF demo-0.0.1-SNAPSHOT.jar org</span></span><br><span class="line"></span><br><span class="line">ls BOOT-INF</span><br><span class="line"><span class="comment"># classes에는 우리가 작성한 어플리케이션 소스 코드가 들어있고, lib 디렉토리에는 라이브러리들(*.jar)이 들어있다.</span></span><br><span class="line"><span class="comment"># classes lib</span></span><br></pre></td></tr></table></figure><p>즉, 우리는 classes에 있는 파일만 수정했음에도 불구하고 lib에 있는 파일까지 같은 레이어로 묶어서 push하고 있던 것이다.<br>레이어를 재활용하기 위해선 jar 파일을 분해해서 이렇게 어플리케이션 레이어와 라이브러리 레이어를 쪼개야 최대한 레이어를 재활용할 수 있다.  </p><p>빌드 후에 매번 저렇게 jar 파일을 분해하기 귀찮으니 build task를 손 봐주자.<br>build.gradle에서 아래 내용을 추가해주자.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task unpackJar(<span class="string">type:</span> Copy) &#123;</span><br><span class="line">    <span class="keyword">def</span> unpackDir = <span class="string">"$buildDir/unpack"</span></span><br><span class="line">    </span><br><span class="line">    delete unpackDir</span><br><span class="line">    from zipTree(jar.getArchiveFile())</span><br><span class="line">    into unpackDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build &#123;</span><br><span class="line">    finalizedBy unpackJar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 Dockerfile에서 어플리케이션 레이어와 라이브러리 레이어를 분리시키자.  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ARG buildDir=build/unpack</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/BOOT-INF/classes/ app</span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/BOOT-INF/lib/ lib</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD java -cp app:lib/* com.example.demo.DemoApplication</span></span><br></pre></td></tr></table></figure><p>이제 바뀐 task로 빌드해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>jar 파일이 <code>build/libs/unpack</code>에 제대로 풀어졌는지 확인해보고 이제 새로운 도커 이미지를 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:unpack-jar .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:unpack-jar</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:unpack-jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># aefdad4cf83c: Pushing [=&gt;                                                 ]  592.9kB/18.12MB</span></span><br><span class="line"><span class="comment"># c132ceeeb517: Pushing [==================================================&gt;]  9.728kB</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>aefdad4cf83c는 라이브러리 레이어이고, c132ceeeb517는 어플리케이션 레이어이다.  </p><p>여기까지 문제가 없긴한데 Dockerfile에서 메인 클래스(com.example.demo.DemoApplication)를 하드코딩하는 게 매우 귀찮다.<br>JarLauncher를 이용해서 하드코딩 하는 부분을 없애보자! (물론 JarLauncher를 쓰면 main class를 하드코딩하는 거 보다 아주 조금 느리게 서버가 뜬다.)<br>Dockerfile을 아래와 같이 수정해주자.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ARG buildDir=build/unpack</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/BOOT-INF/classes BOOT-INF/classes</span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/BOOT-INF/lib BOOT-INF/lib</span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/META-INF META-INF</span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/org org</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD java org.springframework.boot.loader.JarLauncher</span></span><br></pre></td></tr></table></figure><p>덕지덕지 클래스패스 붙던 게 사라지고, 메인 클래스 하드코딩하던 부분도 사라졌다.</p><p>이미 빌드는 했고, 소스코드에 변경된 건 없으므로 새로운 도커 이미지를 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:unpack-jar-launcher .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:unpack-jar-launcher</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:unpack-jar-launcher</span><br><span class="line"></span><br><span class="line"><span class="comment"># 55e024f80fff: Pushing [==================================================&gt;]  221.7kB</span></span><br><span class="line"><span class="comment"># fb71d1d0e2a1: Pushing [==================================================&gt;]  3.072kB</span></span><br><span class="line"><span class="comment"># 182065791613: Pushing [=&gt;                                                 ]  593.4kB/18.12MB</span></span><br><span class="line"><span class="comment"># b0d121a9a0fe: Pushing [==================================================&gt;]  9.728kB</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>위 Dockerfile에도 단점이 존재한다.<br>바로 레이어가 4개나 존재한다는 것이다.<br>우리는 어플리케이션 레이어/라이브러리 레이어로만 구분하려고 했는데 <strong>메인 클래스 하드코딩, 클래스패스</strong> 두 가지 문제점 때문에 또 다른 문제점을 만들어냈다.<br>이제 레이어를 다시 두 개로 줄여보자.</p><p>먼저 Copy의 횟수를 줄여야 레이어를 줄일 수 있으니 Copy하기 좋게 BOOT-INF/lib 폴더만 다른 곳으로 빼야한다.<br>그러기 위해서는 build task와 관련된 task들을 아래와 같이 수정해야한다.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">task moveLib &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">def</span> unpackDir = <span class="string">"$buildDir/unpack"</span></span><br><span class="line">        ant.move(<span class="string">file:</span> <span class="string">"$&#123;unpackDir&#125;/app/BOOT-INF/lib"</span>, <span class="string">toFile:</span> <span class="string">"$&#123;unpackDir&#125;/lib"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task unpackJar(<span class="string">type:</span> Copy) &#123;</span><br><span class="line">    <span class="keyword">def</span> unpackDir = <span class="string">"$buildDir/unpack"</span></span><br><span class="line"></span><br><span class="line">    delete unpackDir</span><br><span class="line">    from zipTree(jar.getArchiveFile())</span><br><span class="line">    into <span class="string">"$unpackDir/app"</span></span><br><span class="line"></span><br><span class="line">    finalizedBy moveLib</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build &#123;</span><br><span class="line">    finalizedBy unpackJar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 Dockerfile을 아래와 같이 수정해서 레이어를 두 개(어플리케이션, 라이브러리)로 만들자.  </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ARG buildDir=build/unpack</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/app .</span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/lib BOOT-INF/lib</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD java org.springframework.boot.loader.JarLauncher</span></span><br></pre></td></tr></table></figure><p>이제 바뀐 task로 빌드해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>lib 폴더가 <code>build/libs/unpack/app/BOOT-INF</code>에 없고 <code>build/libs/unpack/</code>에 있는지 확인해보고<br>이제 새로운 도커 이미지를 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer</span><br><span class="line"></span><br><span class="line"><span class="comment"># aeafcfee4d7d: Pushing [=&gt;                                                 ]  593.4kB/18.12MB</span></span><br><span class="line"><span class="comment"># f69cb2892736: Pushing [==================================================&gt;]  231.4kB</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>다시 레이어가 두 개로 줄어들었다.</p><p>그럼 이제 어플레이션 코드만 수정하고 과연 라이브러리 레이어는 재활용하는지 살펴보자.<br><code>com.example.demo.Router</code> 파일을 아래와 같이 수정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.reactive.function.server.RequestPredicates.GET;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(GET(<span class="string">""</span>),</span><br><span class="line">                                     serverRequest -&gt; ServerResponse.ok()</span><br><span class="line">                                                                    .contentType(MediaType.TEXT_PLAIN)</span><br><span class="line">                                                                    .body(BodyInserters.fromObject(<span class="string">"ok!"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ok!</code>에서 <code>ok!!</code>로 바꿨을 뿐이다.  </p><p>소스코드가 바뀌었으니 다시 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>새로운 도커 이미지로 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer-change-app .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer-change-app</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer-change-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># e5ff3f17bd79: Pushing [==&gt;                                                ]    790kB/18.12MB</span></span><br><span class="line"><span class="comment"># 6f4d8004dddf: Pushing [==================================================&gt;]  231.4kB</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>엥? 어플리케이션 소스코드만 바꿨는데 왜 라이브러리 레이어는 재활용하지 못하는 거지?<br>그럼 혹시 라이브러리를 추가했을 때 어플리케이션 레이어는 재활용할까?</p><p>build.gradle에 modelmapper를 디펜던시로 추가해보자.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-webflux'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">    testImplementation <span class="string">'io.projectreactor:reactor-test'</span></span><br><span class="line">    implementation <span class="string">'org.modelmapper:modelmapper:2.3.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디펜던시를 추가했으니 다시 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>새로운 도커 이미지로 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer-change-lib .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer-change-lib</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:unpack-jar-launcher-decrease-layer-change-lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1902203c1efa: Pushing [==&gt;                                                ]  921.1kB/21.94MB</span></span><br><span class="line"><span class="comment"># 6f4d8004dddf: Layer already exists</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>어플리케이션 레이어는 재활용이 잘 되고 변경된 라이브러리 레이어만 push 하는 걸 볼 수 있다.</p><p>근데 통상적으로 라이브러리 레이어보다 어플리케이션 레이어의 변경이 잦고,<br>라이브러리 레이어의 용량이 더 커서 라이브러리 레이어를 재활용하는 게 훨씬 효율적이다.</p><p>혹시 Dockerfile에 선언한 레이어의 순서에 뭔가 연관이 있지 않을까 싶어 Dockerfile을 아래와 같이 수정해보았다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ARG buildDir=build/unpack</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/lib BOOT-INF/lib</span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/app .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD java org.springframework.boot.loader.JarLauncher</span></span><br></pre></td></tr></table></figure><p>COPY 구문의 순서만 뒤바꾼 것이다. (lib 먼저, 그 다음에 app 레이어를 쌓게 끔)  </p><p>이미 빌드는 했고, 소스코드에 변경된 건 없으므로 새로운 도커 이미지를 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:change-layer-order .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:change-layer-order</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:change-layer-order</span><br><span class="line"></span><br><span class="line"><span class="comment"># 43e70d9a1e7a: Pushing [==================================================&gt;]  231.4kB</span></span><br><span class="line"><span class="comment"># 44d3b0d75158: Pushing [========&gt;                                          ]  3.919MB/21.94MB</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>레이어 순서를 바꾼 후 첫 Push이기 때문에 어플리케이션/라이브러리 레이어 모두 push 하고 있다.</p><p>이제 어플리케이션 코드를 바꿔보자.<br><code>com.example.demo.Router</code> 파일을 아래와 같이 수정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.reactive.function.server.RequestPredicates.GET;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(GET(<span class="string">""</span>),</span><br><span class="line">                                     serverRequest -&gt; ServerResponse.ok()</span><br><span class="line">                                                                    .contentType(MediaType.TEXT_PLAIN)</span><br><span class="line">                                                                    .body(BodyInserters.fromObject(<span class="string">"ok!!!!"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ok!!</code>에서 <code>ok!!!!</code>로 바꿨을 뿐이다.</p><p>소스코드가 바뀌었으니 다시 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>새로운 도커 이미지로 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:change-layer-order-and-app .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:change-layer-order-and-app</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!!!!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:change-layer-order-and-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 13f989ce91ed: Pushing [==================================================&gt;]  231.4kB</span></span><br><span class="line"><span class="comment"># 44d3b0d75158: Layer already exists</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>우리가 바라던대로 용량이 큰 라이브러리 레이어는 재활용하고 있고, 용량이 작은 어플리케이션 레이어는 변경했기 때문에 push하고 있다. </p><p>그럼 혹시 라이브러리 레이어를 수정했을 때 어플리케이션 레이어는 재활용할지 한 번 실험을 해보자.<br>build.gradle에 modelmapper의 버전을 바꿔보.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-webflux'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">    testImplementation <span class="string">'io.projectreactor:reactor-test'</span></span><br><span class="line">    implementation <span class="string">'org.modelmapper:modelmapper:2.3.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디펜던시를 변경했으니 다시 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>새로운 도커 이미지로 빌드하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t perfectacle/spring-boot-demo:change-layer-order-and-lib .</span><br></pre></td></tr></table></figure><p>이제 새롭게 빌드한 이미지를 통해 컨테이너를 띄워보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker run --rm -d -p 80:8080 --name demo perfectacle/spring-boot-demo:change-layer-order-and-lib</span><br></pre></td></tr></table></figure><p>실제로 어플리케이션이 잘 떴는지 확인해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok!!!!</span></span><br></pre></td></tr></table></figure><p>이제 Docker Hub에 좀 전에 새로 생성한 이미지를 올려보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker push perfectacle/spring-boot-demo:change-layer-order-and-lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7a3da3f26c6b: Pushing [==================================================&gt;]  231.4kB</span></span><br><span class="line"><span class="comment"># c67d124680cf: Pushing [&gt;                                                  ]  265.7kB/25.75MB</span></span><br><span class="line"><span class="comment"># 6f4d8004dddf: Layer already exists</span></span><br><span class="line"><span class="comment"># 4bbad98352e9: Layer already exists </span></span><br><span class="line"><span class="comment"># 9f6ec1d0a99c: Layer already exists </span></span><br><span class="line"><span class="comment"># 8eb822456baf: Layer already exists </span></span><br><span class="line"><span class="comment"># 0d59dc1d96ca: Layer already exists </span></span><br><span class="line"><span class="comment"># 93df8ce6d131: Layer already exists </span></span><br><span class="line"><span class="comment"># 5dacd731af1b: Layer already exists</span></span><br></pre></td></tr></table></figure><p>아쉽지만 라이브러리 레이어만 바꿨다고 해서 어플리케이션 레이어를 재활용 할 순 없다.<br>그래도 어플리케이션 레이어는 대부분 라이브러리 레이어 보다 용량이 적고,<br>라이브러리 레이어가 변경이 되는 거보다 어플리케이션 레이어가 변경될 확률이 훨씬 높다.<br>따라서 어플리케이션 레이어를 재활용하는 것보다 라이브러리 레이어를 재활용하는 것이 훨씬 낫다.</p><h2 id="레이어-순서에-따라서-재활용할-수-있는-레이어가-달라진다"><a href="#레이어-순서에-따라서-재활용할-수-있는-레이어가-달라진다" class="headerlink" title="레이어 순서에 따라서 재활용할 수 있는 레이어가 달라진다"></a>레이어 순서에 따라서 재활용할 수 있는 레이어가 달라진다</h2><p>우리의 Dockerfile을 보면 아래와 같다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="variable">$&#123;buildDir&#125;</span>/lib BOOT-INF/lib</span></span><br><span class="line"><span class="bash">COPY <span class="variable">$&#123;buildDir&#125;</span>/app .</span></span><br></pre></td></tr></table></figure><p>어플리케이션 레이어<br>ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ<br>라이브러리 레이어</p><p>위와 같이 라이브러리 레이어 위에 어플리케이션 레이어를 쌓고 있다.<br>이 상황에서 어플리케이션 레이어만 수정하면 아래 있는 라이브러리 레이어를 재활용 할 수 있다.<br>하지만 라이브러리 레이어를 바꾼다면 라이브러리 레이어를 쌓고 그 위에 다시 어플리케이션 레이어를 쌓아야한다.<br>따라서 어플리케이션 레이어를 재활용하지 못하는 것이다.<br>도커 이미지는 마치 스택 자료구조 안에 레이어들을 쌓아간다고 생각하면 좀 더 이해하기 쉬운 것 같다.</p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://spring.io/guides/topicals/spring-boot-docker" rel="external nofollow noopener noreferrer" target="_blank">TOPICAL GUIDE Spring Boot Docker</a>  </li><li><a href="https://toedter.com/2017/09/23/optimizing-docker-images-for-spring-boot/" rel="external nofollow noopener noreferrer" target="_blank">Optimizing Docker Images for Spring Boot</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>어떻게 웹플럭스는 적은 쓰레드만으로 많은 요청을 처리할 수 있을까?</title>
      <link href="/2019/03/10/how-can-webflux-process-huge-requests-with-fewer-threads/"/>
      <url>/2019/03/10/how-can-webflux-process-huge-requests-with-fewer-threads/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/how-can-webflux-process-huge-requests-with-fewer-threads/thumb.png" alt=""></p><p>기본적으로 SpringMVC에서 많이 사용하는 WAS인 Tomcat의 경우에는 기본적으로 쓰레드 풀의 갯수가 200개이고,<br>Jetty의 경우에는 기본적으로 minimum 8개에서 maximum 200개로 설정돼있다.<br>쓰레드 생성 비용은 비싸므로(오래 걸리므로) 미리 생성해서 ThreadPool에 쌓아놓는 것이다.<br>여기서 말하는 Thread는 <a href="/2019/03/10/green-thread-vs-native-thread/">Green Thread vs Native Thread</a>에서 얘기하다 싶이 Native Thread(OS에서 관리하는 Thread)이다.<br>이 말은 동시에 요청을 최대 200개까지 처리 가능하단 얘기이다.</p><a id="more"></a><p>그에 반해 Webflux는 core * 2의 Thread만을 생성한다.<br>SpringMVC에 비해 턱없이 모자란 쓰레드 갯수이고 그럼 싱글 코어의 경우에는 동시에 2개의 요청밖에 처리하지 못할 것처럼 보인다.  </p><h2 id="SpringMVC는-어떻게-동작하는가"><a href="#SpringMVC는-어떻게-동작하는가" class="headerlink" title="SpringMVC는 어떻게 동작하는가?"></a>SpringMVC는 어떻게 동작하는가?</h2><ol><li>요청이 들어오면 ThreadPool에서 Thread를 하나 사용한다.  </li><li>그러다 I/O(File I/O, Network I/O 등등)가 발생하면 CPU를 block 시킨다. (idle 상태에 빠진다.)  </li><li>이 때 다른 요청이 들어오면 ThreadPool에서 Thread를 하나 사용한다.  </li><li>이런 식으로 쓰레드를 돌아가면서 요청을 처리하고 block이 풀리면 작업을 이어나간다.  </li></ol><h2 id="Webflux는-어떻게-동작하는가"><a href="#Webflux는-어떻게-동작하는가" class="headerlink" title="Webflux는 어떻게 동작하는가?"></a>Webflux는 어떻게 동작하는가?</h2><p>Webflux는 기본적으로 아래의 쓰레드로 이루어진다.  </p><ol><li>요청을 받는 쓰레드 (이하 A 쓰레드라 칭함)  </li><li>block 상태에서 풀린 쓰레드의 요청을 처리하는 쓰레드 (이하 B 쓰레드라 칭함)</li><li>block 상태가 풀렸는지 무한 루프 돌면서 감시하는 event loop를 위한 쓰레드 (몇 개의 쓰레드가 쓰이는지는 케바케, 이하 C 쓰레드라 칭함.)  </li></ol><p>통상적으로 event loop를 위한 쓰레드의 갯수는 정확하지 않으므로 Webflux에서는 core * 2개의 쓰레드를 사용한다고 한다.<br>그럼 어떻게 그 적은 쓰레드(리소스, 비용)로 수많은 요청을 동시에 처리할 수 있는 걸까?</p><ol><li>요청이 들어오면 A 쓰레드에서 요청을 처리한다.  </li><li>그러다 I/O(File I/O, Network I/O 등등)가 발생하면 CPU를 block 시킨다. (idle 상태에 빠진다.)  </li><li>이런 비동기 작업을 처리하기 위해 Queue에 넣는다.  </li><li>A 쓰레드는 계속해서 요청을 받아서 처리한다.  </li><li>동시에 C 쓰레드에서 Queue를 무한 루프 돌면서 감시를 한다.</li><li>Event Loop에서 감시를 하다가 작업이 끝난 이벤트가 있으면 B 쓰레드에서 해당 이벤트를 처리한다.</li></ol><p>이런 일련의 흐름으로 인해 CPU가 놀 틈 없이 열심히 돌릴 수 있다.</p><h2 id="Webflux는-왜-CPU-Core-2개의-쓰레드를-사용할까"><a href="#Webflux는-왜-CPU-Core-2개의-쓰레드를-사용할까" class="headerlink" title="Webflux는 왜 CPU Core * 2개의 쓰레드를 사용할까?"></a>Webflux는 왜 CPU Core * 2개의 쓰레드를 사용할까?</h2><p>단순히 쓰레드 생성 비용이 비싸니까 쓰레드를 적게 쓰는 Webflux가 성능 상 뛰어나다고 생각하면 안 된다.<br>조금만 더 인심 쓰지… 왜 2개만으로도 충분하다고 생각하는 걸까? 하나 더 생성하면 조금 더 좋아지는 것 아닐까?? </p><p>쓰레드가 많다는 건 뭔가?<br>결국 쓰레드 사이에서 공유 자원의 <a href="/2019/03/10/java-synchronized-note/">동기화</a> 이슈가 걸려있다.<br>쓰레드가 많으면 많을 수록 동기화 이슈로 인해 시간이 오래 걸리게 된다.<br>따라서 Thread가 적으면 적을 수록 동기화 이슈로 인한 문제에 덜 시달리게 된다.</p><p>또한 CPU는 한 번에 하나의 작업 밖에 수행하지 못한다.<br>따라서 CPU Core 갯수보다 더 많은 쓰레드를 생성하는 건 무의미하게 동기화 이슈를 늘리는 것에 불과하다.<br>하지만 Webflux에서 Core * 2개의 갯수를 만든 이유는 무엇일까?<br>아는 사람이 있다면 댓글로 남겨주길 바란다.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Srping </tag>
            
            <tag> Webflux </tag>
            
            <tag> Reactive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Green Thread vs Native Thread</title>
      <link href="/2019/03/10/green-thread-vs-native-thread/"/>
      <url>/2019/03/10/green-thread-vs-native-thread/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/green-thread-vs-native-thread/thumb.png" alt=""></p><h2 id="Green-Thread"><a href="#Green-Thread" class="headerlink" title="Green Thread"></a><a href="https://en.wikipedia.org/wiki/Green_threads" rel="external nofollow noopener noreferrer" target="_blank">Green Thread</a></h2><p>Green Thread는 우리가 알고 있는 쓰레드를 흉내낸 짝퉁 쓰레드이다.<br>Green Thread는 VM(Virtual Machine)이나 Library 등등에서 관리되며 개발자가 통제할 수도 있어서 user-level 쓰레드라고도 불린다.<br>하지만 Green Thread는 Many to One(Many는 쓰레드, One은 CPU) 모델로 설계된 쓰레드이다.<br>따라서 CPU Core가 하나인 환경일 때 설계된 쓰레드이다보니 아무리 Green Thread가 많아도 Native Thread는 단 한 개 뿐이 만들어지지 않는다.<br>Native Thread가 하나라는 건 CPU를 하나 밖에 사용하지 못한다는 뜻이다.<br>따라서 CPU가 여러 개인 멀티 코어 환경에서는 그 장점을 전혀 살리지 못한다.  </p><a id="more"></a><p>싱글 코어 환경에서는 동시에 여러 작업을 잘 수행하던 Green Thread는 그럼 단점만이 존재하는 걸까?<br>아니다.<br>싱글 코어 환경에서 네이티브 쓰레드를 10개 사용할 때와 그린 쓰레드를 10개 사용할 때를 비교해보자.<br>네이티브 쓰레드를 10개 사용하면 네이티브 쓰레드가 10개 생성된다.<br>그린 쓰레드를 10개 사용하면 네이티브 쓰레드는 한 개만 생성된다.<br>CPU 입장에서는 10개의 네이티브 쓰레드를 사용하는 것보다 한 개의 네이티브 쓰레드만 사용하는 그린 쓰레드 쪽이 성능 이슈가 훨씬 잘 나온다.<br>이유는 멀티 쓰레드 환경에서는 공유 자원의 <a href="/2019/03/10/java-synchronized-note/">동기화</a> 문제가 매우 중요하다.<br>동기화가 제대로 이루어지지 않는다면 프로그램은 치명적 오류를 유발한다.<br>하지만 그린 쓰레드 환경에서는 네이티브 쓰레드가 1개 뿐이니 동기화할 공유 자원이 없게 된다.  </p><p>따라서 그린 쓰레드가 싱글 쓰레드 환경에서는 더 좋은 성능을 발휘하게 된다.<br>하지만 자바 환경에서는 멀티 코어 환경에서 그 강점을 발휘하지 못하기 때문에 자바 3부터 Native Thread로 전부 바뀌었다.</p><p>Node.js에서는 <a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" rel="external nofollow noopener noreferrer" target="_blank">Event Loop</a>를 구현하기 위해 사용하고 있는<br><a href="https://github.com/libuv/libuv" rel="external nofollow noopener noreferrer" target="_blank">libuv</a>에서 Green Thread를 사용하고 있지 않을까… <strong>추측</strong>을 해본다.</p><h2 id="Native-Thread"><a href="#Native-Thread" class="headerlink" title="Native Thread"></a>Native Thread</h2><p>우리가 진짜로 알고 있는 쓰레드 개념이다.<br>Green Thread와 달리 OS 단에서 쓰레드를 관리한다.<br>Native Thread Model은 non-green(kernel-level) thread라고도 불리며 Many to Many(Thread도 Many, CPU도 Many)로 설계됐다.<br>따라서 멀티 코어 환경에서 강점을 발휘한다.<br>하지만 위에 말했던 것과 같이 쓰레드가 여러 개 있다는 것은 각 쓰레드 사이에 공유 자원에 대해 동기화 이슈를 가지게 된다는 소리이다.<br>이는 네이티브 쓰레드를 1개만 가지는 Green Thread에 비해 훨씬 복잡한 동기화 문제를 가지고 있음을 뜻하며 그에 따라 성능도 좋지 못하단 소리다.</p><p>자바 1.3부터는 Green Thread 대신에 Native Thread를 사용하고 있다.  </p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://en.wikipedia.org/wiki/Green_threads" rel="external nofollow noopener noreferrer" target="_blank">Green threads Wikipedia</a></li><li><a href="https://stackoverflow.com/questions/5713142/green-threads-vs-non-green-threads" rel="external nofollow noopener noreferrer" target="_blank">Green Threads vs Non Green Threads</a>  </li><li><a href="https://softwareengineering.stackexchange.com/questions/120384/why-not-green-threads" rel="external nofollow noopener noreferrer" target="_blank">Why not Green Threads?</a>  </li><li><a href="https://www.geeksforgeeks.org/green-vs-native-threads-and-deprecated-methods-in-java/" rel="external nofollow noopener noreferrer" target="_blank">Green vs Native Threads and Deprecated Methods in Java</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) synchronized 키워드가 가지는 의미</title>
      <link href="/2019/03/10/java-synchronized-note/"/>
      <url>/2019/03/10/java-synchronized-note/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/java-synchronized-note/thumb.png" alt=""></p><p>synchronized 키워드를 사용하는 이유를 살펴보기 전에 쓰레드를 왜 여러 개 사용하는지부터 알아보자.  </p><h2 id="쓰레드를-여러-개-멀티-쓰레딩-사용하는-이유"><a href="#쓰레드를-여러-개-멀티-쓰레딩-사용하는-이유" class="headerlink" title="쓰레드를 여러 개(멀티 쓰레딩) 사용하는 이유"></a>쓰레드를 여러 개(멀티 쓰레딩) 사용하는 이유</h2><ol><li>CPU가 I/O(파일, 네트워크 등등) 작업에 의해 Blocking 돼서 놀고 있을 때<br>만약 DB를 호출하는 작업(네트워크 I/O)이 있다고 치자.<br>I/O가 발생하면 기본적으로 CPU는 Block된다. (idle 상태에 빠져 놀고 있다.)<br>이렇게 CPU가 놀고 있을 때 다른 쓰레드가 CPU를 점유한다면 CPU는 더 이상 놀지 않게 된다.<br>이렇게 CPU의 병목을 줄이다보면 성능을 개선할 수 있다.</li><li>시분할 다중화를 통해 동시에 여러 작업이 처리되게 끔 보이게 할 때<br>문서 작성을 하면서 동시에 웹 브라우저에서 파일을 다운로드 받을 수 있는 행위는 바로 CPU에서 쓰레드를 돌아가며 작업을 처리하기 때문이다.<br>만약 파일 다운로드가 다 끝나야지만 문서 작성을 할 수 있다고 하면 얼마나 불편하겠는가?<br>물론 그렇다고 해서 진짜 동시에 여러 작업이 수행되는 게 아니라 사람이 체감 못할 정도로 시간을 쪼개서 작업을 수행하는 것이다. </li></ol><a id="more"></a><h2 id="멀티-쓰레드-프로그래밍을-할-때-생기는-문제"><a href="#멀티-쓰레드-프로그래밍을-할-때-생기는-문제" class="headerlink" title="멀티 쓰레드 프로그래밍을 할 때 생기는 문제"></a>멀티 쓰레드 프로그래밍을 할 때 생기는 문제</h2><p>쓰레드는 프로세스 내부에 존재하기 때문에 프로세스 내부의 자원을 공유한다.<br>따라서 공유 자원에 대해서 동기화 이슈가 매우 중요하다.<br>A 쓰레드의 작업이 완전히 끝나기 전에 A’라는 자원이<br>다른 쓰레드에 의해 값이 바뀌게 되면 A 쓰레드는 원하는 값을 얻어낼 수 없다.</p><h2 id="synchronized-키워드"><a href="#synchronized-키워드" class="headerlink" title="synchronized 키워드"></a>synchronized 키워드</h2><p>위와 같은 문제를 해결하기 위해서는 synchronized 키워드를 사용하여 <strong>A 쓰레드의 작업이 끝날 때까지 대기해라!</strong>라고 명령을 내릴 수 있다.<br>더 나아가 <strong>synchronized 블럭 내에 있는 공유 자원을 점유하라!</strong>라고 이해를 하는 게 좀 더 정확하다.<br>하지만 여기서 멈추면 안 된다, 좀 더 자세하게 이해해야한다.  </p><h3 id="쓰레드-로컬-변수"><a href="#쓰레드-로컬-변수" class="headerlink" title="쓰레드 로컬 변수"></a>쓰레드 로컬 변수</h3><p>CPU에서 명령을 수행하기 위해서는 메모리에 있는 데이터를 CPU로 가져와야한다.<br>하지만 메모리에 있는 데이터를 CPU로 가져오는 행위는 매우 느리므로 CPU는 캐시 메모리가 있다. (L1 캐시, L2 캐시 등등)<br>그리고 이 캐시 메모리를 <strong>쓰레드 로컬 변수</strong>라고 부른다.<br>하지만 쓰레드 <strong>로컬</strong> 변수이기 때문에 다른 쓰레드에서는 메모리에 접근을 해도 해당 쓰레드 변수의 값을 얻어올 수 없다.<br>따라서 공유 자원 A’에 대해 각각 쓰레드가 로컬 변수를 가질 수 있게 된다.</p><p>여기서 synchronized 키워드가 가지는 진정한 의미가 나온다.<br>synchronized 키워드를 사용한다는 것은 해당 블럭 내에 있는<br><strong>공유 자원 A’가 쓰레드 로컬 변수에서 램으로 써지기 까지 다른 쓰레드는 대기(block)하라</strong>라는 의미를 가진다.<br>쓰레드 로컬 변수가 램에 써진 순간 다른 쓰레드가 램에서 해당 값을 가져와서 작업할 수 있게 된다.<br>즉 DB에서 커밋이 되기 전까지 해당 레코드를 조회하는 다른 커넥션은 lock에 빠지는 것과 비슷한 뉘앙스라고 받아들이면 된다.</p><p>synchronized 키워드를 남발하게 되면 쓰레드 로컬 변수가 램에 써지기 전까지 다른 쓰레드는 block이 되므로 조심해서 사용해야한다.<br>또한 잘못 쓴다면 무한한 block을 유발하는 dead lock 이슈도 조심해야할 것이다. </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(이펙티브 자바 3판) 3장 - 모든 객체의 공통 메서드, Comparable을 구현할지 고려하라</title>
      <link href="/2018/12/21/effective-java-ch03-item14-comparable-interface/"/>
      <url>/2018/12/21/effective-java-ch03-item14-comparable-interface/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/effective-java-ch03-item14-comparable-interface/thumb.png" alt=""></p><p>이번 아이템은 모든 객체의 부모 클래스인 Object 클래스에 있는 메서드가 아니다.<br>아예 동떨어진 믹스인 인터페이스인 Comparable와 해당 인터페이스의 유일한 메서드인 compareTo에 대한 내용이다.<br>그럼에도 불구하고 이번 챕터인 ‘모든 객체의 공통 메서드’에 넣은 이유는 모든 객체에 유용하게 쓰일 수 있는 메서드이고<br>자바 플랫폼 라이브러리의 모든 값 클래스와 Enum에서 해당 인터페이스를 구현했기 때문이 아닐까 싶다.<br>또한 compareTo 메서드를 쓰는 자바 API들(Arrays, Collections, TreeSet, TreeMap 등등)이 있기 때문에<br>compareTo 메서드를 잘만 쓰면 좁살만한 노력으로 코끼리만 한 큰 효과를 누린다고 책에서 얘기하고 있으니 이 장을 주의 깊게 봐야한다.</p><a id="more"></a><h2 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h2><p>Comparable은 믹스인 인터페이스이다.<br>그럼 이 믹스인 인터페이스가 제공하는 <strong>선택적 기능</strong>은 무엇일까?<br>바로 인스턴스 사이에 <strong>순서를 비교</strong>해주는 기능을 제공해준다.  </p><h3 id="규약"><a href="#규약" class="headerlink" title="규약"></a>규약</h3><p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Comparable.html#compareTo(T" rel="external nofollow noopener noreferrer" target="_blank">compareTo 메서드 명세서</a>에 더 자세한 내용이 나와있으니 참고해보면 된다.  </p><p>아래에서 나오는 sgn(표현식) 표기는 수학에서 말하는 부호 함수(signum function)을 뜻하고, 표현식의 값이 음수이면 -1, 0이면 0, 양수이면 1을 반환한다.  </p><ul><li>객체가 주어진 객체보다 작으면 음의 정수를, 같으면 0을, 크면 양의 정수를 반환한다.  </li><li>객체와 비교할 수 없는 타입의 객체가 주어지면 ClassCastException을 던진다.  </li><li>Comparable을 구현한 클래스는 <code>sgn(x.compareTo(y)) == -sgn(y.compareTo(x))</code>여야한다.<br>(따라서 x.compareTo(y)는 y.compareTo(x)가 예외를 던질 때에 한해 예외를 던져야한다.)<br>이는 대칭성을 가져야한다는 의미이다.  </li><li>Comparable을 구현한 클래스는 <code>x.compareTo(y) &gt; 0</code>이고, <code>y.compareTo(z) &gt; 0</code>일 때 <code>x.compareTo(z) &gt; 0</code>이어야한다.<br>이는 추이성을 가져야한다는 의미이다.  </li><li>Comparable을 구현한 클래스는 <code>x.compareTo(y) == 0</code>일 때 <code>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</code>이다.  </li><li><strong>필수는 아니지만 권장하는 규약이다, 이 규약을 명시하지 않을 때는 주석으로라도 그 사실을 명시를 해둬야한다.</strong><br>Comparable을 구현한 클래스는 <code>(x.compareTo(y) == 0) == (x.equals(y))</code>이다.<br>두 객체의 순서가 동일하다면 equals 메서드로 논리적 동치성을 비교했을 때도 동일해야한다는 얘기이다.</li></ul><p>다른 건 다 이해가 잘 되는데 마지막 규약은 왜 필수가 아닌지 이해가 되지 않을 것이다.<br>동작은 잘 하지만 어딘가 이상한 부분이 있어서 지키라고 하는 것이다.<br>뭐가 이상한지 한 번 살펴보자.<br>다음은 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Set.html" rel="external nofollow noopener noreferrer" target="_blank">Set 인터페이스 문서</a>에 나온 내용이다.  </p><blockquote><p>sets contain no pair of elements e1 and e2 such that e1.equals(e2)</p></blockquote><p><code>e1.equals(e2)</code>와 같은 논리적 동치성이 검증된 e1과 e2의 쌍은 Set 컬렉션에서 포함하지 않는다는 내용이다.<br>이 내용 때문에 Set에는 중복을 허용하지 않는 것이다.<br>그렇다면 Set 인터페이스를 구현했고, 순서도 보장한 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeSet.html" rel="external nofollow noopener noreferrer" target="_blank">SortedSet 인터페이스</a>의 경우에는 어떨까?  </p><blockquote><p>a sorted set performs all element comparisons using its compareTo (or compare) method</p></blockquote><p>SortedSet 인터페이스는 <strong>equals 메서드 대신에 compareTo(혹은 compare) 메서드를 통해 객체를 비교</strong>하고 있다.<br>이 내용이 위에 적혀있는 Set 인터페이스의 규약을 위반한 건지는 잘 모르겠다.<br>하지만 이렇게 Set 인터페이스를 준수한 SortedSet 인터페이스가 Set 인터페이스와 뭔가 엇박자가 있기 때문에 웬만하면<br>마지막 규약인 <code>(x.compareTo(y) == 0) == (x.equals(y))</code>을 지키라는 얘기이다.</p><p>실제로 equals와 compareTo의 결과가 다른 BigDecimal 클래스를 통해 어떻게 동작하는지 알아보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var one1 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.0"</span>);</span><br><span class="line">    <span class="keyword">final</span> var one2 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.00"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// equals와 compareTo의 결과가 다르다.</span></span><br><span class="line">    assertNotEquals(one2, one1);</span><br><span class="line">    assertEquals(<span class="number">0</span>, one1.compareTo(one2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> HashSet&lt;BigDecimal&gt; hashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    hashSet.add(one1);</span><br><span class="line">    hashSet.add(one2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> TreeSet&lt;BigDecimal&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    treeSet.add(one1);</span><br><span class="line">    treeSet.add(one2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 동일한 요소를 넣었지만 hashSet과 treeSet의 크기가 다르다.</span></span><br><span class="line">    assertNotEquals(hashSet.size(), treeSet.size());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// treeSet의 크기는 1이다.</span></span><br><span class="line">    assertEquals(<span class="number">1</span>, treeSet.size());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// compareTo 메서드를 사용하기 때문에 "1.0"과 "1.00"을 double로 바꾸면 중복이므로 처음 집어넣은 one1만 들어있다. </span></span><br><span class="line">    assertEquals(one1, treeSet.first());</span><br><span class="line">    assertNotEquals(one2, treeSet.first());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 하지만 contains 메서드를 사용하면 내부적으로 compareTo 메서드를 사용하기 때문에 둘 다 포함한다고 나온다.</span></span><br><span class="line">    assertTrue(treeSet.contains(one1));</span><br><span class="line">    assertTrue(treeSet.contains(one2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 자식 클래스에 필드를 추가한 경우에는 compareTo 메서드 규약을 지킬 수 없다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Type</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Type</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">final</span> Type t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(number, t.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChildType</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> number, <span class="keyword">final</span> <span class="keyword">int</span> number2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(number);</span><br><span class="line">        <span class="keyword">this</span>.number2 = number2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">final</span> Type t)</span> </span>&#123;</span><br><span class="line">        var result = <span class="keyword">super</span>.compareTo(t);</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="number">0</span> &amp;&amp; (t <span class="keyword">instanceof</span> ChildType)) &#123;</span><br><span class="line">            <span class="keyword">final</span> var child = (ChildType) t;</span><br><span class="line">            result = Integer.compare(number2, child.number2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 부모 클래스 Type과 필드를 추가한 자식 클래스 ChildType이 있다고 해보자.<br>이 때 이 클래스들은 compareTo 메서드 규약을 지킬 수 있을까?  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> ChildType(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">final</span> var y = <span class="keyword">new</span> Type(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">final</span> var z = <span class="keyword">new</span> ChildType(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 다음 규약을 준수하는지 검증해봤는데 준수하지 못한다.</span></span><br><span class="line">    <span class="comment">// Comparable을 구현한 클래스는 `x.compareTo(y) == 0`일 때 `sgn(x.compareTo(z)) == sgn(y.compareTo(z))`이다.</span></span><br><span class="line">    assertEquals(<span class="number">0</span>, x.compareTo(y));</span><br><span class="line">    assertNotEquals(sgn(x.compareTo(z)), sgn(y.compareTo(z)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(number &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(number &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>따라서 이를 위한 해결 방법은 상속 대신에 컴포지션을 쓰면 된다는 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildType</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ChildType</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Type type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChildType</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> number, <span class="keyword">final</span> <span class="keyword">int</span> number2)</span> </span>&#123;</span><br><span class="line">        type = <span class="keyword">new</span> Type(number);</span><br><span class="line">        <span class="keyword">this</span>.number2 = number2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 부모 클래스의 기능을 쓰고 싶다면 이 메서드를 통해 접근하면 된다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">asType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">final</span> ChildType child)</span> </span>&#123;</span><br><span class="line">        var result = type.compareTo(child.type);</span><br><span class="line">        result = Integer.compare(number2, child.number2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 규약들을 지키지 못한다면 compareTo 메서드를 활용하는 TreeSet, TreeMap, Collections, Arrays 등등과 어울리지 못한다.<br>즉, 좁쌀만 한 노력으로 코끼리만 한 큰 효과를 얻는 기회를 상실하게 되는 것이다!  </p><h3 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h3><p>Comparable 인터페이스의 compareTo 메서드를 구현하는 방법은 어렵지 않다.<br>equals 처럼 Object를 인자로 받지 않고 타입을 받기 때문에 Type 체크나 형변환이 필요치 않다.  </p><ol><li>primitive type인 경우에는 <strong>&lt;</strong>, <strong>&gt;</strong>, <strong>=</strong> 등등의 비교 연산자를 쓰기보다는<br>Wrapper Class의 compare 클래스를 이용하는 게 오류도 줄이고, 코드의 가독성도 높이는 길이다.<br>아래와 같이 해당 클래스들은 Comparable 인터페이스를 구현했기 때문이다.<br><code>public final class Integer extends Number implements Comparable&lt;Integer&gt;</code>  </li><li>참조 클래스 같은 경우에는 재귀적으로 compareTo 메서드를 호출해야한다.  </li><li>비교해야할 필드가 여러 개라면 변경 가능성이 높은 필드부터 검사를 해서 성능을 높일 수 있다.  </li></ol><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><p>아래의 경우에 순서를 비교할 때 사용하는 인터페이스이다.</p><ol><li>Comparable을 구현하지 않은 클래스의 순서를 비교</li><li>Comparable을 구현한 클래스의 compareTo 메서드 대신에 커스텀한 로직으로 순서를 비교하고 싶은 경우<br>String 클래스의 compareTo 메서드를 보면 아래와 같이 우리가 알고 있는 기본적인 알파벳(혹은 가나다) 순으로 비교하고 있다.<br>&nbsp;     <ol><li>비교하려는 두 문자열이 latin1인지 UTF16인지 Character Set을 비교 후 compareTo 메서드 호출  </li><li>두 문자열의 길이를 구함.  <ol><li>두 문자열 중에 길이가 짧은 문자열의 길이까지만 비교(그 이후에는 비교할 문자열이 없으므로 비교가 불가능)  </li><li>비교 대상의 문자열 중 다른 값이 있으면 알파벳(혹은 가나다) 순으로 비교  </li></ol></li><li>비교 대상의 문자열이 모두 같다면 길이가 짧은 문자열이 더 작다고 판단  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> v1[] = value;</span><br><span class="line">      <span class="keyword">byte</span> v2[] = anotherString.value;</span><br><span class="line">      <span class="keyword">if</span> (coder() == anotherString.coder()) &#123;</span><br><span class="line">          <span class="keyword">return</span> isLatin1() ? StringLatin1.compareTo(v1, v2)</span><br><span class="line">                            : StringUTF16.compareTo(v1, v2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> isLatin1() ? StringLatin1.compareToUTF16(v1, v2)</span><br><span class="line">                        : StringUTF16.compareToLatin1(v1, v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">byte</span>[] value, <span class="keyword">byte</span>[] other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">    <span class="keyword">int</span> len2 = other.length;</span><br><span class="line">    <span class="keyword">return</span> compareTo(value, other, len1, len2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">byte</span>[] value, <span class="keyword">byte</span>[] other, <span class="keyword">int</span> len1, <span class="keyword">int</span> len2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; lim; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value[k] != other[k]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getChar(value, k) - getChar(other, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">getChar</span><span class="params">(<span class="keyword">byte</span>[] val, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// &amp; 0xff는 unsigned value로 만들기 위함이라고 함.</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>)(val[index] &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>위의 경우에는 대소문자 비교까지 하고 있는데 우리는 대소문자를 비교하지 않고 싶다면 어떻게 해야할까?  </p><ol><li>compareTo 메서드를 호출하기 전에 두 문자열을 대문자 혹은 소문자로 변환 후 compareTo 메서드 호출</li><li>Comparator 인터페이스 사용</li></ol><p>여기서는 후자를 다룰 것인데, Comparator는 인터페이스이기 때문에 대소문자를 가리지 않은 Comparator를 만들어도 되지만<br>자바에서 기본적으로 이런 기본적인 내용을 구현한 Comparator에 대한 구현체들이 있기 때문에 아래와 같이 해당 클래스를 사용하면 편하다.<br><code>String.CASE_INSENSITIVE_ORDER.compare(string1, string2)</code> </p><p>또한 자바 8부터는 인터페이스가 디폴트 메서드를 가질 수 있기 때문에 같이 간편한 기능들도 제공한다.<br>만약 아래와 같이 integer들을 가진 클래스를 비교한다고 가정했을 때 여태까지는 이렇게 해왔을 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Type</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number4;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">final</span> Type t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = Integer.compare(number, t.number);</span><br><span class="line">        result = result == <span class="number">0</span> ? Integer.compare(number2, t.number2) : result;</span><br><span class="line">        result = result == <span class="number">0</span> ? Integer.compare(number3, t.number3) : result;</span><br><span class="line">        result = result == <span class="number">0</span> ? Integer.compare(number4, t.number4) : result;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 Comparator를 사용한다면 아래와 같이 간단하게 만들 수 있다. (약간의 성능 저하가 따라온다고 한다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Type</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number4;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">final</span> Type t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 자바의 타입 추론의 한계 때문에 처음에는 타입을 명시해줘야한다.</span></span><br><span class="line">        <span class="comment">// 이렇게 해주는 것만으로 Comparator를 구현한 것이고 이 구현체를 통해 순서를 비교할 수 있다.</span></span><br><span class="line">        <span class="keyword">return</span> Comparator.comparingInt((Type t2) -&gt; t2.number)</span><br><span class="line">                         .thenComparingInt(t2 -&gt; t2.number2)</span><br><span class="line">                         .thenComparingInt(t2 -&gt; t2.number3)</span><br><span class="line">                         .thenComparingInt(t2 -&gt; t2.number4)</span><br><span class="line">                         .compare(<span class="keyword">this</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본 타입을 비교하는 comparingInt(int보다 작은 short, byte 등등도 이 메서드를 사용), comparingLong, comparingDouble(double 보다 작은 float도 이 메서드 사용)<br>등등이 있고, Collection의 순서를 거꾸로 뒤집는 reversed 메서드 등등 편의성을 제공해주는 메서드들이 있다.<br>또한 기본 타입 이외에 참조 타입 비교를 위한 comparing 메서드도 제공해준다.  </p><p>또한 <strong>값의 차</strong>로 순서를 비교하는 경우에는 정수 오버플로우나 부동 소수점계산 방식에 따라서 오류를 낼 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Comparator&lt;Object&gt; comparator = <span class="keyword">new</span> Comparator&lt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">final</span> Object o1, <span class="keyword">final</span> Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.hashCode() - o2.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>따라서 직접 값의 차를 이용해 순서를 비교하기 보다는 Wrapper Class에서 제공해주는 compare 메서드를 사용하거나  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Comparator&lt;Object&gt; comparator = <span class="keyword">new</span> Comparator&lt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">final</span> Object o1, <span class="keyword">final</span> Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.hashCode(), o2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>아니면 Comparator에서 제공해주는 메서드를 사용하는 게 더 안전하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Comparator&lt;Object&gt; comparator = Comparator.comparingInt(Object::hashCode);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(이펙티브 자바 3판) 3장 - 모든 객체의 공통 메서드, clone 재정의는 주의해서 진행해라</title>
      <link href="/2018/12/16/effective-java-ch03-item13-clone-method/"/>
      <url>/2018/12/16/effective-java-ch03-item13-clone-method/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/effective-java-ch03-item13-clone-method/thumb.png" alt=""></p><p>Object 클래스는 인스턴스가 생성 가능한 Concrete class이지만 기본적으로 상속해서 사용하도록 설계됐다고 한다.<br>(그 이유는 모르겠지만… 그걸 찾으려면 또 이 장의 범위를 넘어서니 나중에 찾아보자.)<br>따라서 final이 아닌 메서드(<a href="/2018/11/26/effective-java-ch03-item10-equals-method">equals</a>, <a href="/2018/12/03/effective-java-ch03-item11-hashCode-method">hashCode</a>, toString, clone, finalize는)는 모두 메서드 오버라이딩을 염두하고 설계된 메서드이다.<br>따라서 해당 메서드를 오버라이딩 할 때는 각 메서드마다 지켜야할 규칙들이 존재한다.<br>이 규칙을 지키지 않았을 때 뻑나는 경우가 있다.<br>일반적인 클래스들(Collection Framework 등등)은 이러한 규칙들은 지켰겠지~ 하고 작성된 코드들이 많다.<br>따라서 위와 같은 규칙을 지키지 않은 채 오버라이딩을 한 클래스를 사용하면 제대로 동작하지 않을 가능성이 존재한다.</p><a id="more"></a><h2 id="믹스인-인터페이스"><a href="#믹스인-인터페이스" class="headerlink" title="믹스인 인터페이스"></a>믹스인 인터페이스</h2><p>Cloneable이 믹스인 인터페이스라고 책에서 소개하고 있는데 그럼 믹스인 인터페이스는 뭔지부터 살펴보도록 하자.<br>아이템 20: 추상 클래스 보다는 인터페이스를 우선하라(130P)를 보면 다음과 같이 정의하고 있다.  </p><blockquote><p>믹스인이란 클래스가 구현할 수 있는 타입을 말한다.<br>  믹스인을 구현한 클래스에 원래의 ‘주된 타입’ 외에도 특정 선택적 행위를 제공한다고 선언하는 효과를 준다.</p></blockquote><p>간단하게 말하서 믹스인 == 클래스가 구현할 수 있는 <strong>타입(클래스, 함수, 인터페이스 등등)</strong>이다.<br>예를 들어서 <code>Comparable</code>이란 인터페이스를 토대로 살펴보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 Point라는 클래스가 있다고 생각해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"x: %d\ny: %d"</span>, x, y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 Point의 믹스인(Point라는 클래스가 구현할 수 있는 타입)은 무엇일까?<br>아주 여러가지 믹스인들이 있겠지만 그 중에 하나는 Comparable이라고 말할 수 있다.<br>왜냐하면 아래와 같이 Point 클래스를 Comparable 인터페이스(타입)를 구현한 구현체로 만들 수 있기 때문이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"x: %d\ny: %d"</span>, x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">final</span> Point o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스가 구현할 수 있는 타입을 왜 믹스인이라고 부르는 걸까?<br>바로 대상 타입(Point)의 주된 기능(점의 위치를 표시, print 메서드)에 선택적 기능(순서를 정함, Comparable)을 <code>혼합(mixed in)</code>한다고 해서 믹스인이라고 부른다.<br>또한 믹스인에는 함수나 클래스 등등의 타입이 있기 때문에 그냥 믹스인이라고 부르면 헷갈리기 때문에 믹스인 성격을 가진 인터페이스를 <code>믹스인 인터페이스</code>라고 부르는 것 같다.  </p><h2 id="Cloneable"><a href="#Cloneable" class="headerlink" title="Cloneable"></a>Cloneable</h2><p>Cloneable 인터페이스는 믹스인 인터페이스이다.<br>하지만 믹스인의 용도를 제대로 사용하지 않고 있다.<br>이유는 Cloneable 인터페이스를 직접 보면 알 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 얘기했던 Comparable과의 차이점이 뭘까?<br>인터페이스만 있을 뿐, 구현해야하는 메서드가 아무것도 없다.<br>믹스인 인터페이스라면 선택적 기능을 제공해야하는데 제공하는 게 아무것도 없다.<br>즉, 구현해봤자 아무짝에 쓸모없는 인터페이스처럼 보인다.<br>그럼 clone 메서드의 위치는 어디일까?<br>바로 쌩뚱맞게도 Object 클래스에 clone 메서드가 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>원본 메서드가 감춰져있어서 소스코드를 볼 수는 없지만 일단 객체를 복사해주는 메서드 같아 보인다.<br>또 여태까지 살펴봤던 다른 메서드와 달리 protected 메서드이다.<br>따라서 아래와 같이 리플렉션을 쓰지 않는 이상은 오버라이딩한 메서드에 접근할 수 있다는 게 보장되지 않는다.<br>하지만 리플렉션을 사용한다 하더라도 해당 메서드를 오버라이딩 하지 않은 경우에는 NoSuchMethodException 예외를 던지기 때문에 리플렉션으로도 메서드에 접근할 수 있다는 걸 100% 보장할 수 없다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyTest</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var cloneMethod = Point.class.getDeclaredMethod(<span class="string">"clone"</span>);</span><br><span class="line">    cloneMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> var instance = <span class="keyword">new</span> Point();</span><br><span class="line">    <span class="keyword">final</span> var copy = cloneMethod.invoke(instance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>오버라이딩 할 때 public으로 오버라이딩 할 수 있지만, 실수로라도 protected로 오버라이딩 할 여지가 존재하는 매우 부실한 프로토콜이다.  </p><p>그럼 아무짝에 쓸모 없어보이는 Cloneable 인터페이스는 내비두고, Object 클래스의 clone 메서드를 바로 오버라이딩 하면 될 것 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 자바 5에 추가된 covariant return typing(공변 반환 타이핑, 리턴 타입이 서브 클래스의 범위 안에 있으면 된다는 내용) 덕분에 </span></span><br><span class="line">    <span class="comment">// 해당 메서드를 사용하는 사용자가 직접 형변환을 할 필요가 사라졌다.  </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Point) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>공변성(covariant)과 반공변성(contravariant)에 대해서는 이 글의 주제를 넘어서므로 <a href="https://edykim.com/ko/post/what-is-coercion-and-anticommunism/" rel="external nofollow noopener noreferrer" target="_blank">공변성과 반공변성은 무엇인가?</a>에 들어가서 보면 된다.  </p><p>위 clone 메서드를 보면 public으로 오버라이딩 했고 전부 잘 작성한 것 같은데 컴파일이 안 된다.<br>바로 checked exception인 CloneNotSupportedException이 발생하기 때문이다.<br>이유는 해당 예외 클래스를 보면 나온다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Thrown to indicate that the clone method in class Object has been called to clone an object,</span></span><br><span class="line"><span class="comment"> * but that the object's class does not implement the Cloneable interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>clone 메서드가 호출 됐는데 클래스가 Cloneable 인터페이스를 구현하지 않았을 때 던지는 예외란다.<br>아무런 쓸모도 없어보이던 녀석이 드디어 쓸모가 있어보인다.<br>그럼 위 예외를 없애버리기 위해 Cloneable 인터페이스를 구현해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Point) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cloneable 인터페이스는 아무런 메서드가 없기 때문에 구현해야할 것도 아무것도 없다.<br>하지만 이럼에도 불구하고 컴파일은 되지 않고, CloneNotSupportedException이 발생한다.<br>따라서 다소 귀찮지만 아래와 같이 처리를 해주어야한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Point) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// Cloneable 인터페이스를 구현한 이상 이 코드는 절대 실행되지 않는다.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 불편함을 초래하기 때문에 CloneNotSupportedException은 unchecked exception으로 만들었으면 더 좋았을 것 같다.<br>unchecked exception이었다면 Cloneable 인터페이스를 구현하지 않은 경우에는 런타임 에러를 뱉겠지만,<br>checked exception으로 만들어버려서 정상적으로 인터페이스를 구현한 경우에도 모두 불필요한 코드를 추가해야하는 불편함을 감수해야한다.<br>또한 Cloneable 인터페이스는 특정 클래스(Object)의 메서드(clone) 동작 방식을 결정한다는 아주 요상한 방식이니 절대 따라하면 안 되고 따라하기 힘들 것 같다.<br>우리가 위에서 선언한 clone 메서드는 <code>super.clone()</code>라는 코드로 인해 부모 클래스인 Object의 clone메서드의 결과값을 반환하는데<br>그 객체의 필드들을 하나하나 복사한 객체를 반환한다.<br>물론 primitive type만 제대로 복사하는 shallow copy이다.<br>참조 타입은 reference value를 복사하기 때문에 불변 객체가 아닌 이상은 직접 deep copy를 구현해줘야한다.  </p><p>Object.clone() 메서드의 명세서에 적혀있는 규약을 정리해보자면 다음과 같다.  </p><ul><li>x.clone() != x;</li><li>x.clone().getClass() == x</li><li>x.clone().equals(x)</li><li>이 메서드가 반환하는 객체는 super.clone()을 호출해서 얻어야한다.  </li><li>하지만 위 조건이 모두 <strong>필수는 아니다</strong>. 즉, 권장사항일 뿐이며 <strong>선택사항</strong>이다.</li></ul><p>하지만 우리는 <code>super.clone()</code>, 즉 Object 클래스의 clone 메서드를 신뢰하지 못해서 아래와 같이 직접 생성자를 사용해서 객체를 복사한다고 가정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object의 clone 메서드를 호출하는 게 아니므로 CloneNotSupportedException을 던지지 않기 때문에 Cloneable 인터페이스를 구현할 필요가 없다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 좀 더 메서드가 깔끔해진 것 같다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 실제로 객체가 잘 복사됐는지 비교하기 위해 equals 메서드를 오버라이딩</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Point)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> var point = (Point) o;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x != point.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.y != point.y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 코드를 통해 객체가 제대로 복사가 됐는지 알아보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var point = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">final</span> var clone = point.clone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 내부적으로 동일 연산자를 통해 다른 인스턴스인지 비교 </span></span><br><span class="line">    assertNotSame(point, clone);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 클래스 정보도 똑같다.</span></span><br><span class="line">    assertEquals(point.getClass(), clone.getClass());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 내부적으로 동등 연산자인 equals 메서드를 통해 논리적 동치성을 보장하는지 비교</span></span><br><span class="line">    assertEquals(point, clone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이번엔 Point 클래스를 상속하는데 super.clone 메서드를 사용하는 클래스가 있다고 가정해보자. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y, <span class="keyword">final</span> String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y);</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// java.lang.ClassCastException을 유발한다.</span></span><br><span class="line">        <span class="comment">// super.clone() 메서드로 얻어온 메서드의 반환 타입은 Point 생성자를 통해 생성된 Point 클래스 인스턴스이다. </span></span><br><span class="line">        <span class="comment">// 부모 클래스를 가지고 자식 클래스로 형변환 했을 때 자식 클래스에 필요한 필수 필드들이 들어가있지 않을 가능성이 존재해서</span></span><br><span class="line">        <span class="comment">// 변환된 클래스가 제대로 작동하리란 보장이 없기 때문에 위와 같이 예외를 던지는 게 아닐까?</span></span><br><span class="line">        <span class="comment">// 따라서 형 변환을 할 수 없기 때문에 자식 클래스에서 필드가 추가된 경우에는 제대로 clone 조차 하지 못한다.</span></span><br><span class="line">        <span class="comment">// return (ColorPoint) super.clone();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> ColorPoint)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(o)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> var colorPoint = (ColorPoint) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(color, colorPoint.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 다시 테스트 클래스를 통해 올바르게 복사가 됐는지 확인해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testColorClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var colorPoint = <span class="keyword">new</span> ColorPoint(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"red"</span>);</span><br><span class="line">    <span class="keyword">final</span> var clone = colorPoint.clone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 내부적으로 동일 연산자를 통해 다른 인스턴스인지 비교</span></span><br><span class="line">    assertNotSame(colorPoint, clone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 클래스 정보도 부모의 생성자를 통해서 만들었기 때문에 자식 클래스의 정보를 가지지 못한다.</span></span><br><span class="line">    assertNotEquals(colorPoint.getClass(), clone.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 내부적으로 동등 연산자인 equals 메서드를 통해 논리적 동치성을 보장하는지 비교하는데 red는 제대로 복사되지 않았음</span></span><br><span class="line">    assertNotEquals(colorPoint, clone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자식 클래스를 구현할 필요 없는 final 클래스 등등의 경우에는 상관 없겠지만 위와 같은 사유 때문에 웬만하면 Object.clone() 메서드 명세서의 규약은 준수하는 게 좋다.</p><p>그럼 가변 객체가 있을 때는 어떻게 구현해야할까?<br>우선 간단하게 배열을 필드로 가지고 있는 객체를 예로 들어보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> Type[] children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Type</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> number, <span class="keyword">final</span> Type[] children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Type[] getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(<span class="keyword">final</span> Type[] children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Type)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> var type = (Type) o;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.number != type.number) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Arrays.equals(<span class="keyword">this</span>.children, type.children)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 clone 메서드가 우리가 생각하는대로 동작하는지 알아보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var original = <span class="keyword">new</span> Type(<span class="number">3</span>, <span class="keyword">new</span> Type[]&#123;<span class="keyword">new</span> Type(<span class="number">1</span>, <span class="keyword">null</span>), <span class="keyword">new</span> Type(<span class="number">2</span>, <span class="keyword">null</span>)&#125;);</span><br><span class="line">    <span class="keyword">final</span> var clone = original.clone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 원본 객체에서 첫 번째 자식을 다른 자식으로 대체</span></span><br><span class="line">    original.getChildren()[<span class="number">0</span>] = <span class="keyword">new</span> Type(<span class="number">4</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clone과 original이 완전 독립된 객체라면 이 테스트는 통과해선 안 된다.</span></span><br><span class="line">    assertEquals(original, clone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우리가 의도한 대로 동작하지 않음(둘이 완전히 독립된 객체이길 원함)을 볼 수 있다.<br>그렇다면 우리의 의도대로 동작하게 끔 clone 메서드를 변경해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> var clone = (Type) <span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 배열의 clone 메서드는 공변 반환 타이핑도 제대로 적용했고 unchecked exception인 CloneNotSupportedException도 제대로 처리한 유일한 예라고 책에서 설명하고 있다.</span></span><br><span class="line">        <span class="comment">// 하지만 가변 객체를 참조하는 필드는 final로 선언하라는 용법과는 상반된다.  </span></span><br><span class="line">        <span class="comment">// final로 선언해도 완전 불변 객체를 만드는 것은 아니지만 적어도 레퍼런스 값이 바뀌는 경우는 막을 수 있으니까 final로 선언하라는 용법이 있는 것으로 알고 있는데</span></span><br><span class="line">        <span class="comment">// 이 용법을 사용하면 가변 객체의 clone을 할당할 수 없다.</span></span><br><span class="line">        clone.children = <span class="keyword">this</span>.children.clone();</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 변경했다면 위 테스트는 통과하지 못하고 <code>assertNotEquals(original, clone);</code>와 같이 변경해야 테스트를 통과시킬 수 있고 우리의 의도대로 동작한다.  </p><p>하지만 이마저도 얕은 복사이고 아래의 경우에는 객체의 완벽한 독립을 보장하지 못한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var original = <span class="keyword">new</span> Type(<span class="number">3</span>, <span class="keyword">new</span> Type[]&#123;<span class="keyword">new</span> Type(<span class="number">1</span>, <span class="keyword">null</span>), <span class="keyword">new</span> Type(<span class="number">2</span>, <span class="keyword">null</span>)&#125;);</span><br><span class="line">    <span class="keyword">final</span> var clone = original.clone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 자식을 재할당하는 게 아니라 자식의 필드를 변경</span></span><br><span class="line">    original.getChildren()[<span class="number">0</span>].setNumber(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clone과 original이 완전 독립된 객체라면 이 테스트는 통과해선 안 된다.</span></span><br><span class="line">    assertEquals(original, clone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 재귀를 통해 깊은 복사를 하면 우리가 원하는 문제를 해결할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> var clone = (Type) <span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 배열의 clone 메서드는 공변 반환 타이핑도 제대로 적용했고 unchecked exception인 CloneNotSupportedException도 제대로 처리한 유일한 예라고 책에서 설명하고 있다.</span></span><br><span class="line">        clone.children = childrenDeepCopy(clone.children);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Type[] childrenDeepCopy(<span class="keyword">final</span> Type[] parent) &#123;</span><br><span class="line">    <span class="keyword">final</span> var shallowClone = parent.clone();</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(shallowClone)</span><br><span class="line">                 .map(origin -&gt; <span class="keyword">new</span> Type(origin.number, origin.hasChildren() ? childrenDeepCopy(origin.children) : <span class="keyword">null</span>))</span><br><span class="line">                 .toArray(Type[]::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> children != <span class="keyword">null</span> &amp;&amp; children.length != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 재귀 함수의 단점은 자식의 깊이가 깊을 수록 재귀 호출을 통해 스택 프레임을 사용하기 때문에 스택 오버플로우를 유발할 수도 있다는 점이다.<br>따라서 깊은 복사는 반복을 통해 풀 수 있다면 반복으로 푸는 것이 좋다.  </p><p>또한 상속용으로 설계된 부모 클래스에서 clone을 재정의할 경우, 해당 메서드에서는 다른 재정의 가능한 메서드를 호출하면 안 된다.<br>이유는 자식 클래스에서 clone을 재정의 했을 경우 연쇄적으로 <code>super.clone();</code>을 호출하기 때문에 부모의 clone 메서드를 호출하게 된다.<br>그 과정에서 부모의 clone 메서드에서 재정의 가능한 어떤 메서드를 호출한다면 부모 클래스의 메서드를 호출하는 게 아니라 자식 클래스에서 재정의한 메서드를 호출하기 때문이다.<br>정확하게 어떻게 예를 들어야할지 모르겠다… (다소 억지스러운 것들 밖에 안 떠올라서…)</p><p>위와 같은 오동작을 불러일으킬 수 있기 때문인지 책(84P)에서는 상속해서 쓰기 위한 클래스 설계 방식 두 가지<br>(재정의 할 수 있는 메서드들을 내부적으로 어떻게 이용하는지 문서로 남긴 클래스,<br>내부 동작 과정 중간에 끼어들 수 있는 hook을 잘 선별하여 protected 메서드 형태로 공개한 클래스)<br>에서도 Cloneable 구현 자체를 하지 말라고 하고 있다.<br>clone 메서드를 깊은 복사까지 구현만 해놓고 Cloneable 인터페이스는 구현하지 않아서 하위 클래스에게 Cloneable 구현 여부를 선택하게 끔 하거나,<br>아래와 같이 clone 메서드를 재정의하는데 하위 클래스에서 재정의하지 못하게 하는 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    <span class="comment">// 자식 클래스에서는 super.clone()을 통해 clone 메서드를 재정의 하니까 무조건 부모 클래스의 clone 메서드를 호출하게 돼있다.</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CloneNotSupportedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 clone 메서드는 동기화(멀티 쓰레드로 돌아가는 환경에서 공유 자원에 대해 일관성 유지)도 고려돼있지 않기 때문에 동기화도 적절히 해줘야한다.</p><p>이러한 허술한 메커니즘 기반인 clone 보다는 아래와 같은 방법 중 하나를 추천한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 복사 생성자</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Type</span><span class="params">(<span class="keyword">final</span> Type type)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 복사 팩터리 (복사 생성자를 모방한 정적 팩터리)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">newInstance</span><span class="params">(<span class="keyword">final</span> Type type)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>위와 같은 방법을 쓰면 허술한 메커니즘 뿐만 아니라 불필요한 checked exception 처리, final 필드 용법, 형변환 등등에서 자유로워 질 수 있다.<br>또한 인자로 해당 클래스가 구현한 인터페이스 타입도 받을 수 있기 때문에 원본 클래스의 타입에 얽매이지 않고 사용할 수도 있다는 장점이 존재한다.   </p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(이펙티브 자바 3판) 3장 - 모든 객체의 공통 메서드, equals를 재정의하려거든 hashCode도 재정의하라</title>
      <link href="/2018/12/03/effective-java-ch03-item11-hashCode-method/"/>
      <url>/2018/12/03/effective-java-ch03-item11-hashCode-method/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/effective-java-ch03-item11-hashCode-method/thumb.png" alt=""></p><p>Object 클래스는 인스턴스가 생성 가능한 Concrete class이지만 기본적으로 상속해서 사용하도록 설계됐다고 한다.<br>(그 이유는 모르겠지만… 그걸 찾으려면 또 이 장의 범위를 넘어서니 나중에 찾아보자.)<br>따라서 final이 아닌 메서드(<a href="/2018/11/26/effective-java-ch03-item10-equals-method">equals</a>, <a href="#hashCode">hashCode</a>, toString, <a href="/2018/12/16/effective-java-ch03-item13-clone-method">clone</a>, finalize는)는 모두 메서드 오버라이딩을 염두하고 설계된 메서드이다.<br>따라서 해당 메서드를 오버라이딩 할 때는 각 메서드마다 지켜야할 규칙들이 존재한다.<br>이 규칙을 지키지 않았을 때 뻑나는 경우가 있다.<br>일반적인 클래스들(Collection Framework 등등)은 이러한 규칙들은 지켰겠지~ 하고 작성된 코드들이 많다.<br>따라서 위와 같은 규칙을 지키지 않은 채 오버라이딩을 한 클래스를 사용하면 제대로 동작하지 않을 가능성이 존재한다.</p><a id="more"></a><h2 id="들어가기에-앞서…"><a href="#들어가기에-앞서…" class="headerlink" title="들어가기에 앞서…"></a>들어가기에 앞서…</h2><p>equals 메서드와 마찬가지로 hashCode를 오버라이딩 할 경우는 거의 없다.<br>대부분 hashCode를 쓰는 쪽은 HashMap, HashSet 등등이다.<br>이 마저도 키에다가 equals를 오버라이딩 한 클래스를 사용할 때이다.<br>실무에서 대부분 키로 String, Integer를 쓰지, 해당 클래스를 써본 적은 한 번도 없다.<br>(물론 특수한 경우에는 존재할 수도 있지만, 아주 특수할 것이다.)<br>따라서 이런 아주 특수한 경우를 제외하고는 딱히 hashCode를 오버라이딩 할 이유가 없으니 이 글도 딱히 읽을 필요도 없다.<br>그래도 혹여나 실무에서 당장 hashCode를 오버라이딩 하려면 세 가지 방법이 존재한다.<br><del>내가 당신의 시간을 아껴주겠다.</del><br>그래도 공부 측면 등등에서 꼭 알아야하는 내용임에는 틀림이 없는 것 같다.</p><ol><li>구글에서 만든 <a href="https://github.com/google/auto/tree/master/value" rel="external nofollow noopener noreferrer" target="_blank">AutoValue</a> 사용하기. (권장)<br>아주 사용하기가 간단하다.<br>바로 클래스 위에 <code>@AutoValue</code> 어노테이션만 달아주면 끝이다.<br>(물론 equals, hashCode, toString 메서드까지 다 오버라이딩 해준다.)<br>클래스가 변경돼도 hashCode 쪽 소스코드를 수정할 필요가 없다.<br>얘는 자바 6부터 지원한다.  </li><li>IDEA가 생성해준 소스 코드 사용하기.<br>여러가지 규칙을 직접 찾아보며 구현하기 귀찮으니까 생성해주는 코드를 사용하면 된다.<br>인텔리제이 IDEA가 생성한 코드니 신뢰하고 써도 될 것이다.<br>단점으로 클래스가 변경될 때마다 hashCode 쪽 소스도 넣어줘야해서 귀찮다.    </li><li>직접 구현하기<br>이 글을 보고 직접 구현해보면 될 것 같다.</li></ol><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><blockquote><p>Returns a hash code value for the object.<br>  This method is supported for the benefit of hash tables such as those provided by HashMap.<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()</a></p></blockquote><p>object의 해시 값을 반환하는 메서드이다.<br>key를 해싱해서 인덱스를 만들고, 해당 인덱스의 버킷(저장 공간)에 값을 저장하는 자료구조인 <a href="https://en.wikipedia.org/wiki/Hash_table" rel="external nofollow noopener noreferrer" target="_blank">Hash Table</a>에서 사용된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html" rel="external nofollow noopener noreferrer" target="_blank">HashMap</a> 클래스의 get 메서드인데 내부적으로 타고들어가다보면 Object의 hashCode 메서드를 사용해서 key의 hashCode를 구해서 원하는 value를 구하고 있다.    </p><p>이제 hashCode의 규약을 알아보자.  </p><ol><li>Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified.<br>This integer need not remain consistent from one execution of an application to another execution of the same application.<br>equals 비교에 사용되는 정보가 변경되지 않았다면, 애플리케이션이 실행되는 동안 그 객체의 hashCode 메서드는 몇 번을 호출해도 일관되게 항상 같은 값을 반환해야 한다.<br>단, 어플리케이션을 다시 실행한다면 이 값이 달라져도 상관없다.</li><li>If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.<br>equals(Object)가 두 객체를 같다고 판단했다면, 두 객체의 hashCode는 똑같은 값을 반환해야한다.  </li><li>It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.<br>equals(Object)가 두 객체를 다르다고 판단했더라도, 두 객체의 hashCode가 서로 다른 값을 반환할 필요는 없다.<br>단, 다른 객체에 대해서는 다른 값을 반환해야 해시 테이블의 성능이 좋아진다.</li></ol><p>어, 지루하게 hashCode의 규약에 대해 살펴봤으니 우리가 간단하게 만든 클래스가 hashCode의 규약을 준수하는지 알아보자.<br>우선 간단한 클래스를 만들어보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Point)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> var obj = (Point) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj.x != <span class="keyword">this</span>.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj.y != <span class="keyword">this</span>.y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 클래스가 동치 관계를 준수하면서 equals 메서드를 구현했는지 간단하게 검증해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// reflexive</span></span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    assertEquals(x, x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// symmetric</span></span><br><span class="line">    <span class="keyword">final</span> var y = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertEquals(y, x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// transitive</span></span><br><span class="line">    <span class="keyword">final</span> var z = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    assertEquals(y, z);</span><br><span class="line">    assertEquals(x, z);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// consistent</span></span><br><span class="line">    assertEquals(x, x);</span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertEquals(y, x);</span><br><span class="line">    assertEquals(y, z);</span><br><span class="line">    assertEquals(x, z);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// For any non-null reference value x, x.equals(null) should return false.</span></span><br><span class="line">    assertNotEquals(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5가지 규칙을 모두 지킨 참된 equals 메서드이다.<br>그럼 이 클래스가 HashMap에서도 key로써 제대로 역할을 수행하는지 알아보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 두 인스턴스가 같다고 판단(내부적으로 equals 메서드 사용)</span></span><br><span class="line">    assertEquals(<span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>), <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1번 규칙에 의하면 몇 번을 호출하더라도 동일한 hashCode가 나와야하는데 동일한 값이 나오지 않았음.</span></span><br><span class="line">    <span class="comment">// 사실 이 스트림은 한 번만 호출되더라도 !h.equals(hashCode) 조건을 만족하기 때문에 한 번 밖에 돌지 않음.</span></span><br><span class="line">    <span class="keyword">final</span> var hashCode = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>).hashCode();</span><br><span class="line">    <span class="keyword">final</span> var result = IntStream.range(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">                                .mapToObj(i -&gt; <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>).hashCode())</span><br><span class="line">                                .anyMatch(h -&gt; !h.equals(hashCode));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 단 두 번만 호출했는데도 불구하고 둘이 다른 해시코드가 나옴.</span></span><br><span class="line">    assertNotEquals(<span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>).hashCode(), <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>).hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 서로 다른 해시코드를 내뱉기 때문에 키의 역할을 제대로 수행하지 못하고 있음.</span></span><br><span class="line">    <span class="keyword">final</span> var map = <span class="keyword">new</span> HashMap&lt;Point, Integer&gt;();</span><br><span class="line">    map.put(<span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    assertNull(map.get(<span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제대로 규칙을 이행하는 게 하나도 없다.<br>그렇다면 기본 메서드인 Object.hashCode()는 어떻게 구현이 돼있길래 저런 결과가 나온 걸까…?  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>내부 구현이 다 숨겨져 있다.<br>주석을 살펴보면 아래와 같이 나와있다.  </p><blockquote><p>As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects.<br>  (The hashCode may or may not be implemented as some function of an object’s memory address at some point in time.)<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()</a></p></blockquote><p><strong>object’s memory address</strong>가 핵심인 것 같다.<br>객체의 참조값을 가지고 해싱을 한다는 것 같은데, 모든 객체 인스턴스는 싱글턴이 아닌 이상 각각 고유한 참조값을 가지고 있으므로<br>hashCode의 기본 메서드로를 모든 인스턴스마다 고유한 hashCode를 생산한다.<br>하지만 우리가 구현한 equals 메서드에 따르면 각 인스턴스마다 equals 값이 true로 나오고 있으므로 hashCode도 동일한 값이 나와야하는데<br>그러고 있지 않으므로, 우리가 만든 클래스는 hashCode의 규약을 준수하지 못한 경우이다.<br>따라서 equals 메서드를 오버라이딩 했으면 거의 hashCode도 같이 오버라이딩 해줘야 hashCode의 규약을 준수해서 hashMap 등등에서 key로써 제대로 된 역할을 수행한다고 말할 수 있다.  </p><p>아주 간단하게 해시 코드를 작성해보면 다음과 같다.<del>(실무에서 절대 쓰면 안된다.)</del>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 구현하면 물론 <code>equals 비교에 사용되는 정보가 변경됐는데도 똑같은 해시 값을 반환</code>하므로 1번 규약을 지키지는 못한다.<br>또한 모두 같은 해시 값을 반환하기 때문에 충돌이 발생하게 되는데 이 경우에는 index가 가리키고 있는 LinkedList 혹은 Tree에 값을 추가해서 데이터의 유실을 방지한다.<br>따라서 해시 테이블의 단 하나의 버킷에 저장하기 때문에 평균 수행 시간이 O(n)으로 느려진다.<br>이상적인 해시 값이라면 hashCode 규약을 준수하고, O(1)의 수행속도를 가져야한다. (각기 다른 버킷에 값을 저장하고, 따라서 충돌이 아주 적은…)  </p><p>책에 나와있는 hashCode 작성법을 글로만 읽으면 이해가 안 되니 코드와 함께 이해해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> String y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] z;</span><br><span class="line">    <span class="keyword">private</span> Type t;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Type)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> var obj = (Type) o;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 첫 번째 핵심 필드 x</span></span><br><span class="line">        <span class="keyword">if</span>(obj.x != <span class="keyword">this</span>.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj.y.equals(<span class="keyword">this</span>.y)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(Arrays.equals(obj.z, <span class="keyword">this</span>.z)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 필드 t는 아예 equals 메서드에서 제외하였다.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 첫 번째 핵심 필드 x의 해시값을 구함.</span></span><br><span class="line">        <span class="comment">// primitive type이기 때문에 WrapperClass.hashCode() 메서드를 통해 해시값을 구함.</span></span><br><span class="line">        var result = Integer.hashCode(x);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 그 다음 핵심필드 y는 참조 타입이기 때문에 참조 타입의 hashCode() 메서드 사용.</span></span><br><span class="line">        result = result * <span class="number">31</span> + y.hashCode();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 그 다음 핵심필드 z는 배열이고, 그 내부 원소가 모두 equals에 사용된 핵심 원소이므로 Arrays.hashCode() 메서드를 통해 구현.</span></span><br><span class="line">        <span class="comment">// 만약 특정 원소만 핵심 원소라면 해당 원소들에 대해서 for-loop 돌면서 hashCode를 구하면 됨.</span></span><br><span class="line">        result = result * <span class="number">31</span> + Arrays.hashCode(z);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// equals 메서드에 사용되지 않은, 핵심필드가 아닌 t는 hashCode에서 사용하면 안 됨.</span></span><br><span class="line">        <span class="comment">// equals 메서드를 통해 같다고 판단한 객체가 서로 다른 hashCode를 내뱉는 현상이 발생해 hashCode 규약을 지키지 못할 수 있음.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 위에서 구한 result를 반환.</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Q: 왜 기존 값에 해시코드를 더하지 않고, 31을 곱한 후에 더하는가?</strong><br>A: 아래의 예제를 통해 알아보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Type)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> var obj = (Type) o;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 첫 번째 핵심 필드 x</span></span><br><span class="line">        <span class="keyword">if</span>(obj.x != <span class="keyword">this</span>.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj.y != <span class="keyword">this</span>.y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 첫 번째 핵심 필드 x의 해시값을 구함.</span></span><br><span class="line">        <span class="comment">// primitive type이기 때문에 WrapperClass.hashCode() 메서드를 통해 해시값을 구함.</span></span><br><span class="line">        var result = Integer.hashCode(x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 그 다음 핵심필드 y도 primitive type이기 때문에 WrapperClass.hashCode() 메서드를 통해 해시값을 구함.</span></span><br><span class="line">        result += Integer.hashCode(y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 위에서 구한 result를 반환.</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 {x=1, y=2}와 {x=2, y=1}은 동등(equals)하지 않다.<br>하지만 각 원소의 집합은 {1, 2}로 동일하기 때문에 해시코드를 구하면 일치하게 된다.<br>이런 충돌을 줄이고자 31을 곱하는 것이다. (이는 String의 hashCode 메서드를 봐도 마찬가지다.)  </p><p><strong>Q: 왜 31을 곱하는가?</strong><br>A: 31이 소수이기 때문이란다.  </p><p><strong>Q: 왜 소수를 곱하는가?</strong><br>A: Modulo operation(나머지 연산)에서 충돌을 줄이기 위함이라고 한다.<br>해시 함수의 예제를 구글링해보면 나머지 연산을 통해 해시 값을 구하는 예제가 참 많다.<br>실제로 나머지 연산을 통해 해시값을 구할 때는 소수로 나누는 것이 훨씬 충돌 횟수가 적다. (입력값이 균일하게 분포돼있지 않다는 전제 하에…)<br>그래서인지 곱하는 수도 소수를 곱하는 것 같다.<br>하지만 명확하게 왜 소수를 곱하는지는 아직 찾지 못했다.</p><p><strong>Q: 충돌이 일어나면 어떻게 동작하는가?</strong><br><a href="https://d2.naver.com/helloworld/831311" rel="external nofollow noopener noreferrer" target="_blank">Java HashMap은 어떻게 동작하는가?</a>에 자세히 설명돼있다.<br>우선 데이터의 유실을 막기 위해 어디다가 저장하긴 해야한다.<br>이를 위한 여러가지 동작 방식이 있는데 자바에서는 Separate Chaining 방식을 채택해서 버킷을 Linked List로 구현했다.<br>자바 8에서는 <strong>데이터의 개수가 일정 이상일 때에는 링크드 리스트 대신 트리를 사용하는 것이 성능상 이점</strong>이 있다는 점을 토대로<br>동일한 버킷에 데이터가 8개가 되면 Tree로 변경하고, 다시 6개로 줄어들면 LinkedList로 변경한다.<br>8과 6 사이에 2라는 차이를 둔 것은 삽입과 삭제가 빈번하게 일어났을 때 Tree &lt;-&gt; LinkedList의 잦은 변환을 막고자 그렇게 구현했다고 한다.<br>또한 Tree가 메모리를 더 많이 먹고, 데이터 갯수가 적을 때는 Worst Case가 LinkedList와 큰 차이가 없기 때문에 처음에는 LinkedList로 만든다고 한다.<br>따라서 해시 코드가 충돌되더라도 일단 데이터는 저장되니 데이터의 유실은 막는다.<br>하지만 충돌이 잦을 수록 검색 성능은 나빠지니 최대한 충돌이 적은 알고리즘을 찾아야한다.<br>그리고 충돌이 발생하더라도 해당 키값에 대한 동등(equals) 비교가 일치하는 키 값이 없으면 null을 반환하게 된다.</p><p><strong>Q: 그 많은 소수 중에 왜 31인가? (추측)</strong><br>31은 2⁵ - 1이다.<br>이를 비트 연산자로 표기하면 2 &lt;&lt; 5 - 1이다.<br>왼쪽으로 n칸 이동하면 2ⁿ만큼 곱했다고 보면 된다.<br>cpu는 비트 연산에 매우 최적화 돼있다.<br>그리고 31은 1만 빼면 되는데, 37((2 &lt;&lt; 5) + 6)은 6을 더해야하니 31이 더 빠르지 않을까?<br>31보다는 37이 더 충돌 횟수가 적긴 할텐데, 아마 31만으로도 충분히 충돌 횟수를 많이 줄일 수 있어서 굳이 37을 안 쓰는 게 아닐까 싶다…<br>즉, 성능과 충돌 사이의 밸런스를 찾다보니 31이 나온 건 아닌가 싶다.  </p><p>그리고 해시값을 구하는데 소수를 이용하는 거 보다 더 나은 알고리즘들이 있다고 하니 직접 찾아보는 것도 좋을 것 같다.</p><p>또한 위와 같이 일일이 귀찮게 hashCode를 계산하기 보다는 아래와 같이 할 수 있다.<br>하지만 박싱/언박싱 및 입력값을 담기 위한 배열 생성 비용 등등으로 인해 성능 측면에서는 조금 아쉽긴 하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Array가 아닌 타입은 모두 Objects.hash() 메서드로 해시값을 구할 수 있다.</span></span><br><span class="line">    <span class="keyword">int</span> result = Objects.hash(x, y, t);</span><br><span class="line">    result = <span class="number">31</span> * result + Arrays.hashCode(z);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 어차피 Objects.hash() 메서드를 따라들어가보면 Arrays.hashCode()를 사용하고 있다.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.hashCode(values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>혹은 클래스가 불변인 경우에는 생성 당시에 해시코드 값을 미리 캐싱해놓는 것도 좋다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Type</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> String y, <span class="keyword">final</span> <span class="keyword">double</span>[] z, <span class="keyword">final</span> Type t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">    <span class="keyword">this</span>.z = z;</span><br><span class="line">    <span class="keyword">this</span>.t = t;</span><br><span class="line">    <span class="keyword">this</span>.hash = hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 해시코드 생성 비용이 큰 경우에는 해시코드 값을 사용하기 전까지는 지연 초기화를 시켜놓으면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hash != <span class="number">0</span>) <span class="keyword">return</span> hash;</span><br><span class="line">    </span><br><span class="line">    var result = Objects.hash(x, y, t);</span><br><span class="line">    result = <span class="number">31</span> * result + Arrays.hashCode(z);</span><br><span class="line">    hash = result;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(이펙티브 자바 3판) 3장 - 모든 객체의 공통 메서드, equals는 일반 규약을 지켜 재정의하라</title>
      <link href="/2018/11/26/effective-java-ch03-item10-equals-method/"/>
      <url>/2018/11/26/effective-java-ch03-item10-equals-method/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/effective-java-ch03-item10-equals-method/thumb.png" alt=""></p><p>Object 클래스는 인스턴스가 생성 가능한 Concrete class이지만 기본적으로 상속해서 사용하도록 설계됐다고 한다.<br>(그 이유는 모르겠지만… 그걸 찾으려면 또 이 장의 범위를 넘어서니 나중에 찾아보자.)<br>따라서 final이 아닌 메서드(<a href="#equals">equals</a>, <a href="/2018/12/03/effective-java-ch03-item11-hashCode-method">hashCode</a>, toString, <a href="/2018/12/16/effective-java-ch03-item13-clone-method">clone</a>, finalize는)는 모두 메서드 오버라이딩을 염두하고 설계된 메서드이다.<br>따라서 해당 메서드를 오버라이딩 할 때는 각 메서드마다 지켜야할 규칙들이 존재한다.<br>이 규칙을 지키지 않았을 때 뻑나는 경우가 있다.<br>일반적인 클래스들(Collection Framework 등등)은 이러한 규칙들은 지켰겠지~ 하고 작성된 코드들이 많다.<br>따라서 위와 같은 규칙을 지키지 않은 채 오버라이딩을 한 클래스를 사용하면 제대로 동작하지 않을 가능성이 존재한다.  </p><a id="more"></a><h2 id="들어가기에-앞서…"><a href="#들어가기에-앞서…" class="headerlink" title="들어가기에 앞서…"></a>들어가기에 앞서…</h2><p>equals 메서드를 오버라이딩 할 경우는 거의 없다.<br>대부분 핵심 필드의 값이 일치하는지 파악하기 위해서 오버라이딩 할 것이다.<br>그런 경우를 제외하고는 대부분 기본적인 레퍼런스 값 비교만으로도 충분히 비교가 가능하기 때문이다.<br>equals 메서드를 오버라이딩 하는 건 그렇게 어렵지 않지만 몇가지 원칙이 있고, 글의 길이가 짧은 편도 아니고 얻는 수확이 크지 않다. (애초에 오버라이딩 할 일이 거의 없으니…)<br>그래서 <code>지금 당장 오버라이딩을 해야한다!</code> 싶을 때는 두 가지 방법이 있다.<br><del>내가 당신의 시간을 아껴주겠다.</del><br>그래도 공부 측면 등등에서 꼭 알아야하는 내용임에는 틀림이 없는 것 같다.</p><ol><li>구글에서 만든 <a href="https://github.com/google/auto/tree/master/value" rel="external nofollow noopener noreferrer" target="_blank">AutoValue</a> 사용하기. (권장)<br>아주 사용하기가 간단하다.<br>바로 클래스 위에 <code>@AutoValue</code> 어노테이션만 달아주면 끝이다.<br>(물론 equals, hashCode, toString 메서드까지 다 오버라이딩 해준다.)<br>클래스가 변경돼도 hashCode 쪽 소스코드를 수정할 필요가 없다.<br>얘는 자바 6부터 지원한다.  </li><li>IDEA가 생성해준 소스 코드 사용하기.<br>사람이라면 실수를 하게 되니 IDE의 도움을 절실히 원하게 된다.<br>하지만 클래스가 변하는 경우에 equals 코드도 계속해서 변경해줘야하니 구찮다…<br>또 잘 짰는지 테스트 코드도 짜야하고… 테스트 코드도 변경해야하고…  </li></ol><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>equals 메서드는 오버라이딩 하기 쉬워보이지만 자칫했다가는 규칙을 어길 가능성도 곳곳에 존재한다.<br>따라서 책에서 이런 가능성을 없애는 가장 좋은 방법은 오버라이딩 하지 않는 것이라고 한다.<br>나도 내가 딱히 이런 equals 메서드를 직접 정의해본 기억은 거의 없다.  </p><p>우선 우리가 오버라이딩 하지 않았을 때는 어떤 비즈니스 로직을 수행하고 있는지 모든 클래스의 부모 격인 Object 클래스의 equals 메서드를 까보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정말 별 거 없다.<br>그냥 == 연산을 통해 레퍼런스를 비교하는 정도이다.<br>만약 클래스의 논리적 동치성(같은 레퍼런스가 아닐지라도 특정 필드의 값이 같다던지… 등등)을 확인하고 싶다면 equals 메서드를 오버라이딩 해야한다.<br>가장 좋은 예가 Integer, String 클래스 등등이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예는 Integer 클래스의 equals 메서드이다.<br>레퍼런스를 가지고 비교하는 게 아니라 인스턴스가 가지고 있는 value(primitive type인 int)들끼리 비교하고 있다.<br>혹은 인스턴스가 하나 뿐이라고 보장된 클래스(싱글턴)는 레퍼런스 비교만으로도 논리적 동치성을 보장하니 굳이 equals 메서드를 오버라이딩 할 필요가 없다.</p><p>그렇다면 equals에 어떤 규칙이 있는지는 아래 문서를 참고해 하나씩 알아보자.<br><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)</a>  </p><h3 id="equivalence-relation-동치-관계"><a href="#equivalence-relation-동치-관계" class="headerlink" title="equivalence relation(동치 관계)"></a>equivalence relation(동치 관계)</h3><blockquote><p>The equals method implements an equivalence relation on non-null object references<br>  euqals 메서드는 non-null object 레퍼런스에 대해 equivalence relation(동치 관계)를 구현해야한다.<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)</a></p></blockquote><p>아까부터 논리적 동치성이니, 동치 관계니, 계속 동치 동치 거리는데 일단 동치가 뭔지 알아보자.<br><del>동치미도 아니고…</del></p><p>책에서는 <code>동치 관계</code>에 대해 아래와 같이 설명하고 있다.  </p><blockquote><p>집합을 서로 같은 원소들로 이뤄진 부분집합으로 나누는 연산이다.<br>  이 부분집합을 동치류(equivalence class; 동치 클래스)라 한다.<br>  equals 메서드가 쓸모 있으려면 모든 원소가 같은 동치류에 속한 어떤 원소와도 서로 교환할 수 있어야한다.</p></blockquote><p>그냥 읽어선 뭔 소린지 모르겠다.<br>그림으로 이해를 해보자. (마우스 없는 환경에서 그리려니까 너무 힘들다…)<br><img src="/images/effective-java-ch03-item10-equals-method/01.png" alt=""><br>위 그림은 아래와 같은 기호를 통해 표현할 수 있다.<br><code>X = {a, b, c, a, b, c}</code><br>이제 이 집합 X를 서로 같은 원소들로 이뤄진 부분집합으로 나눠보자.<br><img src="/images/effective-java-ch03-item10-equals-method/02.png" alt=""><br>위 그림은 아래와 같은 기호를 통해 표현할 수 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X = &#123;a, b, c, a, b, c&#125;</span><br><span class="line">A = &#123;a, a&#125;</span><br><span class="line">B = &#123;b, b&#125;</span><br><span class="line">C = &#123;c, c&#125;</span><br></pre></td></tr></table></figure><p>이제 이 부분집합 A, B, C는 서로 같은 원소들끼리 뭉쳐있으므로 동치류(equivalence class; 동치 클래스)라고 부를 수 있다.<br>equals 메서드가 쓸모 있으려면 동치류에 속한 어떤 원소와도 서로 교환할 수 있어야한다고 한다.  </p><p>그냥 뭔소린지 모르겠고 그냥 둘이 같아야한다는 걸 뭘 어렵게 풀어쓴 거 같다.<br><del>수학을 모르니 ㅠㅠ…</del><br>그럼 동치 관계가 가지는 특성에 대해 하나씩 알아보자.</p><h4 id="Reflexive-반사성"><a href="#Reflexive-반사성" class="headerlink" title="Reflexive(반사성)"></a>Reflexive(반사성)</h4><blockquote><p>for any non-null reference value x, x.equals(x) should return true.<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)</a></p></blockquote><p>null이 아니고, 참조값 x에 대해서 x.equals(x)는 true를 반환해야한다.<br>위 규칙을 어기는 코드를 바로 작성해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotReflexive</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 아래와 같이 테스트 코드를 작성해서 위 규칙을 어겼는지 검증해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotReflexive();</span><br><span class="line">    assertNotEquals(x, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트는 깔끔하게 통과한다.  </p><p>그럼 이제 위 규칙을 어겼을 때 어떤 오동작을 유발하는지 살펴보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotReflexive();</span><br><span class="line">    <span class="keyword">final</span> var list = List.of(x);</span><br><span class="line">    assertFalse(list.contains(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reflexive 하지 못한 인스턴스는 List(및 다른 Collection)에 포함돼었는지 제대로 파악할 수 없다.<br>이유는 아래 보다싶이 List 클래스의 contains 메서드는 인스턴스의 equals 메서드를 활용하기 때문이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(o);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, s = size(); i &lt; s; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o.equals(get(i))) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 경우에는 딱히 필드도 없고(극단적인 경우지만) 하니 메서드 오버라이딩 자체를 하지 않으면 문제가 해결된다.</p><h4 id="Symmetric-대칭성"><a href="#Symmetric-대칭성" class="headerlink" title="Symmetric(대칭성)"></a>Symmetric(대칭성)</h4><blockquote><p>for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)</a></p></blockquote><p>null이 아니고, 참조값 x와 y에 대해서 x.equals(y)가 true를 반환하면 y.equals(x)도 true를 반환해야한다.<br>위 규칙을 어기는 코드를 바로 작성해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotSymmetric</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> NotSymmetric) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> String;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 아래와 같이 테스트 코드를 작성해서 위 규칙을 어겼는지 검증해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotSymmetric();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reflexive!!</span></span><br><span class="line">    assertEquals(x, x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> var y = <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// not symmetric!!</span></span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertNotEquals(y, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트가 깔끔하게 통과한다.<br>NotSymmetric은 String을 알지만, String은 NotSymmetric을 알지 못하기 때문이다.  </p><p>그럼 이제 위 규칙을 어겼을 때 어떤 오동작을 유발하는지 살펴보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotSymmetric();</span><br><span class="line">    <span class="keyword">final</span> var y = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> var list = List.of(y);</span><br><span class="line">    assertTrue(list.contains(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대칭성이 없는 인스턴스 역시 List(및 다른 Collection)에 포함돼었는지 제대로 파악할 수 없다.<br>이유는 위에서 얘기했다싶이 List 클래스의 contains 메서드는 인스턴스의 equals 메서드를 활용하기 때문이다.<br>x(NotSymmetric)의 잘못 구현된 equals 메서드를 사용하기 때문에 포함되지도 않았는데 포함됐다고 판단하고 있다.  </p><p>이런 경우에는 String에 대해 비교하는 구문을 아예 없애버리면 해결이된다.</p><h4 id="Transitive-추이성"><a href="#Transitive-추이성" class="headerlink" title="Transitive(추이성)"></a>Transitive(추이성)</h4><blockquote><p>for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)</a>  </p></blockquote><p>null이 아니고, 참조값 x와 y, z에 대해서 x.equals(y)가 true를 반환하고 y.equals(z)가 true를 반환하면, x.equals(z)도 true를 반환해야한다.<br>마치 3단 논법같은 이 명제를 부셔버리는 예제를 작성해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> Parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotTransitive</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotTransitive</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">super</span>.equals(o)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Parent 인스턴스 경우</span></span><br><span class="line">        <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> NotTransitive)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// NotTransitive 인스턴스인 경우</span></span><br><span class="line">        <span class="keyword">return</span> a == ((NotTransitive) o).a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 테스트 코드로 검증을 해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotTransitive(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reflexive!!</span></span><br><span class="line">    assertEquals(x, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> var y = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// symmetric!!</span></span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertEquals(y, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> var z = <span class="keyword">new</span> NotTransitive(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not transitive!!</span></span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertEquals(y, z);</span><br><span class="line">    assertNotEquals(x, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 transitive하지 못한 경우에도 아래와 같이 당연히 오작동하기 마련이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotTransitive(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">final</span> var y = <span class="keyword">new</span> Parent();</span><br><span class="line">    <span class="keyword">final</span> var list = List.of(x);</span><br><span class="line">    </span><br><span class="line">    assertTrue(list.contains(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이를 해결하기 위해서는 Parent 클래스에 equals 메서드에서 instanceof 연산자 대신에 getClass() 메서드를 쓰면 해결된다. (정말?)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (o != <span class="keyword">null</span>) &amp;&amp; (o.getClass() == <span class="keyword">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 코드로 검증을 해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotTransitive(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reflexive!!</span></span><br><span class="line">    assertEquals(x, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> var y = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// symmetric!!</span></span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertEquals(y, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> var z = <span class="keyword">new</span> NotTransitive(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// transitive!!</span></span><br><span class="line">    assertNotEquals(x, y);</span><br><span class="line">    assertNotEquals(y, z);</span><br><span class="line">    assertNotEquals(x, z);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> var list = List.of(x);</span><br><span class="line"></span><br><span class="line">    assertFalse(list.contains(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 테스트에서 문제가 됐던 x.equals(y), y.equals(z), !x.equals(z) 문제는 발생하지 않았고,<br>list.contains() 메서드에서 말썽이 발생했던 문제도 해결됐다.</p><p>하지만 이는 논리적 동치성을 검증하지 못했고, <strong>리스코프 치환 원칙</strong>을 위배했기 때문에 올바르게 해결했다고 하기 거시기하다…</p><blockquote><p>LSP(Liskov substitution principle, 바바라 리스코프란 사람이 만들었다고 함.)<br>  어떤 타입에 있어 중요한 속성이라면 그 하위 타입에서도 마찬가지로 중요하고,<br>  따라서 그 타입의 메서드가 하위 타입에서도 똑같이 잘 동작해야한다.</p></blockquote><p>간단한 예를 통해 알아보자.<br>우선 Parent 클래스를 다음과 같이 바꿔보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Parent&gt; z = List.of(<span class="keyword">new</span> Parent());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (o != <span class="keyword">null</span>) &amp;&amp; (o.getClass() == <span class="keyword">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> Parent p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> z.contains(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 간단한 테스트 클래스를 통해 의도한 대로 동작하는지 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> Parent();</span><br><span class="line">    assertTrue(x.test(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>무슨 일을 하는 코드인지는 모르겠지만 우리가 의도한 대로 잘 동작한다.<br>리스코프 치환 원칙을 준수했다면 Parent의 하위 클래스인 NotTransitive 클래스로 타입을 <strong>치환</strong>해도 정상 동작해야한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotTransitive(<span class="number">1</span>);</span><br><span class="line">    assertTrue(x.test(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상위 타입(Parent)에서 하위 타입(NotTransitive)로 치환했는데 테스트가 깨진다.<br>이는 하위 타입인 NotTransitive 클래스를 리스코프 치환 원칙에 위배했다는 증거가 된다.<br>리스코프 치환 원칙은 객체 지향의 5대 원칙 중 하나이므로 이는 객체 지향적으로 설계하지 못했다는 증거가 된다.  </p><p>그럼 하위 클래스에 필드를 추가하면서 equals 메서드를 오버라이딩 하는데 동치 관계를 준수하면서 객체 지향적으로 설계까지 하는 방법은 없는 걸까?<br>답은 없다.<br>그럼 어떻게 해야할까?<br>하위 클래스(상속)로 만드는 대신에 Composition을 활용하는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotTransitive</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 상속을 쓰지 않으니 부모 클래스로 접근할 수 있는 루트를 필드로써 제공하면 된다.</span></span><br><span class="line">    <span class="keyword">private</span> Parent p;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotTransitive</span><span class="params">(<span class="keyword">final</span> Parent p, <span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.p = p;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 부모 클래스의 기능을 쓰고 싶다면 이 메서드를 통해 접근하면 된다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Parent <span class="title">asParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 논리적 동치성을 검증.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> NotTransitive)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> a == ((NotTransitive) o).a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 자바 라이브러리를 보면 하위 클래스에 필드를 추가하면서 equals를 재정의한 경우가 있다.<br>바로 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Date.html" rel="external nofollow noopener noreferrer" target="_blank">java.util.Date</a> 클래스를 상속 받은 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/Timestamp.html" rel="external nofollow noopener noreferrer" target="_blank">java.sql.Timestamp</a>가 그 예이다.<br>따라서 Timestamp API 문서에는 아래와 같은 문구가 적혀있다.  </p><blockquote><p>This type is a composite of a java.util.Date and a separate nanoseconds value.<br>  Only integral seconds are stored in the java.util.Date component.<br>  The fractional seconds - the nanos - are separate.<br>  The Timestamp.equals(Object) method never returns true when passed an object that isn’t an instance of java.sql.Timestamp, because the nanos component of a date is unknown.<br>  As a result, the Timestamp.equals(Object) method is not symmetric with respect to the java.util.Date.equals(Object) method.<br>  Also, the hashCode method uses the underlying java.util.Date implementation and therefore does not include nanos in its computation.</p></blockquote><p>위 클래스는 대칭성을 준수하지 못하고 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> epochMilli = Instant.now().toEpochMilli();</span><br><span class="line">    <span class="keyword">final</span> var date = <span class="keyword">new</span> Date(epochMilli);</span><br><span class="line">    <span class="keyword">final</span> var timestamp = <span class="keyword">new</span> Timestamp(epochMilli);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not symmetric!!</span></span><br><span class="line">    assertEquals(date, timestamp);</span><br><span class="line">    assertNotEquals(timestamp, date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>물론 하위 클래스에 필드를 추가하면서 equals 메서드를 오버라이딩 하는데 동치 관계를 준수하면서 객체 지향적으로 설계하는 경우도 있긴 하다.<br>바로 부모 클래스가 추상 클래스인 경우이다.<br>추상 클래스는 인스턴스를 만들 수 없으므로 위에 얘기했던 문제가 발생하지 않는다.  </p><h4 id="Consistent-일관성"><a href="#Consistent-일관성" class="headerlink" title="Consistent(일관성)"></a>Consistent(일관성)</h4><blockquote><p>for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)</a></p></blockquote><p>equals 메서드의 결과가</p><ol><li>가변 클래스의 경우에는 수정되기 전까지 항상 똑같아야한다.</li><li>불변 클래스의 경우에는 항상 똑같아야한다.</li></ol><p>equals 판단에 신뢰할 수 없는 자원이 끼어있는 경우 일관성을 해칠 수 있다.</p><p>그럼 일관성을 준수하지 못하는 경우를 작성해보자. (물론 Reflexive, 대칭성, Transitive도 준수하지 못하지만…)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotConsistent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> NotConsistent)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> Instant.now().toEpochMilli() % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>equals 판단에 신뢰할 수 없는 자원으로 <strong>시간</strong>을 넣었다.<br>과연 이 경우에 일관성을 해치는지 검증해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotConsistent();</span><br><span class="line">    <span class="keyword">final</span> var y = <span class="keyword">new</span> NotConsistent();</span><br><span class="line">    <span class="comment">// 숫자를 너무 작게하거나 운이 나쁘면 원하는 결과가 안 나올 수도...</span></span><br><span class="line">    <span class="keyword">final</span> var resultSet = IntStream.range(<span class="number">1</span>, <span class="number">1000000</span>).mapToObj(i -&gt; x.equals(y)).collect(toSet());</span><br><span class="line">    assertNotEquals(resultSet.size(), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 이런 일관성을 깨뜨리면서 equals를 오버라이딩한 경우가 자바 라이브러리에도 존재한다.<br>바로 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html" rel="external nofollow noopener noreferrer" target="_blank">java.net.URL</a> 클래스가 그 예이다.<br>java.net.URL의 equals 메서드는 URL과 매핑된 IP 주소를 이용해 비교한다.<br>URL을 통해 매핑된 IP 주소를 알아내려면 네트워크를 이용해야한다.<br>하지만 이 <strong>네트워크</strong>도 <strong>equals 판단에 신뢰할 수 없는 자원</strong> 중 하나이다.<br>하지만 이 경우에는 하위 호환성 때문에 문제를 고치지 못하고 있다고 한다.</p><h3 id="null이-아닌-객체는-null과-같지-않아야한다"><a href="#null이-아닌-객체는-null과-같지-않아야한다" class="headerlink" title="null이 아닌 객체는 null과 같지 않아야한다."></a>null이 아닌 객체는 null과 같지 않아야한다.</h3><blockquote><p>For any non-null reference value x, x.equals(null) should return false.<br>  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)</a></p></blockquote><p>이름만 들어도 뭔소린지 바로 파악이 된다.<br>이 지키기 어려운 경우도 바로 아래와 같이 예제를 구현해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotNull</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> NotNull;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>바로 비교하려는 대상이 null일 때 true를 리턴하면 된다.  </p><p>그럼 이 규칙을 잘 어겼는지 검증해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// reflexive!</span></span><br><span class="line">    <span class="keyword">final</span> var x = <span class="keyword">new</span> NotNull();</span><br><span class="line">    assertEquals(x, x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// symmetric!</span></span><br><span class="line">    <span class="keyword">final</span> var y = <span class="keyword">new</span> NotNull();</span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertEquals(y, x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// transitive!</span></span><br><span class="line">    <span class="keyword">final</span> var z = <span class="keyword">new</span> NotNull();</span><br><span class="line">    assertEquals(y, z);</span><br><span class="line">    assertEquals(x, z);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// consistent!</span></span><br><span class="line">    assertEquals(x, x);</span><br><span class="line">    assertEquals(x, y);</span><br><span class="line">    assertEquals(y, x);</span><br><span class="line">    assertEquals(y, z);</span><br><span class="line">    assertEquals(x, z);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// x is null!!</span></span><br><span class="line">    assertEquals(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>모든 규칙을 지켰는데 <code>null이 아닌 객체는 null과 같지 않아야한다</code>를 지키지 못했으니 위의 경우에는 동치 관계를 준수하면서 equals 메서드를 구현한 게 아니다.<br>간단하게 첫 번째 줄인 <code>if(o == null) return true;</code>만 삭제하면 모든 조건을 만족시키게 되는 것이다.<br>instansof는 null safe한 연산자이기 때문에 굳이 null 체크를 안 해도 NullPointerException을 유발하지 않는다.</p><h3 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h3><ol><li><p>가장 처음에는 레퍼런스 비교를 하자.<br>애초에 같은 레퍼런스 값을 가진다면 동일한 객체(논리적으로도)로 봐도 무방하다.<br>따라서 뒤에 있을 로직들을 쓸 데 없이 처리하지 않아도 돼서 성능 측면에서 좋아질 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o == <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>instanceof 연산자로 올바른 타입인지 확인한다.<br>올바른 타입인지 확인하지 않으면 뒤에 나오는 핵심 필드의 값을 비교할 수 없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// instanceof 연산자는 null safe 하기 때문에 아래 구문은 필요 없다.</span></span><br><span class="line">    <span class="comment">// if(o == null) return false;</span></span><br><span class="line">    <span class="comment">// 혹은 인터페이스를 구현한 것이면 클래스 대신에 인터페이스를 넣어서 비교할 수도 있다.</span></span><br><span class="line">    <span class="keyword">return</span> o <span class="keyword">instanceof</span> Type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>올바른 타입으로 형변환 하고, <strong>핵심</strong> 필드의 값만 비교하자.<br>모든 필드의 값이 일치하지 않아도 되는 경우에는 모든 필드를 비교하면 성능 상에 좋지 않다.<br>혹은 인터페이스의 구현체라면 인터페이스의 메서드를 사용해서 필드에 접근해야할 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 올바른 타입인지 비교하지 않으면 ClassCastException을 면치 못할 것이다.</span></span><br><span class="line">    <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Type)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> var obj = (Type) o;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 모든 필드를 비교할 필요는 없고 핵심적인 필드만 비교하면 된다.</span></span><br><span class="line">    <span class="keyword">if</span>(!obj.a.equals(<span class="keyword">this</span>.a)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>float과 double을 제외한 primitive type은 == 연산자를 통해 값을 비교하고,<br>float과 double은 Float.NaN, -0.0D 등등의 특수한 경우 때문에 == 연산자로는 비교가 불가능하다.<br>그렇다고 equals 메서드를 통해 비교하면 오토박싱 때문에 성능상 좋지 않을 수도 있으니 compare 메서드를 통해 비교하도록 하자.<br>그 외에 자바가 제공해주는 라이브러리의 경우에는 대부분 동치관계를 준수했을 것이므로 equals 메서드로 비교하자. (이 마저도 주의해서 사용하긴 해야한다.)<br>혹은 특정 타입의 경우에는 <code>null이 아닌 객체는 null과 같지 않아야한다</code>는 원칙을 준수하지 않고 equals 메서드를 오버라이딩 했을 수 있기 때문에 Objects.equals를 쓰는 게 좀 더 안전하긴 하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> var obj = (Type) o;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(obj.a != <span class="keyword">this</span>.a) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(Double.compare(obj.b, <span class="keyword">this</span>.b) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!(obj.c.equals(<span class="keyword">this</span>.c))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!Objects.equals(obj.d, <span class="keyword">this</span>.d)) <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>특정 필드로부터 값이 추론되는 필드는 검증하지 말자.<br>사각형은 너비(width), 높이(height)만으로 넓이(area)가 결정되기 때문에 너비와 높이만 비교했으면 넓이는 비교할 필요가 없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> area;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">final</span> <span class="keyword">double</span> width, <span class="keyword">final</span> <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// width(너비)와 height(높이)를 통해 area(너비)가 결정된다.</span></span><br><span class="line">        <span class="keyword">this</span>.area = width * height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> var obj = (Rectangle) o;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(obj.width != <span class="keyword">this</span>.width) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj.height != <span class="keyword">this</span>.height) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// width와 height만 알면 area 값은 자동으로 알 수 있으니 굳이 비교할 필요가 없다.</span></span><br><span class="line">        <span class="comment">// if(obj.area != this.area) return false;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>변경 가능성이 높은 필드부터 비교하자.<br>변경 가능성이 높은 필드부터 비교하면 더 빠르게 해당 타입의 논리적 동치성을 검출할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Type</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> b, <span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> var obj = (Type) o;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 변경이 불가능한 a를 먼저 검사하기 보단 변경이 가능한 b를 검사해야 더 빠르게 논리적 동치성을 검출할 수 있다.</span></span><br><span class="line">        <span class="keyword">if</span>(obj.b != <span class="keyword">this</span>.b) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj.a != <span class="keyword">this</span>.a) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Override 어노테이션을 사용하자.<br>잘못 오버라이딩 한 경우 컴파일 에러를 내주기 때문에 버그를 최대한 빨리 찾을 수 있다.<br>만약 해당 어노테이션이 없다면 메서드 오버라이딩(재정의)가 아니라 메서드 오버로딩 취급해서 새로운 메서드를 추가한 거라고 생각한다.<br>그리고 새로 추가한 메서드를 통해 equals 메서드를 호출하는 게 아니라 부모 클래스에 있는 원본 클래스의 equals 메서드를 호출하게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method does not override or implement a method from a supertype</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> Type o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>위 규칙들을 준수해서 간단하게 equals 메서드를 구현해보자면 아래와 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> center;</span><br><span class="line">    <span class="keyword">private</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y, <span class="keyword">final</span> <span class="keyword">double</span> center, <span class="keyword">final</span> Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.center = center;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Point)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> var obj = (Point) o;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(obj.x != <span class="keyword">this</span>.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(obj.y != <span class="keyword">this</span>.y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(Double.compare(obj.center, <span class="keyword">this</span>.center) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Objects.equals(obj.color, <span class="keyword">this</span>.color)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java8) 날짜와 시간 API</title>
      <link href="/2018/09/26/java8-date-time/"/>
      <url>/2018/09/26/java8-date-time/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/java8-date-time/thumb.png" alt=""></p><p>부끄럽게도 Java8에 나온 날짜와 시간 API를 제대로 모르고 계속해서 사용해왔다.<br>늦었지만 지금이라도 정리를 해봤다.  </p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>먼저 날짜와 시간 API는 JSR-310이라고도 불린다.<br>이걸 풀어서 설명하면 <a href="https://www.jcp.org/en/home/index" rel="external nofollow noopener noreferrer" target="_blank">JCP(Java Community Process)</a>에서 관리하는 <a href="https://jcp.org/en/jsr/overview" rel="external nofollow noopener noreferrer" target="_blank">JSR(Java Specification Requests)</a>의 <a href="https://jcp.org/en/jsr/detail?id=310" rel="external nofollow noopener noreferrer" target="_blank">310번 째</a> Request(?)로<br>Date and Time API이다.  </p><a id="more"></a><p>이 API는 현재 표준으로 자리잡았고, 날짜와 시간 관련 라이브러리인 <a href="http://www.joda.org/joda-time/" rel="external nofollow noopener noreferrer" target="_blank">Joda-Time</a>의 창시자인 Joda도 이 API를 만드는데 동참했다.</p><p>기존 Date, Calander와 달리 Thread Safe하고, 날짜 연산 관련된 편의 기능이 많고, TimeOffset/TimeZone 관련된 기능들도 있어서 글로벌 서비스에서도 적합하다.</p><h2 id="LocalTime-LocalDate-LocalDateTime"><a href="#LocalTime-LocalDate-LocalDateTime" class="headerlink" title="LocalTime/LocalDate/LocalDateTime"></a>LocalTime/LocalDate/LocalDateTime</h2><p>시간대(Zone Offset/Zone Region)에 대한 정보가 전혀 없는 API이다.<br>따라서 한국에서 2018-09-07T08:00:04였으면 미국으로 들고가도 2018-09-07T08:00:04이다.<br>이러한 경우는 생일 같은 경우 제일 적합하다.<br>나는 1993-05-30T01:05:30 <a href="https://www.timeanddate.com/time/zones/kst" rel="external nofollow noopener noreferrer" target="_blank">KST</a>(1993-05-29T06:05:30 <a href="https://www.timeanddate.com/time/zones/hast" rel="external nofollow noopener noreferrer" target="_blank">HST</a>)에 태어났고, KST(Korea Standard Time)를 사용하는 한국에서 매년 5월 30일에 생일 파티를 했다.<br>하지만 HST(Hawaii Standard Time)를 쓰는 하와이로 갔다고 해서 내 생일 파티를 매년 5월 29일에 하지 않는다.<br>여전히 내 생일 파티는 매년 5월 30일에 할 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateTimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1993-05-30T01:05:30는 아래와 같이 나타낼 수 있다.  </span></span><br><span class="line">        <span class="keyword">final</span> var birthDateTime = LocalDateTime.of(<span class="number">1993</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">final</span> var birthDate = LocalDate.of(<span class="number">1993</span>, <span class="number">5</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">final</span> var birthTime = LocalTime.of(<span class="number">1</span>, <span class="number">5</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">final</span> var birthDay = LocalDateTime.of(birthDate, birthTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ZoneOffset"><a href="#ZoneOffset" class="headerlink" title="ZoneOffset"></a>ZoneOffset</h2><p>UTC 기준으로 시간(Time Offset)을 나타낸 것이라고 보면 된다.<br>우리나라는 KST를 사용하는데 KST는 <a href="/2018/09/26/date-and-time/#UTC-Coordinated-Universal-Time">UTC</a>보다 9시간이 빠르므로 UTC +09:00으로 표기한다.<br>ZoneOffset은 ZoneId의 자식 클래스이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoneOffsetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// UTC +09:00은 아래와 같이 나타낼 수 있다.  </span></span><br><span class="line">        <span class="keyword">final</span> var zoneOffset = ZoneOffset.of(<span class="string">"+9"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset2 = ZoneOffset.of(<span class="string">"+09"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format = ZoneOffset.of(<span class="string">"+09:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset3 = ZoneOffset.of(<span class="string">"+09:00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset4 = ZoneId.of(<span class="string">"+9"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset5 = ZoneId.of(<span class="string">"+09"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format2 = ZoneId.of(<span class="string">"+09:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset6 = ZoneId.of(<span class="string">"+09:00:00"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// UTC ±00:00은 아래와 같이 나타낼 수 있다.</span></span><br><span class="line">        <span class="keyword">final</span> var zoneOffset7 = ZoneOffset.of(<span class="string">"+0"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset8 = ZoneOffset.of(<span class="string">"-0"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset9 = ZoneOffset.of(<span class="string">"+00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset10 = ZoneOffset.of(<span class="string">"-00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format3 = ZoneOffset.of(<span class="string">"+00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format4 = ZoneOffset.of(<span class="string">"-00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format5 = ZoneOffset.of(<span class="string">"Z"</span>); <span class="comment">// Zulu Time</span></span><br><span class="line">        <span class="keyword">final</span> var zoneOffset11 = ZoneOffset.of(<span class="string">"+00:00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset12 = ZoneOffset.of(<span class="string">"-00:00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset13 = ZoneId.of(<span class="string">"+0"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset14 = ZoneId.of(<span class="string">"-0"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset15 = ZoneId.of(<span class="string">"+00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset16 = ZoneId.of(<span class="string">"-00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format6 = ZoneId.of(<span class="string">"+00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format7 = ZoneId.of(<span class="string">"-00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffsetIso8601Format8 = ZoneId.of(<span class="string">"Z"</span>); <span class="comment">// Zulu Time</span></span><br><span class="line">        <span class="keyword">final</span> var zoneOffset17 = ZoneId.of(<span class="string">"+00:00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneOffset18 = ZoneId.of(<span class="string">"-00:00:00"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ZoneRegion"><a href="#ZoneRegion" class="headerlink" title="ZoneRegion"></a>ZoneRegion</h2><p>Time Zone을 나타낸 것이라고 보면 된다.<br>KST는 타임존의 이름이고 이를 나타내는 ZoneRegion은 Asia/Seoul이다.<br>ZoneRegion은 ZoneId의 자식 클래스이다.<br>하지만 public 클래스가 아니라 외부에서 직접적인 접근은 하지 못해 ZoneId 클래스를 통해서만 생성이 가능하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoneIdTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// KST는 아래와 같이 나타낼 수 있다.  </span></span><br><span class="line">        <span class="keyword">final</span> var zoneId = ZoneId.of(<span class="string">"Asia/Seoul"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId2 = ZoneId.of(<span class="string">"UTC+9"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId3 = ZoneId.of(<span class="string">"UTC+09"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId4 = ZoneId.of(<span class="string">"UTC+09:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId5 = ZoneId.of(<span class="string">"UTC+09:00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId6 = ZoneId.of(<span class="string">"GMT+9"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId7 = ZoneId.of(<span class="string">"GMT+09"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId8 = ZoneId.of(<span class="string">"GMT+09:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId9 = ZoneId.of(<span class="string">"GMT+09:00:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId10 = ZoneId.of(<span class="string">"UT+9"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId11 = ZoneId.of(<span class="string">"UT+09"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId12 = ZoneId.of(<span class="string">"UT+09:00"</span>);</span><br><span class="line">        <span class="keyword">final</span> var zoneId13 = ZoneId.of(<span class="string">"UT+09:00:00"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ZoneRules"><a href="#ZoneRules" class="headerlink" title="ZoneRules"></a>ZoneRules</h2><p>ZoneOffset의 UTC +09:00과 ZoneRegion의 Asia/Seoul을 보면 전혀 차이가 없다.<br>그럼 ZoneOffset과 ZoneRegion은 왜 따로 분리돼있는 걸까?<br>좀 더 지역에 특화된, 지명 등등을 넣어서 그 의미를 살리고자 분리가 되거나 한 걸까?<br>이 차이는 DST(Daylight saving time, 서머타임)와 같은 Time Transition Rule을 포함하느냐, 포함하지 않느냐로 갈린다.<br>ZoneOffset은 Time Transition Rule을 포함하지 않는 ZoneRules를 가진다.<br>ZoneRegion은 Time Transition Rule을 포함할 수도, 포함하지 않을 수도 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoneRulesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// ZoneOffset이기 때문에 Time Transition Rule이 없기 때문에 아무것도 찍히지 않는다.</span></span><br><span class="line">        ZoneOffset.of(<span class="string">"+1"</span>).getRules().getTransitionRules().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ZoneRegion이지만, Time Transition Rule이 없기 때문에 아무것도 찍히지 않는다.</span></span><br><span class="line">        ZoneId.of(<span class="string">"Africa/Brazzaville"</span>).getRules().getTransitionRules().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ZoneRegion이고, Time Transition Rule이 있기 때문에 내용이 찍힌다.</span></span><br><span class="line">        <span class="comment">// TransitionRule[Gap +01:00 to +02:00, SUNDAY on or after MARCH 25 at 02:00 STANDARD, standard offset +01:00]</span></span><br><span class="line">        <span class="comment">// TransitionRule[Overlap +02:00 to +01:00, SUNDAY on or after OCTOBER 25 at 02:00 STANDARD, standard offset +01:00]</span></span><br><span class="line">        ZoneId.of(<span class="string">"CET"</span>).getRules().getTransitionRules().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 UTC+01:00인 <a href="https://www.timeanddate.com/time/zones/cet" rel="external nofollow noopener noreferrer" target="_blank">CET(Central European Time)</a>와 UTC+02:00인 <a href="https://www.timeanddate.com/time/zones/cest" rel="external nofollow noopener noreferrer" target="_blank">CEST(Central European Summer Time)</a>를 왜 구분하지 않는 것일까?<br>그 이유는 CET와 CEST가 동시에 사용되지 않기 때문이다.<br>CET를 사용하는 모든 나라는 CEST도 사용하고 있고, 겨울에는 CET를, 여름에는 CEST를 사용하기 때문에 절대 동시에 사용하지 않는다.  </p><p>이런 ZoneRules는 ZonedDateTime과 사용했을 때 진가를 발휘한다. </p><h2 id="OffsetDateTime"><a href="#OffsetDateTime" class="headerlink" title="OffsetDateTime"></a>OffsetDateTime</h2><p>LocalDateTime + ZoneOffset에 대한 정보까지 포함한 API이다.<br>이러한 경우는 축구 경기 생중계 등등에 적합하다.  </p><p>레알 마드리드와 바르셀로나의 경기인 엘 클라시코 더비의 경우를 살펴보자.<br><img src="/images/java8-date-time/el-clasico-cest.png" alt="바르셀로나 홈 구장인 Camp Nou(바르셀로나에 위치)에서 2018-05-06T20:45:00+02:00에 경기가 시작했다."><br><img src="/images/java8-date-time/el-clasico-kst.png" alt="똑같은 경기를 한국 사람이 보려면 2018-05-07T03:45:00+09:00에 경기가 시작했다."></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OffsetTimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> var barca = OffsetDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">0</span>), ZoneOffset.of(<span class="string">"+2"</span>));</span><br><span class="line">        <span class="comment">// 2018-05-06T20:45+02:00</span></span><br><span class="line">        System.out.println(barca);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> var seoul = OffsetDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">0</span>), ZoneOffset.of(<span class="string">"+9"</span>));</span><br><span class="line">        <span class="comment">// 2018-05-07T03:45+09:00</span></span><br><span class="line">        System.out.println(seoul);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 둘을 UTC로 변환했을 때 같은 시간이기 때문에 둘은 같은 시간이라고 볼 수 있다.</span></span><br><span class="line">        <span class="comment">// 2018-05-06T18:45Z</span></span><br><span class="line">        System.out.println(barca.atZoneSameInstant(ZoneId.of(<span class="string">"Z"</span>)));</span><br><span class="line">        <span class="comment">// 2018-05-06T18:45Z</span></span><br><span class="line">        System.out.println(seoul.atZoneSameInstant(ZoneId.of(<span class="string">"Z"</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1970-01-01T00:00Z</span></span><br><span class="line">        <span class="keyword">final</span> var unixTimeOfUTC = OffsetDateTime.of(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneOffset.UTC);</span><br><span class="line">        <span class="comment">// 1970-01-01T00:00+09:00</span></span><br><span class="line">        <span class="keyword">final</span> var unixTimeOfUTC9 = OffsetDateTime.of(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneOffset.of(<span class="string">"+9"</span>));</span><br><span class="line">        <span class="comment">// false, 둘은 다른 ZoneOffset을 가진다.</span></span><br><span class="line">        System.out.println(unixTimeOfUTC.equals(unixTimeOfUTC9));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1970-01-01T00:00</span></span><br><span class="line">        <span class="keyword">final</span> var unixTimeOfUTCLocalDateTime = unixTimeOfUTC.toLocalDateTime();</span><br><span class="line">        <span class="comment">// 1970-01-01T00:00</span></span><br><span class="line">        <span class="keyword">final</span> var unixTimeOfUTCL9ocalDateTime = unixTimeOfUTC9.toLocalDateTime();</span><br><span class="line">        <span class="comment">// true, LocalDateTime은 ZoneOffset이 없기 때문에 둘 다 똑같은 걸로 취급한다.</span></span><br><span class="line">        System.out.println(unixTimeOfUTCLocalDateTime.equals(unixTimeOfUTCL9ocalDateTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h2><p>OffsetDateTime + ZoneRegion에 대한 정보까지 포함한 API이다.<br>UTC +09:00의 Time Offset을 가지는 Time Zone도 여러가지이다.  </p><ul><li>Asia/Seoul  </li><li>Asia/Tokyo</li><li>등등</li></ul><p>하지만 시간을 나타내는데 있어서 Asia/Seoul을 쓰던 Asia/Tokyo를 쓰던 큰 차이점이 없다.<br>OffsetDateTime과의 차이점은 DST(Daylight Saving Time)와 같은 Time Transition Rule을 포함하는 ZoneRegion을 갖고 있는 ZoneRules의 유무이다.<br>독일 등등에서 사용하는 CET(겨울), CEST(여름)는 서머타임을 사용하지 않는 나라에 사는 나 같은 경우에는 굉장히 생소하다.<br>그래서 어떤 때는 CET를 사용해야하고, 어떤 때는 CEST를 사용해야할지 매우 애매하고 계산하기도 까다롭다.<br>자바에서는 이 두 Time Zone을 하나의 Time Zone(CET)로 통일하고 Time Transition Rule을 가지는 ZoneRules를 통해 알아서 내부적으로 계산해준다.    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZonedDateTimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 2018-03-25T01:59:59+01:00[CET]</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">59</span>), ZoneId.of(<span class="string">"CET"</span>)));</span><br><span class="line">        <span class="comment">// 2018-03-25T03:00+02:00[CET]</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>), ZoneId.of(<span class="string">"CET"</span>)));</span><br><span class="line">        <span class="comment">// 2018-10-28T02:59:59+02:00[CET]</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">59</span>), ZoneId.of(<span class="string">"CET"</span>)));</span><br><span class="line">        <span class="comment">// 2018-10-28T03:00+01:00[CET]</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>), ZoneId.of(<span class="string">"CET"</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// DST 등등의 Time Transition Rule을 사용하지 않는 ZoneRegion이나 ZoneOffset 같은 경우에는 겨울이나 여름이나 UTC 기준 시간이 동일하다.</span></span><br><span class="line">        <span class="comment">// 2018-06-01T00:00+09:00[Asia/Seoul]</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), ZoneId.of(<span class="string">"Asia/Seoul"</span>)));</span><br><span class="line">        <span class="comment">// 2018-12-01T00:00+09:00[Asia/Seoul]</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), ZoneId.of(<span class="string">"Asia/Seoul"</span>)));</span><br><span class="line">        <span class="comment">// 2018-06-01T00:00+09:00</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), ZoneId.of(<span class="string">"+9"</span>)));</span><br><span class="line">        <span class="comment">// 2018-12-01T00:00+09:00</span></span><br><span class="line">        System.out.println(ZonedDateTime.of(LocalDateTime.of(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), ZoneId.of(<span class="string">"+9"</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> var zonedDateTimeOfSeoul = ZonedDateTime.of(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneId.of(<span class="string">"Asia/Seoul"</span>));</span><br><span class="line">        <span class="keyword">final</span> var zonedDateTimeOfTokyo = ZonedDateTime.of(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneId.of(<span class="string">"Asia/Tokyo"</span>));</span><br><span class="line">        <span class="comment">// false, 둘은 다른 Region에서 사용하는 TimeZone을 사용하고 있기 때문이다.</span></span><br><span class="line">        System.out.println(zonedDateTimeOfSeoul.equals(zonedDateTimeOfTokyo));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> var offsetDateTimeOfSeoul = zonedDateTimeOfSeoul.toOffsetDateTime();</span><br><span class="line">        <span class="keyword">final</span> var offsetDateTimeOfTokyo = zonedDateTimeOfTokyo.toOffsetDateTime();</span><br><span class="line">        <span class="comment">// true, 둘은 같은 Offset에 다른 Region이지만, OffsetDateTime은 ZoneRegion에 대한 정보는 없고 ZoneOffset에 대한 정보만 있기 때문에 동일한 것으로 취급한다.</span></span><br><span class="line">        <span class="comment">// 같은 Region에서 사용하는 형식인지 아닌지는 알 수 없다.</span></span><br><span class="line">        System.out.println(offsetDateTimeOfSeoul.equals(offsetDateTimeOfTokyo));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> var zonedDateTimeOfWinter = ZonedDateTime.of(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneId.of(<span class="string">"CET"</span>));</span><br><span class="line">        <span class="keyword">final</span> var zonedDateTimeOfSummer = ZonedDateTime.of(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneId.of(<span class="string">"CET"</span>));</span><br><span class="line">        <span class="comment">// true, 둘 다 CET라는 ZoneRegion이다.</span></span><br><span class="line">        System.out.println(zonedDateTimeOfWinter.getZone().equals(zonedDateTimeOfSummer.getZone()));</span><br><span class="line">        <span class="comment">// false, Offset은 겨울에는 +01:00, 여름에는 +02:00이다.</span></span><br><span class="line">        System.out.println(zonedDateTimeOfWinter.getOffset().equals(zonedDateTimeOfSummer.getOffset()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> var offsetDateTimeOfWinter = zonedDateTimeOfWinter.toOffsetDateTime();</span><br><span class="line">        <span class="keyword">final</span> var offsetDateTimeOfSummer = zonedDateTimeOfSummer.toOffsetDateTime();</span><br><span class="line">        <span class="comment">// false, ZoneRegion이 없어서 ZoneOffset을 갖고 구분해야하는데 둘은 같은 Region에서 사용하는 것인데도 불구하고 다른 Offset을 가진다고 판단해서 </span></span><br><span class="line">        <span class="comment">// OffsetDateTime만으로는 두 날짜가 같은 Region에서 사용하는 건지 아닌지를 알 수 없다.</span></span><br><span class="line">        System.out.println(offsetDateTimeOfWinter.getOffset().equals(offsetDateTimeOfSummer.getOffset()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h2><p>어느 순간을 나타내는 클래스이다.<br><a href="/2018/09/26/date-and-time/">Unix Timestamp</a>를 구할 때 사용한다.<br>0 ~ 999,999,999의 integer 범위(Integer는 10억 단위를 전부 제대로 표시하지 못하기 때문에)의 Unix Timestamp Nanosecond와<br>long의 자료형을 가지는 Unix Timestamp Second(2038년 문제를 해결하기 위해 long을 택한 듯)를 가진다.  </p><p>Unix Timestamp를 사용하는 이유는 기본적으로 integer, long 등등의 숫자 자료형을 가지고 연산을 하기 때문에<br>Local/Offset/ZonedDateTime과 비교했을 때 연산 속도가 훨씬 빠를 것이다.<br>그리고 다양한 NumberUtils의 기능들도 사용할 수 있고, UTC 기준이기 때문에 글로벌한 서비스에서도 매우 적합할 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstantTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 2018-09-26T11:41:56.281466</span></span><br><span class="line">        <span class="keyword">final</span> var localDateTimeNow = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// Unix Timestamp는 UTC 기준인데 LocalDateTime은 이런 정보가 하나도 없기 때문에 어떤 Time Zone인지 알려줘야 Unix Timestamp를 구할 수 있다.</span></span><br><span class="line">        <span class="comment">// Unix Timestamp는 UTC(+00:00)이기 때문에 UTC+09:00인 KST(Asia/Seoul)에서는 9시간을 뺀 시간이 나온다.</span></span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281466Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromAsiaSeoulLocalDateTime = localDateTimeNow.atZone(ZoneId.of(<span class="string">"Asia/Seoul"</span>)).toInstant();</span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281466Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromAsiaSeoulLocalDateTime2 = Instant.from(localDateTimeNow.atZone(ZoneId.of(<span class="string">"Asia/Seoul"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Unix Timestamp는 UTC(+00:00)이기 때문에 UTC(+00:00)인 GMT에서는 동일한 시간이 나온다.</span></span><br><span class="line">        <span class="comment">// 2018-09-26T11:41:56.281466Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromGMTLocalDateTime = localDateTimeNow.atZone(ZoneId.of(<span class="string">"GMT"</span>)).toInstant();</span><br><span class="line">        <span class="comment">// 2018-09-26T11:41:56.281466Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromGMTLocalDateTime2 = Instant.from(localDateTimeNow.atZone(ZoneId.of(<span class="string">"GMT"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ZonedDateTime은 Time Zone을 가지지만 Unix Timestamp는 UTC 기준이기 때문에 어떤 Time Zone으로 세팅해도 알아서 UTC로 변환한다.</span></span><br><span class="line">        <span class="comment">// 시스템의 기본 시간이 KST(UTC+09:00)이기 때문에 9시간을 뺀 시간이 나온다.</span></span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281834Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromZonedDateTime = ZonedDateTime.now().toInstant();</span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281933Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromAsiaSeoulZonedDateTime = ZonedDateTime.now(ZoneId.of(<span class="string">"Asia/Seoul"</span>)).toInstant();</span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281884Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromGMTZonedDateTime = ZonedDateTime.now(ZoneId.of(<span class="string">"GMT"</span>)).toInstant();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// OffsetDateTime은 Time Offset을 가지지만 Unix Timestamp는 UTC 기준이기 때문에 어떤 Time Offset으로 세팅해도 알아서 UTC로 변환한다.</span></span><br><span class="line">        <span class="comment">// 시스템의 기본 시간이 KST(UTC+09:00)이기 때문에 9시간을 뺀 시간이 나온다.</span></span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281834Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromOffsetDateTime = OffsetDateTime.now().toInstant();</span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281834Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromUTC9OffsetDateTime = OffsetDateTime.now(ZoneOffset.of(<span class="string">"+9"</span>)).toInstant();</span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281834Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantFromUTCOffsetDateTime = OffsetDateTime.now(ZoneOffset.UTC).toInstant();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 가장 쉽게 시스템의 Unix Timestamp를 구하는 방법이다.</span></span><br><span class="line">        <span class="comment">// 2018-09-26T02:41:56.281834Z</span></span><br><span class="line">        <span class="keyword">final</span> var instantNow = Instant.now();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// true, LocalDateTime UTC를 빼고 모두 동일하다(시스템 Time Offset이 UTC+09:00인 가정 하에)</span></span><br><span class="line">        <span class="keyword">final</span> var allAreSame = <span class="keyword">new</span> HashSet&lt;&gt;((List.of(instantFromAsiaSeoulLocalDateTime.getEpochSecond(),</span><br><span class="line">                                                      instantFromAsiaSeoulLocalDateTime2.getEpochSecond(),</span><br><span class="line">                                                      instantFromZonedDateTime.getEpochSecond(),</span><br><span class="line">                                                      instantFromGMTZonedDateTime.getEpochSecond(),</span><br><span class="line">                                                      instantFromAsiaSeoulZonedDateTime.getEpochSecond(),</span><br><span class="line">                                                      instantFromOffsetDateTime.getEpochSecond(),</span><br><span class="line">                                                      instantFromUTCOffsetDateTime.getEpochSecond(),</span><br><span class="line">                                                      instantFromUTC9OffsetDateTime.getEpochSecond(),</span><br><span class="line">                                                      instantNow.getEpochSecond()))).size() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Time </tag>
            
            <tag> Date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>날짜와 시간</title>
      <link href="/2018/09/26/date-and-time/"/>
      <url>/2018/09/26/date-and-time/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/date-and-time/thumb.jpg" alt="출처: https://www.sitepoint.com/suggesting-carbon-with-composer-date-and-time-the-right-way/"></p><h2 id="GMT-Greenwich-Mean-Time-vs-UTC-Coordinated-Universal-Time"><a href="#GMT-Greenwich-Mean-Time-vs-UTC-Coordinated-Universal-Time" class="headerlink" title="GMT(Greenwich Mean Time) vs. UTC(Coordinated Universal Time)"></a>GMT(Greenwich Mean Time) vs. UTC(Coordinated Universal Time)</h2><p>세계 표준 시간 관련해서 위 두 키워드가 자주 나오길래 <a href="https://www.google.co.kr/search?newwindow=1&hl=en-KR&rlz=1C5CHFA_enKR721KR721&ei=zc2pW-WIHYq88QXQmKzABQ&q=gmt+vs+utc&oq=gmt+vs+utc&gs_l=psy-ab.3..0i67k1j0i20i263k1j0l3.1063480.1067397.0.1067832.22.18.2.0.0.0.289.2326.0j9j4.14.0....0...1.1j4.64.psy-ab..6.16.2500.6..0i131k1j0i10k1j35i39k1j0i203k1.171.hKhy4qSkjm4" rel="external nofollow noopener noreferrer" target="_blank">구글</a>에서 검색해보았다.  </p><blockquote><p>There is no time difference between Greenwich Mean Time and Coordinated Universal Time.<br>6:13 AM Tuesday, Greenwich Mean Time (GMT) is 6:13 AM Tuesday, Coordinated Universal Time (UTC)  </p></blockquote><a id="more"></a><p>둘의 차이점이 없다고 한다.<br>그래서 다른 사이트를 뒤져보았다.</p><blockquote><p>GMT is a time zone and UTC is a time standard.<br>Although GMT and UTC share the same current time in practice.<br><a href="https://www.timeanddate.com/time/gmt-utc-time.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.timeanddate.com/time/gmt-utc-time.html</a></p></blockquote><p>Time Zone과 Time Standard인 게 차이라는데…<br>둘의 차이는 무엇일까… 찾아보았다.  </p><h3 id="Time-Zone"><a href="#Time-Zone" class="headerlink" title="Time Zone"></a>Time Zone</h3><p>세계에는 다양한 Time Zone이 존재한다.<br>우선 우리나라에서 사용하는 KST(Korea Standard Timezone), 하와이에서 사용하는 HST(Hawaii Standard Time), UK 등등에서 사용하는 <a href="#GMT-Greenwich-Mean-Time">GMT</a> 등등이 있다.</p><h4 id="GMT-Greenwich-Mean-Time"><a href="#GMT-Greenwich-Mean-Time" class="headerlink" title="GMT(Greenwich Mean Time)"></a>GMT(Greenwich Mean Time)</h4><blockquote><p>GMT is a time zone officially used in some European and African countries.<br>The time can be displayed using both the 24-hour format (0 - 24) or the 12-hour format (1 - 12 am/pm).<br><a href="https://www.timeanddate.com/time/gmt-utc-time.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.timeanddate.com/time/gmt-utc-time.html</a>  </p></blockquote><p>뭐, 유럽과 아프리카 쪽에서 주로 사용되는 <strong>타임존</strong>이란다.<br>의문점은 왜 0 ~ 23이 아니라 0 ~ 24라고 표기했을까…<br>0 ~ 23이라고 표기하는 국가도 있고, 1 ~ 24라고 표기하는 국가도 있어서 그런 걸까…?<br>뭐, 짜치는 문제이므로 건너 뛰자.</p><p><a href="https://en.wikipedia.org/wiki/Greenwich" rel="external nofollow noopener noreferrer" target="_blank">Greenwich</a>는 영국에 위치한 도시이고, 경도(longitude)가 0도인 곳이다.<br>다른 경도가 0인 도시도 많을텐데 아마 이런 표준을 제정할 때 영국이 강대국이었을 것이고, 지리 및 정치 기타 등등의 요소로 인해 Greenwich가 선정된 게 아닐까 싶다.  </p><blockquote><p>GMT is based on the Earth’s motion, mainly its daily rotation.<br>  The day is the “mean (average) solar day” of 86,400 (mean solar) seconds.<br>  That’s simply 24 hours of 60 minutes, each with 60 seconds.<br>  <a href="https://www.quora.com/What-is-difference-between-GMT-and-UTC" rel="external nofollow noopener noreferrer" target="_blank">https://www.quora.com/What-is-difference-between-GMT-and-UTC</a></p></blockquote><p>GMT는(아마 다른 타임존들도 동일할 것이다.) 지구의 자전(daily rotation)을 기반으로 한다.<br>따라서 하루(The day)는 지구의 자전을 의미하고, 지구의 자전 주기를 86,400으로 나눈 단위를 <strong>초(Second)</strong>라고 부른다.<br>즉, 천재지변의 사유로 지구의 자전 주기가 조금 느려졌다 하더라도 하루는 86,400<strong>초</strong>로 동일하다.<br><strong>초</strong>의 단위가 절대적이지 않음을 의미한다. </p><h3 id="Time-Standard"><a href="#Time-Standard" class="headerlink" title="Time Standard"></a>Time Standard</h3><p>세계 어디서나 사용할 수 있는 시간의 표준을 의미한다.<br>그 대표는 어디를 기준으로 해야할까?<br>시간은 경도(longitude)에 따라 달라지지, 위도(longitude)에 따라 달라지지 않는다.<br>따라서 경도가 0°인 곳을 기준으로 하다보니 GMT가 Time Standard로 선정됐<strong>었</strong>다.<br>과거형이니 현재는 GMT가 Time Standard가 아님을 의미한다.<br>현재는 UTC가 Time Standard라는 뜻이다.<br>왜 GMT는 Time Standard에서 탈락하게 된 것일까…?  </p><h4 id="UT-Universal-Time"><a href="#UT-Universal-Time" class="headerlink" title="UT(Universal Time)"></a>UT(Universal Time)</h4><blockquote><p>Universal Time (UT) was created at the International Meridian Conference in 1884.<br>  This is the basis for the 24-hour time zone system we know today.<br>  At the time, Greenwich Mean Time (GMT) was chosen as the world’s time standard.<br>  <a href="https://www.timeanddate.com/time/aboututc.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.timeanddate.com/time/aboututc.html</a> </p></blockquote><p>1884년에 UT(24시간 시스템의 기본)가 만들어졌다.<br>이 때 선정된 표준 시간(Time Standard)이 <a href="#GMT-Greenwich-Mean-Time">GMT</a>이다.  </p><h4 id="GMT에서-UTC로…"><a href="#GMT에서-UTC로…" class="headerlink" title="GMT에서 UTC로…"></a>GMT에서 UTC로…</h4><blockquote><p>In 1960, the International Radio Consultative Committee formalized the concept of UTC, and it was put into practice the year after.<br>The name Coordinated Universal Time was officially adopted in 1967.<br>UTC was adjusted several times until 1972.<br><a href="https://www.timeanddate.com/time/aboututc.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.timeanddate.com/time/aboututc.html</a></p></blockquote><p>UTC는 1972년까지 여러 번 제정되었다.</p><blockquote><p>Until 1972, Greenwich Mean Time (also known as Zulu time) was the same as Universal Time (UT).<br>Since then, GMT is no longer a time standard.<br>Today, Greenwich Mean Time (GMT) is only the name of a time zone.<br><a href="https://www.timeanddate.com/time/aboututc.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.timeanddate.com/time/aboututc.html</a></p></blockquote><p>동시에 1972년부터 GMT는 Time Standard의 자리를 박탈당하고 일개 Time Zone에 불과하게 되었다.</p><h3 id="UTC-Coordinated-Universal-Time"><a href="#UTC-Coordinated-Universal-Time" class="headerlink" title="UTC(Coordinated Universal Time)"></a>UTC(Coordinated Universal Time)</h3><blockquote><p>UTC is not a time zone, but a time standard that is the basis for civil time and time zones worldwide.<br>This means that no country or territory officially uses UTC as a local time.<br><a href="https://www.timeanddate.com/time/gmt-utc-time.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.timeanddate.com/time/gmt-utc-time.html</a>    </p></blockquote><p>GMT와는 달리 세계에서 공통적으로 쓰이는 <strong>시간 표준(time standard)</strong>이란다.<br>KST, GMT와 같이 현지 시간을 반영한 Time Zone과 달리 UTC는 현지 시간(local time)이 반영되지 않은, 즉 Time Zone에 얽매이지 않는 게 특징이다.<br>그래서 세계 표준 시간을 언급할 때 UTC가 많이 언급되는 것 같다.</p><blockquote><p>UTC is almost the same as GMT, but it’s based on the scientific definition of a second (the SI second), which does not depend on the time it takes the Earth to rotate.<br>  The day length, based on UTC, is also 86,400 seconds, but they are SI seconds.<br>  The “mean solar day” is about 86,400.002 “SI seconds”.<br>  That difference is very slowly increasing as the rotation period of Earth very slowly increases.<br>  <a href="https://www.quora.com/What-is-difference-between-GMT-and-UTC" rel="external nofollow noopener noreferrer" target="_blank">https://www.quora.com/What-is-difference-between-GMT-and-UTC</a></p></blockquote><p>UTC는 지구의 자전(the Earth to rotate)에 기반하지 않고, <a href="https://en.wikipedia.org/wiki/International_System_of_Units" rel="external nofollow noopener noreferrer" target="_blank">SI 기준</a>의 초(이하 SI Second)에 기반하고 있다.<br>즉 UTC에서는 하루(The day length)는 SI Second로 86,400초이다.<br>절대적인 기준으로 하루를 세기 때문에 GMT(지구의 자전을 기반으로 하는)와는 미세한 차이가 존재한다.<br>이를 보정하기 위해 UTC에서는 <a href="https://ko.wikipedia.org/wiki/%EC%9C%A4%EC%B4%88" rel="external nofollow noopener noreferrer" target="_blank">윤초(Leap Second)</a>라는 개념을 도입했다.</p><p>UTC를 위에 Coordinated Universal Time라고 적어놨는데 왜 UTC라고 줄여서 부르는 걸까…?<br>원래 UTC는 표준 명칭이 CUT(Coordinated Universal Time in English), TUC(Temps Universel Coordonné in French)로 두 개였다.<br>혼란을 줄이기 위해 표준을 정해야하는데 한 쪽의 손을 들어주면 정치적 싸움판이 될테므로 아마 둘 다 택하지 않고 쌩뚱맞은 UTC로 간 게 아닐까… 싶다.<br>하지만 왜 Universal Coordinated Time이 아닌 Coordinated Universal Time이라고 부르는지는 잘 모르겠다…<br>영어가 불어보다는 글로벌하기 때문에 풀네임은 영어권의 손을 들어준 것일까…?</p><h3 id="Zulu-Time"><a href="#Zulu-Time" class="headerlink" title="Zulu Time"></a>Zulu Time</h3><blockquote><p>Zulu (short for “Zulu time”) is used in the military and in navigation generally as a term for Universal Coordinated Time (UCT), sometimes called Universal Time Coordinated ( UTC ) or Coordinated Universal Time (but abbreviated UTC), and formerly called Greenwich Mean Time.<br>  <a href="https://whatis.techtarget.com/definition/Zulu-Zulu-time" rel="external nofollow noopener noreferrer" target="_blank">https://whatis.techtarget.com/definition/Zulu-Zulu-time</a></p></blockquote><p>짧게는 Zulu라고 부르고, 군사적이나 배, 비행기 항법 등등에서 주로 사용한다.  </p><blockquote><p>Zulu Time Zone (Z) has no offset from Coordinated Universal Time (UTC).<br>  Zulu Time Zone is often used in aviation and the military as another name for UTC +0.<br>  <a href="https://www.timeanddate.com/time/zones/z" rel="external nofollow noopener noreferrer" target="_blank">https://www.timeanddate.com/time/zones/z</a></p></blockquote><p>UTC +0(GMT가 아니다)의 또다른 이름으로 이해하면 될 것 같다.</p><h2 id="그래서-우리나라는…"><a href="#그래서-우리나라는…" class="headerlink" title="그래서 우리나라는…?"></a>그래서 우리나라는…?</h2><p>우리나라는 <strong>KST(Korea Standard Time)</strong>를 사용하고 있다.<br>KST는 UTC에 9시간을 더한 시간으로 <strong>UTC +9</strong> 와 같이 표기하고 있다.<br>그리고 UTC +9을 사용하는 나라가 더 있는데 대표적으로 일본이 있다.<br>하지만 KST는 우리나라에서나 사용하지, 일본에서는 <strong>JST(Japan Standard Time)</strong>를 사용하고 있다.<br>따라서 <a href="https://www.zeitverschiebung.net/en/difference/country/kr/city/1850147" rel="external nofollow noopener noreferrer" target="_blank">일본과 우리나라는 세계 시간이 동일</a>하다.    </p><p>또한 영토가 좌우로 쭉 뻗은 미국 같은 경우에는 여러 타임존(HST(Hawaii Standard Time), PDT(Pacific Daylight Time) 등등)을 사용하고 있다.</p><p>이러한 사유로 AWS RDS의 기본 타임존은 UTC이고, 우리는 현재 시간을 저장(now())했다고 판단했는데 DB에 저장된 시간을 보면 9시간 이전의 시간이 저장된 사례를 볼 수 있다.<br>이게 바로 우리나라가 UTC +9인 KST를 사용하고 있기 때문이다.  </p><h2 id="ISO-8601-Date-and-time-format"><a href="#ISO-8601-Date-and-time-format" class="headerlink" title="ISO-8601 - Date and time format"></a><a href="https://en.wikipedia.org/wiki/ISO_8601" rel="external nofollow noopener noreferrer" target="_blank">ISO-8601 - Date and time format</a></h2><p><a href="https://en.wikipedia.org/wiki/International_Organization_for_Standardization" rel="external nofollow noopener noreferrer" target="_blank">ISO(International Organization for Standardization)</a>는 세계에서 인정하는 표준을 정의하는 기관이다.<br>이 기관에서 시간과 날짜에 관한 표준을 지정하였는데 이게 이 기관에서 정한 8601번 째 표준이라는 의미이다.<br>자바를 비롯해서 많은 프로그래밍 언어에서 날짜와 시간을 표기할 때 위 표준을 준수하고 있다.  </p><p><img src="date-format-by-country.svg" alt="나라별 날짜 형식, 청록색이 일-월-연, 황색이 연-월-일, 자주색이 월-일-연, 적색이 일-월-연과 월-일-연 혼용"><br>사진에서 보다싶이 동아시아권(한국, 일본, 중국 등등)에서는 연-월-일의 순서로 표기한다.<br>하지만 다른 많은 나라에서는 일-월-연, 월-일-연 등등 아주 다양하게 쓰고 있다.<br>우리나라에서는 1970년 01월 02일을 표기할 때 1970-01-02이지만, 미국에서는 02-01-1970이 된다.<br>이런 혼란을 줄이고자 ISO 8601이 나오게 된 것이다.  </p><p>기본적인 규칙은 다음과 같다.  </p><ul><li>큰 단위부터 작은 단위로(연 월 일 시 분 초) 표기한다.  </li><li>0 ~ 9의 숫자는 00 ~ 09와 같이 표기한다.  </li><li>날짜는 <strong>-</strong>을 구분자(delimiter)로 사용하고, 시간은 <strong>:</strong>을 구분자(delimiter)로 사용한다.  </li><li>Time Zone(KST, GMC 등등) 대신에 UTC를 기준으로 시간대를 ±기호를 사용해서 표기한다.</li></ul><p>포스팅 날짜 및 시간인 2018년 9월 26일 00시 10분 13초 KST를 ISO 8601 표기법으로 나타내면 다음과 같다.<br>2018-09-26T00:10:13+09:00<br>2018-09-25T15:10:13+00:00<br>2018-09-25T15:10:13Z<br>여기서 T는 날짜와 시간의 구분자(delimiter)이고, Z는 <a href="#Zulu-Time">Zulu Time</a>을 의미한다.  </p><p>꼭 날짜와 시간을 함께 표시할 필요는 없고 날짜만 표기해도 ISO 8601 표준을 준수했다고 볼 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Time </tag>
            
            <tag> Date </tag>
            
            <tag> UTC </tag>
            
            <tag> GMT </tag>
            
            <tag> Zulu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unix Timestamp</title>
      <link href="/2018/09/25/unix-timestamp/"/>
      <url>/2018/09/25/unix-timestamp/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/unix-timestamp/thumb.jpg" alt="https://en.wikipedia.org/wiki/Unix_time"></p><p>들어가기 앞서 Unix Timestamp의 동의어를 살펴보자.  </p><ul><li>Epoch Posix Time</li><li>Epoch Posix Timestamp</li><li>Epoch Unix Time</li><li>Epoch Unix Timestamp</li><li>Posix Epoch</li><li>Posix Epoch Time</li><li>Posix Epoch Timestamp</li><li>Posix Time</li><li>Posix Timestamp  </li><li>Unix Epoch  </li><li>Unix Epoch Time  </li><li>Unix Epoch Timestamp  </li><li>Unix Time  </li><li>Unix Timestamp</li></ul><a id="more"></a><p>그냥 Epoch, Unix, Posix, Time, Timestamp 등의 조합으로 이뤄진 것 같다…</p><h2 id="Epoch가-뭐지"><a href="#Epoch가-뭐지" class="headerlink" title="Epoch가 뭐지?"></a>Epoch가 뭐지?</h2><blockquote><p>An epoch means an instant in time chosen as the origin of a particular era.<br>  The “epoch” then serves as a reference point from which time is measured.<br>  Time measurement units are counted from the epoch so that the date and time of events can be specified unambiguously.<br>  <a href="https://www.symantec.com/connect/articles/what-epoch-time-and-how-convert-human-understandable-format" rel="external nofollow noopener noreferrer" target="_blank">https://www.symantec.com/connect/articles/what-epoch-time-and-how-convert-human-understandable-format</a></p></blockquote><p>시간을 측정하는 기준점을 Epoch라고 부르는 것 같다.  </p><blockquote><p>In a machine, time is represented by a counter: At the center of a system is a quartz-crystal heart that pulses every second, and each second is added to the count.<br>  For a computer to have any comprehension of now, it must determine how many seconds have elapsed since then – and the earliest then is called the “epoch,” or the theoretical time the clock began ticking.<br>  <a href="https://www.wired.com/2001/09/unix-tick-tocks-to-a-billion/" rel="external nofollow noopener noreferrer" target="_blank">https://www.wired.com/2001/09/unix-tick-tocks-to-a-billion/</a></p></blockquote><p>PC에서 시간은 카운터로 표시되고, 매 초마다 카운트가 증가한다.<br>컴퓨터는 현재 시간(now)을 알려면 “epoch”라고 불리는 것으로부터 얼마나 흘렀는지 알아야한다.</p><h2 id="그래서-그게-뭔데"><a href="#그래서-그게-뭔데" class="headerlink" title="그래서 그게 뭔데?"></a>그래서 그게 뭔데?</h2><p><a href="https://en.wikipedia.org/wiki/ISO_8601" rel="external nofollow noopener noreferrer" target="_blank">ISO 8601</a> 표기법 1970-01-01T00:00:00Z 기준으로 현재까지 몇 초가 지났는지를 나타내는 것이다.<br><a href="https://ko.wikipedia.org/wiki/%EC%9C%A4%EC%B4%88" rel="external nofollow noopener noreferrer" target="_blank">윤초(Leap Second)</a>는 포함하지 않는다.<br>1970-01-01T00:00:00Z는 Unix Timestamp가 0이고, 1970-01-01T00:00:01Z은 Unix Timestamp가 1이고, 1969-12-31T23:59:59Z는 Unix Timestamp가 -1이다.  </p><h2 id="왜-1970년-01월-01일-00시-00분-00초를-기준으로-했을까"><a href="#왜-1970년-01월-01일-00시-00분-00초를-기준으로-했을까" class="headerlink" title="왜 1970년 01월 01일 00시 00분 00초를 기준으로 했을까?"></a>왜 1970년 01월 01일 00시 00분 00초를 기준으로 했을까?</h2><p>Unix의 <a href="https://namu.wiki/w/10%EC%96%B5%20%EC%B4%88%20%EB%AC%B8%EC%A0%9C" rel="external nofollow noopener noreferrer" target="_blank">10억 초 문제</a>를 기념해 2001년 9월 8일에 쓰여진 <a href="https://www.wired.com/2001/09/unix-tick-tocks-to-a-billion/" rel="external nofollow noopener noreferrer" target="_blank">UNIX TICK TOCKS TO A BILLION</a>의 기사를 찾아보니 그 설명이 나온다.  </p><blockquote><p>The Unix epoch is midnight on January 1, 1970. It’s important to remember that this isn’t Unix’s “birthday” – rough versions of the operating system were around in the 1960s.<br>  Instead, the date was programmed into the system sometime in the early 70s only because it was convenient to do so, according to Dennis Ritchie, one the engineers who worked on Unix at Bell Labs at its inception.</p></blockquote><p>Unix Epoch(Unix OS에서 사용되는 Epoch)는 Unix OS의 탄생일이 아니다. (이미 1960년대에 Unix의 대략적인 버전은 이미 존재했다는 것 같다.)<br>그냥 1970년이 프로그래밍 하기 편리해보여서 지정한 걸로 보인다.</p><blockquote><p>“At the time we didn’t have tapes and we had a couple of file-systems running and we kept changing the origin of time,” he said.<br>  “So finally we said, ‘Let’s pick one thing that’s not going to overflow for a while.’ 1970 seemed to be as good as any.”</p></blockquote><p>그냥 1970년이 진짜 날짜/시간을 계산하기에 <strong>당분간</strong> 편리해보여서 선택했다고 한다.<br>왜 <strong>당분간</strong>일까?</p><h2 id="2038년-문제"><a href="#2038년-문제" class="headerlink" title="2038년 문제"></a><a href="https://namu.wiki/w/2038%EB%85%84%20%EB%AC%B8%EC%A0%9C" rel="external nofollow noopener noreferrer" target="_blank">2038년 문제</a></h2><p>위에 언급한 <a href="https://namu.wiki/w/10%EC%96%B5%20%EC%B4%88%20%EB%AC%B8%EC%A0%9C" rel="external nofollow noopener noreferrer" target="_blank">10억 초 문제</a>를 비롯해 <a href="https://namu.wiki/w/497%EC%9D%BC%20%EB%AC%B8%EC%A0%9C" rel="external nofollow noopener noreferrer" target="_blank">497일 문제</a> 등등이 있지만 여기서는 2038년 문제만 다뤄보겠다.  </p><p>이는 32bit Integer의 Overflow 현상을 이해하면 된다.<br>Unix Timestamp가 만들어질 당시 대부분 32bit OS 밖에 존재하지 않았다.<br>32bit Integer의 범위는 −2,147,483,648 (−2³²) ~ 2,147,483,647 (2³¹ − 1)이다.<br>Unsigned Integer를 사용할 경우 부호를 없애서 0 ~ 4,294,967,295 (2³² − 1)까지 가능하지만 1970-01-01T00:00:00Z 이전을 나타낼 수 없으므로 어쩔 수 없이 Signed Integer를 사용했다.<br>따라서 1970-01-01T00:00:00Z에서 2,147,483,647초를 더하면 2038-01-19T03:14:07Z인데(Unix Timestamp 2,147,483,647),<br>여기서 1초가 추가된 2038-01-19T03:14:08Z이 되는 순간 Unix Timestamp 0이 되어 시스템은 1970-01-01T00:00:00Z와 동일한 시간으로 인식한다.<br>즉, 타임머신을 돌렸다고 보면 된다. </p><p>그냥 와, 타임머신 탔다~ 신기하다~로 끝나는 게 아니다.<br>대부분의 서버는 Unix 기반(Linux도 Unix 기반이고 Mac OS도 Unix 기반이므로 시스템의 시간을 나타낼 때 Unix Timestamp를 사용한다.)이기 때문에<br>현재 시간이 1970년대로 표시되고, 시간을 처리하는 로직들(금융권, 각종 행정 처리, 특정 기간 동안의 이벤트 등등)이 망가질 것이다.  </p><p>해결책으로는 아주~ 간단하게 생각했을 때 64bit OS를 사용하면 해결될 일이다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Time </tag>
            
            <tag> Unix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(AWS) Security Group에서 다른 Security Group을 참조하는 경우</title>
      <link href="/2018/08/30/aws-security-group-reference-another-security-group/"/>
      <url>/2018/08/30/aws-security-group-reference-another-security-group/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/aws-security-group-reference-another-security-group/thumb.png" alt=""></p><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><p>결제 서비스는 아래와 같은 접근 경로를 허용해야한다.  </p><ol><li>사내</li><li>결제 서비스 개발자의 작업 공간</li><li>A라는 웹 서비스  </li></ol><p>따라서 아래와 같은 Security Group을 가져야한다.</p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>12.34.44.12/32</td><td>Developer Home</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>13.44.12.55/32</td><td>Developer Cafe</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>22.33.44.11/32</td><td>Office</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>77.33.44.22/32</td><td>A Web Service</td></tr></tbody></table><a id="more"></a><p>또한 인증 서비스는 아래와 같은 접근 경로를 허용해야한다.  </p><ol><li>사내</li><li>개발자의 작업 공간</li><li>B라는 웹 서비스</li></ol><p>따라서 아래와 같은 Security Group을 가져야한다.</p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>12.34.44.12/32</td><td>Developer Home</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>13.44.12.55/32</td><td>Developer Cafe</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>22.33.44.11/32</td><td>Office</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>41.22.44.22/32</td><td>B Web Service</td></tr></tbody></table><p>결제 서비스의 Security Group과 인증 서비스의 Security Group은 <code>어떤 웹 서비스에서 접근해야하느냐</code>만 다르고, 나머진 동일하다.<br>위와 같은 문제는 개발자나 사내의 IP(즉 <code>공통된 부분</code>)이 변경됐을 때 각 시큐리티 그룹을 <code>일일이 찾아서 수정</code>해줘야한다는 문제점이 존재한다.</p><p>따라서 먼저 공통 부분을 Security Group으로 뺏다. (id는 sg-workaround라고 가정)<br>이렇게 하면 공통된 부분이 변경됐을 때 일일이 찾아다녀도 되지 않는다는 장점이 존재한다.  </p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>12.34.44.12/32</td><td>Developer Home</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>13.44.12.55/32</td><td>Developer Cafe</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>22.33.44.11/32</td><td>Office</td></tr></tbody></table><p>그리고 다시 결제 서비스 Security Group을 만들었다.  </p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>sg-workaround</td><td>Developer + Office</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>77.33.44.22/32</td><td>A Web Service</td></tr></tbody></table><p>그리고 다시 인증 서비스 Security Group을 만들었다.</p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>sg-workaround</td><td>Developer + Office</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>41.22.44.22/32</td><td>B Web Service</td></tr></tbody></table><p>Security Group을 리팩토링(?)해서 공통된 부분을 추출해서 장애의 가능성을 좀 더 줄였다.<br>하지만 위와 같이 작동을 할까?<br>답은 <strong>아니다</strong>.  </p><h2 id="문제-해결"><a href="#문제-해결" class="headerlink" title="문제 해결"></a>문제 해결</h2><p>Security Group의 Source 부분에 다른 Security Group을 추가하는 것은 <code>중첩이나 상속 등등을 의미하지 않는다</code>.<br><a href="#Security-Group에서-다른-Security-Group을-참조하는-경우">Security Group에서 다른 Security Group을 참조하는 경우</a>가 어떨 때 쓰는 건지는 좀 이따 설명하겠다.<br>우리는 우선 위 문제부터 해결해보자.  </p><p>우선 공통된 부분을 따로 빼야한다는 사실은 변하지 않는다. (id는 sg-workaround라고 가정)<br>이렇게 하면 공통된 부분이 변경됐을 때 일일이 찾아다녀도 되지 않는다는 장점이 존재한다.  </p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>12.34.44.12/32</td><td>Developer Home</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>13.44.12.55/32</td><td>Developer Cafe</td></tr><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>22.33.44.11/32</td><td>Office</td></tr></tbody></table><p>그리고 결제 서비스에서만 차이점을 가지는 서버들을 시큐리티 그룹에 추가해주자. (id는 sg-payment라고 가정)</p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>77.33.44.22/32</td><td>A Web Service</td></tr></tbody></table><p>그리고 인증 서비스에서만 차이점을 가지는 서버들을 시큐리티 그룹에 추가해주자. (id는 sg-auth라고 가정)</p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>41.22.44.22/32</td><td>B Web Service</td></tr></tbody></table><p>그리고 결제 서비스의 Security Group에는 sg-workaround, sg-payment 두 개를 적용하고,<br>인증 서비스의 Security Group에는 sg-workaround, sg-auth 두 개를 적용해주면 된다.  </p><p>이거보다 더 나은 방법이 있으면 댓글 남겨주시면 감사하겠습니다 :)</p><h2 id="Security-Group에서-다른-Security-Group을-참조하는-경우"><a href="#Security-Group에서-다른-Security-Group을-참조하는-경우" class="headerlink" title="Security Group에서 다른 Security Group을 참조하는 경우"></a>Security Group에서 다른 Security Group을 참조하는 경우</h2><p>시큐리티 그룹을 source에 왜 할당할 수 있는 걸까??<br>Elastic Load Balancer(AWS에서 제공하는 Load Balancer라고 보면 됨, 이하 ELB) - EC2(AWS에서 제공하는 웹 서버라고 보면 됨) 구조를 이해하면 편하다.<br>여기서 가정할 것은 ELB는 public subnet에 있어서 외부에서 바로 접근이 가능해야하고,<br>EC2 인스턴스는 private subnet에 있어서 외부에서 접근이 불가능 하고, 오직 ELB를 통해서만 접근이 가능하다는 점이다.  </p><p>우선 ELB의 Security Group부터 구성해보자. (id는 sg-elb라고 가정.)  </p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTPS</td><td>TCP</td><td>443</td><td>0.0.0.0/0</td><td>public access</td></tr></tbody></table><p>EC2 인스턴스로는 다이렉트로 요청이 오는 게 아니라 무조건 ELB를 통해서 온다.<br>ELB와 EC2 사이의 통신은 private network를 통해 이뤄지므로 외부로 패킷이 새어나갈 일이 거의 없다고 보면 된다.<br>따라서 EC2 인스턴스와 ELB 사이의 통신은 HTTPS일 필요가 없으므로 EC2에는 TLS(SSL) 인증서를 붙일 필요도 없고, ELB의 http 포트(80번)만 열어주면 되고,<br>ELB의 IP를 EC2 인스턴스의 시큐리티 그룹으로 추가해주면 된다.  </p><p><img src="/images/aws-security-group-reference-another-security-group/elb.png" alt="하지만 ELB 어디를 보더라도 IP 주소는 나와있지 않고 DNS만 나와있는 걸 볼 수 있다.">  </p><p><img src="/images/aws-security-group-reference-another-security-group/elb-ip.png" alt="nslookup을 때려보면 ELB의 IP 주소가 두 개인 걸 알 수 있다."><br>AWS에서는 ELB가 죽으면 서비스가 죽는 걸(SPOF, Single Point of Failure) 방지하고자 ELB까지 이중화했다.<br>AWS의 이런 세심한 배려 덕분에 우리는 EC2의 Security Group을 다음과 같이 구성하면 된다.<br><a href="https://blog.wisen.co.kr/?p=1926" rel="external nofollow noopener noreferrer" target="_blank">Network Load Balancer</a>의 경우에는 Elastic IP(AWS에서 제공하는 고정 IP, 이하 EIP)를 설정하고 그것만 등록하면 된다.  </p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>13.124.xxx.124/32</td><td>ELB 1</td></tr><tr><td>HTTP</td><td>TCP</td><td>80</td><td>13.209.xxx.125/32</td><td>ELB 2</td></tr></tbody></table><p>하지만 위와 같이 설정해도 다음과 같은 문제가 존재한다.<br>시간이 지나면 ELB의 ip는 변한다.<br>또한 우리는 <code>Public</code> DNS를 가지고 nslookup 명령어를 때려서 ip 주소를 가져왔다.<br><code>Public</code> DNS를 가지고 온 ip는 <code>Public</code> ip이다. (13.124.xxx.124, 13.209.xxx.125)<br>ELB와 EC2 사이의 통신은 private network를 통해 이뤄지므로 ELB의 <code>private ip</code>가 Security Group에 추가돼야한다.<br>하지만 우리는 ELB의 private ip를 알 방법이 없다.  </p><p>방법이 없는 것은 아니다.<br>private ip는 서브넷의 cidr block 안에서 생성된다.<br>따라서 elb가 존재하는 public subnet의 cidr block을 설정하면 된다. (여기서는 cidr block을 가정하겠다.)  </p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>10.0.1.0/24</td><td>Public Subnet</td></tr></tbody></table><p>위와 같이 설정하면 ELB를 통해서 접속은 <code>된다</code>.<br>하지만 한 가지 문제점이 존재한다.<br>해당 서브넷의 모든 리소스가 EC2 인스턴스에 접근이 가능하다는 문제점이 존재한다.  </p><p>private ip는 고정할 수 없고, ELB의 private ip는 알 방법이 없는데 어떻게 해당 ELB만 EC2에 접근할 수 있게 설정할 수 있을까?<br>해답은 바로 EC2의 Security Group에 ELB의 Security Group을 추가하는 것이다.  </p><table><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>sg-elb</td><td>ELB</td></tr></tbody></table><p>위와 같이 설정하면 <code>sg-elb를 사용하는 리소스를 통과한 호스트들</code>만 EC2로 다시 통과할 수 있게 되는 구조다.  </p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Security Group </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YAML</title>
      <link href="/2018/08/19/yaml/"/>
      <url>/2018/08/19/yaml/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/yaml/thumbs.png" alt="YAML Ain&#39;t Markup Language">    </p><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a><a href="http://yaml.org/" rel="external nofollow noopener noreferrer" target="_blank">YAML</a></h2><blockquote><p>YAML Ain’t Markup Language<br>YAML is a human friendly data serialization standard for all programming languages.</p></blockquote><p>YAML은 마크업 언어가 아니고, <code>사람에게 친숙한 데이터 Serializaition 표준</code>이다.<br>아마 X<strong>ML</strong>, HT<strong>ML</strong>과 같이 YA<strong>ML</strong>도 <strong>ML</strong>이 들어가서 사람들의 오해를 샀던 모양이다.<br>마크업 언어는 태그를 이용하여 문서나 데이터의 구조를 표현하는 언어이다. (HTML, XML)<br>Serialization(직렬화)은 데이터를 시스템 외부(파일로 쓰거나 네트워크로 전송하거나)에서 사용할 때 사용한다. (Byte Array, <a href="https://www.json.org/" rel="external nofollow noopener noreferrer" target="_blank">JSON</a>, YAML)  </p><a id="more"></a><p><img src="/images/yaml/snake-yaml.png" alt="Spring Boot 2의 기본 디펜던시에 포함된 SnakeYAML"><br><a href="https://spring.io/" rel="external nofollow noopener noreferrer" target="_blank">Spring</a>에서는 YAML Parser인 <a href="https://bitbucket.org/asomov/snakeyaml" rel="external nofollow noopener noreferrer" target="_blank">SnakeYAML</a>이 내장돼있다.<br>따라서 YAML 파일을 POJO로 매핑할 수도 있고, Configuration 파일에서도 사용할 수 있다.<br>주의사항은 Spring에 내장된 <a href="https://mvnrepository.com/artifact/org.yaml/snakeyaml" rel="external nofollow noopener noreferrer" target="_blank">SankeYAML은 YAML 1.1 스펙을 구현한 점</a>이다.  </p><p><img src="/images/yaml/js-yaml.png" alt="Hexo의 기본 디펜던시에 포함된 js-yaml"><br><a href="https://nodejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Node.js</a> 기반의 블로그 프레임워크인 <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>에서도<br><a href="https://github.com/nodeca/js-yaml" rel="external nofollow noopener noreferrer" target="_blank">JS-YAML</a>이라는 YAML Parser를 이용해 Configuration을 설정하고 있다.<br>JS-YAML은 Python의 YAML Parser인 <a href="https://pyyaml.org/" rel="external nofollow noopener noreferrer" target="_blank">PyYAML</a>을 포팅하면서 처음에는 YAML 1.1 스펙을 지원했는데, 현재는 YAML 1.2 스펙까지 구현했다.  </p><h3 id="YAML-vs-JSON"><a href="#YAML-vs-JSON" class="headerlink" title="YAML vs. JSON"></a>YAML vs. JSON</h3><blockquote><p>JSON’s foremost design goal is simplicity and universality.<br>Thus, JSON is trivial to generate and parse, at the cost of reduced human readability.<br>In contrast, YAML’s foremost design goals are human readability and support for serializing arbitrary native data structures.<br>Thus, YAML allows for extremely readable files, but is more complex to generate and parse.  </p></blockquote><p>JSON의 최우선 설계 목표는 간편성과 보편성이다. 따라서 JSON은 가독성을 조금 떨어트리는 대신에 생성 및 파싱이 용이하다.<br>반면에 YAML의 최우선 설계 목표는 가독성과 데이터 구조 Serialization이다. 따라서 YAML은 사람이 읽기 쉬운 반면에 생성 및 파싱이 JSON 보다 복잡하다.</p><blockquote><p>YAML can therefore be viewed as a natural superset of JSON.<br>This is also the case in practice; every JSON file is also a valid YAML file.<br>This makes it easy to migrate from JSON to YAML if/when the additional features are required.  </p></blockquote><p>YAML을 JSON의 Superset으로 볼 수도 있다.<br>모든 JSON 파일은 유효한 YAML 파일이다.<br>따라서 JSON에서 YAML로 마이그레이션 하기가 용이하다.  </p><h4 id="가독성"><a href="#가독성" class="headerlink" title="가독성"></a>가독성</h4><p>YAML 홈페이지 조차도 아래와 같이 유효한 YAML 문법으로 이루어져있다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML</span> <span class="number">1.2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Projects:</span></span><br><span class="line">  <span class="string">C/C++</span> <span class="attr">Libraries:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">libyaml</span>            <span class="comment"># "C" Fast YAML 1.1</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">libcyaml</span>           <span class="comment"># YAML de/serialization of C data structures (using libyaml)</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Syck</span>               <span class="comment"># (dated) "C" YAML 1.0</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yaml-cpp</span>           <span class="comment"># C++ YAML 1.2 implementation</span></span><br></pre></td></tr></table></figure><p>과연 JSON 형태로 YAML 홈페이지를 가독성 좋게 표현할 수 있었을까…?</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Projects"</span>: &#123;</span><br><span class="line">    <span class="attr">"C/C++ Libraries"</span>: [<span class="string">"libyaml"</span>, <span class="string">"libcyaml"</span>, <span class="string">"Syck"</span>, <span class="string">"yaml-cpp"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="퍼포먼스"><a href="#퍼포먼스" class="headerlink" title="퍼포먼스"></a>퍼포먼스</h4><blockquote><p>JSON It also uses a lowest common denominator information model, ensuring any JSON data can be easily processed by every modern programming environment.<br>YAML ventures beyond the lowest common denominator data types, requiring more complex processing when crossing between different programming environments.  </p></blockquote><p>JSON 보다 <a href="http://yaml.org/spec/1.2/spec.html#id2763452" rel="external nofollow noopener noreferrer" target="_blank">YAML의 모델</a>이 좀 더 복잡하기 때문에 파싱하고 생성하는데 YAML이 더 느리다.<br>속도도 느린데 직접 파싱을 한다고 생각해도 JSON이 훨씬 간단하다.</p><h4 id="용도"><a href="#용도" class="headerlink" title="용도"></a>용도</h4><ul><li>대부분의 웹 기술(<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX" rel="external nofollow noopener noreferrer" target="_blank">AJAX</a> 등등)에서 데이터 통신을 위해서 성능을 위한 것인지는 잘 모르겠지만 대부분 JSON을 많이 사용하고,<br><a href="#Anchor-amp-Alias">reference</a>가 있는 YAML은 복잡한 object 구조를 표현하는데 적합해서, 오프라인에서 data serialization을 위해 더 적합하다.     </li><li>파이썬 커뮤니티에서는 <code>{ } [ ] : ,</code>과 같은 <a href="#Flow-Style-Indicator">Indicator</a> 보다는 파이썬 문법과 비슷한 <a href="#Indentation">indent</a>로 indicate level을 구분하는 YAML을 더 선호하고,<br>자바스크립트 진영에서는 별도의 파서가 필요없고, Javascript Object와 구조가 유사한 JSON을 선호하는 편이다.  </li></ul><h4 id="그-외"><a href="#그-외" class="headerlink" title="그 외."></a>그 외.</h4><ul><li>JSON은 주석이 없다.  </li><li>YAML은 <a href="#Multiple-Documents">한 파일에 여러 Document</a>를 표현할 수 있다.</li><li><blockquote><p>JSON’s RFC4627 requires that mappings keys merely “SHOULD” be unique, while YAML insists they “MUST” be.<br>Technically, YAML therefore complies with the JSON spec, choosing to treat duplicates as an error.<br>In practice, since JSON is silent on the semantics of such duplicates, the only portable JSON files are those with unique keys, which are therefore valid YAML files.</p></blockquote></li></ul><p>JSON은 Key의 중복을 Warning으로 표시하지만, YAML은 허용하지 않는다.  </p><h3 id="YAML-vs-XML"><a href="#YAML-vs-XML" class="headerlink" title="YAML vs. XML"></a>YAML vs. XML</h3><blockquote><p>two languages may actually compete in several application domains, there is no direct correlation between them.<br>  YAML is primarily a data serialization language.<br>  XML was designed to be backwards compatible with the Standard Generalized Markup Language (SGML), which was designed to support structured documentation.</p></blockquote><p>XML과 YAML은 전혀 연관이 없다.<br>XML은 구조화된 문서를 위해 설계된 언어이고, YAML은 data serialization을 위해 설계된 언어이다.   </p><h3 id="Version-1-2-Specification"><a href="#Version-1-2-Specification" class="headerlink" title="Version 1.2 Specification"></a><a href="http://yaml.org/spec/1.2/spec.html" rel="external nofollow noopener noreferrer" target="_blank">Version 1.2 Specification</a></h3><p>1.1에서 1.2로 바뀐 주요 사항은 JSON의 Superset처럼 동작하기 위해서 많은 사항들이 바뀌었다.  </p><blockquote><p>All other characters, including the form feed (#x0C), are considered to be non-break characters.<br>  Note that these include the non-ASCII line breaks: next line (#x85), line separator (#x2028) and paragraph separator (#x2029).<br>  YAML version 1.1 did support the above non-ASCII line break characters; however, JSON does not.<br>  Hence, to ensure JSON compatibility, YAML treats them as non-break characters as of version 1.2. In theory this would cause incompatibility with version 1.1;<br>  in practice these characters were rarely (if ever) used.<br>  YAML 1.2 processors parsing a version 1.1 document should therefore treat these line breaks as non-break characters, with an appropriate warning.</p></blockquote><p>따라서 JSON Syntax를 YAML 1.2에서는 거의 완벽하게 지원한다.  </p><h4 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h4><blockquote><p>YAML is easily readable by humans.  </p></blockquote><p>YAML은 사람이 읽기 쉽다.</p><blockquote><p>YAML data is portable between programming languages.  </p></blockquote><p>YAML 데이터는 프로그래밍 언어 간에 이동이 가능하다.</p><blockquote><p>YAML matches the native data structures of agile languages.  </p></blockquote><p>YAML은 agile 언어의 native data structure와 매치된다.  </p><blockquote><p>YAML’s core type system is based on the requirements of agile languages such as Perl, Python, and Ruby.<br>YAML directly supports both collections (mappings, sequences) and scalars.<br>Support for these common types enables programmers to use their language’s native data structures for YAML manipulation</p></blockquote><p>Perl, Python, Ruby와 같은 agile language에 존재하는 <a href="#Scalar">scalar</a>, <a href="#Collections">collection</a> 타입을 지원해서,<br>프로그래머가 native data structure를 조작하기가 용이하다.  </p><blockquote><p>YAML has a consistent model to support generic tools.</p></blockquote><p>YAML은 parser들을 위해서 <a href="http://yaml.org/spec/1.2/spec.html#id2763452" rel="external nofollow noopener noreferrer" target="_blank">일관적인 모델</a>이 있다.  </p><blockquote><p>YAML supports one-pass processing.</p></blockquote><p>YAML은 <a href="http://yaml.org/spec/1.2/spec.html#id2762107" rel="external nofollow noopener noreferrer" target="_blank">one-pass processing</a>을 지원한다.  </p><blockquote><p>YAML is expressive and extensible.</p></blockquote><p>YAML은 표현력과 확장성이 뛰어나다.  </p><blockquote><p>YAML is easy to implement and use.</p></blockquote><p>YAML은 구현 및 사용이 쉽다.  </p><h4 id="Prior-Art-들어가기에-앞서"><a href="#Prior-Art-들어가기에-앞서" class="headerlink" title="Prior Art(들어가기에 앞서?)"></a>Prior Art(들어가기에 앞서?)</h4><p>HTML의 EOL(End of Line)에 영감을 받아서 sinlge line break는 single space로 해석되고,<br>empty line은 line break character를 뜻한다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">asdf:</span> <span class="string">"asdf</span></span><br><span class="line"><span class="string">aass"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">qwer:</span> <span class="string">"qwer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">zxcv"</span></span><br></pre></td></tr></table></figure><p>위와 아래의 결과는 같다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">asdf:</span> <span class="string">"asdf aass"</span></span><br><span class="line"><span class="attr">qwer:</span> <span class="string">"qwer\nzxcv"</span></span><br></pre></td></tr></table></figure><p>YAML 스펙 문서는 <a href="/2018/08/15/bnf/">BNF 표기법</a>을 사용하고 있기 때문에 BNF 표기법에 대해 조금은 알고 있어야 읽기가 수월하다.</p><h4 id="Node-Kinds"><a href="#Node-Kinds" class="headerlink" title="Node Kinds"></a>Node Kinds</h4><p>일반적인 자료형과 비슷하다는 생각으로 보면 된다.  </p><h5 id="Scalar"><a href="#Scalar" class="headerlink" title="Scalar"></a>Scalar</h5><blockquote><p>The content of a scalar node is an opaque datum that can be presented as a series of zero or more Unicode characters.</p></blockquote><p>스칼라 노드는 0개 이상의 유니코드 문자이다.<br>일반적인 primitive type을 생각하면 편하다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>여기서 b와 0 모두 scalar 노드이다.</p><p>Scalar의 종류는 아래와 같다.  </p><ul><li><a href="#Block-Styles">Block Styles</a><ul><li><a href="http://yaml.org/spec/1.2/spec.html#id2793652" rel="external nofollow noopener noreferrer" target="_blank">Block Scalar Styles</a>  <ul><li><a href="http://yaml.org/spec/1.2/spec.html#id2795688" rel="external nofollow noopener noreferrer" target="_blank">Literal Style</a></li><li><a href="http://yaml.org/spec/1.2/spec.html#id2796251" rel="external nofollow noopener noreferrer" target="_blank">Floded Style</a></li></ul></li></ul></li><li><a href="#Flow-Styles">Flow Styles</a><ul><li><a href="http://yaml.org/spec/1.2/spec.html#id2786942" rel="external nofollow noopener noreferrer" target="_blank">Flow Scalar Styles</a>  <ul><li><a href="http://yaml.org/spec/1.2/spec.html#id2787109" rel="external nofollow noopener noreferrer" target="_blank">Double-Quoted Style</a></li><li><a href="http://yaml.org/spec/1.2/spec.html#id2788097" rel="external nofollow noopener noreferrer" target="_blank">Single-Quoted Style</a></li><li><a href="http://yaml.org/spec/1.2/spec.html#id2788859" rel="external nofollow noopener noreferrer" target="_blank">Plain Style</a></li></ul></li></ul></li></ul><h5 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h5><blockquote><p>When appropriate, it is convenient to consider sequences and mappings together, as collections.</p></blockquote><p><a href="#Sequence">Sequence</a>와 <a href="#Mapping">Mapping</a> 두 개를 합쳐 collections로 퉁친다는 소리 같다.</p><h6 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h6><blockquote><p>The content of a sequence node is an ordered series of zero or more nodes.<br>  In particular, a sequence may contain the same node more than once.<br>  It could even contain itself (directly or indirectly).</p></blockquote><p>시퀀스 노드는 0개 이상의 순서가 보장된 노드이다.<br>또한 똑같은 노드를 여러 번 포함할 수 있다.<br>심지어 자기 자신을 포함할 수도 있다.<br>일반적인 list를 생각하면 편하다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">b</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">a</span></span><br></pre></td></tr></table></figure><p>여기서 <code>-a -b -a</code>를 통틀어 시퀀스 노드라고 부른다.</p><h6 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h6><blockquote><p>The content of a mapping node is an unordered set of key: value node pairs, with the restriction that each of the keys is unique.<br>  YAML places no further restrictions on the nodes.<br>  In particular, keys may be arbitrary nodes, the same node may be used as the value of several key: value pairs, and a mapping could even contain itself as a key or a value (directly or indirectly).</p></blockquote><p>매핑 노드는 순서가 보장되지 않은 key:value 쌍의 집합이다.<br>key는 고유하다는 제한을 빼고는 다른 제한은 있지 않다.  </p><ol><li>키는 임의의 노드일 수도 있고 자기 자신을 포함할 수 있다.  </li></ol><p>-&gt; 키에 문자열을 대부분 넣는데 문자열은 scalar 노드이니까 임의의 노드일 수도 있다고 표현한 게 아닐까?<br>2. 동일한 노드를 여러 key:value 쌍의 값으로 사용할 수 있고,<br>-&gt; key는 고유한데, value는 고유하지 않다는 걸 표현한 게 아닐까?<br>3. 자기 자신을 포함할 수 있다. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="string">b</span></span><br><span class="line"><span class="attr">c:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">e</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">f</span></span><br></pre></td></tr></table></figure><p><code>a: b</code>, <code>c: -e -f</code> 이 두 개 모두 매핑 노드이다.</p><h4 id="Block-Styles"><a href="#Block-Styles" class="headerlink" title="Block Styles"></a>Block Styles</h4><blockquote><p>In YAML block styles, structure is determined by indentation.<br>  In general, indentation is defined as a zero or more space characters at the start of a line.<br>  To maintain portability, tab characters must not be used in indentation, since different systems treat tabs differently.</p></blockquote><p>구조를 표현할 때 <a href="#Indentation">indentation</a>를 사용한다.<br>라인의 시작점에 존재하는 0개 이상의 <a href="#White-Space-Characters">white space character</a>에 의해 정의된다.<br>하지만 이식성을 고려해서 Tab키는 사용하면 안 된다.<br>시스템들 사이에서 Tab키를 취급하는 방법이 서로 다르기 때문이다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">asdf:</span> <span class="string">qwer</span></span><br><span class="line"><span class="attr">zxcv:</span></span><br><span class="line"><span class="attr">  ssss:</span> <span class="string">dd</span></span><br><span class="line"><span class="attr">  qwer:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">z</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">x</span></span><br><span class="line"><span class="attr">ssdd:</span> <span class="string">cc</span></span><br><span class="line"><span class="comment"># asdf</span></span><br></pre></td></tr></table></figure><p>mapping node에서 key:value 쌍을 구분짓기 위해 <code>:</code>라는 <a href="#Block-Style-Indicator">indicator</a>를 사용한다.<br>또한 sequence node의 value들을 구분짓기 위해 <code>-</code>라는 <a href="#Block-Style-Indicator">indicator</a>를 사용한다.<br>주석을 표시하기 위해서 <code>#</code>라는 <a href="#Block-Style-Indicator">indicator</a>를 사용한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"asdf"</span>: <span class="string">"qwer"</span>,</span><br><span class="line">  <span class="attr">"zxcv"</span>: &#123;</span><br><span class="line">    <span class="attr">"ssss"</span>: <span class="string">"dd"</span>,</span><br><span class="line">    <span class="attr">"qwer"</span>: [<span class="string">"z"</span>, <span class="string">"x"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ssdd"</span>: <span class="string">"cc"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flow-Styles"><a href="#Flow-Styles" class="headerlink" title="Flow Styles"></a>Flow Styles</h4><blockquote><p>YAML’s flow styles can be thought of as the natural extension of JSON to cover folding long content lines for readability</p></blockquote><p>Flow style은 JSON의 확장 정도로 생각하면 된다.  </p><blockquote><p>flow styles, using explicit indicators rather than indentation to denote scope</p></blockquote><p>flow style은 socope를 나타내기 위해 <a href="#Indentation">indentation</a> 보다 <a href="#Flow-Style-Indicator">indicator</a> 문자를 사용한다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">asdf:</span> <span class="string">qwer,</span></span><br><span class="line"><span class="attr">zxcv:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">ssss:</span> <span class="string">dd,</span></span><br><span class="line"><span class="attr">qwer:</span> <span class="string">[z,</span> <span class="string">x]</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="attr">ssdd:</span> <span class="string">cc</span></span><br><span class="line"><span class="comment">#qqww</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"asdf"</span>: <span class="string">"qwer"</span>,</span><br><span class="line">  <span class="attr">"zxcv"</span>: &#123;</span><br><span class="line">    <span class="attr">"ssss"</span>: <span class="string">"dd"</span>,</span><br><span class="line">    <span class="attr">"qwer"</span>: [<span class="string">"z"</span>, <span class="string">"x"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ssdd"</span>: <span class="string">"cc"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Anchor-amp-Alias"><a href="#Anchor-amp-Alias" class="headerlink" title="Anchor &amp; Alias"></a>Anchor &amp; Alias</h4><p>Object의 Reference를 표기하는 방법이다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Block Styles</span></span><br><span class="line"><span class="attr">b-anchor:</span> <span class="meta">&amp;name</span> <span class="string">value</span></span><br><span class="line"><span class="attr">b-alias:</span> <span class="meta">*name</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"b-anchor"</span>: <span class="string">"value"</span>,</span><br><span class="line">  <span class="attr">"b-alias"</span>: <span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Flow Styles</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">  f-anchor:</span> <span class="meta">&amp;name</span> <span class="string">value,</span></span><br><span class="line"><span class="attr">  f-alias:</span> <span class="meta">*name</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"f-anchor"</span>: <span class="string">"value"</span>,</span><br><span class="line">  <span class="attr">"f-alias"</span>: <span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h4><blockquote><p>Directives are instructions to the YAML processor.<br>  This specification defines two directives, “YAML” and “TAG”, and reserves all other directives for future use.<br>  There is no way to define private directives. This is intentional.<br>  Directives are a presentation detail and must not be used to convey content information.</p></blockquote><p>Directives는 YAML Processor에게 <code>어떻게 해석해라</code>라고 지시하는 것이다.<br>YAML의 버전을 명시하는 <a href="http://yaml.org/spec/1.2/spec.html#directive/YAML/" rel="external nofollow noopener noreferrer" target="_blank">YAML Directive</a>와<br><a href="http://yaml.org/spec/1.2/spec.html#tag//" rel="external nofollow noopener noreferrer" target="_blank">node tags</a>를 명시하는 <a href="http://yaml.org/spec/1.2/spec.html#directive/TAG/" rel="external nofollow noopener noreferrer" target="_blank">TAG Directive</a>가 있다.<br>맨 첫 번째 줄의 % <a href="#Common-Indicator">Indicator</a>를 통해 표시한다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML</span> <span class="number">1.2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%TAG</span> <span class="string">!yaml!</span> <span class="attr">tag:yaml.org,2002:</span></span><br></pre></td></tr></table></figure><h4 id="Multiple-Documents"><a href="#Multiple-Documents" class="headerlink" title="Multiple Documents"></a>Multiple Documents</h4><blockquote><p>YAML uses three dashes (“—”) to separate directives from document content.<br>  This also serves to signal the start of a document if no directives are present.<br>  Three dots ( “…”) indicate the end of a document without starting a new one, for use in communication channels.</p></blockquote><p><code>---</code> <a href="#Common-Indicator">Indicator</a>로 <a href="#Directives">Directive</a>와 Documnet content를 구분지을 수 있고, document content의 시작이라는 신호도 된다.<br><code>...</code> <a href="#Common-Indicator">Indicator</a>로 <a href="#Directives">Directive</a>와 Document content를 구분지을 수 있고, document content의 끝이라는 신호도 된다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML</span> <span class="number">1.2</span> <span class="comment"># Directive</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="comment"># Document content begin</span></span><br><span class="line"><span class="attr">a:</span> <span class="string">b</span> <span class="comment"># Document content</span></span><br><span class="line"><span class="attr">c:</span> <span class="string">d</span></span><br><span class="line"><span class="string">...</span> <span class="comment"># Document content end</span></span><br><span class="line"><span class="string">%YAML</span> <span class="number">1.1</span> <span class="comment"># Directive</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="comment"># Document content begin</span></span><br><span class="line"><span class="attr">a:</span> <span class="string">d</span> <span class="comment"># Document content</span></span><br><span class="line"><span class="attr">c:</span> <span class="string">b</span></span><br><span class="line"><span class="string">...</span> <span class="comment"># Document content end</span></span><br></pre></td></tr></table></figure><p>좀 더 다양한 예제를 살펴보자.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://local</span></span><br></pre></td></tr></table></figure><p>위와 아래는 같다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://local</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>이번엔 multiple documents를 표현해보자.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://local</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://dev</span></span><br></pre></td></tr></table></figure><p>위와 아래는 같다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://local</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://dev</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h4 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h4><blockquote><p>In YAML block styles, structure is determined by indentation.<br>  In general, indentation is defined as a zero or more space characters at the start of a line.<br>  To maintain portability, tab characters must not be used in indentation, since different systems treat tabs differently.</p></blockquote><p><a href="#Block-Styles">Block Style</a>의 구조는 들여쓰기에 의해 결정된다.<br>라인의 시작점에 존재하는 0개 이상의 <a href="#White-Space-Characters">white space character</a>에 의해 정의된다.<br>하지만 이식성을 고려해서 Tab키는 사용하면 안 된다.<br>시스템들 사이에서 Tab키를 취급하는 방법이 서로 다르기 때문이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-indent(n) ::= s-space × n</span><br></pre></td></tr></table></figure><blockquote><p>A block style construct is terminated when encountering a line which is less indented than the construct.<br>  Each node must be indented further than its parent node.<br>  All sibling nodes must use the exact same indentation level.<br>  However the content of each sibling node may be further indented independently.</p></blockquote><p><a href="#Block-Styles">Block Style</a>의 구조는 이전 라인보다 더 적은 들여쓰기가 있는 라인을 만나면 끝난다.<br>각각의 노드는 부모 노드보다 더 많은 들여쓰기를 써야만 한다.<br>모든 형제 노드는 같은 들여쓰기 레벨을 써야만 한다.<br>하지만 각 형제 노드의 내용들은 독립적이다.</p><h5 id="White-Space-Characters"><a href="#White-Space-Characters" class="headerlink" title="White Space Characters"></a>White Space Characters</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s-space ::= #x20 /* SP */</span><br><span class="line">s-tab   ::= #x9  /* TAB */</span><br><span class="line">s-white ::= s-space | s-tab</span><br></pre></td></tr></table></figure><p>스페이스와 탭 문자만 white space character로 인식한다.</p><h4 id="Indicator"><a href="#Indicator" class="headerlink" title="Indicator"></a>Indicator</h4><h5 id="Block-Style-Indicator"><a href="#Block-Style-Indicator" class="headerlink" title="Block Style Indicator"></a>Block Style Indicator</h5><p><code>-</code>: <a href="#Block-Styles">Block Style</a>에서 <a href="#Sequence">sequence node</a>임을 나타내는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-sequence-entry    ::= “-”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">b</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>]</span><br></pre></td></tr></table></figure><p><code>:</code>: <a href="#Block-Styles">Block Style</a>에서 <a href="#Mapping">mapping node</a>의 value임을 나타내는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-mapping-value ::= “:”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="string">b</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"a"</span>: <span class="string">"b"</span>&#125;</span><br></pre></td></tr></table></figure><p><code>?</code>: <a href="#Block-Styles">Block Style</a>에서 <a href="#Mapping">mapping node</a>의 key임을 알리는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-mapping-key   ::= “?”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?</span> <span class="string">a</span></span><br><span class="line"><span class="string">:</span> <span class="string">b</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"a"</span>: <span class="string">"b"</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="Flow-Style-Indicator"><a href="#Flow-Style-Indicator" class="headerlink" title="Flow Style Indicator"></a>Flow Style Indicator</h5><p><code>{</code>: <a href="#Flow-Styles">Flow Style</a>에서 <a href="#Mapping">mapping node</a>의 시작을 알리는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-mapping-start ::= “&#123;”</span><br></pre></td></tr></table></figure><p><code>}</code>: <a href="#Flow-Styles">Flow Style</a>에서 <a href="#Mapping">mapping node</a>의 끝을 알리는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-mapping-end ::= “&#125;”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">a:</span> <span class="string">b</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"a"</span>: <span class="string">"b"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[</code>: <a href="#Flow-Styles">Flow Style</a>에서 <a href="#Sequence">sequence node</a>의 시작을 알리는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-sequence-start ::= “[”</span><br></pre></td></tr></table></figure><p><code>]</code>: <a href="#Flow-Styles">Flow Style</a>에서 <a href="#Sequence">sequence node</a>의 끝을 알리는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-sequence-end ::= “]”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[a,</span> <span class="string">b]</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>]</span><br></pre></td></tr></table></figure><p><code>,</code>: <a href="#Flow-Styles">Flow Style</a>에서 <a href="#Collections">collection node</a>의 끝을 알리는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-collect-entry ::= “,”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">a:</span> <span class="string">b,</span></span><br><span class="line"><span class="attr">b:</span> <span class="string">[c,</span> <span class="string">d],</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>마지막 <code>[c, d],</code>는 마지막 ,를 생략해서 <code>[c, d]</code>로 써도 똑같다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"a"</span>: <span class="string">"b"</span>,</span><br><span class="line">  <span class="attr">"b"</span>: [<span class="string">"c"</span>, <span class="string">"d"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Common-Indicator"><a href="#Common-Indicator" class="headerlink" title="Common Indicator"></a>Common Indicator</h5><p><code>#</code>: 주석을 나타내는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-comment   ::= “#”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?</span> <span class="string">a</span></span><br><span class="line"><span class="string">:</span> <span class="string">b</span></span><br><span class="line"><span class="comment"># asdf</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"a"</span>: <span class="string">"b"</span>&#125;</span><br></pre></td></tr></table></figure><p><code>&amp;</code>: node의 <a href="#Anchor-amp-Alias">anchor property</a>를 나타내는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-anchor    ::= “&amp;”</span><br></pre></td></tr></table></figure><p><code>*</code>: <a href="#Anchor-amp-Alias">alias node</a>를 나타내는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-anchor    ::= “&amp;”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">anchor:</span> <span class="meta">&amp;name</span> <span class="string">value</span></span><br><span class="line"><span class="attr">alias:</span> <span class="meta">*name</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">anchor:</span> <span class="string">value</span></span><br><span class="line"><span class="attr">alias:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure><p><code>%</code>: <a href="#Directives">Directive</a> Line 임을 나타내는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-directive ::= “%”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML</span> <span class="number">1.2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%TAG</span> <span class="string">!yaml!</span> <span class="attr">tag:yaml.org,2002:</span></span><br></pre></td></tr></table></figure><p><code>---</code>: <a href="#Directives">Directive</a> Line이 끝나고 Document content의 시작을 알리는 문자  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-directives-end    ::= “-” “-” “-”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%YAML</span> <span class="number">1.2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">asdf:</span> <span class="string">qwer</span></span><br></pre></td></tr></table></figure><p><code>,,,</code>: Document content가 끝나고 <a href="#Directives">Directive</a> Line과 구분을 짓는 문자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c-document-end  ::= “.” “.” “.”</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">asdf:</span> <span class="string">qwer</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">%YAML</span> <span class="number">1.2</span></span><br></pre></td></tr></table></figure><h3 id="yaml-vs-yml"><a href="#yaml-vs-yml" class="headerlink" title="*.yaml vs *.yml"></a>*.yaml vs *.yml</h3><p><a href="http://yaml.org/faq.html" rel="external nofollow noopener noreferrer" target="_blank">YAML FAQ</a>에서는 *.yaml을 공식 확장자라고 얘기하고 있다.<br>그럼에도 불구하고 *.yml이 있는 이유는 <code>*.html vs *.htm</code> 과도 비슷한 이유일 것 같다.<br>MS-Dos 시절에는 파일의 확장자 길이가 3자로 제한됐었다.<br>그 시절의 영향 때문인지, 3글자 확장자 스타일을 고수하는 사람들 때문에 *.yml이나 *.htm 같은 확장자가 보이는 것 같다. </p><h3 id="yaml-vs-properties"><a href="#yaml-vs-properties" class="headerlink" title="*.yaml vs. *.properties"></a>*.yaml vs. *.properties</h3><p>스프링에서 개발 환경 별로 configuration을 구성할 때 *.properties를 사용하면 아래와 같이 할 수 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles=dev</span><br><span class="line">spring.datasource.url=jdbc:mysql://</span><br><span class="line">management.endpoints.web.base-path=/</span><br><span class="line">spring.datasource.hikari.minimum-idle=1</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles=prod</span><br><span class="line">spring.datasource.url=jdbc:mysql://</span><br><span class="line">management.endpoints.web.base-path=/</span><br><span class="line">spring.datasource.hikari.minimum-idle=5</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=10</span><br></pre></td></tr></table></figure><p>하지만 *.yaml로 구성하게 되면 아래와 같이 구성할 수 있다.  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line"><span class="attr">      minimum-idle:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      maximum-pool-size:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      base-path:</span> <span class="string">/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line"><span class="attr">      minimum-idle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      maximum-pool-size:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      base-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>*.yaml로 했을 때 특징은 다음과 같다.  </p><ol><li>한 파일에서 모든 configuration을 관리할 수 있다.<br>이건 호불호가 갈릴 것 같다.<br>오히려 특정 환경의 설정만 바꾸고 싶은데 똑같은 key들이 환경별로 있어서 헷갈린다는 사람도 있을 것이고,<br>하나의 파일에서 설정을 다 바꿀 수 있어서 여기 저기 다른 파일을 탐색하지 않아서 좋다고 하는 사람도 있을 수 있을 것이다.<br>환경 별로 쪼개서 사용할 수도 있으니 자기 취향 혹은 팀의 가이드라인을 따라 사용하면 될 것 같다.</li><li>비슷한 설정들끼리 뭉친다.<br>동일한 key를 허용하지 않기 때문에 동일한 부모를 가진 key들끼리 뭉치는데, 동일한 부모 아래의 자식이기 때문에 비슷한 설정들끼리 뭉친다.<br>비슷한 설정들끼리 뭉치기 때문에 yaml 파일을 읽을 때 흐름을 파악하기가 훨씬 용이하다.<br>물론 *.properties에서도 비슷한 설정들끼리 뭉쳐놓으면 되는데 설정의 순서를 강제할 순 없기 때문에 yaml이 난 더 좋은 것 같다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BNF 표기법</title>
      <link href="/2018/08/15/bnf/"/>
      <url>/2018/08/15/bnf/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/bnf/thumbs.png" alt="출처: https://courses.cs.washington.edu/courses/cse341/02au/slides/Syntax-and-Type/sld005.htm"></p><h2 id="BNF-Backus–Naur-form"><a href="#BNF-Backus–Naur-form" class="headerlink" title="BNF(Backus–Naur form)"></a><a href="https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%BB%A4%EC%8A%A4-%EB%82%98%EC%9A%B0%EB%A5%B4_%ED%91%9C%EA%B8%B0%EB%B2%95" rel="external nofollow noopener noreferrer" target="_blank">BNF(Backus–Naur form)</a></h2><p>프로그래밍 언어를 정의하기 위한 메타 언어이다.<br>정규화 표현에 많이 사용들 한다고 한다.<br>표기법 창시자인 베커스와 그 표기법을 향상시킨 나우르에 의해 베커스 나우르 표기법이란 이름으로 불리고 있다.  </p><h3 id="표기법"><a href="#표기법" class="headerlink" title="표기법"></a>표기법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;이름&gt; ::= &lt;표현식&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>표현식은 단말 표현식(더 이상 유도할 수 없는 표현식으로써 <code>0 1 + *</code> 같은 애들,<br>비단말 표현식(유도가 가능한 표현식으로써 <code>&lt;digit&gt;, &lt;character&gt;</code>과 )과 같은 표현들을 뜻한다.  </p><p>예를 들면 아래와 같이 표기할 수 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;digit&gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</span><br><span class="line">&lt;hex_letter&gt; ::= A | B | C | D | E | F</span><br><span class="line">&lt;hex&gt; ::= &lt;digit&gt; | &lt;hex_letter&gt;</span><br></pre></td></tr></table></figure><h3 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h3><ul><li><p><code>|</code>: or을 의미한다.<br><code>0 | 1 | 2</code> (0도 되고 1도 되고 2도 되고)</p></li><li><p><code>-</code>: 뺄셈의 의미인데 항목 제거의 의미로도 해석할 수 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;digit&gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</span><br><span class="line">&lt;pre-half-digit&gt; ::= 0 | 1 | 2 | 3 | 4</span><br><span class="line">&lt;post-half-digit&gt; ::= &lt;digit&gt; - &lt;half-digit&gt;</span><br><span class="line">&lt;post-half-digit&gt; ::= 5 | 6 | 7 | 8 | 9</span><br></pre></td></tr></table></figure></li><li><p><code>*</code>: 0개 이상</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;string&gt; ::= &lt;character&gt;*</span><br></pre></td></tr></table></figure></li></ul><p>문자열을 빈 문자열(문자열이 0개)도 포함하므로 문자열이 0개 이상이다.</p><ul><li><code>+</code>: 1개 이상<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;integer&gt; ::= &lt;digit&gt;+</span><br></pre></td></tr></table></figure></li></ul><p>정수는 1개 이상의 숫자로 이루어져있다.  </p><ul><li><code>?</code>: Optional, 있어도 되고, 없어도 되고  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;oct-digit&gt; ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7</span><br><span class="line">&lt;oct&gt; ::= 0?&lt;oct-digit&gt;</span><br></pre></td></tr></table></figure></li></ul><p>8진수 표기법은 헷갈리지 않게 04 와 같이 표기하지만, 0이 없다고 해서 8진수가 아니라고 말할 수는 없을 것이다. (물론 헷갈릴 순 있겠지만…)  </p><p>기타 등등 많지만… 기본적인 내용들은 빼고 자주 쓰는 애들만 적어봤다.  </p><h3 id="누가-쓰나"><a href="#누가-쓰나" class="headerlink" title="누가 쓰나"></a>누가 쓰나</h3><ul><li><a href="http://yaml.org/spec/1.2/spec.html#id2785586" rel="external nofollow noopener noreferrer" target="_blank">yaml 스펙</a>  </li></ul><p>말고는 아직… 못 봤다.</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BNF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring) Spring Boot 2.0에서 로깅 환경 구축하기</title>
      <link href="/2018/07/22/spring-boot-2-log/"/>
      <url>/2018/07/22/spring-boot-2-log/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/spring-boot-2-log/thumb.png" alt=""></p><p>오늘은 서버를 구성할 때 필수적인 로깅에 대해 알아보자!<br>우선 <a href="/2018/07/22/spring-boot-2-env/">환경 별로 profile 쪼개기</a>가 진행된 상태에서 시작한다.<br>최종 결과물은 <a href="https://github.com/perfectacle/spring-boot-2-logging" rel="external nofollow noopener noreferrer" target="_blank">github 저장소</a>에서 확인 가능하다.</p><h2 id="로깅-라이브러리"><a href="#로깅-라이브러리" class="headerlink" title="로깅 라이브러리"></a>로깅 라이브러리</h2><p>여러가지 logging 라이브러리가 있는데 Spring Boot 2.0에서는 사진과 같이<br><a href="https://docs.oracle.com/javase/10/docs/api/java/util/logging/package-summary.html" rel="external nofollow noopener noreferrer" target="_blank">Java Util Logging</a>,<br><a href="http://logging.apache.org/log4j/2.x/" rel="external nofollow noopener noreferrer" target="_blank">Log4j 2</a>,<br><a href="https://logback.qos.ch/" rel="external nofollow noopener noreferrer" target="_blank">Logback</a>을 기본적으로 사용할 수 있다.<br><img src="/images/spring-boot-2-log/logging-lib.png" alt=""></p><a id="more"></a><p><a href="https://beyondj2ee.wordpress.com/2012/11/09/logback-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0-reasons-to-prefer-logback-over-log4j/" rel="external nofollow noopener noreferrer" target="_blank">logback 사용해야 하는 이유</a><br>에 왜 logback을 사용해야하는지 나왔있으니 logback으로 로깅 라이브러리를 선택했다.</p><p>혹시나 다른 로깅 라이브러리로 갈아타기 편하기 위해 Facade 패턴을 적용한 <a href="https://www.slf4j.org/" rel="external nofollow noopener noreferrer" target="_blank">Slf4j</a>를 사용하기 위해 lombok을 디펜던시에 추가해야한다.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br></pre></td></tr></table></figure><p>또한 logback 관련된 설정을 찾다보면 logback.xml vs logback-spring.xml을 보게 되는데<br>Web Application이 시작되고 나서 classpath 내의 logback.xml을 뒤져서 환경 설정을 적용한다.<br>이 때는 Spring이 구동되기 이전이라 application.properties 내에 존재하는 값들을 불러올 수 없다.<br>logback-spring.xml에서는 Spring이 구동된 후라 application.properties에 있는 값들을 불러올 수 있다.</p><h2 id="콘솔-로깅"><a href="#콘솔-로깅" class="headerlink" title="콘솔 로깅"></a>콘솔 로깅</h2><p>기본적으로 콘솔 로깅은 뭔가 디버깅할 용도로 많이 사용하기 때문에 local, test 환경에서 많이 사용한다.<br>우선 resources 디렉토리를 아래와 같이 구성하자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- resources</span><br><span class="line">  - log</span><br><span class="line">    - console.xml</span><br></pre></td></tr></table></figure><p>아래 내용을 복붙해주자.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyyMMdd HH:mm:ss.SSS&#125; [%thread] %-3level %logger&#123;5&#125; - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>name은 다른 파일이나 위치에서 해당 appender를 무슨 이름으로 참조할지 이름을 정한 것이고,<br>ConsoleAppender 클래스를 사용해서 콘솔에 로깅한다고 명시하는 거 같다.<br>한글이 들어갈지도 모르니 charset을 UTF-8로 세팅해주자.<br>패턴은 어떤 형태로 찍을지에 대해서 규칙을 정한 것이다.<br>자세한 내용은 <a href="https://logback.qos.ch/manual/layouts.html#ClassicPatternLayout" rel="external nofollow noopener noreferrer" target="_blank">PatternLayout</a>을 살펴보자.  </p><ol><li><code>%d{yyyyMMdd HH:mm:ss.SSS}</code> - 날짜</li><li><code>%thread</code> - 어떤 스레드에서 실행한 것인지</li><li><code>%-3level</code> - 로깅 레벨</li><li><code>%logger{5}</code> - 어떤 클래스의 로거가 실행된 건지</li><li><code>%msg</code> - 메세지  </li><li><code>%n</code> - 줄바꿈</li></ol><p>이제 해당 appender를 사용하게 끔 resources 디렉토리에 logback-spring.xml을 만들어주자.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"log/console.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"local"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>include를 쓰지 않고 직접 xml 소스 코드를 넣어도 되지만 가독성을 해치는 것 같아 분리했다.<br>또한 root에 설정했다 싶이 default logging level을 info로 설정했다.<br>그리고 springProfile name 값에는 !local과 같은 값도 넣을 수 있다.<br>appender-ref를 통해 appender를 참조할 수 있다.<br>아니면 직접 그 코드를 삽입해도 되긴 하지만 중복이 상당히 많아질 것이다.  </p><p>로컬 환경과 dev 환경을 실행해보면 로컬 환경은 콘솔 창에 로그가 잘 찍히는데 dev 환경에서는 아래 로그가 끝일 것이다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.3.RELEASE)</span><br></pre></td></tr></table></figure><h2 id="로그-파일-남기기"><a href="#로그-파일-남기기" class="headerlink" title="로그 파일 남기기"></a>로그 파일 남기기</h2><p>console 로깅은 휘발성 데이터이고, 관리 측면에서도 용이하지 않기 때문에 날짜 별로 로그 파일로 남기게 해보자.<br>console.xml과 같은 디렉토리에 file.xml을 만들어주자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"dailyRollingFileAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;/tomcat_log.%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy:MM:dd HH:mm:ss.SSS&#125; %-5level --- [%thread] %logger&#123;35&#125; : %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>하루에 하나씩 생성되는 설정이다. (tomcat_log.2018-07-23-0.log와 같이)<br>maxHistory를 30일로 설정해서 30일이 지난 로그들은 삭제된다.<br>또한 maxFileSize를 100MB로 설정해서 로그 파일 용량이 100MB를 초과하면 자동으로 인덱스가 증가하면서 새로운 로그 파일이 생성된다. (시작은 0)<br>그리고 log file 생성 경로를 위해 env 별 application.properties 파일에서 아래 코드를 추가해주면 된다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.file=./log/local</span><br></pre></td></tr></table></figure><p>이렇게 되면 프로젝트 루트 디렉토리에 log 폴더가 생긴다.<br>$LOG_FILE을 바인딩 했다고 보면 된다.<br>위 설정을 하지 않으면 LOG_FILE_IS_UNDEFINED라는 디렉토리가 생기고 거기에 log 파일이 생성된다.</p><p>이제 해당 appender를 사용하게 끔 resources 디렉토리에 logback-spring.xml를 수정하자.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"log/console.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"log/file.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"local"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dailyRollingFileAppender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dailyRollingFileAppender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dailyRollingFileAppender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test 환경에서는 로그 파일을 굳이 남길 필요가 없다.<br>각 환경별로 로깅을 잘 하는지 확인해보고 테스트를 실행했을 때 로깅 파일이 제대로 생성되지 않으면 성공이다.  </p><h2 id="로깅-레벨-정하기"><a href="#로깅-레벨-정하기" class="headerlink" title="로깅 레벨 정하기"></a>로깅 레벨 정하기</h2><p>local, dev, test 환경에서는 디버깅용 로그를 볼 일이 많다.<br>하지만 prod 환경에서는 디버깅용 로그를 남기는 것은 불필요하므로 끄는 게 좋다.<br>if 문으로 컨트롤 하는 것 또한 성능에 미비한 영향을 미칠테니 application.properties를 컨트롤 함으로써 해결해보자.  </p><p>local/dev/test env의 application.properties를 아래와 같이 수정해보자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.example.demo=debug</span><br></pre></td></tr></table></figure><p>com 부터는 본인의 application이 있는 패키지를 선택해주면 된다.  </p><p>그리고 시험삼아 Applications 클래스를 아래와 같이 수정해봤다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">"error"</span>);</span><br><span class="line">        log.warn(<span class="string">"warn"</span>);</span><br><span class="line">        log.info(<span class="string">"info"</span>);</span><br><span class="line">        log.trace(<span class="string">"trace"</span>);</span><br><span class="line">        log.debug(<span class="string">"debug"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>파일/콘솔 로그에 찍히는 결과는 아래와 같았다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">20180723 00:54:06.524 [main] ERROR c.e.d.DemoApplication - error </span><br><span class="line">20180723 00:54:06.524 [main] WARN c.e.d.DemoApplication - warn </span><br><span class="line">20180723 00:54:06.524 [main] INFO c.e.d.DemoApplication - info </span><br><span class="line">20180723 00:54:06.524 [main] DEBUG c.e.d.DemoApplication - debug</span><br></pre></td></tr></table></figure><p>trace가 가장 높은 레벨(?)인 거 같다.  </p><p>logging level을 아무것도 설정하지 않은 prod env로 실행하면 아래와 같이 나온다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20180723 00:54:06.524 [main] ERROR c.e.d.DemoApplication - error </span><br><span class="line">20180723 00:54:06.524 [main] WARN c.e.d.DemoApplication - warn </span><br><span class="line">20180723 00:54:06.524 [main] INFO c.e.d.DemoApplication - info</span><br></pre></td></tr></table></figure><p>default level을 info로 설정했기 때문이다.  </p><p>Hibernate Logging을 하고 싶다면 아래와 같이 하면 된다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging.level.org.hibernate=debug</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line">spring.jpa.properties.hibernate.format_sql=true</span><br></pre></td></tr></table></figure><p>spring.jpa.properties.hibernate.format_sql은 좀 더 보기 좋게 출력하는 것이니 필수는 아니다.<br>logging.level.org.hibernate를 info로 세팅했을 때는 콘솔에는 찍혔지만, 파일에는 찍히지 않았다.  </p><h2 id="Access-Log"><a href="#Access-Log" class="headerlink" title="Access Log"></a>Access Log</h2><p><strong>이 포스트에선 Tomcat을 사용한다고 가정하겠다.</strong><br>유저가 어떤 URL을 호출했는지 알기 위해서는 Access Log를 남겨야한다.<br>그러기 위해서는 웹 어플리케이션을 만들어야하기 때문에 아래 두 디펜던시를 인젝션 받자.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br></pre></td></tr></table></figure><p>actuator는 health check, monitoring, metrics 등등 다양한 기능을 지원하는데 나는 health check 용으로 밖에 안 써봤다.<br>actuator는 필수는 아니다.<br>web은 <code>@RestController, @GetMapping</code> 등등 다양한 Rest API용 어노테이션을 제공해준다.  </p><p>또한 2.0 들어서 actuator의 url이 <code>/health</code>와 같은 형태에서 <code>/actuator/health</code>와 같은 형태로 바뀌었다.<br>actuator의 url을 바꾸고 싶으면 application.properties에 아래와 같은 코드를 추가해주면 된다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.base-path=/</span><br></pre></td></tr></table></figure><p>그리고 테스트용 컨트롤러를 하나 만들자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"info"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 이제 access log용 설정을 application.properties에 해야하는데 application.properties로 설정하면<br>health check나 *.ico, *.js 등등의 정적 파일 access log까지 생기게 된다.<br>그러기 위해선 커스텀하게 설정을 해야하고, application.properties에는 디렉토리만 설정해주자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.tomcat.basedir=./log/local</span><br></pre></td></tr></table></figure><p>좀 더 커스텀한 설정을 하기 위해서는 <a href="https://tomcat.apache.org/tomcat-8.5-doc/config/valve.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat Access Log Valve</a>를 사용해야한다.<br>그리고 AccessLogConfig.java를 만들자.(참고로 spring boot 1.x는 이 코드대로는 동작하지 않고, <a href="https://stackoverflow.com/a/28486711/8778461" rel="external nofollow noopener noreferrer" target="_blank">링크</a>를 참조하자.)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.AccessLogValve;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by kwonsungyang on 18/07/2018</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessLogConfig</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(<span class="keyword">final</span> WebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TomcatServletWebServerFactory containerFactory = (TomcatServletWebServerFactory) factory;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> AccessLogValve accessLogValve = <span class="keyword">new</span> AccessLogValve();</span><br><span class="line">        accessLogValve.setPattern(<span class="string">"%&#123;yyyy-MM-dd HH:mm:ss&#125;t\t%s\t%r\t%&#123;User-Agent&#125;i\t%&#123;Referer&#125;i\t%a\t%b"</span>);</span><br><span class="line">        accessLogValve.setDirectory(<span class="string">"."</span>);</span><br><span class="line">        accessLogValve.setSuffix(<span class="string">".log"</span>);</span><br><span class="line">        accessLogValve.setCondition(<span class="string">"ignoreLogging"</span>);</span><br><span class="line">        containerFactory.addContextValves(accessLogValve);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>%{yyyy-MM-dd HH:mm:ss}t</code> - 날짜</li><li><code>%s</code> - status code</li><li><code>%r</code> - First line of the request (method and request URI)</li><li><code>%{User-Agent}i</code> - <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent" rel="external nofollow noopener noreferrer" target="_blank">user agent</a>(browser, 검색 엔진 등등)  </li><li><code>%{Referer}i</code> - <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Referer" rel="external nofollow noopener noreferrer" target="_blank">Referer 헤더</a>  </li><li><code>%a</code> - remote ip address</li><li><code>%b</code> - 몇 바이트 응답했는지(Content-Length랑 똑같을 거 같다.)</li></ol><p>우선 위와 같은 패턴을 아래와 같이 나오며 자세한 내용은 <a href="https://tomcat.apache.org/tomcat-8.5-doc/config/valve.html#Access_Logging" rel="external nofollow noopener noreferrer" target="_blank">Access Logging 파트를 참고하자.</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-07-23 01:42:29200GET / HTTP/1.1Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36-119.149.166.27-</span><br></pre></td></tr></table></figure><p><strong>L4 switch/Proxy Server</strong>를 쓰는 경우에는 remote ip에 고정된 l4/proxy ip가 찍히게 되므로<br>원래 클라이언트의 IP를 알기 위해선 <strong>%a를 %{X-Forwarded-For}i</strong>로 고쳐줘야한다.<br>%{X-Forwarded-For}i를 사용하게 되면 <code>remote ip address, l4/proxy ip address</code> 순서로 찍히게 된다.  </p><p>directory를 세팅해주지 않으면 <code>server.tomcat.basedir</code>로 정한 디렉토리 안에 또 logs 디렉토리가 생겨서 지저분해서 세팅했다.<br>또한 suffix를 세팅해주지 않으면 <code>access_log.2018-07-23</code>와 같이 파일명이 저장되서 log 파일 extension을 붙여주는 코드를 세팅했다.<br>condition은 request.getAttribute(“ignoreLogging”)의 값이 null이 아니면 logging 하는 것이고,<br>conditionIf는 request.getAttribute(“ignoreLogging”)의 값이 null이면 logging 하는 것이다.<br>무시할만한 로그가 많다면 일일이 set하는 건 비효율적이므로 conditionIf를 쓰면 되고,<br>무시할만한 로그가 적다면 set 하는 게 더 효율적이므로 condition을 쓰면 좋을 것 같다.  </p><p>이제는 url을 분석해서 attribute를 세팅하는 Filter를 구현하자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(<span class="keyword">final</span> ServletRequest req,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">final</span> ServletResponse res,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">final</span> FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String url = ((HttpServletRequest) req).getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(url.matches(<span class="string">"/(health|.+\\.(ico|js))"</span>)) &#123;</span><br><span class="line">            req.setAttribute(<span class="string">"ignoreLogging"</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url을 분석해서 /health이거나, ico, js 확장자인 경우에 로깅하지 않게 세팅했다.<br>저 정규표현식에 매칭되지 않는 url만 로깅하겠단 뜻이다.  </p><p>실제로 남은 access log를 보면 health check url이나 favicon.ico 등의 로그는 남아있지 않는다.  </p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring) Spring Boot 2.0 with Gradle에서 환경 별로 profile 쪼개기</title>
      <link href="/2018/07/22/spring-boot-2-env/"/>
      <url>/2018/07/22/spring-boot-2-env/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/spring-boot-2-env/thumb.png" alt="">  </p><p>Spring Boot 1.x와 달리 Spring Boot 2.0에서는 Profile 설정하는 게 좀 달라졌다.<br>알아보자.<br>최종 결과물은 <a href="https://github.com/perfectacle/spring-boot-2-env-starter" rel="external nofollow noopener noreferrer" target="_blank">github 저장소</a>에서 확인할수 있다.</p><h2 id="디펜던시"><a href="#디펜던시" class="headerlink" title="디펜던시"></a>디펜던시</h2><p>우선 아래 이유로 Lombok을 추가할 것이다.</p><ol><li>Facade 패턴을 이용해서 어떤 로깅 라이브러리에서도 동작할 수 있게 만들어주는 @Slf4j</li><li>DI 할 때 코딩할 양을 줄여줘서 우리의 생산성을 조금이나마 높여주는 @RequiredArgsConstructor</li></ol><a id="more"></a><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter'</span>)</span><br><span class="line">    compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행-환경에-따라-분리하기"><a href="#실행-환경에-따라-분리하기" class="headerlink" title="실행 환경에 따라 분리하기"></a>실행 환경에 따라 분리하기</h2><p>우선 패키지 구조는 아래와 같이 돼있다고 가정하자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- src</span><br><span class="line">  - main</span><br><span class="line">    - java</span><br><span class="line">    - resources</span><br><span class="line">      - application-core.properties</span><br><span class="line">    - resources-env</span><br><span class="line">      - local</span><br><span class="line">        - application.properties</span><br><span class="line">      - dev</span><br><span class="line">        - application.properties</span><br><span class="line">      - prod</span><br><span class="line">        - application.properties</span><br></pre></td></tr></table></figure><p>먼저 local 환경을 위해서 local 디렉토리의 application.properties를 아래와 같이 수정해주자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=local</span><br><span class="line">spring.profiles.include=core</span><br><span class="line"></span><br><span class="line">val=local</span><br></pre></td></tr></table></figure><p>그 다음에 개발 서버 환경을 위해서 dev 디렉토리의 application.properties를 아래와 같이 수정해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br><span class="line">spring.profiles.include=core</span><br><span class="line"></span><br><span class="line">val=dev</span><br></pre></td></tr></table></figure><p>그 다음에 프로덕션 서버 환경을 위해서 prod 디렉토리의 application.properties를 아래와 같이 수정해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=prod</span><br><span class="line">spring.profiles.include=core</span><br><span class="line"></span><br><span class="line">val=prod</span><br></pre></td></tr></table></figure><p>그 다음에 이제 공통으로 쓸 application-core.properties를 정의하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val2=core</span><br></pre></td></tr></table></figure><p>spring.profiles.active=local,core 이렇게 해도 똑같은 결과가 나오는데<br>spring.profiles.include로 추가적으로 포함될 profile을 설정하는 게 좀 더 의미에 부합하는 것 같아서 설정했다.  </p><p>그리고 spring boot 2.0의 profile은 기본적으로</p><ol><li>resources/config 디렉토리의 application.properties(혹은 application.yaml 파일)</li><li>resources 디렉토리의 application.properties(혹은 application.yaml 파일)</li><li>classpath/config 디렉토리의 application.properties(혹은 application.yaml 파일)</li><li>classpath 디렉토리의 application.properties(혹은 application.yaml 파일)<br>을 찾는다.  </li></ol><p>이제 같은 directory 내에서도 다음과 같은 우선순위로 경쟁을 한다.  </p><ol><li>application.properties(application.yaml)를 찾는다.  </li><li>application.properties(application.yaml)에서 spring.profiles.active, spring.profiles.include가 설정돼있지 않다면<br>기본적으로 profile에 default가 setting 되고, 아래와 같은 로그를 볼 수 있다.<br><code>No active profile set, falling back to default profiles: default</code>  </li><li>설정된 profile에 따라서 application-{profile}.properties(application-{profile}.yaml)을 찾는다.<br><code>spring.profiles.active=local, spring.profiles.include=core</code>의 경우에는<br><code>application-local.properties(application-local.yaml), application-core.properties(application-core.yaml)</code></li></ol><p>Environment 별로 디렉토리를 쪼개 놨으니 이 디렉토리를 잘 사용하게 끔 build.gradle을 수정하자.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ext.profile = (!project.hasProperty(<span class="string">'profile'</span>) || !profile) ? 'local' : profile</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDirs <span class="string">"src/main/resources"</span>, <span class="string">"src/main/resources-env/$&#123;profile&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>argument로 profile을 넘기는데 없으면 local이 기본으로 profile 변수에 할당된다.<br>그리고 resources directory는 기본적으로 core property가 포함된 src/main/resources는 디폴트로 포함시키고,<br>profile에 넘긴 값에 따라서 resources 디렉토리를 설정해서 쓸 데 없는 디렉토리(application.properties 파일도)가 포함되는 걸 방지하게 만들었다.  </p><h2 id="실행-환경에-따라-코드-작성하기"><a href="#실행-환경에-따라-코드-작성하기" class="headerlink" title="실행 환경에 따라 코드 작성하기"></a>실행 환경에 따라 코드 작성하기</h2><p>이제 한 번 각 env 별로 다른 값/클래스를 쓰도록 코드를 작성해보자.<br>기본이 되는 인터페이스를 만들자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>local env 전용 서비스 구현체를 만들자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"local"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(val);</span><br><span class="line">        log.info(val2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dev env 전용 서비스 구현체를 만들자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(val);</span><br><span class="line">        log.info(val2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>prod env 전용 서비스 구현체를 만들자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"prod"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProdOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(val);</span><br><span class="line">        log.info(val2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어떤 profile에 있는 값을 쓸 것인지 @Profile로 구분할 수 있다.<br>이 @Profile 어노테이션을 안 쓸거라면 사실상 application.properties에서 spring.profiles.active는 없어도 된다.  </p><p>간단하게 해당 서비스를 쓰는 코드를 작성해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequiredArgsConstructor의 이름을 풀이해보면…  </p><ol><li>final이 붙어있으면 무조건(Required) 초기화를 해야하고,</li><li>생성자(Constructor)를 이용한 DI를 하게 돼서 나중에 모킹할 때도 좋다.  </li></ol><p>@PostConstruct는 아래와 같은 설명을 보면 된다.  </p><blockquote><p>The PostConstruct annotation is used on a method that needs to be executed<br>after dependency injection is done to perform any initialization.</p></blockquote><p>즉 DI 이후에 실행되는 메서드라고 보면 된다.  </p><h2 id="실행-환경에-따라-실행하기"><a href="#실행-환경에-따라-실행하기" class="headerlink" title="실행 환경에 따라 실행하기"></a>실행 환경에 따라 실행하기</h2><p>project의 specific gradle을 실행하는 Gradle Wrapper를 통해 실행해보자.<br>터미널을 키고 프로젝트 루트 디렉토리로 이동해서 아래 커맨드를 실행하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local</span></span><br><span class="line">./gradlew bootRun</span><br><span class="line"></span><br><span class="line"><span class="comment"># dev</span></span><br><span class="line">./gradlew bootRun -Pprofile=dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># prod</span></span><br><span class="line">./gradlew bootRun -Pprofile=prod</span><br></pre></td></tr></table></figure><p>위와 같이 실행하면 profile에 따라 아래와 같은 로그를 볼 수 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-07-22 18:46:00.338  INFO 37955 --- [           main] com.example.demo.ProdOrderService        : prod</span><br><span class="line">2018-07-22 18:46:00.339  INFO 37955 --- [           main] com.example.demo.ProdOrderService        : core</span><br></pre></td></tr></table></figure><p>IntelliJ IDEA에서는 아래와 같이 하면 된다.<br><img src="/images/spring-boot-2-env/edit-configurations.png" alt="IDEA 우측 상단에서 Edit Configurations를 클릭하자."><br><img src="/images/spring-boot-2-env/add-gradle-task.png" alt="좌측 상단에 있는 + 버튼을 눌러서 Gradle을 선택하자."><br><img src="/images/spring-boot-2-env/boot-run-local.png" alt="default로 설정한 profile이 local이기 때문에 딱히 profile argument를 넘겨주지 않아도 된다."><br><img src="/images/spring-boot-2-env/boot-run-dev.png" alt="dev profile argument를 넘겨주자."><br><img src="/images/spring-boot-2-env/boot-run-prod.png" alt="prod profile argument를 넘겨주자.">  </p><h2 id="test-profile"><a href="#test-profile" class="headerlink" title="test profile"></a>test profile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- test</span><br><span class="line">  - java</span><br><span class="line">    - com</span><br><span class="line">      - example</span><br><span class="line">        - demo</span><br><span class="line">  - resources</span><br></pre></td></tr></table></figure><p>테스트 패키지 구조가 위와 같다고 했을 때 resources 디렉토리에 application.properties를 만들자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=test</span><br><span class="line">spring.profiles.include=core</span><br><span class="line"></span><br><span class="line">val=test</span><br></pre></td></tr></table></figure><p>그리고 ApplicationTests 클래스에 test 클래스를 사용하도록 수정하자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ActiveProfiles;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 test 용 OrderService 서비스를 구현해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOrderService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;val2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String val2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(val);</span><br><span class="line">        log.info(val2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>contextLoads 메서드를 테스트 해보면 아래와 같이 원하는 결과가 로깅돼서 나온다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-07-22 19:45:31.941  INFO 38688 --- [           main] com.example.demo.TestOrderService        : test</span><br><span class="line">2018-07-22 19:45:31.941  INFO 38688 --- [           main] com.example.demo.TestOrderService        : core</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JPA) 엔터티 상속</title>
      <link href="/2018/07/10/jpa-entity-inheritance/"/>
      <url>/2018/07/10/jpa-entity-inheritance/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jpa-entity-inheritance/thumb.png" alt="출처: https://blog.naver.com/PostView.nhn?blogId=dyner&amp;logNo=100177467201"></p><p>어이쿠야… 정말 백만년만에 포스팅하는 것 같다…<br>나태하게 살지 말기로 작심만 몇 번째 하는 건지 ㅠㅠ<br>여튼 이번에 JPA를 통해 엔터티를 용도에 맞게 잘게 쪼개보다 보니 겪었던 이슈를 간단히 정리해봤다.  </p><h2 id="엔터티-상속"><a href="#엔터티-상속" class="headerlink" title="엔터티 상속"></a>엔터티 상속</h2><p>먼저 Deal(상품) 클래스이다.<br>이 녀석은 베이스(부모) 클래스이다.  </p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="meta">@Column</span>(name =<span class="string">"deal_type"</span>)</span><br><span class="line">    <span class="keyword">private</span> DealType type;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"deal"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;CategoryDealMap&gt; categoryDealMaps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적으로 pk, 상품 유형, 가격, 해당 상품에 해당하는 카테고리 목록들을 가지고 있다.</p><p>그 다음으로 Deal과 매핑된 CategoryDealMap 엔터티 클래스이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDealMap</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="keyword">private</span> Deal deal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> categoryId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 자식이 되는 항공권 상품(Air)이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"deal"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Air</span> <span class="keyword">extends</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate departure;</span><br><span class="line">    <span class="keyword">private</span> LocalDate arrival;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>언제 출발해서 언제 도착하는지 정보를 포함한 컬럼이다.</p><p>이제 또 다른 자식인 숙박 상품(Lodge)이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"deal"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lodge</span> <span class="keyword">extends</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate checkIn;</span><br><span class="line">    <span class="keyword">private</span> LocalDate checkOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>언제 체크인 해서 언제 체크아웃 하는지 정보를 포함한 컬럼들이다.</p><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><ol><li>Deal 클래스는 엔터티가 아니라 CategoryDealMap 엔터티와 매핑할 수가 없다.  </li><li>CategoryDealMaps 컬럼이 없더라도 where 절에 아래와 같은 요상한 조건이 붙어서 쿼리 자체를 실행할 수가 없다.<br><code>where dtype = &#39;AIR&#39; 또는 where dtype = &#39;Lodge&#39;</code>  </li></ol><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>@Inheritance 어노테이션, 그리고 @DiscriminatorColumn과 @DiscriminatorFormula 어노테이션을 적절히 잘 쓰면 된다.  </p><h3 id="DiscriminatorColumn"><a href="#DiscriminatorColumn" class="headerlink" title="@DiscriminatorColumn"></a>@DiscriminatorColumn</h3><p><strong>어떤 컬럼을 가지고 어떤 자식 엔터티를 판별할 것인가</strong>에 대한 힌트를 주는 어노테이션이다.<br>여기선 type 컬럼을 가지고 엔터티를 구분하므로 Deal 클래스를 다시 아래와 같이 설정해주자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn</span>(name = <span class="string">"deal_type"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"deal"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;CategoryDealMap&gt; categoryDealMaps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="meta">@Column</span>(name =<span class="string">"deal_type"</span>)</span><br><span class="line">    <span class="keyword">private</span> DealType type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Entity 어노테이션도 붙여주고, @Inheritance 어노테이션, @DiscriminatorColumn 어노테이션도 붙여줬다.<br>@Inheritance 어노테이션의 기본 strategy 필드값은 SINGLE_TABLE이다.<br>name은 실제 필드명을 입력해주면 된다.<br>그리고 @DiscriminatorColumn 어노테이션의 name field를 보면 위에 dtype이라는 조건이 왜 붙었었는지 알게 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DiscriminatorColumn &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (Optional) The name of column to be used for the discriminator.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "DTYPE"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name 필드의 기본값이 DTYPE이기 때문에 요상한 조건 절이 붙었던 것이다.  </p><p>그리고 Air 엔터티와 Lodge 엔터티를 아래와 같이 고치면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DiscriminatorValue</span>(<span class="string">"AIR"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Air</span> <span class="keyword">extends</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate departure;</span><br><span class="line">    <span class="keyword">private</span> LocalDate arrival;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DiscriminatorValue</span>(<span class="string">"LODGE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lodge</span> <span class="keyword">extends</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate checkIn;</span><br><span class="line">    <span class="keyword">private</span> LocalDate checkOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Table 어노테이션은 부모 클래스에 있는 걸 가져다 쓰면 되니 사라졌고, @DiscriminatorValue 어노테이션이 붙었다.<br>부모 클래스에서 정한 @DiscriminatorColumn(name = “deal_type”), 즉 deal_type 필드의 값이 뭐냐에 따라서 어떤 엔터티를 사용할지가 정해진다고 보면 된다.</p><h3 id="DiscriminatorFormula"><a href="#DiscriminatorFormula" class="headerlink" title="@DiscriminatorFormula"></a>@DiscriminatorFormula</h3><p>@DiscriminatorColumn의 경우에는 해당 컬럼의 값으로 딱 자식 클래스가 명확하게 구분되어질 때 사용하면 된다.<br>DealType enum에 딱 AIR와 LODGE에 해당하는 타입이 각각 있으면 상관 없다.<br>하지만 숙박에 해당하는 타입은 MOTEL, HOTEL, PENSION 등등 다양한 타입이 존재한다.<br>해당 타입들도 전부 Lodge 엔터티를 사용해야할 때는 어떻게 해야할까?  </p><p>컬럼 대신에 조건을 줄 수 있는 @DiscriminatorFormula 어노테이션을 써서 Deal 엔터티를 아래와 같이 수정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance</span></span><br><span class="line"><span class="meta">@DiscriminatorFormula</span>(<span class="string">"case when deal_type = 'AIR' then 'AIR' else 'LODGE' end"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"deal"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;CategoryDealMap&gt; categoryDealMaps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="keyword">private</span> DealType type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>deal_type의 값을 AIR면 AIR고 나머지는 LODGE로 값을 세팅하게 끔 한 것이다.<br>그럼 MOTEL이건 HOTEL이건 PENSION이건 동일한 엔터티인 Lodge 엔터티를 사용하게 된다.   </p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> DB </category>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>후니의 쉽게 쓴 시스코 네트워킹 정리 - OSI 7 Layer 네트워크 장비</title>
      <link href="/2018/05/30/network-hardware/"/>
      <url>/2018/05/30/network-hardware/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/network-hardware/thumb.png" alt=""></p><h2 id="Layer-1-Physical-Layer"><a href="#Layer-1-Physical-Layer" class="headerlink" title="Layer 1(Physical Layer)"></a>Layer 1(Physical Layer)</h2><p>랜선, 랜카드는 너무 익숙하고 짜치니 일단 생략.<br>기본적으로 이더넷 방식을 기준으로 설명.</p><ul><li><p>리피터(Repeater): 신호를 증폭해주는 것<br>LAN선의 경우에 최대 거리가 100m인 것들이 있다. (데이터의 무결성을 보장할 수 있는 거리인 듯)<br>이런 장비가 그럼 어떻게 수 십 km 떨어진 곳에 있는 데이터를 받아올 수 있는 것일까?<br>바로 최대 거리인 100m 내에 리피터라는 장비를 둬서 데이터를 전달만 하는 역할을 하는 걸 보고 리피터라고 한다.<br>음악 장비에 있어서는 엠프(소리를 크게 내주게 하는 장비) 정도로 이해하면 편할 것 같다.<br>OSI 7 Layer의 1 Layer(Physical Layer)에 속한다.  </p></li><li><p><em>허브가 리피터 역할까지 하고 가격도 싸지면서 거의 쓰이지 않는 장비로 알고 있다.*</em><br>무선랜의 경우 신호의 세기를 증폭시켜주는 중계기/리피터/증폭기 등등으로 쓰이는데 예전에 사용하던 유선랜 리피터와 해주는 역할이 유사하긴 하다.</p></li><li><p>허브(Hub): 멀티포트(Multiport) 리피터<br>리피터의 역할을 하는데 포트가 여러 개인 것이다.<br>리피터는 입력한 데이터를 그대로 출력한다고 했고, 허브에서는 멀티포트로 연결된 장비들에게 이 데이터를 그대로 전달하는 역할을 한다.<br>1번 포트에 연결된 장비가 데이터를 보내면 이더넷 특성상 1번 포트를 제외하고 나머지 모든 포트로 데이터를 뿌리게 된다.<br>눈치 없는 2번 포트에 연결된 장비가 동시에 데이터를 보내게 되면 이더넷의 특성 상 CSMA/CD 프로토콜을 사용하고 충돌이 발생하게 된다.<br>이 때 충돌한 두 장비는 다시 눈치게임을 통해 데이터를 뿌리게 된다.<br>위와 같이 같은 허브에 물려있는 모든 장비는 같은 Collision Domain 상에 존재하게 되는 것이다.<br>따라서 허브가 엄청 많은 포트를 지원한다고 해서 꼭 좋은 것만은 아니다.<br>위와 같이 데이터를 어느 한 순간에만 보낼 수 있는 허브를 Shared Hub라고 부르고,<br>위와 같은 특성 때문에 인터넷 속도를 사실 N빵 했다고 보면 된다.<br>Collision Domain은 별도의 허브를 쓴다고 해서 해결되는 게 아니라 오히려 Collision Domain의 범위를 늘리는 일이다.<br>아마 인터넷/IP 공유기가 허브이지 않을까 싶다.  </p></li><li><p>모뎀(Modem): 아날로그 신호 &lt;-&gt; 디지털 신호<br>아날로그 신호(빛, 전기) -&gt; 디지털 신호(0, 1)를 수행하는 장비를 <strong>Mo</strong>dulator(변조기)라고 부르고,<br>반대인 디지털 신호 -&gt; 아날로그 신호를 수행하는 장비를 <strong>Dem</strong>odualtor(복조기)라고 부르고, 이 둘을 합친 게 모뎀이다.<br>과거에는 전화선으로 연결을 해서 매우 느렸지만 요즘에는 빛을 신호로 사용하는 기가광랜 등등의 등장으로 모뎀 장비도 크게 성장하였다.</p></li></ul><a id="more"></a><h2 id="Layer-2-Data-Link-Layer"><a href="#Layer-2-Data-Link-Layer" class="headerlink" title="Layer 2(Data Link Layer)"></a>Layer 2(Data Link Layer)</h2><ul><li><p>브릿지(Bridge): 허브를 이어주는 다리<br>허브의 단점인 충돌을 피하기 위해 등장한 장비.<br>브릿지가 포트가 4개라면 여기에 허브를 4개 물릴 수 있고, 각기 다른 Collision Domain을 가진다.<br>브릿지의 기능 중에 필터링이 있는데, 다른 포트로 못 건너가게 막는 기능이다.<br>같은 포트 내의 장비끼리 통신인 경우에는 다른 포트로 건너가지 못하게 막고,<br>이 기능 때문에 서로 다른 Collision Domain을 가지고, 동시에 통신이 가능하게 된다.<br>만약 다른 포트에 있다면 ‘포워딩’이란 기능을 통해 다리를 건너가게 해주는 것이다.<br>허브와 달리 L2이기 때문에 L2의 특성인 에러 처리 능력도 가졌다.<br>하지만 허브는 에러 처리 없이 곧이 곧대로 받으면 되기 때문에 허브 보다는 데이터 처리 속도가 느리다.  </p></li><li><p><em>스위치의 우수성과 값이 싸짐에 따라서 거의 사장됐다고 보면 된다.*</em></p></li><li><p>스위치(Switch): 브릿지의 진화판<br>기본적으로 브릿지가 가진 특성을 모두 가지고 있고 다음과 같은 차이점과 값이 싸짐에 따라 브릿지를 대체했다.  </p></li><li><p>스위치는 프레임 처리 방식이 하드웨어 방식이라 소프트웨어 방식인 브릿지에 비해 훨씬 빠르다.<br>왜냐하면 처리 절차를 미리 칩에 구워서 만들었기 때문이다.  </p></li><li><p>브릿지와 달리 각 포트별로 다른 속도를 할당해 줄 수 있다.  </p></li><li><p>브릿지보다 포트가 훨씬 많다.  </p></li><li><p>프레임을 처리하는 방식이 브릿지는 들어오는 프레임을 전부 받아들인 다음 처리를 시작하는 Store and Forwarding 방식만 지원하지만,<br>스위치는 프레임의 목적지 주소만을 보고 바로 전송하는 Cut Through 방식이나 앞에 두 개의 방식의 장점을 살린 Fragment Free 방식도 지원한다.  </p></li></ul><h2 id="Layer-3-Network-Layer"><a href="#Layer-3-Network-Layer" class="headerlink" title="Layer 3(Network Layer)"></a>Layer 3(Network Layer)</h2><ul><li>라우터(Router): 통신하는데 최적의 경로를 찾아주는 장비<br>여러 알고리즘에 따라서 통신하는데 최적의 경로를 찾아주는 장비이다.<br>Layer 3에서는 IP가 존재하는 계층이라 라우터에서는 IP 주소를 보고 포워딩하지만, 스위치에서는 MAC 주소를 보고 포워딩한다.<br>라우터의 가장 큰 목적은 외부 네트워크와 통신하기 위해서 쓰인다는 점이다.<br>따라서 라우터는 두 가지 포트를 가지게 되는데 내부 네트워크(스위치)와 연결하는 포트를 이더넷 인터페이스라고 한다.<br>다른 하나는 외부 네트워크와 연결하는 시리얼 인터페이스(WAN과의 접속)라고 부른다.<br>이더넷 인터페이스는 내부 네트워크의 IP 주소를 가지며, 이 주소를 Default Gateway라고 부른다.<br>대부분 기본적으로 <code>192.168.0.1</code>과 같은 공유기 관리자 페이지로 가지는 곳이 바로 Default Gateway이다.<br>시리얼 인터페이스도 마찬가지로 IP 주소를 부여받고, 스위치에 연결된 모든 장비가 이 IP 주소로 변환되서 나가지 않을까…?<br>스위치/허브 등등의 경우에는 IP 주소를 할당하지 않아도 되지만 라우터의 경우에는 외부 네트워크와 통신해야하기 때문에 IP 주소를 무조건 할당받아야 한다.<br>아마 공유기가 라우터의 기능까지 수행하고 있는 건 아닐까 싶다.<br>또한 요즘에는 라우터와 모뎀의 일체형인 제품들도 나오는 것 같다.  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>후니의 쉽게 쓴 시스코 네트워킹 정리 - Ethernet, MAC Address, xCast</title>
      <link href="/2018/05/30/network-ethernet-mac-address-x-cast/"/>
      <url>/2018/05/30/network-ethernet-mac-address-x-cast/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/network-ethernet-mac-address-x-cast/thumb.png" alt=""></p><h2 id="이더넷-Ethernet"><a href="#이더넷-Ethernet" class="headerlink" title="이더넷(Ethernet)"></a>이더넷(Ethernet)</h2><p>네트워킹 방식에는 아래와 같은 애들이 존재한다.  </p><ul><li>FDDI</li><li>ATM</li><li>Token Ring</li><li>Ethernet</li></ul><p>이더넷 말고도 전공 시간에 배웠는데 다 까먹었다.<br>전공 시간에는 이더넷에 대해서는 잘 안 배우고 CSMA/CD 방식에 대해서만 배웠는데 이더넷과 연관이 있다고 하니 뭔가 와닿는다.  </p><a id="more"></a><p>여튼 위와 같이 여러 네트워킹 방식이 존재하고 어떤 네트워킹 방식을 쓰느냐에 따라서 랜카드에서 모든 네트워크 장비가 달라진다.<br>우리가 쓰는 대부분의 네트워킹 방식은 이더넷 방식을 쓴다고 이해하면 된다.<br>그래서 LAN 카드를 Ethernet Card, NIC(Network Interface Card) 등등으로도 많이 부른다.</p><p>이 이더넷의 큰 특징 중 하나가 CSMA/CD(Carrier Sense Multiple Access/Collision Detection) 프로토콜을 이용한다는 것이다.  </p><ul><li>Carrier Sense: 네트워크 상에서 통신이 일어나고 있는지, 신호를 감지</li><li>Multiple Access: 두 대 이상의 장비에서 네트워크 상에 동시에 통신을 시도하는 경우</li><li>Collision Detection: Multiple Access의 경우 충돌(Collision)이 발생하는데 이를 감지(Detection)하는 것<br>Collision Detection이 발생하면 체감 할 수 없을 정도로 짧은 랜덤한 시간동안 대기를 한 후 재시도하게 된다.</li></ul><p>이더넷의 특성 상 충돌이 발생하는 것은 자연스럽고, 충돌이 발생하면 계속해서 대기 후 재전송을 하게 된다.<br>네트워크에 연결된 호스트가 많을 수록 충돌은 자주 발생하고 이런 단점을 해결하고자 콜리전 도메인(충돌이 발생하는 범위)을 줄이는 방식으로 해결이 가능하다.</p><h2 id="MAC-Media-Access-Control-Address"><a href="#MAC-Media-Access-Control-Address" class="headerlink" title="MAC(Media Access Control) Address"></a>MAC(Media Access Control) Address</h2><p>어따 써먹는 놈인지 참 궁금했다.<br>IP 주소만 있으면 장비 찾아가지 뭐하러 MAC Address를 사용하는지 이해가 안 갔다.  </p><p>이더넷 카드에는 전 세계에서 고유한 주소인 MAC Address가 부여되고, 6바이트(48비트)의 16진수로 표현되고,<br>하이픈(-), 점(.), 콜론(:)을 구분자로 표기하며 앞의 24비트는 이더넷 카드 제조 업체의 코드를 의미하고, 뒤의 24비트는 일련번호를 나타낸다.<br>MAC Address는 절대 변하지 않으므로 Physical Address라고 부르기도 하고, 어떻게 보면 전세계에서 유일하고, 식별 가능한 주소이기 때문에 개인정보로 취급되기도 한다.  </p><p>이제 진짜 MAC Address를 왜 쓰는지 알아보자.<br>우선 IP 주소만 있어도 통신은 일어날 것 같다.<br>하지만 IP가 속한 <a href="https://en.wikipedia.org/wiki/Network_layer" rel="external nofollow noopener noreferrer" target="_blank">L3(Network Layer)</a>를 보면 다양한 프로토콜이 존재하고,<br><a href="https://en.wikipedia.org/wiki/Internetwork_Packet_Exchange" rel="external nofollow noopener noreferrer" target="_blank">IPX(Internetwork Packet Exchange)</a>를 보면 IP 주소를 전혀 사용하지 않는다.<br>물론 IPX는 <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite" rel="external nofollow noopener noreferrer" target="_blank">TCP/IP Stack</a>에는 속하지 않지만 엄밀히 IP 프로토콜과 동등한 레이어의 프로토콜이다.<br>즉 IPX를 통해서 패킷을 원하는 장비에까지 전달이 가능하다는 소리이다.<br>이런 경우에는 IP 주소가 없기 때문에 IP 주소가 속한 L3보다 더 아랫단에서 컨트롤 가능한 주소를 가지고 통신해야한다.<br>그러기 위해서 L1(Physical Layer)에 속하는 이더넷 카드에 존재하는 MAC Address를 가지고 통신을 하면 된다.  </p><p>위와 같은 이유로 사실 내부적으로 통신을 할 때는 IP 주소를 MAC Address로 변경하는 작업을 수행해서 MAC Address로 통신을 하게 되는 것이다.<br>IP -&gt; MAC Address는 ARP(Address Resolution Protocol)를 이용하고, 반대인 MAC Address -&gt; IP의 경우에는 RARP(Reverse ARP)를 이용하게 된다.  </p><p>통신은 두 가지 경우로 나눌 수 있고 각 경우 별로 MAC Address를 어떻게 알아내는지 알아보자.  </p><ol><li>같은 네트워크에 있는 호스트끼리 통신하는 경우<br>먼저 해당 IP의 MAC Address를 알려달라는 브로드캐스트를 날리게 된다.<br>다른 호스트들은 하던 작업을 멈추고 자신의 IP 주소와 일치하는지 확인하고, 일치하지 않으면 무시한다.<br>일치하면 자신의 MAC Address를 담아서 응답하고, 해당 MAC Address를 통해서 통신이 이루어진다.  </li><li>다른 네트워크에 있는 호스트끼리 통신하는 경우<br>먼저 해당 IP의 MAC Address를 알려달라는 브로드캐스트를 날리게 된다.<br>다른 호스트들은 하던 작업을 멈추고 자신의 IP 주소와 일치하는지 확인하고, 일치하지 않으면 무시한다.<br>아무도 응답을 안 해주니까 라우터 A가 자신의 MAC Address를 알려주고, 자신이 대신해서 전달해주겠다고 한다.<br>그럼 목적지를 라우터 A의 MAC Address로 정하고 패킷을 날리고, 해당 라우터 A는 또 해당 IP가 존재하는 라우터 B를 찾게 된다.<br>라우터 B를 찾았으면 목적지를 라우터 B의 MAC Address로 정하고 라우터 B에게 패킷 전달을 위임한다.<br>이제 라우터 B는 브로드캐스트를 날려서 해당 IP의 MAC Address를 획득하고, 해당 MAC Address를 가지고 통신이 이루어진다.</li></ol><h2 id="Unicast"><a href="#Unicast" class="headerlink" title="Unicast"></a>Unicast</h2><p>1:1 통신을 말하며 대부분의 통신이 이러한 방식으로 이루어진다.<br>전송되는 프레임 안에 목적지 MAC Address를 넣는다.<br>유니캐스트로 프레임을 날려도 다이렉트로 해당 MAC Address를 가진 장비에게 전달되는 게 아니라 로컬 이더넷의 기본 특성이<br>네트워크에 존재하는 모든 호스트에게 정보를 날리는 Shared 방식이라서 모든 호스트에게 일단 프레임이 전달된다.<br>해당 프레임을 받은 호스트는 목적지 MAC Address가 자신이 가지고 있는 Ethernet Card의 MAC Address와 비교해서 다르면 해당 프레임을 버린다.<br>Ethernet Card에서 비교가 가능하기 때문에 CPU까지 해당 프레임을 올릴 필요가 없어서 PC의 성능 저하를 유발하지 않는다.  </p><h2 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h2><p>동일한 네트워크에 존재하는 모든 호스트와 통신을 하는 방식이다.<br>라우터 밖으로 나가지 않는 범위를 뜻하며 이 범위를 브로드캐스트 도메인이라고 부른다.<br>브로드캐스트는 거부 권한이 없기 때문에 무조건 프레임을 받아야한다.<br>해당 프레임을 받아서 인터럽트를 걸고 CPU로 해당 프레임을 올려서 프레임을 버릴지 말지 결정하게 된다.<br>따라서 이 경우에는 네트워크 트래픽/성능 저하를 유발하기도 하지만 해당 PC의 성능 저하도 유발하기 때문에 남발해선 안 된다.  </p><p>브로드캐스트는 IP 주소로 MAC Address를 알아내는 ARP 프로토콜이나 새로 연결한 호스트에게 IP를 할당하기 위해<br>남은 IP 주소를 알아내고 자동 할당해주는 DHCP 프로토콜 등등에서 쓰인다.</p><h2 id="Multicast"><a href="#Multicast" class="headerlink" title="Multicast"></a>Multicast</h2><p>브로드캐스트는 통신 거부 권한이 없는데 멀티캐스트는 그룹을 만들어서 그 그룹을 구독하고,<br>그룹(에 속해있는 구독자)에 프레임을 날리는 방식이다.<br>더 이상 통신을 하고 싶지 않다면 구독 해제하면 된다.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(AWS) Public Subnet</title>
      <link href="/2018/04/25/aws-public-subnet/"/>
      <url>/2018/04/25/aws-public-subnet/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/aws-public-subnet/thumb.png" alt="">  </p><h2 id="Subnet"><a href="#Subnet" class="headerlink" title="Subnet"></a>Subnet</h2><p>서브넷이란 Sub Network, 네트워크의 서브, 메인 네트워크를 쪼갰다고 보면 된다.<br>AWS 관점에서 봤을 때 메인 네트워크는 <a href="/2018/04/25/aws-vpc">VPC</a>라고 보면 된다.    </p><h3 id="Public-Subnet"><a href="#Public-Subnet" class="headerlink" title="Public Subnet"></a>Public Subnet</h3><p>Public Subnet이란 <strong>외부에서 접근이 가능한 네트워크</strong> 정도로 이해하면 될 것 같다.</p><a id="more"></a><p>Public Subnet을 만드려면 AWS 콘솔에서 VPC 서비스로 이동해서 좌측 탭 중에 Subnets를 클릭하고, Create Subnet를 클릭한다.</p><p><img src="/images/aws-public-subnet/create-subnet.png" alt="subnet 생성 화면"><br>Name tag를 정하고 어떤 VPC에 Subnet을 생성할 것인지 선택하면 된다.<br>VPC가 Region에 생성되는 것에 반해 Subnet은 어떤 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions-availability-zones" rel="external nofollow noopener noreferrer" target="_blank">AZ(Availability Zone)</a>에 생성될 것인지도 정해야한다.<br>따라서 AZ가 다운돼서 장애가 발생하는 것을 방지하려면 Multi AZ로 Subnet을 생성해야하지만, 포스트에서는 단일 AZ로 진행하도록 하겠다.<br>그리고 Subnet의 <a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%EB%8D%94_(%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9)" target="_blank" rel="external nofollow noopener noreferrer">CIDR Block</a>을 지정해야하는데,<br>Subnet은 VPC의 Subset이기 때문에 VPC의 cidr block을 초과해서 정할 수 없다.<br>또한 미리 생성한 Subnet의 cidr block과 겹쳐서도 안 된다.<br><a href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%ED%81%B4%EB%9E%98%EC%8A%A4" rel="external nofollow noopener noreferrer" target="_blank">ip class</a>를 참고해서 네트워크 규모에 따라서 cidr block을 설정하면 된다.  </p><p><code>또한 서브넷 내의 리소스(EC2 인스턴스, ELB 등등)는 무조건 private ip를 가지는데, private ip는 고정할 수 없고,생성될 때 서브넷의 cidr block 내의 ip가 랜덤으로 할당된다.</code></p><p><img src="/images/aws-public-subnet/enable-auto-assign-public-ip.png" alt=""><br>기본적으로 서브넷에는 설정에는 서브넷 내의 리소스에 대해 public ip를 자동으로 할당하지 않게 설정돼있다.<br>우리는 만드는 목적 자체가 public subnet이기 때문에 public ip를 자동으로 할당하도록 설정하자.</p><h3 id="Internet-Gateway"><a href="#Internet-Gateway" class="headerlink" title="Internet Gateway"></a>Internet Gateway</h3><p>Internet Gateway는 VPC의 문지기와도 같은 역할을 한다.<br>VPC 외부에서 접근할 때 항상 Internet Gateway를 거쳐서 접근하게 된다.<br>따라서 Public Subnet을 구성하기 위해서는 Internet Gateway를 무조건 만들어야한다.<br>VPC 서비스 좌측 탭 중에 Internet Gateways를 클릭하고 Create internet gateway를 클릭하고 Name tag를 입력해서 Internet Gateway를 생성하자.  </p><p><img src="/images/aws-public-subnet/internet-gateway.png" alt=""><br>Internet Gateway는 기본적으로 vpc에 안 붙어있기 때문에 vpc에 붙여주자.<br>여기서 끝이 아니고, Subnet에 Route Table을 설정해줘야한다.  </p><h3 id="Route-Table"><a href="#Route-Table" class="headerlink" title="Route Table"></a>Route Table</h3><p>Route Table이란 어떤 IP 주소로 가야할 때 어디로 가야하는지를 나타낸 경로를 뜻한다.<br>기본적으로 VPC를 생성하면 Main Route Table이 생성되고, 라우트 테이블을 설정하지 않은 서브넷들은 암묵적으로 메인 라우트 테이블이 설정된다.<br>이 포스트에서는 메인 라우트 테이블을 수정하도록 하겠다.  </p><p>Route Table을 수정하려면 AWS 콘솔에서 Route Tables 서비스로 이동해서 해당 vpc의 메인 라우트 테이블을 선택하고, Edit 버튼을 클릭한다.<br><img src="/images/aws-public-subnet/main-route-table.png" alt=""><br>우선 메인 라우트 테이블의 Destination은 vpc의 cidr block이 할당돼있고, target은 local로 돼있다.<br>vpc 내부 자원에 대해서는 cidr block 범위에 해당하는 private ip가 할당돼있기 마련이다.<br>따라서 cidr block 내의 ip의 경우에는 local, vpc 내부에서 자원을 찾을 수 있다는 뜻이다.  </p><p>우리는 외부와 통신을 해야하기 때문에 라우트 테이블에 인터넷 게이트웨이를 붙어야하기 때문에 Edit 버튼을 누르고 아래와 같이 설정하면 된다.<br><img src="/images/aws-public-subnet/main-route-table-edit.png" alt=""><br>0.0.0.0/0, 즉 모든 ip에 대해서 인터넷 게이트웨이로 향하게 끔 설정을 했다.  </p><p>목적지 ip가 cidr block 내의 private ip(10.0.0.0/16)인 경우에 대해서는 vpc 내부(local)에서 자원을 찾게 끔 설정한 것이고,<br>목적지 ip가 cidr block 내의 private ip(10.0.0.0/16)가 아닌 경우(0.0.0.0/0)에 대해서는 인터넷 게이트웨이를 통해서 vpc 외부로 내보내는 것이다.  </p><h3 id="EC2-인스턴스-생성"><a href="#EC2-인스턴스-생성" class="headerlink" title="EC2 인스턴스 생성"></a>EC2 인스턴스 생성</h3><p>다른 리소스(ELB 등등)을 해도 되지만 포스트에서는 가장 간단한 <a href="https://aws.amazon.com/ko/ec2/" rel="external nofollow noopener noreferrer" target="_blank">EC2</a>로 선택했다.<br>EC2 인스턴스는 간단하게 설명하면 그냥 서버 장비 한 대라고 생각하면 된다.  </p><p>AWS 콘솔에서 EC2 서비스로 이동해서 Launch Instance를 클릭하자.<br>입맛에 맞게 설정을 하면 되는데, Step 2에서 Review and Launch 대신에 Configure Instance Details를 선택해주자.  </p><p><img src="/images/aws-public-subnet/ec2-subnet-setting.png" alt=""><br>Step3가 핵심이다.<br>위에서 만든 VPC와 Public Subnet을 설정하고, public ip 할당 부분을 enable로 하던가,<br>아니면 서브넷에 자동으로 public ip 할당 설정이 돼있다면 Use subnet setting을 그대로 내비두면 된다.  </p><p>그 이후에는 입맛에 맞게 인스턴스를 생성하면 외부에서 접근 가능한 리소스를 만든 셈이다.  </p><h3 id="외부에서-접근-가능하게-하기-위한-조건"><a href="#외부에서-접근-가능하게-하기-위한-조건" class="headerlink" title="외부에서 접근 가능하게 하기 위한 조건"></a>외부에서 접근 가능하게 하기 위한 조건</h3><ol><li>Subnet에 설정된 Route Table에 Internet Gateway가 설정돼있어야한다. (Public Subnet)  </li><li>결국 외부에서 접근하는 IP 주소는 Subnet 내의 리소스로 접근하기 때문에 리소스를 만들 때는 꼭 public ip를 할당해야한다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> VPC </tag>
            
            <tag> Network </tag>
            
            <tag> Subnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(AWS) VPC</title>
      <link href="/2018/04/25/aws-vpc/"/>
      <url>/2018/04/25/aws-vpc/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/aws-vpc/thumb.png" alt=""><br>자세한 내용을 보고 싶으면 <a href="https://docs.aws.amazon.com/ko_kr/AmazonVPC/latest/UserGuide/VPC_Introduction.html" rel="external nofollow noopener noreferrer" target="_blank">Amazon VPC란 무엇인가?</a>를 참고하면 된다.</p><h2 id="VPC-Virtual-Private-Cloud-란"><a href="#VPC-Virtual-Private-Cloud-란" class="headerlink" title="VPC(Virtual Private Cloud)란?"></a>VPC(Virtual Private Cloud)란?</h2><p><strong>가상의 네트워크</strong>라고 보면 된다.<br><strong>네트워크</strong>는 분산되어 있는 컴퓨터 자원들끼리 통신이 가능하게 끔 구축되어있는 환경 정도로 이해하면 될 것 같다.<br>즉, 네트워크에는 네트워크 외부와 통신이 가능한 인터넷 뿐만 아니라 네트워크 내부에서만 통신이 가능한 인트라넷 등등이 있다.<br>그 앞에 가상이 붙었다 싶이 물리적으로 네트워크를 구성한 게 아니라 논리적인 단위로 네트워크를 구성한 것이다.<br>이렇듯 클라우드 컴퓨팅은 많은 레이어들을 추상화 해놓고, 자동화 해놓음으로써 물리적으로 구축하기 힘든 환경을 손쉽게 제공해준다는 장점이 존재한다.</p><a id="more"></a><h2 id="VPC-생성"><a href="#VPC-생성" class="headerlink" title="VPC 생성"></a>VPC 생성</h2><p><img src="/images/aws-vpc/region.png" alt="region"><br>VPC는 <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-regions-availability-zones.html" rel="external nofollow noopener noreferrer" target="_blank">Region</a>에 생성되므로<br>서비스하려는 region을 고민하고 신중하게 생성해야한다.</p><p>여기서는 VPC Wizards 대신에 직접 VPC를 만들어 볼 것이다.<br>AWS 콘솔에서 VPC 서비스로 이동해서 좌측 탭 중에 Your VPCs를 클릭하고, Create VPC를 클릭한다.  </p><p><img src="/images/aws-vpc/create-vpc.png" alt="vpc 생성 화면"><br>Name Tag와 IPv4 <a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%EB%8D%94_(%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9)" target="_blank" rel="external nofollow noopener noreferrer">CIDR Block</a>을 정해줘야하는데,<br><a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing" rel="external nofollow noopener noreferrer" target="_blank">AWS 공식 문서</a>에서는<br><a href="http://www.faqs.org/rfcs/rfc1918.html" rel="external nofollow noopener noreferrer" target="_blank">RFC 1918</a>에 명시된 private ip를 권장하고 있다.<br>vpc와 같은 서비스는 전 세계에서 공통으로 사용하는 서비스이고 IP 주소는 자원을 식별하기 위한 주소이므로 충돌이 일어나면 안 된다.<br>따라서 private ip를 추천하는 것 같고, <a href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%ED%81%B4%EB%9E%98%EC%8A%A4" rel="external nofollow noopener noreferrer" target="_blank">ip class</a> 별 private ip는 다음과 같다.  </p><ul><li>A 클래스 - 10.0.0.0 - 10.255.255.255 (cidr block 10.0.0.0/8)  </li><li>B 클래스 - 172.16.0.0 - 172.31.255.255 (cidr block 172.16.0.0/12)  </li><li>C 클래스 - 192.168.0.0 - 192.168.255.255 (cidr block 192.168.0.0/16)</li></ul><p>vpc에서 netmask는 16(65536개의 네트워크, 65536개의 호스트) ~ 28(약 26억개의 네트워크, 16개의 호스트)을 지정해줘야한다.  </p><p>이렇게만 진행하면 간단하게 VPC를 생성했으니 이제 다음으로 <a href="/2018/04/25/aws-public-subnet">Public Subnet</a>을 만들어보자.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> VPC </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(보안) 대칭/비대칭키 암호화</title>
      <link href="/2018/04/13/key-algorithm/"/>
      <url>/2018/04/13/key-algorithm/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/key-algorithm/thumb.png" alt="출처: http://kryptophone.kryptotel.net/faq/encryption/index.html"></p><p>이번 포스트에서는 평문의 데이터를 암호화/복호화 하는 방법에 대해서 이해해보자.<br>사람이 알아볼 수 있는 데이터를 평문(plain text)라고 말하고, 평문을 암호화한 걸 암호문(cipher text)라고 부른다.<br>수학적 원리를 알아보는 것도 아니기 때문에 간단하게만 정리해봤다.</p><a id="more"></a><h2 id="키-KEY"><a href="#키-KEY" class="headerlink" title="키(KEY)"></a>키(KEY)</h2><p>암호화/복호화 할 때 핵심 역할을 한다.<br>예를 들면 <code>알파벳 순서를 3칸 땡겨라</code>와 같은 키가 있을 때 키는 두 가지 관점에서 바라볼 수 있다.  </p><ol><li>알파벳 순서를 땡겨라/밀어라 - 알고리즘<br>암호화 할 때 땡겨라 였으면 복호화 할 때는 밀어라 가 된다.</li><li>3칸 - 비밀번호<br>비밀번호에 따라서 동일한 알고리즘이지만 암호화 했을 때 다른 값이 나온다.</li></ol><p>동일한 알고리즘을 사용했다고 해서 항상 동일한 키가 생성되는 게 아니고, 동일한 패스워드를 사용했다고 해서 동일한 키가 생성되는 게 아니다.<br>대부분의 경우에는 수학적 원리를 따지지 않고, 보안상 이슈가 없는 알고리즘을 그냥 선택하기 마련이라서 개발자들이 선택하는 알고리즘은 비슷한 걸 많이 쓰는 걸로 알고 있다.<br>알고리즘만 가지고 키를 유추할 수 있다면 웬만한 서비스들의 보안은 구멍 투성이었을 것이다. </p><h2 id="대칭키-암호화"><a href="#대칭키-암호화" class="headerlink" title="대칭키 암호화"></a>대칭키 암호화</h2><p>암호화/복호화 할 때 사용하는 키가 동일한 경우를 말한다.<br>(triple)DES(Data Encryption Standard, 많이 취약한 것으로 알려짐), AES(Advanced Encryption Standard) 등등이 있지만<br>AES256 CBC를 가장 많이 쓴다.<br>국내에서 만든 걸로는 SEED, ARIA 등등이 있다.<br>위 알고리즘은 세 가지 구분으로 나눠서 볼 수 있다.  </p><ol><li>AES - 알고리즘</li><li>256 - 키의 길이를 나타냄.</li><li>CBC(cipher-block chaining) - 자세한 링크는 <a href="http://brownbears.tistory.com/302" rel="external nofollow noopener noreferrer" target="_blank">블록 암호 운용 방식</a>를 참조</li></ol><p>암호화/복호화 관련해서 실습을 해볼 때는 <a href="https://www.openssl.org/" rel="external nofollow noopener noreferrer" target="_blank">OpenSSL</a>을 이용하면 매우 간편하다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"LOVE"</span> | openssl enc -aes-256-cbc -a</span><br></pre></td></tr></table></figure><p>위 명령어를 치고 비밀번호를 입력하면 해당 키를 가지고 암호화 된 텍스트가 나온다.  </p><p>암호화 된 텍스트를 평문으로 복호화 할 때는 아래 명령어를 입력하면 된다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"U2FsdGVkX1+3CGPrtP48HYcpt1x2jMB3ZlvUnpLP6H4="</span> | openssl enc -aes-256-cbc -a -d</span><br></pre></td></tr></table></figure><p>비밀번호를 잘못입력하면 <code>bad decrypt</code>와 같은 문구가 나올 것이고, 비밀번호를 잘 입력하면 올바른 키로 복호화 된 LOVE란 평문을 볼 수 있다.</p><p>이렇듯 암호화/복호화 할 때 동일한 키를 사용하는 것을 대칭키라고 부른다.<br>대칭키는 암호화 연산 속도가 빠르다는 장점을 가지고 있다.<br>하지만 내가 어떤 키로 암호화를 했다면 수신자도 같은 키를 가지고 있어야한다.<br>그러기 위해서는 둘이 실제로 만나서 암호화에 쓰였던 키를 교환해야한다.<br>하지만 이 과정에서 중간에 제 3자가 개입해서 키를 몰래 엿보거나 조작을 할 수 있다.<br>이런 행위를 <a href="https://ko.wikipedia.org/wiki/%EC%A4%91%EA%B0%84%EC%9E%90_%EA%B3%B5%EA%B2%A9" rel="external nofollow noopener noreferrer" target="_blank">중간자 공격(man in the middle attack)</a>이라고 부른다.  </p><h2 id="비대칭키-암호화"><a href="#비대칭키-암호화" class="headerlink" title="비대칭키 암호화"></a>비대칭키 암호화</h2><p>대칭키의 키 관리가 매우 취약하다는 문제를 해결하고자 등장한 방식이다.<br>대칭키와 반대로 암호화 할 때 사용하는 키와 복호화 할 때 사용하는 키가 다른 경우를 말한다.<br>타인에게 절대 노출되서는 안되는 비밀키(개인키), 비밀키를 토대로 만든 공개키가 쌍을 이룬 형태이다.</p><p>Diffie–Hellman 키 교환, RSA(알고리즘 제작자인 Ron Rivest, Adi Shamir, Leonard Adleman의 성의 이니셜을 땀) 등등의 알고리즘이 있다.<br>TLS, SSH 프로토콜에서는 주로 RSA 알고리즘을 채택해서 사용한다.  </p><p>비대칭키 암호화는 키 교환 알고리즘이 안전하다는 장점에 비해 알고리즘이 복잡한 수학적 연산으로 구성돼있어서 속도 측면에서는 단점이다.</p><p>또한 앞으로 설명할 비밀키/공개키, 전자 서명, 전자 인증서, CA를 통틀어 PKI(Public Key Infrastructure, 공개키 기반 구조)라고 부른다.</p><h3 id="공개키-암호화"><a href="#공개키-암호화" class="headerlink" title="공개키 암호화"></a>공개키 암호화</h3><p>공개키를 통해 암호화하는 경우를 말한다.<br>공개키로 암호화를 했다는 것은 비밀키로만 풀 수 있다는 뜻이다.<br>주로 보안에 민감한 정보를 공개키 암호화 방식으로 보낸다.  </p><p>특정(수신자) 비밀키로만 복호화가 가능한 공개키를 만드려면 해당 비밀키로 공개키를 만들면 된다.<br>하지만 비밀키는 어떠한 사유에서도 유출하면 안 되고, 송신측에서는 수신측의 비밀키가 없으므로 공개키를 만들 수 없다.<br>따라서 아래와 같은 시나리오를 따른다.  </p><ol><li>수신측에서 본인의 비밀키로 공개키를 만든다.  </li><li>수신측은 해당 공개키를 송신측에 보낸다.  </li><li>송신측은 해당 공개키로 데이터를 암호화해서 보낸다.  </li><li>수신측은 본인의 비밀키로 데이터를 복호화한다.</li></ol><p>위 과정에서 다음과 같은 의문을 품을 수 있다.<br><code>2번의 과정에서 수신측의 공개키가 제 3자에게 탈취당하면 어떡하지?</code><br>탈취 당해도 된다. 그래봤자 수신측의 비밀키가 없기 때문에 데이터를 복호화 할 수 없다.</p><p>하지만 위 과정에서 다음과 같은 취약점이 존재한다.<br><code>3번 과정에서 제 3자가 개입해서 만든 공개키인 경우에 제 3자에게 데이터를 전달하고, 이 데이터를 제3자가 본인의 개인키로 복호화가 가능하다.</code><br>위 취약점대로라면 내가 원치 않는 사람에게 데이터가 탈취됐다고 보면 된다.</p><h4 id="전자-인증서"><a href="#전자-인증서" class="headerlink" title="전자 인증서"></a>전자 인증서</h4><p><img src="/images/key-algorithm/certificate.png" alt="해당 블로그의 전자 인증서"><br>공개키 암호화 방식으로 통신할 때 내가 원하지 않는 상대방에게 데이터가 전달되는 취약점을 방지하고자 등장했다.<br>전자 인증서는 <code>자기 자신이라는 것을 증명하기 위한 수단</code>이라고 보면 된다.<br>tcp 3way handshake를 통해서 연결이 확립됐다고 해서 안심하면 안 된다.<br>공개키 암호화 방식으로 통신을 하기 위해 공개키를 전달하는 과정에서<br>공개키를 보내주는 쪽을 흉내낸 제3자가 보낸 공개키일 가능성이 있을 수 있기 때문이다.<br>이렇듯 신뢰할 수 있는 곳이 아닌 곳에서 보낸 공개키에 대한 검증 없이 바로 해당 공개키로 암호화해서 데이터를 보내면 데이터가 탈취당한 것이다.  </p><p>전자 인증서를 발급받기 위해서는 CA(Certification Authority, 인증 기관)에 발급 요청을 해야한다.<br>최근 이슈를 일으킨 시만텍(symantec), 무료 SSL/TLS 인증서를 발급해주는 Let’s Encrypt에서 사용하는 ISRG(Internet Security Research Group), Comodo 등등이 있다.<br>별도의 검증 없이 인증서를 발급해주면 각종 벤더사 등등으로부터 외면받고 신뢰도가 떨어지는 경우도 있으니 어느 인증기관에서 발급한 인증서인지도 중요하다.<br>이 CA 사이에도 계층 구조가 있어서 루트 CA가 있고, 그 하위 CA가 연쇄적으로 있다.<br>따라서 특정 CA는 인증서의 묶음을 가지게 되는데 이걸 보고 인증서 체인(certificate chain)이라고 부른다.</p><p>전자 인증서를 발급받으려면 다음과 같은 시나리오를 따른다.  </p><ol><li>본인의 공개키와 소유자 정보(도메인 주소 같은 정보)를 CA에 보낸다.  </li><li>CA에서는 소유자 정보와 공개키를 검증해서 전자 인증서를 발급해준다.  </li><li>전자 인증서에는 공개키, 소유자 정보, 인증 기관의 <a href="#전자-서명-비밀키-암호화">전자 서명</a>이 포함돼있다.</li></ol><p>전자 인증서가 공개키 암호화에 어떻게 사용하는지는 아래 시나리오를 보면 된다.  </p><ol><li>수신측에서 본인의 비밀키로 공개키를 만든다.  </li><li>수신측은 해당 공개키와 소유자 정보를 토대로 CA에 전자 인증서 발급 요청을 한다.  </li><li>정상적이라면 전자 인증서를 발급받고 송신측에 전자인증서를 보낸다.  </li><li>송신측은 전자인증서를 토대로 수신측이 정말 수신자가 맞는지 확인을 한다.  </li><li>검증이 끝났으면 전자인증서에 있는 공개키로 데이터를 암호화 해서 수신측에 보낸다.  </li><li>수신측은 암호화된 데이터를 본인의 개인키로 풀어서 복호화된 데이터를 본다.</li></ol><h3 id="전자-서명-비밀키-암호화"><a href="#전자-서명-비밀키-암호화" class="headerlink" title="전자 서명(비밀키 암호화)"></a>전자 서명(비밀키 암호화)</h3><p>비밀키를 통해 암호화하는 경우를 말한다.<br>비밀키로 암호화 했다는 것은 공개키로만 풀 수 있다는 뜻이다.<br>공개키로만 암호화 했다니 아래와 같은 의문을 품을 수 있다.<br><code>공개키면 아무나 다 해당 메시지를 풀어볼 수 있는 건가?</code><br>맞다, 애초에 공개를 위한 메시지이다.<br>그렇다면 공개를 위한 메시지인데 왜 암호화를 한 것일까?<br>이름에서부터 알 수 있듯이 전자 <strong>서명</strong>이다, 본인의 신원을 보증하는 역할을 한다.  </p><p>어떤 근거로 전자 서명이 본인의 신원을 보증하는 역할을 하는 것일까?<br>바로 비밀키로 암호화하기 때문이다.<br>비밀키는 본인만 가지고 있어야하고, 그런 전제가 성립된다면 해당 비밀키를 가진 장비에서 데이터를 보냈다는 사실이 입증되는 것이다.<br>따라서 비밀키는 어떠한 경우에도 공유가 이뤄지면 안 된다.  </p><p>전자 서명은 아래와 같은 시나리오를 따른다.  </p><ol><li>송신측에서 데이터를 비밀키로 암호화한다.</li><li>수신측에서 데이터를 복호화해야하니 암호화한 데이터 + 공개키를 같이 보낸다.</li><li>수신측에서는 암호화한 데이터를 받아서 송신측의 공개키를 통해 데이터를 복호화한다.</li></ol><p>하지만 위와 같은 과정에서는 다음과 같은 문제가 발생한다.<br>2번의 과정에서 제 3자가 패킷을 가로채서 데이터를 조작하고 본인의 개인키로 암호화한 후에 본인의 공개키를 실어서 보내면<br>수신측에서는 송신측에서 보낸 정보라고 취급하기 때문에 이 부분은 취약점이라고 할 수 있다.</p><h4 id="해시-함수-메시지-다이제스트-함수"><a href="#해시-함수-메시지-다이제스트-함수" class="headerlink" title="해시 함수(메시지 다이제스트 함수)"></a>해시 함수(메시지 다이제스트 함수)</h4><p>해시 함수는 데이터의 무결성(위변조가 일어나지 않았다는 검증)을 위해 등장했다.<br>해시 함수는 임의의 메시지를 입력 받으면 고정된 블록의 길이의 메시지를 출력하는 함수이다.<br>데이터 압축과는 달리 복호화가 불가능한 함수이다.<br>복호화가 불가능 하기 때문에 단방향 암호화에서도 쓰이며 비밀번호화 같이 데이터가 유출돼도 원본 데이터의 유추가 불가능해야하는 보안에 아주 민감한 정보에 대해 이런 방식으로 암호화를 한다.<br>라고 생각할 수 있으나 해시 함수는 애초에 비밀번호와 같은 데이터를 암호화 하려고 설계된 게 아니라 짧은 시간에 데이터를 검색하기 위해 설계됐으므로<br>데이터의 무결성을 체크할 때만 확인해야한다, 자세한 내용은 <a href="http://d2.naver.com/helloworld/318732" rel="external nofollow noopener noreferrer" target="_blank">안전한 패스워드 저장</a>을 확인하자.<br>(이러한 이유 때문에 대부분의 웹서비스가 비밀번호를 알려주고 싶어도 보안상 이슈로 알려주지 못하고 초기화를 진행하게 되는 것이다.<br>만약 아직도 비밀번호를 알려주는 서비스가 있다면 보안에 대한 관리가 허술하게 운영되고 있는 사이트라고 판단하면 된다.)<br>데이터 압축은 데이터의 모든 데이터를 들고 있는 반면에 해시 함수는 데이터의 손실이 발생해서 복구가 불가능하다.<br>데이터의 손실이 있기 때문에 다른 입력값인데도 불구하고 동일한 출력이 발생하는 충돌(Collision)이 발생할 가능성이 존재한다.<br>이런 충돌에 관해서는 <a href="https://namu.wiki/w/%EB%B9%84%EB%91%98%EA%B8%B0%20%EC%A7%91%EC%9D%98%20%EC%9B%90%EB%A6%AC" rel="external nofollow noopener noreferrer" target="_blank">비둘기집 원리</a>나 <a href="https://ko.wikipedia.org/wiki/%EC%83%9D%EC%9D%BC_%EB%AC%B8%EC%A0%9C" rel="external nofollow noopener noreferrer" target="_blank">생일 문제</a>를 참고해도 재미있다.  </p><p>예를 들면 이름을 입력하면 성을 출력하는 해시 함수를 생각해 볼 수 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(양권성) = 양</span><br><span class="line">f(양간장) = 양</span><br></pre></td></tr></table></figure><p>양권성이란 데이터를 입력했더니 양이란 데이터가 출력됐다.<br>이 과정에서 데이터의 손실이 발생했다.<br>또한 양권성과는 다른 양간장이란 데이터를 입력했더니 동일한 출력이 양이 나왔다.<br>해시 함수의 출력값을 <code>메시지 다이제스트</code>라고 부른다.</p><p>이렇듯 충돌이 잦은 알고리즘은 좋은 해시 함수라고 말할 수 없으며 취약점이 아주 많다.<br>따라서 혼자서 해시 함수를 만들어서 상용 서비스에 사용하겠다는 생각보다는<br>MD5(Message-Digest algorithm, 보안상 취약점으로 권장되지 않음)나<br>SHA(Secure Hash Algorithm, SHA-1도 보안상 취약점이 발견됨) 같은 검증된 알고리즘(취약점이 발견되지 않고, 충돌이 잦지 않은)을 사용하는 게 좋다.</p><p>이 해시 함수가 어떻게 전자 서명에 사용되는지 아래 시나리오를 보면 된다.</p><ol><li>송신측에서 해시 함수를 통해 원본 메시지를 해싱해서 메시지 다이제스트를 구한다.  </li><li>메시지 다이제스트를 비밀키로 암호화한다.</li><li>수신측에 해시 함수 알고리즘, 비밀키로 암호화한 메시지 다이제스트, 원본 데이터, 공개키를 전달한다.  </li><li>수신측에서는 비밀키로 암호화한 메시지 다이제스트를 공개키로 풀어서 원래 메시지 다이제스트를 구한다.  </li><li>원본 데이터를 해시 함수 알고리즘으로 해싱해서 메시지 다이제스트를 구한다.  </li><li>4번과 5번의 메시지 다이제스트가 일치하면 데이터 위변조가 없다고 판단하고 송신측에서 전달한 데이터라는 걸 신뢰하면 된다.  </li></ol><h2 id="대칭키-암호화와-비대칭키-암호화의-혼용"><a href="#대칭키-암호화와-비대칭키-암호화의-혼용" class="headerlink" title="대칭키 암호화와 비대칭키 암호화의 혼용"></a>대칭키 암호화와 비대칭키 암호화의 혼용</h2><p>대칭키는 속도가 빠른 대신에 키 교환에 있어서 취약점이 존재하고,<br>비대칭 키는 키 교환에 있어서 안전한 반면에 속도가 느리다는 단점이 존재한다.<br>따라서 위 두 방식을 섞어 사용하면 장점만을 살릴 수가 있다.<br>키 교환에는 비대칭 키를 사용하고, 데이터 암호화/복호화에는 대칭키 암호화를 진행하면 된다.  </p><ol><li>송신측에서 대칭키를 공개키 암호화 한다.  <ol><li>수신측에서 공개키가 포함된 전자 인증서를 송신측에게 보낸다.  </li><li>송신측에서 전자 인증서를 토대로 수신측의 신원 확인을 한다.  </li><li>검증이 끝나면 공개키를 신뢰하고 쓰면 되고, 이제 공개키를 위한 키 교환 알고리즘은 끝났다.</li></ol></li><li>수신측에서는 암호화 된 대칭키를 비밀키로 푼다.  </li><li>송신측/수신측 모두 대칭키를 안전하게 전달받았으므로 해당 대칭키로 암호화/복호화를 통해 통신하면 된다.</li></ol><p>위 과정을 이해하면 SSL/TLS 프로토콜이 어떻게 동작하는지 이해할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(네트워크) TCP/IP 쉽게, 더 쉽게 목차 리뷰 - 5장 하드웨어와 네트워크 인터페이스 계층</title>
      <link href="/2018/04/01/tcp-ip-book-index-5/"/>
      <url>/2018/04/01/tcp-ip-book-index-5/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/tcp-ip-book-index-5/thumb.png" alt=""><br>오래전에 이 책을 추천받았으나 최근에 읽어보게 되었다.<br>백엔드 개발자로 일하면서 프론트 엔드 개발자와 의사소통을 원활히 하기 위해서는 서로 네트워크에 대한 기본 지식이 있어야하는 것 같다.<br>이 글은 빠르게 목차를 리뷰하며 백엔드에게 필요한 내용인지, 프론트에게 필요한 내용인지, 공통적으로 알아야하는 내용인지 개인적인 기준에서 분류해봤다.  </p><a id="more"></a><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>내가 여태까지 봐왔던 네트워크 계층 설명글들은 대부분 <a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95" rel="external nofollow noopener noreferrer" target="_blank">OSI 7 Layer</a>를 기준으로 설명을 풀어나가고 있다.<br>OSI 7 Layer는 각 계층이 하는 역할이 명확해서 설명하기가 명쾌하다.<br>하지만 이론과 현실 사이의 괴리감이랄까… OSI 7 Layer는 구현하기가 복잡하거나, 성능 등등의 이슈(굳이 여러 계층으로 쪼갤 필요 없이 하나의 장비가 여러 역할을 수행하는 게 더 나을 때도 있으므로)로 인해<br>실제 구현된 건 대부분 4계층으로 구성된 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%84%B7_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C_%EC%8A%A4%EC%9C%84%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">TCP/IP Stack</a>으로 구현이 많이 돼있다.<br>이 책은 신기하게도 TCP/IP Stack에 기반해서 각 계층의 역할을 설명하고 있다.<br>따라서 진짜 구현된 모델에 대한 이해를 증진시키는 데는 좋은 것 같으나 당장 <a href="https://aws.amazon.com/" rel="external nofollow noopener noreferrer" target="_blank">AWS</a>나 다른 글들을 보면 L4니 L2니 L7이니 해서 OSI 7 Layer로 설명된 글들이 많아서<br>OSI 7 Layer와 책에 설명된 TCP/IP Stack을 매핑시켜 이해하기 위해 책 앞 부분을 많이 왔다갔다 해야하는 단점이 존재하는 것 같다.  </p><p>또한 책이 TCP/IP Stack에 대한 전반적인 내용을 200페이지도 안 되는 분량으로 녹여내다보니 전반적인 흐름을 알기는 좋으나<br>각각의 계층에 대해 딥하게는 다루지 않고, 그림도 아기자기 잘 설명돼있어서(+풀컬러) 입문 서적으로 좋은 것 같다.<br>여기서부터는 백엔드도 딱히 몰라도 되는 내용인 것 같다.  </p><p>예를 들면 프론트는 클라이언트 측에 웹서비스를 제공해주는 일을 하는데 그 중에서 서버가 제공해주는 API로 통신을 해서 데이터를 땡겨와야 한다.<br>웹서비스를 제공하기 위해서는 HTTP(S) 프로토콜을 사용하고, 서버의 API와 통신할 때도 HTTP(S)로 통신을 한다.<br>HTTP 프로토콜은 정보 공유를 위해 만들어진 프로토콜이므로 엄청난 수의 클라이언트가 접속하게 된다.<br>통신을 위한 통로에 수십만명이 한 번에 들어오게 끔 하면 가능한지도 모르겠고, 매번 그 만큼의 사람이 들어오는 것도 아니고, 비용 낭비도 엄청날 것이다.<br>따라서 통신을 위한 통로를 독점하는 게 아니라 항상 연결을 맺고 끊어서 다른 사람들이 원활하게 접속을 하게 해준다.<br>예를 들면 이 통로를 통해서는 동시에 100명만 들어올 수 있게 만들고 나한테 볼 일이 끝난 애들은 다 연결을 끊는 것이다.(사실 이런 설정은 백엔드가 한다.)<br>이 때 연결을 위해 사용하는 프로토콜이 TCP 프로토콜이다. (UDP 프로토콜도 있지만 웹 서비스 내에서는 대부분 데이터를 손실없이 전달해주는 TCP 프로토콜을 사용한다.)<br>따라서 프론트 엔드 개발자라면 HTTP 프로토콜은 물론이고 TCP 프로토콜까지 알아야 어떻게 하면 통신을 최적화 할 수 있을지 생각할 수 있게 된다.</p><p>백엔드의 경우에는 HTTP(S), TCP 프로토콜만 안다고 해서 끝나는 게 아니다.<br>SSH 프로토콜을 이용해서 서버에 원격으로 붙어서 명령어를 날리기도 하고, FTP 프로토콜을 이용해서 파일 업로드/다운로드가 가능한 서버를 설계해야할 수도 있기 때문이다.<br>SSH 프로토콜을 사용하려면 여러 인증 방식 중에 키로 인증하는 방식이 있는데 그럼 공개키, 비공개키, 대칭키, 비대칭키 막 이런 내용이 나오는데 이런 보안적인 요소도 알아야한다.<br>이 내용은 HTTPS에 사용되는 TLS 인증서의 암호화 방식에도 적용된다.<br>또한 동영상 스트리밍 서버를 만든다고 하면 UDP 프로토콜을 사용한다.<br>기본적으로 TCP 프로토콜은 해주는 일이 많으므로(데이터 전송에 실패하면 재전송 처리 등등) 성능이 안 받쳐주는데<br>UDP 프로토콜(보내기만 할 뿐, 잘 받았는지 확인을 하지 않는다. 그래서 가끔 동영상이 깨져서 나오는 현상들이 나온다.<br>하지만 크리티컬한 이슈는 아니고 매번 똑같은 부분에서 동영상이 깨져나오는 게 아니고 네트워크 상황에 따라 달라지기 때문이다.)은 그거보다 성능이 낫기 때문이다.<br>또한 AWS를 사용하다보면 그 아랫단인 IP/Router/Subnet Mask 등등의 영역도 잘 알아야한다.<br>보안을 위해 외부에서 접근이 가능한 요소(다양한 요청을 분산해주는 로드 밸런서)와 내부에서만 접근이 가능한 요소(웹서버, DB 등등)을 구성해야하는데…<br>그러면 네트워크를 어떻게 구성해야할 것이며, 이 네트워크 안에 서버는 몇 대를 둘 것이며, 퍼블릭 요소들과 프라이빗 요소들은 어떻게 통신을 할 것이며<br>어떤 요청들을 받고 말지 네트워크부터 보안에 대한 요소들을 직접 다뤄야하는 경우가 오는데 이럴 때 이 내용들을 알고 있으면 정말 무릎을 탁 치게 되는 날이 온다.  </p><p>더 아랫단이나 부가적인 요소들은 알면 +@, 몰라도 그만인 것 같은데 호기심이 충만하면 알고 싶을 것이다.<br>위에서 설명하지 않은 모뎀, 이더넷 카드, 랜선 등등은 사실 하드웨어 단으로 내려가는 거니 백엔드가 굳이 알 필요가 있나 싶다.(물론 알면 좋다.)<br>또한 데이터 전송에 실패했을 때 어떤 전략으로 재전송시킬 것인지(어플리케이션 단이 아닌 하드웨어 단에서 패킷을 처음부터 전송할 건지, 실패한 부분을 알아내서 그거부터 전송할 것인지)<br>이런 내용들은 내가 봤을 때는 굳이 알 필요가 있나 싶은데 분명 알아두면 어딘가는 써먹을 일이 있을테니 공부해둬야할 것 같긴 하다.</p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="/2018/03/30/tcp-ip-book-index/#1장-컴퓨터-네트워크">컴퓨터 네트워크</a></li><li><a href="/2018/03/31/tcp-ip-book-index-2/#2장-네트워크-서비스와-애플리케이션-계층">네트워크 서비스와 애플리케이션 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-3/#3장-트랜스포트-계층">트랜스포트 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-4/#4장-라우팅과-인터넷-계층">라우팅과 인터넷 계층</a></li><li><a href="#5장-하드웨어와-네트워크-인터페이스-계층">하드웨어와 네트워크 인터페이스 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-6/#6장-보안">보안</a></li></ol><h2 id="5장-하드웨어와-네트워크-인터페이스-계층"><a href="#5장-하드웨어와-네트워크-인터페이스-계층" class="headerlink" title="5장, 하드웨어와 네트워크 인터페이스 계층"></a>5장, 하드웨어와 네트워크 인터페이스 계층</h2><p>OSI 7 Layer에서 L1(Physical Layer), L2(Data Link Layer)에 해당한다.<br>이제부터는 하드웨어에 대한 설명도 같이 나온다.<br>이더넷 카드의 스펙, 랜선의 스펙, 공유기의 스펙, 모뎀의 스펙 등등이 전부 연관이 돼있기 때문이다.<br>이 계층은 통신할 기기에게 데이터를 전달만 하면 끝이다.<br>나머지는 그 상위 계층에서 알아서 할 일이다.<br>또한 이 계층은 비교적 근거리 통신(PC -&gt; 공유기, 공유기 -&gt; 모뎀 등등) 위주이다.<br>따라서 버스나 지하철을 환승한다고 생각하면 이해하기 쉬울 것이다.  </p><h3 id="5-1-네트워크-인터페이스-계층의-역할"><a href="#5-1-네트워크-인터페이스-계층의-역할" class="headerlink" title="5-1. 네트워크 인터페이스 계층의 역할"></a>5-1. 네트워크 인터페이스 계층의 역할</h3><p>소프트웨어적인 부분(프로토콜, OSI L2(데이터링크 계층))과 하드웨어적인 부분(이더넷 카드, 랜케이블 등등, OSI L1(물리 계층))의 역할을 담당한다.  </p><p>네트워크 인터페이스에서 쓰는 프로토콜은 전화 회선을 사용해서 원격지와 접속하는 PPP(Point-to-Point Protocol),<br>IP 주소로 Physical Address인 Mac Address를 구하는 ARP(Address Resolution Protocol),<br>ARP의 역인 RARP(Reverse Address Resolution Protocol) 등등이 있다.  </p><p>하드웨어 장비에는 엄~청나게 많은데 그나마 우리와 밀접하게 쓰이는 건 아래와 같은 게 있다.  </p><ul><li>이더넷 카드(Ethernet Card)<br>NIC(Network Interface Card)라고도 부르고, 한국에서는 랜카드라고도 많이 부른다.<br><a href="http://www.ieee802.org/3/" rel="external nofollow noopener noreferrer" target="_blank">ethernet</a>은 하나의 스펙이라고 보면 된다.<br>이 이더넷 카드에는 전세계에서 식별가능한 고유한 ID인 MAC Address가 있는데 이것 또한 개인정보로 볼 수도 있어서 함부로 알려줘서도 안 되고,<br>ActiveX와 같은 구리구리한 기술이나 OS단을 직접 컨트롤하지 않는 이상은 IP 주소까지는 캐치해도 MAC Address까지는 알아낼 수 없다.</li><li>랜선<br>모뎀 &lt;-&gt; (공유기 &lt;-&gt;) 이더넷 카드를 연결해주는 역할을 한다.  </li><li>공유기<br>ISP 측에서 제공해주거나 직접 돈을 주고 사기도한다.<br>퍼블릭 IP 하나를 여러명이 공유해서 쓰게끔 해서 인터넷은 하나만 가입했는데 여러대의 장비가 인터넷을 쓸 수 있게 해준다.<br>그래서 IP 공유기, 인터넷 공유기 등등으로 불린다.  </li><li>모뎀<br>ISP 측에서 제공해주는 장비로(혹은 아예 없고 아파트 단지 내 어딘가에 존재하기도 한다.)<br>ISP 측에서 제공해주는 (광)케이블은 빛(아날로그 신호)을 보내주는데 컴퓨터는 빛을 모르고 디지털 신호(0, 1) 밖에 모른다.<br>또한 컴퓨터는 디지털 신호를 보내는데 케이블은 아날로그 신호 밖에 모른다.<br>이렇게 디지털 신호 &lt;-&gt; 아날로그 신호 상호 변환시켜주는 장비를 모뎀이라고 한다.  </li><li>(광)케이블<br>ISP 업체에서 깔아주는 케이블인데 이 케이블에 따라서 100메가 광랜이냐 기가광랜이냐가 구분된다.  </li></ul><p>상위 레이어는 특정 하드웨어에 의존하지 않게 끔 설계가 돼있는데 이 레이어는 하드웨어와 뗄래야 뗄 수 없는 관계이다.</p><h3 id="5-2-MAC-어드레스"><a href="#5-2-MAC-어드레스" class="headerlink" title="5-2. MAC 어드레스"></a>5-2. MAC 어드레스</h3><p>NIC에는 MAC(Media Access Control) 어드레스라고 하는 물리적 주소(IP 주소는 논리적 주소)라고 하는 식별 번호가 부여돼있다.<br>이 번호는 제조사가 제조 단계부터 붙이는 것으로 전 세계의 어떤 NIC와도 식별 가능하도록 설계가 돼있다.<br>16진수 12글자(48비트)로 구성이 돼있고 각 자리가 IPv4는 .으로 구분되는 것에 비해 IPv6처럼(같은 16진수 표기법 사용) :(콜론)으로 구분돼있다.<br>첫 24비트는 제조가 식별 번호이고, 뒤에 24비트는 제조가에서 정의한 식별 번호이다.  </p><p>네트워크 인터페이스 계층에서는 IP 주소가 존재하는 인터넷 계층보다 더 하위 레이어라서 IP 주소의 존재를 모른다.<br>따라서 통신을 할 때 MAC 주소를 사용한다.<br>그리고 유/무선 LAN과 더불어 블루투스의 경우에도 MAC Address를 이용하여 통신이 이루어진다.<br>트랜스포트 계층에서 보내는 데이터를 세그먼트라고 부르듯이 네트워크 인터페이스 계층에서는 프레임이라고 부른다.<br>프레임의 헤더를 까보면 데이터의 시작을 알리는 프리앰블, 송/수신지 맥 주소, 길이/타입이 들어있고,<br>데이터의 뒤에 FCS(Frame check sequence, 오류 방지를 위한 정보)가 붙는다.  </p><p>IP 주소와의 차이점을 보자면 IP 주소는 목적지 주소가 달라지지 않는다.<br>하지만 Mac 주소는 대부분 단거리 통신을 위해 쓰인다.<br>따라서 바로 다음 목적지(최종 목적지가 아닌, 예를 들면 라우터)의 MAC Address만 알고 있으면 된다.<br>이것도 라우터, 링크드 리스트와 마찬가지로 이전 MAC Address가 뭐든, 최종 MAC Address가 뭐든 신경쓰지 않고 바로 다음 MAC Address에만 신경을 쓴다.</p><h3 id="5-3-이더넷"><a href="#5-3-이더넷" class="headerlink" title="5-3. 이더넷"></a>5-3. 이더넷</h3><p>이더넷은 유선 LAN(Local Area Network) 상에서 쓰이는 하나의 스펙이다.<br>LAN이란 말이 붙었듯이 근거리 통신을 위해서만 쓰이는 규격이지 않을까 싶다. (저 태평양 너머 미국 서버와 통신하려면 이더넷 스펙 말고 WAN(Wide Area Network)에 쓰이는 뭔가를 써야하지 않을까…)  </p><p>프레임의 패킷을 까보면 프리앰블(preamble)이라는 게 있다.<br>네트워크 어댑터(이더넷 카드)는 수많은 디지털 신호를 받아들이는데 그럼 어디서부터가 프레임의 시작인지 모르기 마련이다.<br>그래서 일단 먼저 프레임의 시작을 알리는 신호를 줘야하는데 그게 프리앰블이다.<br>프리앰블의 길이는 상당히 길어서 중간에 조금 유실이 되어도 특정 패턴으로 인해 프리앰블이라는 사실을 캐치할 수 있다.  </p><p>이더넷 규격(랜선의 규격)을 보다보면<br>10BASE-T, 100BASE-X, 1000BASE-TX 같은 게 있는데<br>앞에 10 100 1000은 Mbps를 뜻한다.<br>메가 바이트도 아니고 메가 비트이며, 1024를 1GB로 치는 것도 아니고 1000을 1GB로 치기 때문에 이런 상술에 속아나지 않으려면 <a href="/2017/01/23/giga-internet-fact/">인터넷 속도에 대한 진실</a>을 읽어보자.<br>BASE는 신호 변조 방식을 의미하는데<br>BASE는 Baseband 방식을 의미하고 다른 방식으로는 Broadband 방식이 있다.<br>전공에서 다 배웠는데 다 까먹… ㅠㅠ<br>아래 글을 참고해보자.  </p><ul><li><a href="http://tip.daum.net/question/38733404" rel="external nofollow noopener noreferrer" target="_blank">브로드밴드와 베이스밴드 전송의 차이점과 특성이 무엇인지 알려주세요</a>  </li><li><a href="https://blog.naver.com/jvioonpe/220227244403" rel="external nofollow noopener noreferrer" target="_blank">베이스밴드와 브로드밴드</a>   </li></ul><p>마지막 TX는 케이블의 재질을 의미한다.<br>T는 트위스트페어로 뭐 선가닥을 꼬아놔서 간섭이나 그런 거에 좀 더 견고한 형태인 것 같다.<br>선의 종류에는 STP, UTP, FTP 등등과 성능을 카테고리로 분류해둔 CAT가 있는데 아래 글을 참고하자.<br><a href="https://blog.lael.be/post/50" rel="external nofollow noopener noreferrer" target="_blank">랜선의 종류와 구분 (UTP/STP/FTP 차이점)</a>  </p><h3 id="5-4-네트워크-허브"><a href="#5-4-네트워크-허브" class="headerlink" title="5-4. 네트워크 허브"></a>5-4. 네트워크 허브</h3><p>네트워크 허브는 중계 기기라는 거 같다.<br>공유기가 데이터를 네트워크 내의 다른 컴퓨터에 전달하므로 공유기는 네트워크 허브 역할도 담당한다.  </p><p>L2 스위치는 스위칭 허브라고 부르기도 하며 오늘날 가장 많이 사용되는 네트워크 중계 기기(네트워크 허브)라고 한다.<br>L2 스위치는 OSI 7 Layer에서 데이터 링크 계층(2계층)에 속하는 장비이고, 각 포트(공유기 뒤에 보면 유선랜 꽂는 포트가 있다.)에 연결된<br>호스트의 MAC Address를 기억해뒀다가 통신할 때 사용한다.<br>공유기의 랜포트에는 하나의 랜선만 꽂을 수 있기 때문에 MAC Address가 충돌이 일어나지 않기 때문에 통신에 문제가 없다.  </p><p>또한 브로드캐스트 도메인이란 게 존재하는데 수신지의 주소가 브로드캐스트 어드레스일 때 데이터가 전달되는 범위를 의미한다.<br>따라서 L2 스위치(일반적인 가정의 공유기)로 네트워크를 구성했다면 네트워크 전체가 브로드캐스트 도메인이 된다.<br>네트워크에 연결된 호스트가 많다면 수많은 트래픽을 유발하므로 망이 혼잡해질 수 있다.  </p><p>이러한 L2 스위치가 나오기 전에는 리피터 허브란 것을 사용했다.<br>한개의 호스트에서 수신한 데이터를 다른 모든 호스트에게 전달하는 방식이었다.<br>이 경우에는 모든 호스트가 회선을 공유하기 때문에 여러 대의 호스트가 동시에 통신을 하게 되면 네트워크 상에서 충돌이 발생했다.<br>이렇게 충돌이 발생할 수 있는 범위를 Collision Domain(충돌 도메인)이라고 불렀고,<br>이더넷 스펙에서는 충돌이 발생했으면 모든 호스트가 통신을 멈추고 대기하게 끔 기술돼있어서<br>호스트의 갯수가 증가하면 할 수록 통신 속도가 떨어지는 단점이 존재했다.  </p><p>네트워크와 네트워크를 넘어서 중계를 하고 싶다면 L3 스위치(Network Layer) 장비를 사용해야한다.<br>L3 스위치에서는 VLAN(Virtual LAN)을 사용해서 LAN을 몇 개의 가상적인 네트워크로 분할해서 통신의 효율을 높일 수 있게 된다.<br>이렇게 되면 브로드캐스트 도메인이 네트워크 전체 호스트가 아닌 특정 VLAN에 속한 호스트로 한정지을 수 있게 된다.<br>L3 스위치를 사용하면 라우터처럼 라우팅을 하면서 VLAN 사이를 넘나들 수 있으며 규모상 대규모 사무실에 적합하다고 책에 쓰여져있다.<br>VLAN 내에서는 L2 스위치와 같이 MAC Adress로 통신이 이루어진다.  </p><h3 id="5-5-무선-LAN"><a href="#5-5-무선-LAN" class="headerlink" title="5-5. 무선 LAN"></a>5-5. 무선 LAN</h3><p>유선랜이 광랜일 때는 빛을 통해 통신이 이루어졌던 반면에<br>무선랜의 경우에는 전파를 이용해서 통신이 이루어진다.<br>유선랜의 스펙이 이더넷이었다면 무선랜의 스펙은 <a href="http://www.ieee802.org/11/" rel="external nofollow noopener noreferrer" target="_blank">IEEE 802.11</a>이다.<br>유선랜 같은 경우에는 IEEE 802.3으로 이더넷이란 이름까지 붙었는데 무선랜의 경우에는 딱히 이름이 안 붙은 모양이다.  </p><p>스펙은 현재 IEEE 802.11, IEEE 802.11a, IEEE 802.11b, IEEE 802.11g, IEEE 802.11n 등이 나왔다.<br><img src="/images/tcp-ip-book-index-5/router-bgn.png" alt="무선 공유기 라우터로 들어오게 되면 b/g/n과 같은 익숙한 설정 화면이 보인다.">  </p><p>통신을 할 때는 다른 통신 장비가 전파를 발신하고 있는지 확인 후 통신을 시작하는 CSMA/CA(Carrie Sense Multiple Access with Collision Avoidance) 방식을 사용한다.  </p><p>무선랜의 프레임을 보면 프리앰블이 보이고, 맨 끝에 오류 제어를 위한 FCS도 있고, 갖가지 정보가 있는데<br>유선랜의 경우에는 송수신지 맥 주소만 있으면 됐는데 무선랜의 경우에는 맥 주소가 4개나 된다.<br>일단 송/수신지 맥 주소 2개를 제외하고 나머지 하나는 공유기(AP, Access Point)의 MAC Address가 들어간다.  </p><ul><li>무선 -&gt; 무선이면 송신지의 무선 AP의 MAC Address가 들어가고 하나는 공란  </li><li>무선 -&gt; 유선이면 송신지의 무선 AP의 MAC Address가 들어가고 하나는 공란  </li><li>유선 -&gt; 무선이면 무선 AP의 MAC Address가 들어가고 하나는 공란  </li><li>(무선 AP를 통해서 통신) 무선 -&gt; 유선이면 송신지의 무선 AP의 MAC Address가 들어가고, 하나는 수신지의 유선 AP의 MAC Address가 들어간다.</li></ul><h3 id="5-6-ARP"><a href="#5-6-ARP" class="headerlink" title="5-6. ARP"></a>5-6. ARP</h3><p>유무선 통신을 하려면 수신측의 MAC Address를 알아야한다.<br>데이터를 보낼 때는 상위 계층에서 하위 계층으로 내려오므로 IP 주소는 알지만 MAC Address는 모르는 상황이다.<br>이 때 IP 주소를 가지고 MAC Address를 알아내는 ARP(rotocol)를 사용해야한다.<br>브로드캐스팅을 통해 IP 주소를 때리고 해당 IP 주소를 가진 호스트는 자신의 MAC 어드레스를 응답하게 된다.  </p><p>ARP 헤더를 보면 앞에 이더넷 헤더가 붙어있는데<br>이더넷 헤더에 있는 수신지 MAC Address는 브로드캐스트 어드레스의 MAC Address를 의미하고,<br>ARP 헤더에 목적지 MAC Address는 아직 어디로 가야할지 모르는 MAC Address를 의미한다.<br>따라서 목적지의 IP Address를 브로드캐스트 어드레스의 MAC Address로 보내서 목적지의 MAC Address를 응답받는 행위가<br>ARP 프로토콜을 통해 일어난다.</p><p>또한 대부분 ARP는 같은 네트워크 내에서 이뤄지기 마련인데 네트워크를 쪼갠 같은 서브넷 사이에서는 문제가 없는데<br>가끔 서브넷 마스크가 다른 외부의 서브넷(크게 보면 같은 네트워크 클래스에 속하지만 서브넷 마스크로 쪼갰으므로 별도의 네트워크라고 봐야한다.)에 대해서 ARP 통신이 일어날 때도 있다.<br>이럴 때는 프록시 ARP를 둬서 호스트 대신에 라우터가 ARP에 대한 응답을 하게 끔 한다.<br>브로드캐스팅 때려도 같은 네트워크가 아니니 라우터가 받아서 해당 네트워크에 브로드캐스팅을 날리고 그거에 맞는 응답을 받아서 다시 라우터가 송신측에 응답을 주게 된다.</p><h3 id="5-7-FTTx와-xDSL"><a href="#5-7-FTTx와-xDSL" class="headerlink" title="5-7. FTTx와 xDSL"></a>5-7. FTTx와 xDSL</h3><p>ISP 업체가 쓰는 광랜이니 하는 것은 대부분 광섬유 케이블에 레이저 빛을 쏘아 통신하는 광섬유 회선이다.<br>광 회선이 어디까지 들어오느냐에 따라 달라지는데 FTTH(Fiber to th Home) 등등 FTTx로 불린다.  </p><p>또한 ISP에서 집까지 인터넷이 들어오는 것은 점유형과 공유형이 있는데<br>점유형은 ISP에서 집까지 하나의 케이블로 연결되고, 공유형은 중간에 광 신호를 분기해서 여러개의 케이블이 공유하는 형태이다.<br>아마 성능 등등을 생각하면 점유형이 좋겠지만, 비용 등등의 이유로 인해, 혹은 그만한 성능을 낼 필요가 없기 때문에 대부분은 공유형을 쓸 것이다.  </p><p>그리고 ADSL(Asymmetric Digital Subscriber Line)이나 VDSL(Very high bitrate Digital Subscribe Line)은 금속 케이블을 사용하는 통신 회선이다.<br>통신 방식이나 속도, 거리 등등 몇 가지 규격에 따라 구분이 되는데 이를 통틀어 xDSL이라고 부른다.  </p><p>전화 회선을 사용하는 ADSL은 전화에서 사용하지 않는 높은 주파수로 디지털 신호를 전송하고, 다운로드 속도가 업로드 속도보다 훨씬 빠른편이다.<br>옥외 배선에서 사용되는 VDSL은 아파트나 호텔 같은 공동 주택에서 ISP에서 FTTx로 연결을 한 후 중앙에서 분기틀 태워서 각 방까지 분배하는 형식을 취하고 있다.  </p><h3 id="5-8-PPP와-PPPoE"><a href="#5-8-PPP와-PPPoE" class="headerlink" title="5-8. PPP와 PPPoE"></a>5-8. PPP와 PPPoE</h3><p>PPP(Point to Point Protocol)은 원격지에 있는 컴퓨터를 일대일로 연결하기 위한 프로토콜이다.<br>이 프로토콜은 다양한 통신 하드웨어를 지원하도록 설계돼있어 전화 회선을 사용하는 다이얼 업 PPP나<br>이더넷을 사용하는 PPPoE(Point to Point over Ethernet)와 같은 형태가 있다.  </p><p><img src="/images/tcp-ip-book-index-5/router-pppoe.png" alt="라우터에 들어가보면 인터넷 접속 방식을 PPPoE로 바꿀 수 있는데 바꾸면 인터넷이 안 될 것 같다.">  </p><h3 id="5-9-ARP-명령으로-MAC-어드레스-알아내기"><a href="#5-9-ARP-명령으로-MAC-어드레스-알아내기" class="headerlink" title="5-9. ARP 명령으로 MAC 어드레스 알아내기"></a>5-9. ARP 명령으로 MAC 어드레스 알아내기</h3><p>DNS와 마찬가지로 MAC Address도 캐시에 저장을 하게 된다.<br>똑같은 IP에 대해서 MAC Address를 계속 구하는 것도 짜치는 일이기 때문이다.<br>따라서 이렇게 ARP 프로토콜로 얻어낸 MAC Address의 캐시를 확인하는 명령어가 arp 명령어다.<br><code>arp -a</code> 명령어를 쳐서 캐시에 저장된 IP Address/MAC Address를 확인할 수 있고<br><code>-s</code> 옵션을 줘서 수동으로 IP Address/MAC Address가 매핑된 정보를 저장할 수도 있다.<br>하지만 이렇게 수동으로 정보를 저장하는 건 매우 위험할 수도 있으므로 추천하지 않는다.<br>또한 LAN 내에서는 ARP가 매우 자주 일어나는데 와이어샤크 같은 패킷 캡쳐 도구를 이용해서 확인해보는 것도 좋은 방법이다.  </p><h3 id="5-10-모바일-통신-기술"><a href="#5-10-모바일-통신-기술" class="headerlink" title="5-10. 모바일 통신 기술"></a>5-10. 모바일 통신 기술</h3><p>모바일 통신 기술 중에 LTE로 연결하는 거하고, 와이파이로 연결하는 거하고 통신 거리가 엄청난 차이가 난다.<br>와이파이는 꽁짜(아닌 경우도 있을테지만)인 대신에 AP(Access Point, 공유기)와 멀어지면 멀어질 수록 느려지고 끊기기도 한다.<br>하지만 LTE의 경우에는 기지국과 수 십 km 떨어져있는데도 통신이 잘 된다.<br>이는 사용하는 주파수 대역과 데이터 변조 방식에 차이가 있기 때문이라고 한다.</p><p>또한 3G와 4G는 통신 속도 뿐만 아니라 데이터 통신 방식 자체가 달라졌다.<br>3G의 경우에는 패킷 교환 방식(회선 점유 X), 회선 교환 방식(회선 점유 O)의 통화를 동시에 사용할 수 있었는데<br>4G(LTE)의 경우에는 패킷 교환 방식의 데이터 통신(VoIP 프로토콜이 패킷 교환 방식, UDP 프로토콜 사용)만 지원한다.<br>4G로 오면서 음성 위주의 전화 통화보다 데이터 위주의 통신(영상 통화도 있고)을 하다보니<br>안정성 보다는 실시간 성에 좀 더 초점을 맞춘 거라고 볼 수 있다.  </p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(네트워크) TCP/IP 쉽게, 더 쉽게 목차 리뷰 - 4장 라우팅과 인터넷 계층</title>
      <link href="/2018/04/01/tcp-ip-book-index-4/"/>
      <url>/2018/04/01/tcp-ip-book-index-4/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/tcp-ip-book-index-4/thumb.png" alt=""><br>오래전에 이 책을 추천받았으나 최근에 읽어보게 되었다.<br>백엔드 개발자로 일하면서 프론트 엔드 개발자와 의사소통을 원활히 하기 위해서는 서로 네트워크에 대한 기본 지식이 있어야하는 것 같다.<br>이 글은 빠르게 목차를 리뷰하며 백엔드에게 필요한 내용인지, 프론트에게 필요한 내용인지, 공통적으로 알아야하는 내용인지 개인적인 기준에서 분류해봤다.  </p><a id="more"></a><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>내가 여태까지 봐왔던 네트워크 계층 설명글들은 대부분 <a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95" rel="external nofollow noopener noreferrer" target="_blank">OSI 7 Layer</a>를 기준으로 설명을 풀어나가고 있다.<br>OSI 7 Layer는 각 계층이 하는 역할이 명확해서 설명하기가 명쾌하다.<br>하지만 이론과 현실 사이의 괴리감이랄까… OSI 7 Layer는 구현하기가 복잡하거나, 성능 등등의 이슈(굳이 여러 계층으로 쪼갤 필요 없이 하나의 장비가 여러 역할을 수행하는 게 더 나을 때도 있으므로)로 인해<br>실제 구현된 건 대부분 4계층으로 구성된 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%84%B7_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C_%EC%8A%A4%EC%9C%84%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">TCP/IP Stack</a>으로 구현이 많이 돼있다.<br>이 책은 신기하게도 TCP/IP Stack에 기반해서 각 계층의 역할을 설명하고 있다.<br>따라서 진짜 구현된 모델에 대한 이해를 증진시키는 데는 좋은 것 같으나 당장 <a href="https://aws.amazon.com/" rel="external nofollow noopener noreferrer" target="_blank">AWS</a>나 다른 글들을 보면 L4니 L2니 L7이니 해서 OSI 7 Layer로 설명된 글들이 많아서<br>OSI 7 Layer와 책에 설명된 TCP/IP Stack을 매핑시켜 이해하기 위해 책 앞 부분을 많이 왔다갔다 해야하는 단점이 존재하는 것 같다.  </p><p>또한 책이 TCP/IP Stack에 대한 전반적인 내용을 200페이지도 안 되는 분량으로 녹여내다보니 전반적인 흐름을 알기는 좋으나<br>각각의 계층에 대해 딥하게는 다루지 않고, 그림도 아기자기 잘 설명돼있어서(+풀컬러) 입문 서적으로 좋은 것 같다.<br>여기서부터는 프론트는 딱히 몰라도 된다고 생각하는 내용이므로 목차 뒤에 F/B를 구분해서 달지 않겠다.  </p><p>예를 들면 프론트는 클라이언트 측에 웹서비스를 제공해주는 일을 하는데 그 중에서 서버가 제공해주는 API로 통신을 해서 데이터를 땡겨와야 한다.<br>웹서비스를 제공하기 위해서는 HTTP(S) 프로토콜을 사용하고, 서버의 API와 통신할 때도 HTTP(S)로 통신을 한다.<br>HTTP 프로토콜은 정보 공유를 위해 만들어진 프로토콜이므로 엄청난 수의 클라이언트가 접속하게 된다.<br>통신을 위한 통로에 수십만명이 한 번에 들어오게 끔 하면 가능한지도 모르겠고, 매번 그 만큼의 사람이 들어오는 것도 아니고, 비용 낭비도 엄청날 것이다.<br>따라서 통신을 위한 통로를 독점하는 게 아니라 항상 연결을 맺고 끊어서 다른 사람들이 원활하게 접속을 하게 해준다.<br>예를 들면 이 통로를 통해서는 동시에 100명만 들어올 수 있게 만들고 나한테 볼 일이 끝난 애들은 다 연결을 끊는 것이다.(사실 이런 설정은 백엔드가 한다.)<br>이 때 연결을 위해 사용하는 프로토콜이 TCP 프로토콜이다. (UDP 프로토콜도 있지만 웹 서비스 내에서는 대부분 데이터를 손실없이 전달해주는 TCP 프로토콜을 사용한다.)<br>따라서 프론트 엔드 개발자라면 HTTP 프로토콜은 물론이고 TCP 프로토콜까지 알아야 어떻게 하면 통신을 최적화 할 수 있을지 생각할 수 있게 된다.</p><p>백엔드의 경우에는 HTTP(S), TCP 프로토콜만 안다고 해서 끝나는 게 아니다.<br>SSH 프로토콜을 이용해서 서버에 원격으로 붙어서 명령어를 날리기도 하고, FTP 프로토콜을 이용해서 파일 업로드/다운로드가 가능한 서버를 설계해야할 수도 있기 때문이다.<br>SSH 프로토콜을 사용하려면 여러 인증 방식 중에 키로 인증하는 방식이 있는데 그럼 공개키, 비공개키, 대칭키, 비대칭키 막 이런 내용이 나오는데 이런 보안적인 요소도 알아야한다.<br>이 내용은 HTTPS에 사용되는 TLS 인증서의 암호화 방식에도 적용된다.<br>또한 동영상 스트리밍 서버를 만든다고 하면 UDP 프로토콜을 사용한다.<br>기본적으로 TCP 프로토콜은 해주는 일이 많으므로(데이터 전송에 실패하면 재전송 처리 등등) 성능이 안 받쳐주는데<br>UDP 프로토콜(보내기만 할 뿐, 잘 받았는지 확인을 하지 않는다. 그래서 가끔 동영상이 깨져서 나오는 현상들이 나온다.<br>하지만 크리티컬한 이슈는 아니고 매번 똑같은 부분에서 동영상이 깨져나오는 게 아니고 네트워크 상황에 따라 달라지기 때문이다.)은 그거보다 성능이 낫기 때문이다.<br>또한 AWS를 사용하다보면 그 아랫단인 IP/Router/Subnet Mask 등등의 영역도 잘 알아야한다.<br>보안을 위해 외부에서 접근이 가능한 요소(다양한 요청을 분산해주는 로드 밸런서)와 내부에서만 접근이 가능한 요소(웹서버, DB 등등)을 구성해야하는데…<br>그러면 네트워크를 어떻게 구성해야할 것이며, 이 네트워크 안에 서버는 몇 대를 둘 것이며, 퍼블릭 요소들과 프라이빗 요소들은 어떻게 통신을 할 것이며<br>어떤 요청들을 받고 말지 네트워크부터 보안에 대한 요소들을 직접 다뤄야하는 경우가 오는데 이럴 때 이 내용들을 알고 있으면 정말 무릎을 탁 치게 되는 날이 온다.  </p><p>더 아랫단이나 부가적인 요소들은 알면 +@, 몰라도 그만인 것 같은데 호기심이 충만하면 알고 싶을 것이다.<br>위에서 설명하지 않은 모뎀, 이더넷 카드, 랜선 등등은 사실 하드웨어 단으로 내려가는 거니 백엔드가 굳이 알 필요가 있나 싶다.(물론 알면 좋다.)<br>또한 데이터 전송에 실패했을 때 어떤 전략으로 재전송시킬 것인지(어플리케이션 단이 아닌 하드웨어 단에서 패킷을 처음부터 전송할 건지, 실패한 부분을 알아내서 그거부터 전송할 것인지)<br>이런 내용들은 내가 봤을 때는 굳이 알 필요가 있나 싶은데 분명 알아두면 어딘가는 써먹을 일이 있을테니 공부해둬야할 것 같긴 하다.</p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="/2018/03/30/tcp-ip-book-index/#1장-컴퓨터-네트워크">컴퓨터 네트워크</a></li><li><a href="/2018/03/31/tcp-ip-book-index-2/#2장-네트워크-서비스와-애플리케이션-계층">네트워크 서비스와 애플리케이션 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-3/#3장-트랜스포트-계층">트랜스포트 계층</a></li><li><a href="/#4장-라우팅과-인터넷-계층">라우팅과 인터넷 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-5/#5장-하드웨어와-네트워크-인터페이스-계층">하드웨어와 네트워크 인터페이스 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-6/#6장-보안">보안</a></li></ol><h2 id="4장-라우팅과-인터넷-계층"><a href="#4장-라우팅과-인터넷-계층" class="headerlink" title="4장, 라우팅과 인터넷 계층"></a>4장, 라우팅과 인터넷 계층</h2><p>OSI 7 Layer 기준 L3(Network Layer)이다.<br>IP 주소를 가지고 송신지로부터 수신지로 데이터를 전달하는 역할을 수행한다.<br>유선 전화번호가 지역 번호를 내장하고 있는 것과는 달리 IP 주소는 지역 정보로 구분되는 게 아니라 네트워크 단위로 할당이 된다.<br>따라서 IP들을 보면 같은 네트워크에 속해있는지, 소규모 네트워크인지 대규모 네트워크인지 정도만 알 수 있다.  </p><p>그리고 각 네트워크들은 라우터라는 장비를 통해 연결이 되므로 라우팅 테이블이 복잡하게 연결돼있으면 지리상으로 가까운데도 불구하고<br>데이터 전송을 하는데 오래 걸리는 경우도 존재한다.<br>반대로 지리상으로 먼데 라우팅 테이블이 잘 설계돼있으면 금방 데이터가 도착할 수도 있다.</p><h3 id="4-1-인터넷-계층의-역할"><a href="#4-1-인터넷-계층의-역할" class="headerlink" title="4-1. 인터넷 계층의 역할"></a>4-1. 인터넷 계층의 역할</h3><p>IP 주소로 데이터를 전달하는 역할을 한다.<br>바로 다이렉트로 목적지 IP 어드레스를 찌르는 게 아니라 라우터(Router)라는 장비들을 통해서 전송이 이루어진다.<br>클라이언트는 인접한 라우터를 찾고 그 라우터는 또 인접한 라우터들을 찾아서 데이터를 보내려는 목적지와 인접한 라우터까지 이 과정이 반복되고<br>최종 라우터에서 목적지로 데이터를 보낸다.<br>이렇게 라우터를 통해 목적지의 경로를 찾아가는 작업을 라우팅(Routing)이라고 부른다.  </p><p>간단하게 가정집을 시나리오로 생각해보자.  </p><ol><li>내가 웹 브라우저를 통해 네이버로 접속하려고 한다.  </li><li>내 컴퓨터가 공유기(라우터의 역할을 수행한다)로 데이터를 쏜다.  </li><li>공유기는 모뎀(얘가 라우터의 역할도 한다)로 데이터를 쏜다.</li><li>공유기는 다른 라우터들을 통해서 ISP(올레나 SK 브로드 밴드 등등의 인터넷 서비스 제공자) 라우터로 토스를 한다.  </li><li>그 라우터가 다른 수많은 라우터를 거쳐 네이버 서버와 연결된 라우터까지 간다.  </li><li>해당 라우터가 네이버에게 요청을 보낸다.</li></ol><p>요즘 들어 핸드폰이며 TV며 냉장고며 IoT가 나오기도 하고 온갖 사물들이 인터넷과 통신을 하면서 IP 주소를 막 할당받기 시작했다.<br>그러면서 진작부터 IP 주소가 고갈되기 시작했다.<br>그래서 등장한 것이 Private IP(사설 IP)이다.<br>공유기를 쓰면 내 컴퓨터와 다른 사람의 컴퓨터가 다른 IP를 사용하는 것 같은데<br>이건 내부적으로 사용하는 private IP나 다른 것이지 외부로 달고 나가는(외부에서 접속 가능한) Public IP(공용 IP)는 하나만 존재한다.<br>그리고 외부에서는 하나의 IP만 할당한 것으로 보이기 때문에 이런 방식으로 IP 주소 부족의 문제를 해결하고 있다.<br>이런 방식과는 별개로 IPv4 주소가 32비트(2^32, 약 42억)여서 42억 개의 IP만 할당이 가능한 데 비해<br>IPv6의 경우에는 128비트(2^128, 3.4028237e+38)로 단위로 표현할 수도 없는 갯수의 IP 할당이 가능하다.<br>하지만 여러 기술의 도입으로 인해 아직 IPv6를 사용하지 않아도 되는 수준인지 IPv6는 딱히 써본 적이 없다.<br>IPv4는 IP 프로토콜을 사용하는데 반해 IPv6는 IPSec이라는 프로토콜을 지원해서 패킷 자체를 암호화하고 있다.<br>그리고 IPv4는 사람한테 익숙한 10진수를 쓰긴 했는데 마지막 자리가 255라는 애매한 숫자로 떨어지는데<br>IPv6는 16진수를 사용해서 마지막 자리가 FF로 떨어져서 그나마 가독성이 조금 올라간 것 같다.</p><h3 id="4-2-IPv4와-IPv6"><a href="#4-2-IPv4와-IPv6" class="headerlink" title="4-2. IPv4와 IPv6"></a>4-2. IPv4와 IPv6</h3><h4 id="4-2-1-IPv4는-32비트-어드레스"><a href="#4-2-1-IPv4는-32비트-어드레스" class="headerlink" title="4-2-1. IPv4는 32비트 어드레스"></a>4-2-1. IPv4는 32비트 어드레스</h4><p>IP 주소는 인터넷 계층(혹은 L3) 장비에만 할당되기 때문에 이더넷 카드나 모뎀 등등에는 할당되지 않는다.  </p><h4 id="4-2-2-IPv4-헤더"><a href="#4-2-2-IPv4-헤더" class="headerlink" title="4-2-2. IPv4 헤더"></a>4-2-2. IPv4 헤더</h4><p>IPv4 패킷의 헤더에는 송수신지 IP 어드레스나 생존기간, 프로토콜, 체크섬, 버전, 우선순위, 패킷 전체의 길이 등등을 담고 있다.</p><h4 id="4-2-3-IP-패킷에도-유통기한이-있다"><a href="#4-2-3-IP-패킷에도-유통기한이-있다" class="headerlink" title="4-2-3. IP 패킷에도 유통기한이 있다."></a>4-2-3. IP 패킷에도 유통기한이 있다.</h4><p>HTTP 1.1 스펙에서 Keep-Alive를 통해 TCP 커넥션의 유효기간을 설정하듯이<br>IP 패킷에도 생존기간을 설정할 수 있다.<br>IP 패킷의 TTL(Time to Live)를 7홉(Hop)으로 설정하면 라우터를 하나 탈 때마다 TTL이 하나씩 깎인다.<br>7홉 내에서 목적지까지 도착하지 못하면 해당 패킷은 소멸된다.<br>패킷을 라우터를 찾기 위해 무한정 뺑뺑이 돌리면 효율이 떨어지므로 TTL이 있는 것 같다.</p><h4 id="4-2-4-좁은-길을-지날-때는-작게-분할해서-지나간다"><a href="#4-2-4-좁은-길을-지날-때는-작게-분할해서-지나간다" class="headerlink" title="4-2-4. 좁은 길을 지날 때는 작게 분할해서 지나간다."></a>4-2-4. 좁은 길을 지날 때는 작게 분할해서 지나간다.</h4><p>한 번에 전송할 수 있는 데이터 크기를 MTU(Maximum Transmission Unit)라고 하고<br>통신 경로의 상태(라우터의 상태)에 따라 달라진다.<br>패킷을 보낼 때 다음 라우터의 MTU보다 작으면 해당 MTU 만큼 패킷을 쪼개서 보낸다.<br>하지만 패킷이 중간에 유실되면 복구하기 어려우므로 처음부터 전체 경로에 대해서 MTU를 구하고 해당 MTU만큼 보내는 게 제일 안전하다.</p><h4 id="4-2-5-데이터를-분할하고-복원하는-방법"><a href="#4-2-5-데이터를-분할하고-복원하는-방법" class="headerlink" title="4-2-5. 데이터를 분할하고 복원하는 방법"></a>4-2-5. 데이터를 분할하고 복원하는 방법</h4><p>패킷 헤더를 보면 아래와 같은 필드로 데이터를 분할하고 복원한다.</p><ul><li>식별자: 같은 데이터인지 식별하기 위한 16비트 숫자 값</li><li>분할 플래그: 분할 허가 플래그와 이후에 남은 분할이 있는지 표시하기 위한 플래그</li><li>프래그먼트 옵션: 원래 데이터에서의 위치 값을 표현하는 13비트 숫자</li></ul><p>위 헤더 필드를 통해 데이터를 분할하고 복원하게 된다.</p><h4 id="4-2-6-IPv6"><a href="#4-2-6-IPv6" class="headerlink" title="4-2-6. IPv6"></a>4-2-6. IPv6</h4><p>IPv4 주소(32비트)의 고갈로 인해 등장(128비트)했는데 private IP 등등의 기술로 인해 IPv4에 산소호흡기를 달아놓은 상태이다.<br>헤더를 보면 버전, 패킷의 우선순위를 결정하는 트래픽 클래스, 데이터 부분의 길이를 담당하는 페이로드의 길이, TTL을 나타내는 홉 리미트, 송수신지 IP 어드레스 등등이 있다.  </p><h4 id="4-2-7-IPv6로-갈아타기"><a href="#4-2-7-IPv6로-갈아타기" class="headerlink" title="4-2-7. IPv6로 갈아타기"></a>4-2-7. IPv6로 갈아타기</h4><p>소프트웨어를 새로운 버전으로 마이그레이션 하거나 다른 소프트웨어로 마이그레이션 하는 것은 상당한 일이다.<br>IPv4와 IPv6의 패킷은 서로 호환이 되지 않기 때문에 송신지는 IPv6를 쓰는데 수신지는 IPv4를 쓰는 난감한 상황이 존재하기 마련이다.<br>이런 점을 방지하고자 하나의 장비에서 IPv4, IPv6 두 어드레스를 지원하는 듀얼스택(Dual Stack)이란 기술도 있고,<br>터널링(tunneling)이라는 기술을 통해 IPv6가 오면 IPv4로, IPv4가 오면 IPv6로 변환해주는 기술들이 존재한다.</p><h3 id="4-3-IP-어드레스의-활용"><a href="#4-3-IP-어드레스의-활용" class="headerlink" title="4-3. IP 어드레스의 활용"></a>4-3. IP 어드레스의 활용</h3><h4 id="4-3-1-네트워크-부와-호스트-부"><a href="#4-3-1-네트워크-부와-호스트-부" class="headerlink" title="4-3-1. 네트워크 부와 호스트 부"></a>4-3-1. 네트워크 부와 호스트 부</h4><p>IP 어드레스는 네트워크 부분과 호스트 부분으로 구성된다.<br>호스트는 네트워크에 구성된 장비(PC, 스마트폰 등등)을 의미한다.<br>라우터는 송신지 IP 어드레스의 네트워크 부분을 보고 자신과 같은 네트워크에 있는지 외부의 네트워크에 있는지 판단한다.  </p><p>네트워크 부분과 호스트 부분을 나눈 이유는 모든 호스트들을 하나의 네트워크로 묶어두면 관리하기 어렵다는 측면에서 나오게 되었다. </p><h4 id="4-3-2-어드레스-클래스"><a href="#4-3-2-어드레스-클래스" class="headerlink" title="4-3-2. 어드레스 클래스"></a>4-3-2. 어드레스 클래스</h4><p>하나의 IP 어드레스를 봤을 때 어디까지가 네트워크 부분이고 어디까지가 호스트 부분인지 알 수가 없다.<br>A, B, C, D 클래스에 따라서 네트워크 부분과 호스트 부분의 경계를 알 수 있는데<br>해당 IP를 보고 어떤 클래스에 속했는지는 32비트 중에 앞에 2비트만 보면 알 수 있다.<br>앞에 1비트가 0이면 A 클래스, 앞에 2비트가 10이면 B 클래스, 앞에 3비트가 110이면 C클래스가 된다.  </p><p>예를 들면 116.322.45.26을 32비트로 바꾸면 아래와 같다.<br>01110100 101000010 00101101 00011010<br>앞에 1비트가 0이므로 A 클래스에 속하는 IP 주소가 된다.</p><p>A 클래스의 IP 범위는 0.0.0.0 ~ 127.255.255.255가 되고,<br>B 클래스의 범위는 128.0.0.0 ~ 191.255.255.255가 되고,<br>C 클래스의 범위는 192.0.0.0 ~ 223.255.255.255가 되고,<br>D 클래스는 멀티 캐스트를 위해 사용되는데 224.0.0.0 ~ 239.255.255.255까지 사용되고, 특이하게 네트워크 부분으로 32비트 전체를 다 사용하고,<br>E 클래스는 240.0.0.0 ~ 255.255.255.255로 미래를 위해 만들어뒀다고 한다.  </p><p>A 클래스는 8비트까지가 네트워크 부분인데 앞에 1비트인 0은 고정이므로 실제는 7비트만 사용 가능하고 따라서 128개의 네트워크를 만들 수 있을 거 같은데 책에는 126개라고 나와있다.<br>또한 호스트는 24비트를 사용가능해서 약 1677만개의 호스트가 하나의 네트워크로 묶일 수 있다.<br>매우 대규모의 호스트를 수용할 수 있으므로 특수한 정부 기관 등등에서 쓰이지 않을까 싶다.  </p><p>B 클래스는 16비트까지가 네트워크 부분인데 앞에 2비트인 10은 고정이므로 실제는 14비트만 사용해서 약 만 6천 개의 네트워크를 구성할 수 있다.<br>그리고 호스트 부분은 16비트를 사용할 수 있어서 약 6만 5천대의 장비를 연결할 수 있다.<br>아마 대기업/중견기업 정도에서 쓰지 않을까 싶다.  </p><p>C 클래스는 24비트까지가 네트워크 부분인데 앞에 3비트인 110은 고정이므로 실제는 21비트만 사용해서 약 209만 개의 네트워크를 만들 수 있다.<br>그리고 호스트 부분은 8비트만 사용해서 약 254개의 장비를 연결할 수 있다.<br>일반 가정집이나 중소 기업에 어울리는 네트워크 클래스인 것 같다.<br>8비트라 256개라고 생각할 수 있지만 호스트의 마지막 부분인 255는 브로드캐스팅을 위한 IP로 사용된다.<br>모든 호스트가 브로드캐스팅 IP를 리스닝 하고 있다고 생각하면 된다.<br>그리고 호스트의 첫 번째 부분인 0은 네트워크 주소로써 해당 호스트에 속한 모든 IP를 관리하기 위한 IP이다.<br>따라서 8비트(0~255) 중에 0과 255는 특수한 목적으로 쓰이기 때문에 호스트는 총 254개만 사용 가능한 것이다.</p><p><img src="/images/tcp-ip-book-index-4/vpc.png" alt="AWS의 서비스 중 하나인 VPC"><br>VPC는 가상의 네트워크라고 보면 된다.<br>IP 주소 범위를 보면 10.2.0.0으로 0.0.0.0 ~ 127.255.255.255에 속하니까 A 클래스 IP 주소이다.  </p><h4 id="4-3-3-어드레스-클래스의-제약"><a href="#4-3-3-어드레스-클래스의-제약" class="headerlink" title="4-3-3. 어드레스 클래스의 제약"></a>4-3-3. 어드레스 클래스의 제약</h4><p>클래스 A 같은 경우에 1677만대가 연결된 완전 초대규모 네트워크라고 볼 수 있다.<br>하지만 실제로 하나의 네트워크에서 1677만대의 호스트를 전부 연결하는 곳은 거의 없기 때문에<br>많은 IP 어드레스가 사용되지 않고 낭비된다는 단점이 존재한다.<br>당장 내가 위에 만든 VPC만 봐도 A 클래스인데 과연 1677만대의 호스트를 등록할 일이 있을까?<br>또한 126개의 네트워크보다 더 많은 네트워크를 구성하고 싶을 수도 있을 때는 어떻게 해야할까?</p><h4 id="4-3-4-서브넷-마스크-Subnet-Mask"><a href="#4-3-4-서브넷-마스크-Subnet-Mask" class="headerlink" title="4-3-4. 서브넷 마스크(Subnet Mask)"></a>4-3-4. 서브넷 마스크(Subnet Mask)</h4><p>A클래스의 IP이지만 최대 2만대의 호스트만 수용할 예정이라면 15비트(약 3만대의 호스트 수용 가능)만 호스트 부분으로 사용하고,<br>32비트에서 15비트를 뺀 17비트를 네트워크 부분으로 사용하면 어드레스의 낭비를 훨씬 줄일 수 있다.<br>A 클래스의 IP이지만 A 클래스보다 훨씬 적은 호스트를 수용할 예정이고, A 클래스 보다 많은 개의 네트워크를 구성해야한다면 서브넷 마스크를 사용하면 된다.</p><p>위의 경우에는 앞에 IP 주소 17비트만 맞으면 동일한 네트워크라고 인식을 시켜야한다.<br>주어진 IP 주소와 서브넷 마스크를 논리 비트 연산자인 &amp;로 AND 연산을 수행했을 때 참이 나오게 해야한다.<br>따라서 17비트에 대한 서브넷 마스크는<br>11111111 11111111 10000000 00000000<br>앞에 17비트를 1로 설정하면 되고, 10진수로 표현하면 255.255.128.0이 된다.<br>그리고 CIDR 블록이란 걸 적용시켜서 표현해보자면 10.2.0.0/17이 된다.<br>위 스크린샷에서는 10.2.0.0/16이므로 사실상 A 클래스의 IP 주소를 B 클래스의 IP 주소와 같이 분할을 시킨 것이다.  </p><p>위 공식을 적용시켜 보자면 A 클래스는 네트워크 부분이 8비트이므로 기본 서브넷마스크는 255.0.0.0이 되고 CIDR 블록으로 0.0.0.0/8 과 같은 형태로 표시된다.<br>B 클래스는 네트워크 부분이 16비트이므로 기본 서브넷 마스크는 255.255.0.0이 되고 CIDR 블록으로 적용시켜 보면 128.0.0.0/16과 같은 형태가 된다.<br>C 클래스는 네트워크 부분이 24비트이므로 기본 서브넷 마스크는 255.255.255.0이 되고 CIDR 블록으로 적용시켜 보면 192.0.0.0/24와 같은 형태가 된다.  </p><p><img src="/images/tcp-ip-book-index-4/subnet-mask-windows.gif" alt="윈도우의 CMD에서 ipconfig를 쳐보면 익숙한 서브넷 마스크가 보인다."><br><img src="/images/tcp-ip-book-index-4/subnet-mask-mac.png" alt="맥에서는 환경설정 - 네트워크 - 본인이 연결한 이더넷 - Advanced를 누르고 TCP/IP 탭으로 오면 서브넷 마스크를 볼 수 있다.">  </p><p>기본적으로 가정집에서는 C 클래스의 IP를 사용하고 서브넷 마스크를 기본적으로 설정하지 않으면 디폴트 서브넷 마스크인 255.255.255.0이 적용된다.  </p><h4 id="4-3-5-IP-어드레스의-할당-방법"><a href="#4-3-5-IP-어드레스의-할당-방법" class="headerlink" title="4-3-5. IP 어드레스의 할당 방법"></a>4-3-5. IP 어드레스의 할당 방법</h4><p>IP 어드레스는 네트워크 상에서 호스트(컴퓨터, 라우터, 스마트폰 등등)을 식별하기 위해 사용되는데,<br>전체 32비트 중 네트워크 부를 제외한 호스트 부분만 자유롭게 할당할 수 있다.  </p><p>이 때 호스트 부분이 모두 0인 건 네트워크 주소로 사용되고, 모두 1인 건 브로드캐스트 주소로 사용된다.  </p><h4 id="4-3-6-서브넷-마스크로-네트워크-세분화하기"><a href="#4-3-6-서브넷-마스크로-네트워크-세분화하기" class="headerlink" title="4-3-6. 서브넷 마스크로 네트워크 세분화하기"></a>4-3-6. 서브넷 마스크로 네트워크 세분화하기</h4><p><img src="/images/tcp-ip-book-index-4/vpc.png" alt="AWS의 서비스 중 하나인 VPC"><br>다시 한번 AWS의 VPC를 보자.<br>원래는 A클래스인 걸 네트워크 부분을 16비트로 바꿔서 B클래스로 바꿨으니 이것도 네트워크를 세분화 했다고 할 수 있다.<br>이런 걸 서브넷(Sub Network)라고 부른다.<br>하지만 여기서 끝이 아니다, B클래스를 다시 C클래스나 다른 서브넷 마스크를 사용해서 서브넷 안에 서브넷을 또 만들 수 있다.  </p><p><img src="/images/tcp-ip-book-index-4/subnet.png" alt="AWS에서는 VPC를 다시 서브넷으로 나눌 수 있다."><br>기존에 10.0.2.0/16이었던 네트워크를 다시 CIDR Block을 10.2.0.0/24로 나누었다.<br>서브넷 마스크는 255.255.255.0이 됐고, 네트워크 부분이 24비트이므로 C클래스 IP 주소로 네트워크를 쪼갰다.</p><p>이렇게 서브넷 마스크를 통해 서브넷을 만드는 행위를 서브넷팅(Subnetting)이라고 부른다.  </p><p>하지만 이렇게 클래스가 큰 규모에서 더 많은 네트워크를 사용하기 위해, 적은 규모의 호스트를 수용하기 위해 서브넷팅하는 건 매우 효율적이다.<br>하지만 C 클래스의 IP 주소는 애초에 254개의 호스트만 수용 가능하고, 호스트 부분을 1비트씩 줄일 수만 있고 늘릴 수는 없으므로<br>그의 절반인 126개, 62개, 30개, 14개, 6개, 2개, 0개 이렇게 줄어들다보니<br>애초부터 수용가능한 호스트의 갯수가 적은 환경에서는 서브넷팅이 크게 효율적이진 않다.  </p><h4 id="4-3-7-가정이나-사무실에서-자유롭게-사용하는-프라이빗-IP-어드레스"><a href="#4-3-7-가정이나-사무실에서-자유롭게-사용하는-프라이빗-IP-어드레스" class="headerlink" title="4-3-7. 가정이나 사무실에서 자유롭게 사용하는 프라이빗 IP 어드레스"></a>4-3-7. 가정이나 사무실에서 자유롭게 사용하는 프라이빗 IP 어드레스</h4><p>프라이빗 어드레스는 같은 네트워크 내에서 충돌만 일어나지 않으면 자유롭게 사용할 수 있는 IP 주소다.<br>옆집 철수의 private ip가 192.168.1.7이고, 나도 private ip가 192.168.1.7인데 통신이 잘 되는 이유는<br>둘은 서로 다른 네트워크 상에 존재하기 때문이다.<br>즉, 다른 공유기에 연결됐기 때문이라고 생각하면 된다.  </p><p>A 클래스의 프라이빗 IP 어드레스 범위는 10.0.0.0 ~ 10.255.255.255이고,<br>B 클래스의 프라이빗 IP 어드레스 범위는 172.0.0.0 ~ 172.255.255.255이고,<br>C 클래스의 프라이빗 IP 어드레스 범위는 192.168.0.0 ~ 192.168.255.255이다.<br>이 외의 주소들은 전부 퍼블릭 IP이다.  </p><p><img src="/images/tcp-ip-book-index-4/vpc2.png" alt="AWS는 돈이 많아서인지 A 클래스의 프라이빗 어드레스와 B 클래스의 프라이빗 어드레스를 모두 소유하고 있다."><br><img src="/images/tcp-ip-book-index-4/private-ip.png" alt="우리집에서 private ip 주소를 보니 내 프라이빗 IP는 C 클래스의 IP이다.">  </p><p><a href="#4-3-5-IP-어드레스의-할당-방법">IP 어드레스의 할당 방법</a>을 통해 봤듯이 private ip도 마찬가지로 호스트 부분 내에서 할당 받는다.<br>이 때 DHCP란 프로토콜을 통해 브로드캐스트 트래픽으로 사용중인 IP 목록들을 파악해서 사용 가능한 ip를 새로운 호스트에게 할당하는 방식으로 진행되는 것 같다.  </p><h4 id="4-3-8-퍼블릭-IP-어드레스의-관리"><a href="#4-3-8-퍼블릭-IP-어드레스의-관리" class="headerlink" title="4-3-8. 퍼블릭 IP 어드레스의 관리"></a>4-3-8. 퍼블릭 IP 어드레스의 관리</h4><p>위에 적어놓은 프라이빗 ip는 같은 네트워크 내에서 통신하기 위한 주소이고, 외부 네트워크와 통신하기 위해서는 퍼블릭 IP가 필요하다.<br>따라서 퍼블릭 IP는 어떠한 경우에도 중복이 일어나면 정상적인 통신이 이루어지지 않는다.<br>따라서 별도의 기관에서 퍼블릭 IP 주소 할당에 대해 관리를 하고, ISP(올레나 SK 브로드밴드 등등)에서 그런 기관으로부터 미리 IP 주소를 대량으로 임대를 하고<br>인터넷 가입자들에게 제공해주는 것이다.  </p><p>그리고 브로드캐스트 주소, 네트워크 주소와 별개로<br>예약된 IP 주소가 하나 있는데 바로 자기 자신을 가리키는 127.0.0.1이라는 주소이다.<br>자기 자신을 가리키는 주소이기 때문에 루프백 주소라고 부르기도 한다.</p><h3 id="4-4-라우팅이란"><a href="#4-4-라우팅이란" class="headerlink" title="4-4. 라우팅이란?"></a>4-4. 라우팅이란?</h3><p>데이터를 목적지의 IP 주소까지 전달하는 경로를 탐색하는 과정을 라우팅이라고 부른다.  </p><h4 id="4-4-1-라우팅과-경로-탐색"><a href="#4-4-1-라우팅과-경로-탐색" class="headerlink" title="4-4-1. 라우팅과 경로 탐색"></a>4-4-1. 라우팅과 경로 탐색</h4><p>라우팅을 통해 찾은 최적의 경로로 데이터를 전달하는데 만약 중간에 다음 라우터에 장애가 발생했으면 다른 라우터로 우회해서 데이터를 전달한다.</p><h4 id="4-4-2-라우팅-프로토콜"><a href="#4-4-2-라우팅-프로토콜" class="headerlink" title="4-4-2. 라우팅 프로토콜"></a>4-4-2. 라우팅 프로토콜</h4><p>데이터가 전송될 경로를 찾기 위해 네트워크 상의 각 라우터는 서로 어떤 라우터와 어떤 라우터가 연결돼있는지 정보를 교환한다.<br>이 때 라우팅 프로토콜이 사용되는데 대표적으로 BGP, OSPF, RIP 등이 있다고 한다.  </p><h4 id="4-4-3-자율-시스템"><a href="#4-4-3-자율-시스템" class="headerlink" title="4-4-3. 자율 시스템"></a>4-4-3. 자율 시스템</h4><p>ISP 같이 규모가 큰 네트워크에서는 몇 개의 네트워크를 하로 묶어 AS(Autonomous System, 자율 시스템)이라는 단위로 관리를 한다.<br>네트워크 경로를 하나하나 찾는 것보다 AS 같은 큰 덩어리로 라우팅 하면 멀리있는 컴퓨터와도 더 빠른 속도로 통신할 수 있게 된다.</p><h3 id="4-5-라우터와-라우팅-프로토콜"><a href="#4-5-라우터와-라우팅-프로토콜" class="headerlink" title="4-5. 라우터와 라우팅 프로토콜"></a>4-5. 라우터와 라우팅 프로토콜</h3><h4 id="4-5-1-라우터의-역할"><a href="#4-5-1-라우터의-역할" class="headerlink" title="4-5-1. 라우터의 역할"></a>4-5-1. 라우터의 역할</h4><p>라우터는 네트워크 간의 패킷을 전달하는 역할을 한다.<br>이 때 라우터는 자신이 가고자하는 목적지의 IP 주소로 가기위해 라우터의 정보를 파악해서 최적의 경로를 구성하게 되는데<br>라우터는 자기 자신이 가야할 바로 다음 라우터의 주소만 알고 있으면 된다.<br>그 이전의 라우터의 경로도 몰라도 되고, 다다음 라우터의 경로를 몰라도 된다.<br>단지 바로 자기가 바로 당장 가야할 경로 그 하나만 알면 그 다음 책임은 그 다음 라우터에게 전가한다.<br>마치 자기 다음 데이터에 대한 참조값만 알고 있는 자료구조인 링크드 리스트와 매우 유사한 느낌이 든다.<br>그런 관점에서 링크드리스트의 노드를 라우터에 빗대어 생각해보면 도움이 많이 될 것이다.  </p><p>그럼 일반적인 인터넷 공유기를 사용하는 가정집에서 네이버로 요청을 보내는 시나리오를 상상해보자.  </p><ol><li>우선 네트워크 내부에 호스트는 프라이빗 ip를 쓰니 192.1.0.3이 프라이빗 IP라고 가정해보자.  </li><li>192.1.0.3 호스트에서는 자기와 제일 인접한 라우터인 인터넷 공유기로 패킷을 보낸다.  </li><li>호스트와 공유기는 같은 네트워크에 속하므로 프라이빗 ip로 통신하고, 대부분 공유기(라우터)의 ip는 호스트 부분이 1인 경우가 많으니 192.168.0.1로 데이터를 보낸다.  </li><li>공유기는 프라이빗 ip와 동시에 퍼블릭 ip도 가지고 있는데 그건 isp로부터 임대받은 ip이다.  </li><li>프라이빗 IP를 퍼블릭 ip로 세탁(전문적으로는 NAT, Network Address Translation, 네트워크의 주소를 변환하는 걸 말한다.)해서 ISP에서 준 모뎀으로 패킷을 보낸다.  </li><li>모뎀에서는 다시 ISP 쪽으로 라우팅을 하면 지지고 볶고 알아서 네이버로 패킷을 전달해서 네이버는 안전하게 데이터를 전달받을 것이다.  </li></ol><p>5번 과정을 보면 공유기에서 private ip를 public ip로 nat 시켰는데 이는 외부에서는 private ip를 알지 못하기 때문에 응답을 받기 위해선 public ip로 요청을 해야한다.<br>그러면 공유기에 연결된 모든 private ip가 같은 public ip로 바인딩되서 나가나 생각할 수 있는데 별도의 설정이 없다면 내가 아는 한도 내에서는 그렇다.  </p><h4 id="4-5-2-라우팅-테이블"><a href="#4-5-2-라우팅-테이블" class="headerlink" title="4-5-2. 라우팅 테이블"></a>4-5-2. 라우팅 테이블</h4><p>라우터는 라우팅을 위해서 목적지 ip 주소와 목적지로 가기 위한 바로 다음 라우터 주소를 저장한 라우팅 테이블을 들고 있다.</p><p><img src="/images/tcp-ip-book-index-4/routing-table.png" alt="AWS에서 라우팅 테이블은 특정 VPC에 종속적이다."><br>같은 VPC(네트워크) 내부인 10.2.0.0/16에서는 private ip로 통신을 한다는 얘기이고,<br>그 이외의 ip인 0.0.0.0/0(모든 트래픽)에서는 인터넷 게이트웨이라는 문지기에게 패킷을 보내는데 얘가 라우터 역할까지 수행한다고 보면 된다.<br>여담으로 aws에서 라우팅 테이블은 특정 서브넷에 적용시킬 수 있다.</p><h4 id="4-5-3-정적-라우팅과-동적-라우팅"><a href="#4-5-3-정적-라우팅과-동적-라우팅" class="headerlink" title="4-5-3. 정적 라우팅과 동적 라우팅"></a>4-5-3. 정적 라우팅과 동적 라우팅</h4><p>라우팅 테이블을 만드는 방법에는 크게 두 가지가 있는데 관리자가 수동으로 라우팅 테이블을 만드는 정적 라우팅과<br>라우팅 프로토콜을 사용해서 자동으로 경로 정보를 수집해서 라우팅 테이블을 설정하는 게 동적 라우팅이다.<br>aws의 라우팅 테이블 같은 경우에는 개발자가 직접 세팅하므로 정적 라우팅에 속한다.<br>대부분의 네트워크는 경로가 매우 복잡하므로 동적 라우팅을 사용한다.  </p><h4 id="4-5-4-라우팅-테이블에-목적지-정보가-없을-경우"><a href="#4-5-4-라우팅-테이블에-목적지-정보가-없을-경우" class="headerlink" title="4-5-4. 라우팅 테이블에 목적지 정보가 없을 경우"></a>4-5-4. 라우팅 테이블에 목적지 정보가 없을 경우</h4><p>인터넷에는 수많은 네트워크가 연결돼있기 때문에 모든 네트워크의 통신 경로를 저장하는 건 사실상 불가능하다.<br>그래서 한 라우터에 목적지에 대한 정보가 없다면 디폴트 라우터를 사용하는데 디폴트 라우터는 0.0.0.0/0으로 세팅돼있다.<br>디폴트 라우터도 설정돼있지 않고, 목적지에 대한 경로도 설정돼있지 않다면 아마 패킷을 제대로 전달하지 못하고 패킷은 혼자 사망할 것이다.  </p><h4 id="4-5-5-동적-라우팅-알고리즘"><a href="#4-5-5-동적-라우팅-알고리즘" class="headerlink" title="4-5-5. 동적 라우팅 알고리즘"></a>4-5-5. 동적 라우팅 알고리즘</h4><ul><li>거리 벡터형(RIP, Routing Information Protocol이 사용함.)<br>목적지까지의 거리를 살펴보는데 이 거리는 지리상 거리가 아니라 라우터를 몇 개 거치느냐를 뜻하며<br>라우터 하나를 거치는 단위를 1 홉(Hop)이라고 부른다.<br>가장 홉이 낮은 경로로 라우팅 테이블을 설계한다.  </li><li>링그 상태형(OSPF, Open Shortest Path First 프로토콜이 사용함.)<br>단순히 거리만 보고 판단하는 게 아니라 어떤 네트워크가 고속이며 덜 혼잡한지까지 파악해서<br>홉은 좀 높더라도 좀 더 빨리 전달할 수 있는 경로로 라우팅 테이블을 설계한다.</li></ul><h3 id="4-6-네트워크-오류를-통보하는-ICMP"><a href="#4-6-네트워크-오류를-통보하는-ICMP" class="headerlink" title="4-6. 네트워크 오류를 통보하는 ICMP"></a>4-6. 네트워크 오류를 통보하는 ICMP</h3><p>ICMP(Internet Control Message Protocol)은 주로 데이터 전송 중에 문제가 생길 경우,<br>장애 상황을 통보해야할 때 사용한다.<br>데이터가 제대로 동작하지 않았으면 3번 타입을 보내고,<br>네트워크에 새로 연결된 장비가 라우터(공유기)를 찾기 위해 10번 타입으로 브로드캐스팅하고,<br>그 요청을 받은 라우터는 새로운 호스트에게 9번 타입으로 자신의 정보를 알려준다.<br>ICMP 헤더는 IP 헤더 + 타입 + 코드 + 체크섬으로 구성된다.  </p><h3 id="4-7-어드레스-변환"><a href="#4-7-어드레스-변환" class="headerlink" title="4-7. 어드레스 변환"></a>4-7. 어드레스 변환</h3><h4 id="4-7-1-네트워크-어드레스-변환-NAT-의-동작-방식"><a href="#4-7-1-네트워크-어드레스-변환-NAT-의-동작-방식" class="headerlink" title="4-7-1. 네트워크 어드레스 변환(NAT)의 동작 방식"></a>4-7-1. 네트워크 어드레스 변환(NAT)의 동작 방식</h4><p>내부 네트워크의 호스트가 외부의 네트워크가 통신을 하려면 퍼블릭 ip가 필요하므로 라우터(공유기)에서 퍼블릭 ip로 변환하고 그걸 통해 외부와 통신을 하게 된다.<br>하지만 외부에서 봤을 때는 여러 호스트들을 하나의 퍼블릭 ip로 퉁쳐서 내보내기 때문에 정확히 어떤 호스트에게 응답을 해줘야하는지 모르게 된다.<br>이런 상황을 방지하고자 라우터는 NAT 하기 전에 프라이빗 ip를 기억해두고 있다가 응답을 받으면 그 프라이빗 ip로 다시 요청을 전송하는 역할을 한다.  </p><p><img src="/images/tcp-ip-book-index-4/nat-gateway.png" alt="AWS에서도 NAT를 지원해준다."><br>AWS에서 NAT를 쓰는 이유는 주로 두 가지이다.  </p><ol><li>퍼블릭 IP가 없이 프라이빗 IP만 존재하는 서브넷(프라이빗 서브넷, 외부에서 접근 불가능)에서 외부와 통신을 해야할 일이 있을 때<br>퍼블릭 IP가 존재해야 외부의 응답을 받을 수 있으므로 외부에 요청을 보내고 응답을 받기 위해 NAT Gateway를 사용한다.  </li><li>외부로 나가는 IP(Outgoing IP)를 하나로 통제하고자 할 때 사용한다.<br>외부 연동사에 IP 등록 요청을 해야하는데 네트워크 내의 모든 서버의 IP를 등록해달라고 하기 거시기 하기 때문에 outgoing ip를 하나로 통제할 때 쓰곤 한다.<br>물론 상황에 따라 네트워크가 속한 지역이나 가용영역 등등에 따라 하나로 통일을 못 하기도 하기는 한다.  </li></ol><h4 id="4-7-2-NAT에서-발생할-수-있는-제약-사항"><a href="#4-7-2-NAT에서-발생할-수-있는-제약-사항" class="headerlink" title="4-7-2. NAT에서 발생할 수 있는 제약 사항"></a>4-7-2. NAT에서 발생할 수 있는 제약 사항</h4><p>서버에서 요청에 대한 응답을 처리해줄 수 있는 것은 라우터에서 어떤 프라이빗 아이피가 퍼블릭 아이피로 매핑됐는지 정보를 기억하고 있기 때문이다.<br>하지만 역으로 서버 쪽에서 클라이언트 쪽을 찌를 때 라우터는 퍼블릭 IP만을 가지고는 프라이빗 ip를 찾을 수 없어서 통신이 불가능한 상황이 발생한다.  </p><h4 id="4-7-3-네트워크-어드레스-포트-변환"><a href="#4-7-3-네트워크-어드레스-포트-변환" class="headerlink" title="4-7-3. 네트워크 어드레스 포트 변환"></a>4-7-3. 네트워크 어드레스 포트 변환</h4><p>공교롭게도 같은 네트워크 상의 호스트가 동일한 목적지로 요청을 보내는데 둘의 포트가 같아버리면<br>private ip -&gt; public ip 과정에서 포트 충돌이 일어난다.<br>이러한 상황을 대비해서 NAPT(Network Address Port Translation), 즉 포트까지 같이 변환해야한다.<br>만약에 포트가 충돌나면 라우터는 포트까지 같이 변환하고 원래 포트를 기억하고 있다가 서버에 대한 응답을 올바르게 전달해준다.  </p><h4 id="4-7-4-외부에서-접속이-가능하게-하기"><a href="#4-7-4-외부에서-접속이-가능하게-하기" class="headerlink" title="4-7-4. 외부에서 접속이 가능하게 하기."></a>4-7-4. 외부에서 접속이 가능하게 하기.</h4><h5 id="4-7-4-1-메시지의-자동-확인"><a href="#4-7-4-1-메시지의-자동-확인" class="headerlink" title="4-7-4-1. 메시지의 자동 확인"></a>4-7-4-1. 메시지의 자동 확인</h5><p>SNS 같은 경우에 보면 알림이 있으면 클라이언트 쪽으로 push notification을 준다.<br>이는 서버가 클라이언트한테 바로 notification을 주는 게 아니라 내부적으로 클라이언트가 서버를 계속해서 호출해서 가능한 것이다.<br>아니면 소켓을 하나 뚫어놓고(연결을 맺어놓고 끊지 않고), 알림을 줘야할 내용이 있을 때마다 알림을 주는 경우도 있다.  </p><h5 id="4-7-4-2-포트포워딩"><a href="#4-7-4-2-포트포워딩" class="headerlink" title="4-7-4-2. 포트포워딩"></a>4-7-4-2. 포트포워딩</h5><p>포워딩이 가지는 느낌을 정확하게 모르겠는데 내가 가지고 있는 느낌을 어느 방향으로 향하게 하는 걸 포워딩이라고 부르는 것 같다.<br>포트포워딩은 특정 포트를 어떤 포트 쪽으로 향하게 하는 그런 느낌이라고 이해하면 될 것 같다.  </p><p><img src="/images/tcp-ip-book-index-4/router-windows.jpg" alt="윈도우에서는 CMD에서 ipconfig를 치면 본인이 연결한 이더넷에 default gateway의 주소가 라우터(공유기)의 IP 주소이다."><br><img src="/images/tcp-ip-book-index-4/router-mac.png" alt="맥에서는 환경설정 - 네트워크 - 본인이 연결한 이더넷 - Advanced를 누르고 TCP/IP 탭으로 오면 라우터(공유기)의 IP 주소를 볼 수 있다."></p><p>라우터(공유기)의 IP 주소를 입력해서 접속하자.<br>간혹가다가 무선 인터넷을 통해서는 보안 때문인지 아예 접속조차 안 되고, 유선랜의 경우에만 접근을 허락하는 공유기들도 존재한다.<br>공유기의 기본 ID/PW는 메뉴얼이나 공유기 아랫 부분이나 어디 스티커로 붙어있거나 공유기 제조 홈페이지를 참고하며 된다.  </p><p>그리고 또 메뉴얼을 참고해서 포트포워딩 메뉴로 오면 되는데 대부분 일반 유저들은 쓰지 않는 메뉴기 때문에 고급 쪽에 붙어있는 경우가 많다.  </p><p>포트 포워딩을 보기 전에 몇가지 재밌는 메뉴들을 살펴보자.(공유기에 따라 정보를 노출하지 않거나 제공하지 않는 기능일 수도 있으니 그냥 재미로만 보자.)  </p><p><img src="/images/tcp-ip-book-index-4/subnet-mask-router.png" alt="라우터에서 본 서브넷 마스크"><br>직접 라우터의 IP 주소와 네트워크의 서브넷 마스크도 조절이 가능한 것 같은데 뭔가 무서워서 함부로 건들지 못하겠다 ㅋㅋ<br>또한 이더넷 카드의 Physical Address인 Mac Address도 있다.</p><p><img src="/images/tcp-ip-book-index-4/router-other-info.png" alt="라우터에서 볼 수 있는 다양한 정보들"><br>IP 주소는 ISP로부터 할당받은 Public IP를 뜻하고,<br>기본 게이트웨이는 모뎀(이자 라우터 역할도 함)의 퍼블릭 IP를 말하는 것 같다.<br>기본/보조 DNS는 URL 창에 IP &lt;-&gt; Domain을 하기 위해 도메인들이 각각 저장된 도메인 네임 서버를 의미하는 것 같다.<br>그리고 고정 IP는 기본적으로 돈이 들기 때문에 IP 주소 변경에 민감한 웹서버에서 주로 사용한다.  </p><p><img src="/images/tcp-ip-book-index-4/router-dhcp.png" alt="라우터에서 IP 할당에 관여하는 DHCP 설정도 볼 수 있다."><br>IP 주소 대역을 보아하니 호스트는 100~199까지 총 100대만 연결이 가능한 네트워크인 모양이다.<br>또한 임대 시간이 나와있는데 해당 시간을 초과한다고 해서 무조건적으로 IP 주소가 바뀌는 건 아닐 것이다.  </p><p><img src="/images/tcp-ip-book-index-4/router-mtu.png" alt="라우터에서 인터넷 계층에 쓰이는 세그먼트의 사이즈인 MTU도 설정할 수 있다."><br>웬만하면 기본값인 1500바이트를 건들 일은 없어 보인다.</p><p><img src="/images/tcp-ip-book-index-4/router-routing-table.png" alt="정적으로 라우팅 테이블 설계도 가능하다."><br>근거리 통신(LAN)에는 192.168.0.0/24인 네트워크를 통해 통신이 되고,<br>WAN의 경우에는 xxx.149.166.0/25인 네트워크를 타고 통신이 된다.<br>그 외의 경우에는 디폴트 라우팅 테이블에 있는 모뎀(라우터)의 IP 어드레스를 타고 나가게 된다.  </p><p><img src="/images/tcp-ip-book-index-4/router-port-forwarding.png" alt="공유기 제조사마다 다른데 대부분은 포트포워딩 이라고 표현하고 있다."><br>만약 배틀넷 서버가 클라이언트(192.168.0.181)에게 8123 포트로 요청을 보낸다고 하면<br>위와 같이 등록을 해두면 된다.  </p><p><img src="/images/tcp-ip-book-index-4/router-port-forwarding2.png" alt="웹 서비스를 포트포워딩 하는 경우"><br>만약에 클라이언트(192.168.0.181)에서 웹서버를 8080 포트로 열었다고 할 때<br>위와 같이 설정해놓으면 외부에서는 퍼블릭 ip만 입력하면 바로 내가 연 웹서버로 들어올 수 있다. (대표 포트는 생략 가능하기 때문)  </p><p>하지만 이런 포트포워딩에도 단점이 존재하는데 포트의 충돌이 일어나기 때문에 하나의 포트는 하나의 호스트 밖에 사용하지 못한다.</p><h3 id="4-8-도메인명"><a href="#4-8-도메인명" class="headerlink" title="4-8. 도메인명"></a>4-8. 도메인명</h3><p>IP는 숫자로 구성돼있어서 인간 친화적이지 않으므로, 사람이 알아보기 편한 영단어들과 일부 기호들의 집합으로 이루어진 걸 도메인명이라고 한다.  </p><h4 id="4-8-1-호스트명과-도메인명"><a href="#4-8-1-호스트명과-도메인명" class="headerlink" title="4-8-1. 호스트명과 도메인명"></a>4-8-1. 호스트명과 도메인명</h4><p>서로 다른 컴퓨터를 구분하는 식별자로 IP 어드레스와 호스트명이 있는데, 이걸 관리하기 위해 DNS(Domain Name System)이 등장했다.  </p><p>우선 도메인을 보기 전에 URL이 어떻게 생겨먹었는지 보자.<br><code>scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</code><br>scheme는 프로토콜이라고 보면 된다.<br>그리고 나는 프로토콜 뒤에 무조건 ://이 붙는 줄 알았는데 mailto 프로토콜의 경우에는 <code>mailto:someone@example.com</code>와 같이 //이 붙지 않는 프로토콜도 존재한다.<br>그리고 (s)ftp의 경우에는 <code>ftp://testid:testpass@file.example.com</code>처럼 인증에 필요한 user:password 정보가 URL에 포함돼있는 경우도 존재한다.<br>ssh 프로토콜을 보면 대부분 터미널을 통해서 ssh 라는 명령어를 통해서 접속을 시작하지만 엄연히 URL을 가진다.<br><code>ssh://ec2-user@52.178.112.131</code>과 같은 형태로 접속이 가능하다.<br>위 URL을 보면 user@host의 형태도 보인다.<br>일반적인 웹의 경우에는 user, password, @가 빠진 <code>https://js.org/</code>와 같이 scheme://host/만으로도 URL을 표현할 수도 있다.<br><code>http://121.1.33.57:8080/board?no=1#notice</code>와 같이 host 부분은 IP 주소가 돼도 되고, 해당 서비스를 대표하는 대표 포트가 아닐 경우에는 포트번호 생략이 불가능해진다.<br>포트 뒤에 board라는 path가 나왔고, 그 뒤에 ?no=1이라는 쿼리 스트링도 붙었다.<br>그리고 #notice라는 fragment를 통해 현재 해당 리소스의 어느 부분?부터 리소스가 보이게 끔 하기도 한다.</p><h4 id="4-8-2-DNS-서버에-질의하기"><a href="#4-8-2-DNS-서버에-질의하기" class="headerlink" title="4-8-2. DNS 서버에 질의하기"></a>4-8-2. DNS 서버에 질의하기</h4><p>도메인명에 대응하는 IP 정보가 알고 싶다면 DNS 서버에게 물어보면 된다.<br>위에 라우터(공유기) 설정 스샷에서도 봤듯이 DNS 서버가 컴퓨터 혹은 라우터에 등록이 돼있어야한다.</p><h4 id="4-8-3-도메인의-계층-구조"><a href="#4-8-3-도메인의-계층-구조" class="headerlink" title="4-8-3. 도메인의 계층 구조"></a>4-8-3. 도메인의 계층 구조</h4><p>도메인 명은 아래와 같은 계층 구조를 가지고 있다.  </p><ol><li>루트  </li><li>탑 레벨 도메인(TLD, 1차 도메인) - com, org, kr, uk  </li><li>2단계 도메인(ANS, Authoritative Name Server,  2차 도메인) - co, go, ac, seoul, busan</li><li>3단계 도메인(3차 도메인)  </li></ol><p>위 구조는 예시일 뿐, 실제로는 더 복잡한 계층일 수도 있다.</p><h4 id="4-8-4-DNS-서버의-계층-구조"><a href="#4-8-4-DNS-서버의-계층-구조" class="headerlink" title="4-8-4. DNS 서버의 계층 구조"></a>4-8-4. DNS 서버의 계층 구조</h4><p>도메인이 계층 구조를 가지듯이 DNS 서버도 계층적인 구조를 가지고 있다.  </p><ol><li>루트 네임 서버  </li><li>kr, uk 도메인을 관리하는 DNS 서버  </li><li>ISP 등에서 관리하는 DNS 서버</li></ol><p>위 구조는 예시일 뿐, 실제로는 더 복잡한 계층일 수도 있다.  </p><p>도메인명 데이터를 직접 관리하는 서버를 DNS 콘텐츠 서버라고 부른다.  </p><h4 id="4-8-5-DNS-서버에-질의-처리하는-과정"><a href="#4-8-5-DNS-서버에-질의-처리하는-과정" class="headerlink" title="4-8-5. DNS 서버에 질의 처리하는 과정"></a>4-8-5. DNS 서버에 질의 처리하는 과정</h4><ol><li>우선 클라이언트는 DNS 캐시 서버에게 도메인을 던진다.  </li><li>DNS 캐시 서버는 자신에게 해당 도메인에 대한 IP가 등록돼있는지 확인한다.  </li><li>있으면 바로 IP 주소를 리턴하고, 없으면 루트 네임 서버에 도메인을 던진다.  </li><li>루트 네임 서버는 본인이 해당 도메인에 대한 IP가 등록돼있는지 확인한다.  </li><li>있으면 IP 주소를 리턴하고, 없으면 해당 정보를 가지고 있는 탑 레벨 도메인 서버의 주소를 던진다.  </li><li>DNS 캐시 서버는 다시 탑 레벨 도에민 서버에게 도메인을 던진다.  </li><li>있으면 IP 주소를 리턴하고, 없으면 해당 정보를 가지고 있는 다른 DNS 서버의 주소를 던진다.  </li><li>DNS 캐시 서버는 다시 응답받은 DNS 서버의 주소로 도메인을 던진다.  </li><li>DNS 서버는 자기가 해당 도메인에 대한 IP를 들고 있다면 IP를 리턴하고 없으면 또 다른 DNS 주소를 응답한다.  </li><li>DNS 캐시 서버는 도메인에 대한 IP 주소를 받아서 클라이언트에게 응답한다.</li></ol><p>아래 링크와 동영상도 참고하자.  </p><ul><li><a href="https://www.youtube.com/watch?v=2ZUxoi7YNgs" rel="external nofollow noopener noreferrer" target="_blank">How the DNS works</a>  </li><li><a href="https://www.youtube.com/watch?v=72snZctFFtA" rel="external nofollow noopener noreferrer" target="_blank">DNS Explained</a>  </li><li><a href="http://webdir.tistory.com/161" rel="external nofollow noopener noreferrer" target="_blank">DNS서버(네임서버)의 이해</a>  </li><li><a href="http://bcho.tistory.com/tag/NS%20%EB%A0%88%EC%BD%94%EB%93%9C" rel="external nofollow noopener noreferrer" target="_blank">Amazon Route 53 DNS 서비스</a></li></ul><p>그리고 DNS에서 생략되는 게 하나 있는데 바로 루트를 의미하는 . 이다.<br><a href="http://d2.naver.com./helloworld/238638" rel="external nofollow noopener noreferrer" target="_blank">http://d2.naver.com./helloworld/238638</a> 으로 접속하면 com.뒤에 뭔가 올 거 같은데 입력하지 않고 바로 저렇게 입력해도 잘 접속이 된다.<br>바로 루트를 의미하는 .은 있어도 되고, 없으면 자동으로 내부적으로 붙여주기 때문이다.</p><p>DNS 캐시 서버는 하드웨어 단의 캐시 서버이고 자바 같이 소프트웨어 단에서도 DNS 캐시를 설정할 수 있다.  </p><ul><li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=17105897" rel="external nofollow noopener noreferrer" target="_blank">Java VM 의 DNS caching TTL</a>  </li><li><a href="https://charsyam.wordpress.com/2017/12/27/%EC%9E%85-%EA%B0%9C%EB%B0%9C-dns-caching-in-jvm/" rel="external nofollow noopener noreferrer" target="_blank">DNS Caching in JVM</a>  </li></ul><p>운영체제 별로 hosts 파일이 존재한다.<br>인터넷 초창기에는 도메인과 IP 주소를 매핑하기 위해 텍스트 형태의 파일인 hosts 파일을 사용해서 ip 주소를 변환했다.<br>요즘 OS에도 이 파일이 있어 DNS에 등록하기 전의 서버나 DNS에 등록할 수 없는 서버에 접근해야할 때 이 파일을 사용한다.<br>개발 중인 서버를 내부 테스트 할 때 사용하기도 하는데 자신의 컴퓨터에만 적용되기 때문에 테스트하는 모든 컴퓨터가 hosts 파일 자체를 수정하기가 번거로운 경우에는<br>사설 DNS를 직접 구성하기도 하는 것 같다.  </p><p>맥의 경우에는 <code>/etc/</code>에 해당 파일이 존재한다.<br><img src="/images/tcp-ip-book-index-4/hosts.png" alt="IPv4와 IPv6의 루프백 어드레스로 127.0.0.1이 등록돼있고, 255.255.255.255로 브로드캐스팅 주소가 등록돼있다."><br>맨 밑에 IP와 asdf.com은 내가 테스트로 등록한 건데, 네이버의 IP이다.<br>이제 내 컴퓨터에서 asdf.com을 입력하면 네이버로 접속이 된다.</p><h4 id="4-8-6-DNS에-도메인-등록하기"><a href="#4-8-6-DNS에-도메인-등록하기" class="headerlink" title="4-8-6. DNS에 도메인 등록하기"></a>4-8-6. DNS에 도메인 등록하기</h4><p>도메인은 IP와 마찬가지로 별도로 관리해주는 기관이 있다.<br>ISP 업체가 IP를 임대받아서 개인에게 IP를 할당해주듯이<br>도메인도 마찬가지로 큰 기관에서 전체적으로 관리하고, 등록 대행 업체(ISP 같은 애라고 보면 됨) 같은 사이트에서 관리를 하게 된다.<br>GoDaddy, Route53 등등의 사이트에서 도메인을 등록할 수 있다.<br>과정이 궁금한 사람은 <a href="/2017/11/21/domain-register-godaddy/">(DNS) 1331원에 .com 도메인 사기 (feat. GoDaddy)</a>을 참고하면 된다.  </p><p>DNS 서버에 등록되는 정보를 리소스 레코드라고 부르고, 리소스 레코드가 등록된 파일을 존 파일이라고 한다.<br><img src="/images/tcp-ip-book-index-4/route-53.png" alt="AWS의 Route53에서 특정 도메인에 대해 등록된 리소스 레코드">  </p><h4 id="4-8-7-리소스-레코드의-의미"><a href="#4-8-7-리소스-레코드의-의미" class="headerlink" title="4-8-7. 리소스 레코드의 의미"></a>4-8-7. 리소스 레코드의 의미</h4><p>각각의 레코드에 대해서는 나도 아직 공부하는 중이므로 아래 링크를 참조하자 ㅠㅠ<br><a href="http://ricky840.tistory.com/10" rel="external nofollow noopener noreferrer" target="_blank">DNS Zone 파일에 쓰이는 레코드 설명</a>  </p><p><img src="/images/tcp-ip-book-index-4/go-daddy.png" alt="GoDaddy에 등록된 내 도메인에 대한 리소스 레코드"></p><ul><li><p>SOA(Start of authority)<br>해당 도메인을 관리하는 DNS 서버를 기술, 링크를 보면 1차 네임 서버(Primary), 2차 네임 서버(Secondary) 사이에 싱크를 맞추기 위한 시간 설정이나<br>재시도를 위한 시간 등등의 설정도 할 수 있다.  </p></li><li><p>NS(Name Server)<br>Primary, Secondary DNS 서버를 기술, 도메인에 대한 정보를 찾을 수 없으면 이 NS로 보내서 도메인에 대한 정보를 뒤지는 모양이다.  </p></li><li><p>A<br>도메인과 IP 어드레스를 연결, Route53 같은 경우에는 IP 주소 대신에 AWS Resource에 대한 도메인을 등록할 수 있다.  </p></li><li><p>CNAME(Canonical Name)<br>도메인에 별칭을 부여한다.<br>해당 도메인을 부르는 이름이 따로 있는데 그거에 대한 별명을 쓴다고 생각하면 된다.<br>내 블로그만 해도 원래는 perfectcle.netlify.com이라는 도메인이 있는데 이 도메인에 blog라는 별칭을 줬다.<br>루트 도메인(Zone Apex, Naked Domain이라고 부르기도 한다.)인 perfectacle.com을 내 돈 주고 샀고, blog라는 서브 도메인을 등록한 것이다.<br>루트 도메인만 돈 내고 쓰면 되고, 서브 도메인은 마음껏 쭉쭉 추가할 수 있고<br>위와 같이 1뎁스가 아니라 dev.blog와 같이 몇 뎁스 씩 쭉쭉 늘려가면서 등록할 수 있다.</p></li><li><p>MX(Mail eXchanger)<br>xxx@domain 과 같은 형식의 메일 주소와 메일 서버를 연결할 때 사용한다.</p></li></ul><h3 id="4-9-IP-어드레스를-자동으로-할당하는-DHCP"><a href="#4-9-IP-어드레스를-자동으로-할당하는-DHCP" class="headerlink" title="4-9. IP 어드레스를 자동으로 할당하는 DHCP"></a>4-9. IP 어드레스를 자동으로 할당하는 DHCP</h3><p>DHCP는 네트워크에 속한 호스트들에게 IP 어드레스를 자동으로 부여해 사람이 직접 IP를 설정하고 관리하는 수고를 덜어준다.  </p><h4 id="4-9-1-DHCP의-장점"><a href="#4-9-1-DHCP의-장점" class="headerlink" title="4-9-1. DHCP의 장점"></a>4-9-1. DHCP의 장점</h4><p>TCP/IP가 제대로 동작하려면 네트워크에 속한 호스트의 IP 어드레스가 중복되면 안 된다.<br>퍼블릭 IP는 ISP에서 알아서 할당해주고, 프라이빗 IP도 누군가가 할당을 해줘야한다.<br>그래서 각 네트워크의 호스트한테 일일이 프라이빗 IP를 수동으로 등록해주는 건 매우 번거롭고 힘든 일이다.<br>이걸 자동으로 해주는 게 DHCP인데 대부분의 공유기가 이 역할까지 수행해준다.  </p><h4 id="4-9-2-IP-어드레스-할당-방법"><a href="#4-9-2-IP-어드레스-할당-방법" class="headerlink" title="4-9-2. IP 어드레스 할당 방법"></a>4-9-2. IP 어드레스 할당 방법</h4><p>공유기에 새로운 컴퓨터를 연결하면, 아직 IP 주소가 할당되지 않은 상태이고 DHCP 서버(공유기의 IP 주소) 조차 모르는 상황이다.<br>따라서 DHCP 서버를 찾아서 IP 주소를 할당받기 위해 브로드캐스팅을 해야한다.  </p><ol><li>신규로 연결한 장비는 네트워크에 브로드캐스팅으로 자신의 새로 들어왔음을 알린다.<br>이 때 자신의 IP 주소도 모르므로 IP 프로토콜로 통신하는 게 아니라 ICMP 프로토콜로 통신을 한다.<br>ICMP 타입 10번(Router Solicitation)을 보낸다.</li><li>그럼 DHCP 서버가 아닌 애들은 자신과 무관한 내용이므로 해당 패킷을 버린다.<br>그럼 그 요청을 받은 DHCP 서버는 브로드캐스팅으로 사용해야하는 IP 주소를 알려준다.<br>이 때 라우터는 ICMP 타입 9번 메시지(Router Advertisement)를 응답한다.</li><li>그럼 그 요청을 받은 새로운 장비는 IP 주소가 할당되고, 나머지 애들은 자신과 상관 없으니까 또 패킷을 버린다.  </li></ol><h3 id="4-10-ipconfig-명령과-ping-명령"><a href="#4-10-ipconfig-명령과-ping-명령" class="headerlink" title="4-10. ipconfig 명령과 ping 명령"></a>4-10. ipconfig 명령과 ping 명령</h3><p>윈도우에서는 cmd에서 ipconfig 명령을 날리면 라우터 주소, 프라이빗 IP 주소, 서브넷 마스크 등등을 알 수 있다.<br>유닉스 환경(linux, mac 등등)에서는 ifconfig를 때리면 된다.<br>근데 맥에서 해당 명령어를 날려보니 보기가 매우 요상해서 Network Utility나 환경 설정의 네트워크 쪽에서 보는 게 더 보기는 편한 것 같다.  </p><p>노트북의 경우에는 무선/유선 이더넷 아마 두 개가 나올 것이고(아마 무선은 꼭 나올 것이다.),<br>데스크탑의 경우에는 대부분 유선 이더넷 하나만 나올 것이다.<br>무선 이더넷 카드가 없는 경우에는 와이파이로 연결이 안 되니 외/내장 무선 이더넷 카드를 사야한다.  </p><p>ping 명령어는 서버와 통신할 수 있는지 없는지 알기 위한 명령어이다.<br>해당 서버로부터 응답을 받는데까지 얼마나 알 수도 있기 때문에 네트워크의 혼잡도도 어느정도 파악이 된다.<br>사실 ping 명령어는 ICMP 프로토콜을 사용한다.<br>ICMP 타입 8번 메시지인 echo(수신 측 장비가 존재하는지 확인)를 서버에 날리고,<br>에코 요청을 받은 서버는 0번 타입 메시지인 에코 응답(서버 측 장비가 존재함)을 응답한다.  </p><h3 id="4-11-tracert-명령으로-통신경로-확인하기"><a href="#4-11-tracert-명령으로-통신경로-확인하기" class="headerlink" title="4-11. tracert 명령으로 통신경로 확인하기"></a>4-11. tracert 명령으로 통신경로 확인하기</h3><p>unix 환경에서는 traceroute 명령어이다.<br>백문이 불여일견 그냥 샘플을 봐보자.<br><img src="/images/tcp-ip-book-index-4/traceroute-blog.png" alt="내 블로그 주소를 추적해봤다."><br>CNAME으로 blog를 등록했더니 원래 도메인인 perfectacle.netlify.com의 경로를 추적했고,<br>최종적으로 54.250.174.92이런 IP를 찾아낸 것 같다.</p><ol><li>공유기 (192.168.0.1)  </li><li>모뎀(xxx.xxx.166.1)  </li><li>루트(.) DNS 서버(172.21.1.253)  </li><li>.com DNS 서버(172.21.0.229)  </li></ol><p>…<br>이런 순서인 것 같다.</p><p><img src="/images/tcp-ip-book-index-4/traceroute-naver.png" alt="naver를 추적해봤다."><br>네이버는 IP가 여러 개 물려있고, 그 중에 <a href="http://www.naver.com.nheos.com이라는" rel="external nofollow noopener noreferrer" target="_blank">www.naver.com.nheos.com이라는</a> 도메인을 선택해서 추적한 것 같다.  </p><ol><li>공유기 (192.168.0.1)  </li><li>모뎀(xxx.xxx.166.1)  </li><li>루트(.) DNS 서버(172.21.1.253)  </li><li>.com DNS 서버(172.21.0.229)  </li></ol><p>…<br>이런 순서인 것 같다.  </p><p><img src="/images/tcp-ip-book-index-4/naver-domain.png" alt="www.naver.com.nheos.com으로 접속하면 www.naver.com으로 바뀌어서 접속이 된다."><br>302 Moved Temporarily 응답을 받은 걸 볼 수 있다.<br>그리고 실제로 210.89.160.88으로 접속해도 마찬가지의 응답을 볼 수 있다.</p><p>tracert/traceroute도 서버의 생존 여부를 파악하기 위해 ICMP 프로토콜을 이용한다.<br>요청을 보낼 때 ICMP 타입 8번(에코)를 날리고, 만약 맥시멈 라우트 홉까지 가고도 경로를 찾지 못했으면<br>ICMP 타입 11번(생존 기간이 지난 패킷이라 삭제됨) 응답을 알려준다.  </p><p>꼭 도메인일 필요는 없고 IP 주소를 날려도 상관이 없다.  </p><h3 id="4-12-nslookup-명령으로-IP-어드레스-알아내기"><a href="#4-12-nslookup-명령으로-IP-어드레스-알아내기" class="headerlink" title="4-12. nslookup 명령으로 IP 어드레스 알아내기"></a>4-12. nslookup 명령으로 IP 어드레스 알아내기</h3><p>윈도우의 CMD나 유닉스 기반 운영체제의 터미널에서 nslookup domain을 입력하면 해당 IP 어드레스와 DNS 서버 정보도 표시해준다.<br>위와 반대로 nslookup ip주소 를 입력해서 도메인 정보를 알아내는 reverse DNS Query라는 것도 있다. </p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(네트워크) TCP/IP 쉽게, 더 쉽게 목차 리뷰 - 3장 트랜스포트 계층</title>
      <link href="/2018/03/31/tcp-ip-book-index-3/"/>
      <url>/2018/03/31/tcp-ip-book-index-3/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/tcp-ip-book-index-3/thumb.png" alt=""><br>오래전에 이 책을 추천받았으나 최근에 읽어보게 되었다.<br>백엔드 개발자로 일하면서 프론트 엔드 개발자와 의사소통을 원활히 하기 위해서는 서로 네트워크에 대한 기본 지식이 있어야하는 것 같다.<br>이 글은 빠르게 목차를 리뷰하며 백엔드에게 필요한 내용인지, 프론트에게 필요한 내용인지, 공통적으로 알아야하는 내용인지 개인적인 기준에서 분류해봤다.  </p><a id="more"></a><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>내가 여태까지 봐왔던 네트워크 계층 설명글들은 대부분 <a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95" rel="external nofollow noopener noreferrer" target="_blank">OSI 7 Layer</a>를 기준으로 설명을 풀어나가고 있다.<br>OSI 7 Layer는 각 계층이 하는 역할이 명확해서 설명하기가 명쾌하다.<br>하지만 이론과 현실 사이의 괴리감이랄까… OSI 7 Layer는 구현하기가 복잡하거나, 성능 등등의 이슈(굳이 여러 계층으로 쪼갤 필요 없이 하나의 장비가 여러 역할을 수행하는 게 더 나을 때도 있으므로)로 인해<br>실제 구현된 건 대부분 4계층으로 구성된 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%84%B7_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C_%EC%8A%A4%EC%9C%84%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">TCP/IP Stack</a>으로 구현이 많이 돼있다.<br>이 책은 신기하게도 TCP/IP Stack에 기반해서 각 계층의 역할을 설명하고 있다.<br>따라서 진짜 구현된 모델에 대한 이해를 증진시키는 데는 좋은 것 같으나 당장 <a href="https://aws.amazon.com/" rel="external nofollow noopener noreferrer" target="_blank">AWS</a>나 다른 글들을 보면 L4니 L2니 L7이니 해서 OSI 7 Layer로 설명된 글들이 많아서<br>OSI 7 Layer와 책에 설명된 TCP/IP Stack을 매핑시켜 이해하기 위해 책 앞 부분을 많이 왔다갔다 해야하는 단점이 존재하는 것 같다.  </p><p>또한 책이 TCP/IP Stack에 대한 전반적인 내용을 200페이지도 안 되는 분량으로 녹여내다보니 전반적인 흐름을 알기는 좋으나<br>각각의 계층에 대해 딥하게는 다루지 않고, 그림도 아기자기 잘 설명돼있어서(+풀컬러) 입문 서적으로 좋은 것 같다.<br>각 목차 뒤에 F(ront), B(ack)을 적어놨으니 자신의 직군에 맞춰 딥하게 볼지 그냥 흐름만 볼지, 아예 안 볼지 판단하길 바란다.  </p><p>예를 들면 프론트는 클라이언트 측에 웹서비스를 제공해주는 일을 하는데 그 중에서 서버가 제공해주는 API로 통신을 해서 데이터를 땡겨와야 한다.<br>웹서비스를 제공하기 위해서는 HTTP(S) 프로토콜을 사용하고, 서버의 API와 통신할 때도 HTTP(S)로 통신을 한다.<br>HTTP 프로토콜은 정보 공유를 위해 만들어진 프로토콜이므로 엄청난 수의 클라이언트가 접속하게 된다.<br>통신을 위한 통로에 수십만명이 한 번에 들어오게 끔 하면 가능한지도 모르겠고, 매번 그 만큼의 사람이 들어오는 것도 아니고, 비용 낭비도 엄청날 것이다.<br>따라서 통신을 위한 통로를 독점하는 게 아니라 항상 연결을 맺고 끊어서 다른 사람들이 원활하게 접속을 하게 해준다.<br>예를 들면 이 통로를 통해서는 동시에 100명만 들어올 수 있게 만들고 나한테 볼 일이 끝난 애들은 다 연결을 끊는 것이다.(사실 이런 설정은 백엔드가 한다.)<br>이 때 연결을 위해 사용하는 프로토콜이 TCP 프로토콜이다. (UDP 프로토콜도 있지만 웹 서비스 내에서는 대부분 데이터를 손실없이 전달해주는 TCP 프로토콜을 사용한다.)<br>따라서 프론트 엔드 개발자라면 HTTP 프로토콜은 물론이고 TCP 프로토콜까지 알아야 어떻게 하면 통신을 최적화 할 수 있을지 생각할 수 있게 된다.</p><p>백엔드의 경우에는 HTTP(S), TCP 프로토콜만 안다고 해서 끝나는 게 아니다.<br>SSH 프로토콜을 이용해서 서버에 원격으로 붙어서 명령어를 날리기도 하고, FTP 프로토콜을 이용해서 파일 업로드/다운로드가 가능한 서버를 설계해야할 수도 있기 때문이다.<br>SSH 프로토콜을 사용하려면 여러 인증 방식 중에 키로 인증하는 방식이 있는데 그럼 공개키, 비공개키, 대칭키, 비대칭키 막 이런 내용이 나오는데 이런 보안적인 요소도 알아야한다.<br>이 내용은 HTTPS에 사용되는 TLS 인증서의 암호화 방식에도 적용된다.<br>또한 동영상 스트리밍 서버를 만든다고 하면 UDP 프로토콜을 사용한다.<br>기본적으로 TCP 프로토콜은 해주는 일이 많으므로(데이터 전송에 실패하면 재전송 처리 등등) 성능이 안 받쳐주는데<br>UDP 프로토콜(보내기만 할 뿐, 잘 받았는지 확인을 하지 않는다. 그래서 가끔 동영상이 깨져서 나오는 현상들이 나온다.<br>하지만 크리티컬한 이슈는 아니고 매번 똑같은 부분에서 동영상이 깨져나오는 게 아니고 네트워크 상황에 따라 달라지기 때문이다.)은 그거보다 성능이 낫기 때문이다.<br>또한 AWS를 사용하다보면 그 아랫단인 IP/Router/Subnet Mask 등등의 영역도 잘 알아야한다.<br>보안을 위해 외부에서 접근이 가능한 요소(다양한 요청을 분산해주는 로드 밸런서)와 내부에서만 접근이 가능한 요소(웹서버, DB 등등)을 구성해야하는데…<br>그러면 네트워크를 어떻게 구성해야할 것이며, 이 네트워크 안에 서버는 몇 대를 둘 것이며, 퍼블릭 요소들과 프라이빗 요소들은 어떻게 통신을 할 것이며<br>어떤 요청들을 받고 말지 네트워크부터 보안에 대한 요소들을 직접 다뤄야하는 경우가 오는데 이럴 때 이 내용들을 알고 있으면 정말 무릎을 탁 치게 되는 날이 온다.  </p><p>더 아랫단이나 부가적인 요소들은 알면 +@, 몰라도 그만인 것 같은데 호기심이 충만하면 알고 싶을 것이다.<br>위에서 설명하지 않은 모뎀, 이더넷 카드, 랜선 등등은 사실 하드웨어 단으로 내려가는 거니 백엔드가 굳이 알 필요가 있나 싶다.(물론 알면 좋다.)<br>또한 데이터 전송에 실패했을 때 어떤 전략으로 재전송시킬 것인지(어플리케이션 단이 아닌 하드웨어 단에서 패킷을 처음부터 전송할 건지, 실패한 부분을 알아내서 그거부터 전송할 것인지)<br>이런 내용들은 내가 봤을 때는 굳이 알 필요가 있나 싶은데 분명 알아두면 어딘가는 써먹을 일이 있을테니 공부해둬야할 것 같긴 하다.</p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="/2018/03/30/tcp-ip-book-index/#1장-컴퓨터-네트워크">컴퓨터 네트워크</a></li><li><a href="/2018/03/31/tcp-ip-book-index-2/#2장-네트워크-서비스와-애플리케이션-계층">네트워크 서비스와 애플리케이션 계층</a></li><li><a href="#3장-트랜스포트-계층">트랜스포트 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-4/#4장-라우팅과-인터넷-계층">라우팅과 인터넷 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-5/#5장-하드웨어와-네트워크-인터페이스-계층">하드웨어와 네트워크 인터페이스 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-6/#6장-보안">보안</a></li></ol><h2 id="3장-트랜스포트-계층"><a href="#3장-트랜스포트-계층" class="headerlink" title="3장, 트랜스포트 계층"></a>3장, 트랜스포트 계층</h2><p>컴퓨터로 들어온 데이터를 어떤 서비스에게 토스 할 지 포트를 보고 판단한다.<br>트랜스포트 계층에서 사용하는 대표적인 프로토콜은 TCP와 UDP가 있다.<br>OSI 7 Layer에서는 L4(Layer 4)에 해당하며 똑같이 Transport Layer이다.</p><h3 id="3-1-트랜스포트-계층의-역할-F-B"><a href="#3-1-트랜스포트-계층의-역할-F-B" class="headerlink" title="3-1. 트랜스포트 계층의 역할(F/B)"></a>3-1. 트랜스포트 계층의 역할(F/B)</h3><p>컴퓨터에서 수많은 서비스가 돌아간다. (웹서비스, FTP 서비스, 이메일 서비스 등등)<br>근데 어떻게 들어온 데이터를 보고 올바른 서비스에게 보내는지 그 기준이 바로 포트 번호이다.<br>80 포트라면 웹 서비스(HTTP)에게, 443 포트여도 웹 서비스(HTTPS)에게, 21 포트라면 FTP에게 전달한다.<br>하지만 80이고 443이고 그 서비스를 대표하는 포트지 80포트에 내가 FTP 서비스를 열어둘 수도 있다.<br>그냥 디폴트로 설정하는 포트지 꼭 그 포트가 예약돼있는 건 아니다(일부는 시스템에 의해 얘약되는 경우도 있지만).</p><p>그리고 TCP와 UDP의 차이에 대해 설명하고 있는데 TCP는 데이터의 손실 없이 정확하게 전달되도록 설계된 프로토콜이라서<br>서로 전송 속도라던지, 전송하는 크기라던지, 실패의 경우에 재전송이라던지, 바쁘면 잠시 멈추거나 속도나 크기를 줄인다던지 완급 조절이 가능하다.<br>(그렇다고 모든 통신이 성공한다는 보장은 없지만…)<br>UDP는 전송 속도를 위주로 설계된 프로토콜이라 마구잡이로 보낸다(뭐 망나니처럼 보내지는 않겠지만).<br>그래서 중간에 패킷이 유실되는 경우가 발생한다. (음성 통화중 지지직 대거나 동영상을 보는데 화면이 가끔 깨져보인다거나)<br>이런 경우에 이게 그렇게 크리티컬한 오류는 아니지만 전송 속도가 느려서 실시간성이 보장이 안 되는 게 더 크리티컬한 이슈로 판단되기 때문이다.  </p><h3 id="3-2-포트번호-F-B"><a href="#3-2-포트번호-F-B" class="headerlink" title="3-2. 포트번호(F/B)"></a>3-2. 포트번호(F/B)</h3><p>포트 번호는 0<del>65535의 범위 내에서 할당할 수 있는데 0</del>1023은 Well known ports라고 부른다.<br>주요 Well known ports는 아래와 같고 각 서비스별로 대표 포트를 사용하는 경우에는 포트 번호의 생략이 가능하다.</p><ul><li>20 FTP(액티브 모드에서는 데이터 커넥션이고 패시브 모드에서는 다이나믹 포트 내의 랜덤한 포트가 할당되는 것 같다, 파일 주고받기)  </li><li>21 FTP(컨트롤 커넥션, 명령어 날리기)  </li><li>22 SSH, SCP, SFTP  </li><li>23 Telnet  </li><li>24 SMTP  </li><li>53 DNS  </li><li>80 HTTP  </li><li>110 POP3  </li><li>443 HTTPS  </li></ul><p>1024 ~ 49151번 포트는 Registered ports라고 해서 벤더 사에서 붙이는 포트들이다.<br>생각 나는 게 3036 MySQL 뿐이다 ㅠㅠ…<br>ElasticSearch, Logstash, Kibana, Redis, PostgreSQL 등등 각종 어플리케이션에서 쓰이는 기본 포트들이 다 Registered ports에 할당이 되며<br>공식적인 게 아니므로 다른 어플리케이션과 충분히 충돌이 발생할 수 있다.  </p><p>49152 ~ 65535번 포트는 다이나믹 포트라고 해서 대부분 클라이언트 측의 아웃바운드 트래픽에 포트를 할당할 때 쓰인다.<br>아래 시나리오를 상상해보자.  </p><ol><li>웹 브라우저 클라이언트가 웹 서버에 요청을 보낸다.  </li><li>웹 서버가 응답을 보낸다.  </li><li>클라이언트 컴퓨터로 왔는데 클라이언트 컴퓨터에는 다양한 어플리케이션(메일 서비스, 웹 서비스, FTP 서비스 등등)이 실행되고 있다.  </li></ol><p>위 상황에서 어떤 서비스에게 요청에 대한 응답을 보내줘야할까?<br>답은 1번의 과정에서 요청이 네트워크를 타고 밖으로 나갈 때 포트 번호를 달고 나간다.<br>이 때 할당되는 포트가 바로 다이나믹 포트 내에 해당하는 포트가 랜덤하게 붙어서 나간다.<br>HTTP의 경우에는 통신이 끝나면 다른 요청에 대한 연결을 맺기 위해서 이전 연결을 끊기 때문에<br>동일한 서버라 하더라도 매번 다른 포트를 달고 나가게 된다.<br>트랜스포트 계층에서 이제 그 포트를 보고 어떤 서비스에게 데이터를 보낼지 결정한다고 보면 된다.</p><h3 id="3-3-TCP가-정확하게-데이터를-전달하는-방법"><a href="#3-3-TCP가-정확하게-데이터를-전달하는-방법" class="headerlink" title="3-3. TCP가 정확하게 데이터를 전달하는 방법"></a>3-3. TCP가 정확하게 데이터를 전달하는 방법</h3><h4 id="3-3-1-TCP가-하는-일-F-B"><a href="#3-3-1-TCP가-하는-일-F-B" class="headerlink" title="3-3-1. TCP가 하는 일(F/B)"></a>3-3-1. TCP가 하는 일(F/B)</h4><p>통신 속도, 데이터 크기, 서버/클라가 바쁘면 완급 조절 등등을 한다.<br>또한 서버나 클라가 데이터를 못 받았을 때 재전송까지 해준다.  </p><h4 id="3-3-2-TCP-헤더의-구조-B"><a href="#3-3-2-TCP-헤더의-구조-B" class="headerlink" title="3-3-2. TCP 헤더의 구조(B)"></a>3-3-2. TCP 헤더의 구조(B)</h4><p>TCP 헤더에는 송수신지 포트번호, 데이터의 크기, 데이터의 무결성 확인을 위한 정보나<br>데이터 사이즈를 위해서 패딩을 넣기도 한다.<br>대충 이 정도만 알고 넘어가자.  </p><h4 id="3-3-3-컨트롤-비트-B"><a href="#3-3-3-컨트롤-비트-B" class="headerlink" title="3-3-3. 컨트롤 비트(B)"></a>3-3-3. 컨트롤 비트(B)</h4><p>TCP 헤더에 포함돼있으며 통신 상태를 표현하는 플래그이다.<br>전송량을 줄여달라거나 혼잡해서 받을 수 없다거나 이런 정보를 보고 통신 상태를 조절한다.<br>TCP 3Way Handshake에서 SYN, ACK 같은 데이터도 컨트롤 비트 내의 플래그이다.<br>1비트이기 때문에 8가지 플래그가 존재한다.  </p><h3 id="3-3-4-통신-개시부터-통신-종료까지의-흐름-F-B"><a href="#3-3-4-통신-개시부터-통신-종료까지의-흐름-F-B" class="headerlink" title="3-3-4. 통신 개시부터 통신 종료까지의 흐름(F/B)"></a>3-3-4. 통신 개시부터 통신 종료까지의 흐름(F/B)</h3><p>그 유명한 TCP 3Way Handshake를 그림으로 표현했다.<br>UDP에 비하면 3Way Handshake는 오버헤드(쓸 데 없는 행위, 비용 낭비)에 해당한다.<br>하지만 이 3Way handshake를 통해 통신이 가능한 상태인지 알 수 있으므로 안정성 측면에서는 뛰어나다.  </p><p>여담으로 HTTP 1.0 스펙과 HTTP 1.1 스펙과 HTTP 2 스펙을 아래와 같은 시나리오로 비교해보자.</p><p>HTTP 1.0(총 3Way Handshake: 2회, 요청 횟수: 2회)  </p><ol><li>클라이언트에서 index.html 파일을 요청했고 그 안에 이미지 파일이 1개 있다.  </li><li>index.html 파일을 요청하기 위해 클라이언트/서버가 TCP 3 Way Handshake를 한다.  </li><li>연결이 맺어졌으면 요청을 보내고 index.html을 응답 받는다.  </li><li>연결을 끊는다.  </li><li>html을 해석하다보니 이미지 파일이 필요하다.  </li><li>이미지 파일을 요청하기 위해 다시 3way handshake를 한다.  </li><li>연결이 맺어졌으면 요청을 보내고 이미지를 응답받는다.</li><li>연결을 끊는다.</li></ol><p>HTTP 1.1(총 3Way Handshake: 1회, 요청 횟수: 2회)</p><ol><li>클라이언트에서 index.html 파일을 요청했고 그 안에 이미지 파일이 1개 있다.  </li><li>요청을 보낼 때 헤더에 Keep-Alive를 설정해서 타임아웃과 타임아웃 내에서 수행할 수 있는 최대 요청갯수를 지정한다.</li><li>Connection: Keep-Alive;Keep-Alive: timeout=5, max=1000</li><li>위와 같이 HTTP Request Headers에 지정을 했으면 최초 연결 이후 5초동안 이뤄지는 1000번의 요청까지는 연결을 끊지 않는다.  </li><li>index.html 파일을 요청하기 위해 클라이언트/서버가 TCP 3 Way Handshake를 한다.</li><li>연결이 맺어졌으면 요청을 보내고 index.html을 응답 받는다.</li><li>html을 해석하다보니 이미지 파일이 필요하다.</li><li>아직 Keep-Alive에 설정한 5초 이내이고 1000개의 요청을 보낸 적이 없으므로 TCP 커넥션은 아직 끊어져있지 않은 상태니 3 way handshake를 또 할 필요는 없다.</li><li>이미지를 요청하고 응답으로 받는다.</li><li>받을 데이터를 다 받았으므로 TCP 커넥션을 끊는다.  </li></ol><p>HTTP 2(총 3Way Handshake: 1회, 요청 횟수: 1회)</p><ol><li>클라이언트에서 index.html 파일을 요청했고 그 안에 이미지 파일이 1개 있다.</li><li>헤더에 실어 보내는 Connection과 Keep-Alive는 프로토콜 내에서 다른 메카니즘으로 처리되므로 헤더에 실어보낼 필요가 없다.  </li><li>요청을 보내기 전에 TCP 3way handshake로 연결을 확립하고 요청을 보낸다.  </li><li>응답 받을 때 필요한 리소스를 전부 받는다.(이미지 포함)  </li><li>응답 받을 거 다 받았으니까 TCP 커넥션을 끊는다.  </li></ol><h3 id="3-3-5-일련번호와-최대-세그먼트-크기를-사전에-조율한다"><a href="#3-3-5-일련번호와-최대-세그먼트-크기를-사전에-조율한다" class="headerlink" title="3-3-5. 일련번호와 최대 세그먼트 크기를 사전에 조율한다"></a>3-3-5. 일련번호와 최대 세그먼트 크기를 사전에 조율한다</h3><p>TCP의 경우에 클라이언트와 서버 사이에 통신 가능한 세그먼트의 크기(MSS, Max Segment Size)를 정하는 과정을 설명하고 있다.  </p><h3 id="3-3-6-데이터-전송-과정에서-일련번호는-어떻게-변화하나"><a href="#3-3-6-데이터-전송-과정에서-일련번호는-어떻게-변화하나" class="headerlink" title="3-3-6. 데이터 전송 과정에서 일련번호는 어떻게 변화하나?"></a>3-3-6. 데이터 전송 과정에서 일련번호는 어떻게 변화하나?</h3><p>주고 받은 Segment Size에 따라 Sequence Number(일련 번호)가 증가한다.<br>기본적으로 Sequence Number와 확인 응답번호(acknowledge number)는 커넥션을 맺는 과정에서 1로 세팅된다.<br>그리고 내가 서버로 보내면 세그먼트 사이즈만큼 시퀀스 넘버가 올라간다.<br>그러면 서버는 정상적으로 요청을 받았다면 응답번호를 세그먼트 사이즈만큼 올린다.<br>그리고 다시 서버는 클라이언트로 요청을 보내는데 응답을 보내는 세그먼트 사이즈만큼 다시 서버측 시퀀스 넘버를 증가시킨다.<br>그 응답을 받은 클라이언트는 응답받은 세그먼트 사이즈만큼 확인 응답번호를 올린다.<br>이렇게 서버/클라이언트 측은 요청/응답 받은 TCP 헤더를 까서 상대 쪽에서 보낸 응답 번호와 자신의 시퀀스 넘버를 확인해서 일치하면<br>제대로 통신이 이루어졌다고 판단하고 아니라면 통신이 제대로 이뤄지지 않았으므로 에러 처리를 어떻게든 하는 것 같다.<br>정확하게 어떻게 하는지는 모르겠다.      </p><h3 id="3-3-7-송신-실패-여부를-판단한다"><a href="#3-3-7-송신-실패-여부를-판단한다" class="headerlink" title="3-3-7. 송신 실패 여부를 판단한다."></a>3-3-7. 송신 실패 여부를 판단한다.</h3><p>소프트웨어 단에서 재전송 처리가 아닌 하드웨어 단에서 재전송 전략을 간단하게 설명하고 있다.<br>가장 간단한 전략으로 데이터를 받으면 잘 받았다고 상대방에게 응답을 보내줘야하는데 내가 데이터 보냈는데<br>상대는 받은 적이 없으니 응답이 오는 게 없다.<br>따라서 일정시간이 지나도 응답이 오지 않으면 재전송한다는 그런 얘기다.</p><h3 id="3-3-8-연속된-데이터를-몰아서-보내면-전송-속도가-빨라진다"><a href="#3-3-8-연속된-데이터를-몰아서-보내면-전송-속도가-빨라진다" class="headerlink" title="3-3-8. 연속된 데이터를 몰아서 보내면 전송 속도가 빨라진다."></a>3-3-8. 연속된 데이터를 몰아서 보내면 전송 속도가 빨라진다.</h3><p>요청 보내고 상대방이 보내주는 응답번호 일일이 기다리면서 그 다음에 데이터를 전송하면 안정성 측면에선 좋지만<br>성능 측면에서는 그닥 좋지 않다.<br>따라서 응답번호를 일일이 기다리지 않고 MSS만 정하고 세그먼트를 계속해서 날리고 확인 응답번호가 어떻게 오는지에 따라서<br>어떤 세그먼트부터 재전송할지 파악하면 된다.</p><h3 id="3-3-9-한번에-받을-수-있는-데이터-크기를-통보한다"><a href="#3-3-9-한번에-받을-수-있는-데이터-크기를-통보한다" class="headerlink" title="3-3-9. 한번에 받을 수 있는 데이터 크기를 통보한다."></a>3-3-9. 한번에 받을 수 있는 데이터 크기를 통보한다.</h3><p>위에 연속된 데이터를 몰아서 보내면 전송 속도가 빨라지는 장점이 있지만<br>너무 몰아서 많이 보내다보면 서버가 바쁘면 데이터를 제대로 처리하지 못할 수도 있으므로<br>서버 측에는 버퍼를 두고 그 버퍼에 모아두고 처리한다.<br>이때 이 버퍼 사이즈는 TCP 헤더의 윈도우 사이즈 필드에 설정해서 데이터를 보내는 측(송신 측)에 통보를 하면<br>송신 측은 아 MSS는 얼마고 윈도우 사이즈는 얼마니 최대 몇 개를 몰아서 보내면 될지 계산해서 적당히 보내게 된다.  </p><h3 id="3-3-10-한-번에-받아낼-수-있는-데이터-양을-조절한다"><a href="#3-3-10-한-번에-받아낼-수-있는-데이터-양을-조절한다" class="headerlink" title="3-3-10. 한 번에 받아낼 수 있는 데이터 양을 조절한다."></a>3-3-10. 한 번에 받아낼 수 있는 데이터 양을 조절한다.</h3><p>수신 측은 받은 패킷들을 버퍼에 쌓아두면서 버퍼에 쌓인 데이터를 동시에 순차적으로 처리한다.<br>근데 보내주는 애가 엄청 빨리 보내고 받는 애는 그걸 처리할 능력이 되지 않을 수 있으니<br>보내는 애한테 현재 윈도우 사이즈(수용 가능한 버퍼 사이즈)를 수시로 알려준다.<br>이 과정을 흐름 제어(Flow Control)이라고 한다.  </p><h3 id="3-3-11-버퍼가-가득-찬-경우"><a href="#3-3-11-버퍼가-가득-찬-경우" class="headerlink" title="3-3-11. 버퍼가 가득 찬 경우"></a>3-3-11. 버퍼가 가득 찬 경우</h3><p>윈도우 사이즈가 0이면 윈도우 사이즈 0이라는 세그먼트와 함께 윈도우 프로브(Window Probe)라는 패킷을 응답한다.<br>이 응답을 받으면 송신 측은 요청을 중단하고, 전송 재개 시점을 알기 위해 수신 측에 윈도우 프로브 패킷을 보내서 윈도우 사이즈를 알아낸다.<br>윈도우 사이즈가 빈 공간이 생기면 그 때부터 다시 전송을 재개한다.  </p><h3 id="3-3-12-네트워크의-혼잡-상태를-확인한다"><a href="#3-3-12-네트워크의-혼잡-상태를-확인한다" class="headerlink" title="3-3-12. 네트워크의 혼잡 상태를 확인한다."></a>3-3-12. 네트워크의 혼잡 상태를 확인한다.</h3><p>버퍼에 여유 공간이 있어서 윈도우 사이즈가 0이 아니어도 그 아랫단인 인터넷 계층이나 네트워크 인터페이스 계층이 혼잡한 경우도 있다.<br>이러한 경우에도 정상적인 통신이 불가능하므로 인터넷 계층의 패킷에서 헤더에 혼잡 플래그를 ON으로 달린 패킷이 넘어오게 된다.<br>이 패킷을 받은 수신측은 송신측에게 컨트롤 비트에 ECE(통신 경로가 혼잡해서 수신할 수 없을 수도 있다) 플래그를 붙여서 응답을 해준다.<br>그러면 송신측은 컨트롤 비트에 CWR(통신 경로가 혼잡해서 전송량을 줄이겠다) 플래그를 붙여서 패킷을 보내면서 통신 속도도 더불여 낮추게 된다.  </p><p>중간에 누락된 패킷을 재전송하는 전략에는 여러가지가 있다.<br>전송 속도를 높이기 위해 데이터를 연속해서 보내다보니 응답으로 온 응답번호와 내가 보낸 시퀀스 넘버가 일치하지 않아서 데이터 전송에 실패했다는 것을 깨달았으면<br>패킷 재전송 시도를 해야하는데 가장 간단한 거는 처음부터 다시 보내는 건데 효율이 매우 떨어진다.<br>아니면 그 다음으로 쉬운 방법은 시퀀스 넘버와 응답번호의 싱크가 깨진 패킷부터 다시 보내면 되는 전략이 있다.<br>그 다음 전략은 누락된 패킷이 뭔지만 캐치해서 보내는 전략이 있는데 이를 SACK(Selective ACKnowledgement, 선택적 확인 응답)이라고 부른다.<br>아래로 갈 수록 효율은 좋지만 비용(복잡도나 수행을 하기 위한 성능 등등)이 많이 드는 점도 있고 해서 절충안을 마련해야하는데 하드웨어가 짱짱해지면 이 정도 비용은 껌이 되는 시대가 올 것이다.</p><h3 id="3-4-UDP가-고속으로-데이터를-전달하는-방법-B"><a href="#3-4-UDP가-고속으로-데이터를-전달하는-방법-B" class="headerlink" title="3-4. UDP가 고속으로 데이터를 전달하는 방법(B)"></a>3-4. UDP가 고속으로 데이터를 전달하는 방법(B)</h3><p>UDP는 TCP에 비해 상당히 간단한 프로토콜이다.<br>위의 TCP가 했던 흐름 제어(윈도우 사이즈를 수시로 주고받는 과정), 실패한 패킷 재전송, MSS 정하기, 네트워크 혼잡 상태 파악, 3way handshake 등등이 UDP에서는 무의미해진다.<br>왜냐하면 안 하기 때문이다.<br>그냥 빠르게 보내는 데에만 열중하게 된다.<br>실시간성이 중요한 음성/영상 프로토콜에 많이 쓰인다.<br>음성/영상 같은 경우에는 가끔 데이터 손실(왜곡)이 있어서 지지직 대거나 화면이 조금 깨져도 크리티컬한 문제는 아니다.<br>따라서 헤더도 TCP에 비하면 매우 간단하다.  </p><p>하지만 UDP의 성능을 유지하면서 TCP와 같은 신뢰도를 보장하고 싶은 그런 케이스도 존재한다.<br>이런 경우에는 트랜스포트 계층에서는 UDP 프로토콜을 쓰지만, 애플리케이션 계층에서 흐름제어나 재전송 등등의 TCP의 역할을 어플리케이션 레벨에서 처리하기도 한다.  </p><p>여기서 브로드캐스트와 멀티캐스트라는 중요한 개념이 등장한다.<br>브로드캐스트는 네트워크에 속한 모든 호스트(컴퓨터와 같은 기기)에게 알림을 전파?하는 개념이다.<br>예를 들면 공유기에 새로운 PC를 연결했을 때 사설 IP를 할당받아야하는데 어떤 IP가 비어있는지 모르니까<br>모든 호스트를 다 찌르면서(브로드캐스팅을 해서) IP 주소를 알아내고 비어있는 IP를 알아내야할 때 브로드캐스트가 쓰인다.<br>네트워크에 속한 호스트들은 거부 권한이 없다고 한다. (불쌍한 놈들 ㅠㅠ)<br>거부 권한이 없기 때문에 브로드캐스트 트래픽을 받은 애들은 일제히 하던 일을 중단하고 브로드캐스팅에 집중해서 본인에게 유익한 정보인지 파악한다. (마치 인터럽트 당하듯이)<br>그리고 본인에게 해당되는 정보가 없으면 하던 일을 마저하고, 자신에게 해당되는 내용이면 그에 맞게 처리를 한다.<br>브로드캐스트는 네트워크 전체에게 트래픽을 보내는 것으로 네트워크를 혼잡하게 할 뿐 아니라 수신측의 성능 저하도 유발한다.</p><p>멀티캐스트는 네트워크 내의 특정 그룹에게만 데이터를 전송해야할 때 쓰는 방법이다.<br>브로드캐스트로 전부 다한테 공지하려면 보안에 민감한 정보도 있을테고 오버헤드도 심하기 때문에 이런 방식을 쓴다.<br>멀티캐스트로 그룹을 나누는 방법은 IP 클래스 중에 D 클래스를 이용하면 된다고 한다.<br>브로드캐스트와는 달리 본인의 의지로 SUBSCRIBE 할 수 있으며 구독 해지도 할 수 있다.</p><p>그리고 책에는 나오지 않지만 유니캐스트(Unicast)라는 개념 또한 중요하다.<br>유니캐스트는 상대방의 물리 주소(Physical Address, 네트워크 상에서는 MAC(Media Access Control) Address를 의미한다.)를 통해 1:1 통신하는 걸 의미 한다.<br>대부분의 통신 방식이 유니캐스트 방식으로 진행된다.<br>본인의 MAC Address와 일치하지 않는 패킷은 바로 버리면 되고 CPU까지 올라오지도 않으므로 PC 성능에 영향을 미치지 않는다.  </p><p>아래 링크들을 보면 도움이 많이 된다.  </p><ul><li><a href="http://bongsnet.tistory.com/15" rel="external nofollow noopener noreferrer" target="_blank">삽질 왕국 :: ③ 유니캐스트, 브로드캐스트, 멀티캐스트</a>  </li><li><a href="http://blog.daum.net/ossogood/8435529" rel="external nofollow noopener noreferrer" target="_blank">유니캐스트 VS 브로드캐스트 VS 멀티캐스트</a>  </li></ul><h3 id="3-5-netstat-명령으로-네트워크의-상태-확인하기-B"><a href="#3-5-netstat-명령으로-네트워크의-상태-확인하기-B" class="headerlink" title="3-5. netstat 명령으로 네트워크의 상태 확인하기(B)"></a>3-5. netstat 명령으로 네트워크의 상태 확인하기(B)</h3><p>netstat 명령어로 서버와 커넥션이 제대로 맺어졌는지 어떤 상태인지 알 수 있다는 내용이다.<br>만약 8080 포트 서버가 제대로 떠있는지 확인하고 싶다면 <code>netstat -na | grep 8080</code>을 입력하면 네트워크의 연결 상태들을 볼 수 있다.<br>만약 해당 서버를 죽이고 싶다면 <code>lsof -i:8080</code> 명령어로 어떤 프로세스가 해당 포트를 물고있는지 보고 <code>kill -9 PID</code> 명령어(PID는 프로세스 ID)로 죽여버리면 된다.  </p><p>책 마지막 부분에 패킷 캡처 도구로 Wireshark가 나오는데 크롬 개발자 도구를 쓸 수 없는 상황이나 크롬 개발자 도구에서 보이는 것보다<br>더 아랫단의 패킷이나 실제 데이터 통신이 어떻게 되고 있는지 디버깅 하고 싶다면 이 툴을 쓰면 된다.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(네트워크) TCP/IP 쉽게, 더 쉽게 목차 리뷰 - 2장 네트워크 서비스와 애플리케이션 계층</title>
      <link href="/2018/03/31/tcp-ip-book-index-2/"/>
      <url>/2018/03/31/tcp-ip-book-index-2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/tcp-ip-book-index-2/thumb.png" alt=""><br>오래전에 이 책을 추천받았으나 최근에 읽어보게 되었다.<br>백엔드 개발자로 일하면서 프론트 엔드 개발자와 의사소통을 원활히 하기 위해서는 서로 네트워크에 대한 기본 지식이 있어야하는 것 같다.<br>이 글은 빠르게 목차를 리뷰하며 백엔드에게 필요한 내용인지, 프론트에게 필요한 내용인지, 공통적으로 알아야하는 내용인지 개인적인 기준에서 분류해봤다.  </p><a id="more"></a><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>내가 여태까지 봐왔던 네트워크 계층 설명글들은 대부분 <a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95" rel="external nofollow noopener noreferrer" target="_blank">OSI 7 Layer</a>를 기준으로 설명을 풀어나가고 있다.<br>OSI 7 Layer는 각 계층이 하는 역할이 명확해서 설명하기가 명쾌하다.<br>하지만 이론과 현실 사이의 괴리감이랄까… OSI 7 Layer는 구현하기가 복잡하거나, 성능 등등의 이슈(굳이 여러 계층으로 쪼갤 필요 없이 하나의 장비가 여러 역할을 수행하는 게 더 나을 때도 있으므로)로 인해<br>실제 구현된 건 대부분 4계층으로 구성된 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%84%B7_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C_%EC%8A%A4%EC%9C%84%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">TCP/IP Stack</a>으로 구현이 많이 돼있다.<br>이 책은 신기하게도 TCP/IP Stack에 기반해서 각 계층의 역할을 설명하고 있다.<br>따라서 진짜 구현된 모델에 대한 이해를 증진시키는 데는 좋은 것 같으나 당장 <a href="https://aws.amazon.com/" rel="external nofollow noopener noreferrer" target="_blank">AWS</a>나 다른 글들을 보면 L4니 L2니 L7이니 해서 OSI 7 Layer로 설명된 글들이 많아서<br>OSI 7 Layer와 책에 설명된 TCP/IP Stack을 매핑시켜 이해하기 위해 책 앞 부분을 많이 왔다갔다 해야하는 단점이 존재하는 것 같다.  </p><p>또한 책이 TCP/IP Stack에 대한 전반적인 내용을 200페이지도 안 되는 분량으로 녹여내다보니 전반적인 흐름을 알기는 좋으나<br>각각의 계층에 대해 딥하게는 다루지 않고, 그림도 아기자기 잘 설명돼있어서(+풀컬러) 입문 서적으로 좋은 것 같다.<br>각 목차 뒤에 F(ront), B(ack)을 적어놨으니 자신의 직군에 맞춰 딥하게 볼지 그냥 흐름만 볼지, 아예 안 볼지 판단하길 바란다.  </p><p>예를 들면 프론트는 클라이언트 측에 웹서비스를 제공해주는 일을 하는데 그 중에서 서버가 제공해주는 API로 통신을 해서 데이터를 땡겨와야 한다.<br>웹서비스를 제공하기 위해서는 HTTP(S) 프로토콜을 사용하고, 서버의 API와 통신할 때도 HTTP(S)로 통신을 한다.<br>HTTP 프로토콜은 정보 공유를 위해 만들어진 프로토콜이므로 엄청난 수의 클라이언트가 접속하게 된다.<br>통신을 위한 통로에 수십만명이 한 번에 들어오게 끔 하면 가능한지도 모르겠고, 매번 그 만큼의 사람이 들어오는 것도 아니고, 비용 낭비도 엄청날 것이다.<br>따라서 통신을 위한 통로를 독점하는 게 아니라 항상 연결을 맺고 끊어서 다른 사람들이 원활하게 접속을 하게 해준다.<br>예를 들면 이 통로를 통해서는 동시에 100명만 들어올 수 있게 만들고 나한테 볼 일이 끝난 애들은 다 연결을 끊는 것이다.(사실 이런 설정은 백엔드가 한다.)<br>이 때 연결을 위해 사용하는 프로토콜이 TCP 프로토콜이다. (UDP 프로토콜도 있지만 웹 서비스 내에서는 대부분 데이터를 손실없이 전달해주는 TCP 프로토콜을 사용한다.)<br>따라서 프론트 엔드 개발자라면 HTTP 프로토콜은 물론이고 TCP 프로토콜까지 알아야 어떻게 하면 통신을 최적화 할 수 있을지 생각할 수 있게 된다.</p><p>백엔드의 경우에는 HTTP(S), TCP 프로토콜만 안다고 해서 끝나는 게 아니다.<br>SSH 프로토콜을 이용해서 서버에 원격으로 붙어서 명령어를 날리기도 하고, FTP 프로토콜을 이용해서 파일 업로드/다운로드가 가능한 서버를 설계해야할 수도 있기 때문이다.<br>SSH 프로토콜을 사용하려면 여러 인증 방식 중에 키로 인증하는 방식이 있는데 그럼 공개키, 비공개키, 대칭키, 비대칭키 막 이런 내용이 나오는데 이런 보안적인 요소도 알아야한다.<br>이 내용은 HTTPS에 사용되는 TLS 인증서의 암호화 방식에도 적용된다.<br>또한 동영상 스트리밍 서버를 만든다고 하면 UDP 프로토콜을 사용한다.<br>기본적으로 TCP 프로토콜은 해주는 일이 많으므로(데이터 전송에 실패하면 재전송 처리 등등) 성능이 안 받쳐주는데<br>UDP 프로토콜(보내기만 할 뿐, 잘 받았는지 확인을 하지 않는다. 그래서 가끔 동영상이 깨져서 나오는 현상들이 나온다.<br>하지만 크리티컬한 이슈는 아니고 매번 똑같은 부분에서 동영상이 깨져나오는 게 아니고 네트워크 상황에 따라 달라지기 때문이다.)은 그거보다 성능이 낫기 때문이다.<br>또한 AWS를 사용하다보면 그 아랫단인 IP/Router/Subnet Mask 등등의 영역도 잘 알아야한다.<br>보안을 위해 외부에서 접근이 가능한 요소(다양한 요청을 분산해주는 로드 밸런서)와 내부에서만 접근이 가능한 요소(웹서버, DB 등등)을 구성해야하는데…<br>그러면 네트워크를 어떻게 구성해야할 것이며, 이 네트워크 안에 서버는 몇 대를 둘 것이며, 퍼블릭 요소들과 프라이빗 요소들은 어떻게 통신을 할 것이며<br>어떤 요청들을 받고 말지 네트워크부터 보안에 대한 요소들을 직접 다뤄야하는 경우가 오는데 이럴 때 이 내용들을 알고 있으면 정말 무릎을 탁 치게 되는 날이 온다.  </p><p>더 아랫단이나 부가적인 요소들은 알면 +@, 몰라도 그만인 것 같은데 호기심이 충만하면 알고 싶을 것이다.<br>위에서 설명하지 않은 모뎀, 이더넷 카드, 랜선 등등은 사실 하드웨어 단으로 내려가는 거니 백엔드가 굳이 알 필요가 있나 싶다.(물론 알면 좋다.)<br>또한 데이터 전송에 실패했을 때 어떤 전략으로 재전송시킬 것인지(어플리케이션 단이 아닌 하드웨어 단에서 패킷을 처음부터 전송할 건지, 실패한 부분을 알아내서 그거부터 전송할 것인지)<br>이런 내용들은 내가 봤을 때는 굳이 알 필요가 있나 싶은데 분명 알아두면 어딘가는 써먹을 일이 있을테니 공부해둬야할 것 같긴 하다.</p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="/2018/03/30/tcp-ip-book-index/#1장-컴퓨터-네트워크">컴퓨터 네트워크</a></li><li><a href="#2장-네트워크-서비스와-애플리케이션-계층">네트워크 서비스와 애플리케이션 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-3/#3장-트랜스포트-계층">트랜스포트 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-4/#4장-라우팅과-인터넷-계층">라우팅과 인터넷 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-5/#5장-하드웨어와-네트워크-인터페이스-계층">하드웨어와 네트워크 인터페이스 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-6/#6장-보안">보안</a></li></ol><h2 id="2장-네트워크-서비스와-애플리케이션-계층"><a href="#2장-네트워크-서비스와-애플리케이션-계층" class="headerlink" title="2장, 네트워크 서비스와 애플리케이션 계층"></a>2장, 네트워크 서비스와 애플리케이션 계층</h2><p>애플리케이션 계층은 TCP/IP 스택의 최상단으로 사용자가 직접 체감을 느끼는 구간이고 프론트 개발자와 가장 밀접하다.<br>바로 HTTP(S) 프로토콜이 속해있으니 이 부분은 집중해서 봐야한다.<br>프론트가 알아야한다면 백엔드는 당연히 알아야한다.<br>OSI 7 Layer 기준으로는 L7(Application Layer), L6(Presentation Layer), L5(Session Layer)에 해당한다.</p><h3 id="2-1-애플리케이션-계층의-역할-F-B"><a href="#2-1-애플리케이션-계층의-역할-F-B" class="headerlink" title="2-1. 애플리케이션 계층의 역할(F/B)"></a>2-1. 애플리케이션 계층의 역할(F/B)</h3><p>애플리케이션 계층의 패킷에는 다양한 내용들이 들어갈테지만 핵심적인 건 데이터(html 소스 코드 등등)이 여기서 실리게 된다.<br>어떤 <strong>데이터</strong>를 실어서 서버/클라이언트가 통신할지 여기서 결정되는 것이다.<br>HTTP 프로토콜 외에도 아래와 같은 애가 있다.  </p><ul><li>파일의 전송을 위한 (S)FTP((Secure) File Transfer Protocol)  </li><li>원격지의 서버를 제어하는 SSH(Secure SHell)</li><li>메일 서버 관련된 POP3, SMTP, IMAP 등등이 존재  </li></ul><p>시스템 내부적으로 사용하는 것 중에는 아래와 같은 것들이 있다.  </p><ul><li>ip ↔ domain(<a href="http://www.naver.com" rel="external nofollow noopener noreferrer" target="_blank">www.naver.com</a> 같은 애) 역할을 하는 DNS(Domain Name System, 얘의 대표 포트가 53번 포트라 AWS에서 도메인 등록하는 서비스를 Route53이라고 지었다.)  </li><li>ip를 할당해주는 DHCP(Dynamic Host Configuration Protocol)  </li><li>데이터를 암호화 할 때 쓰이는 SSL/TLS(Secure Sockets Layer/Transport Layer Security), HTTPS와 SFTP, SSH 프로토콜에서 데이터 암/복호화 할 때 사용된다.  </li></ul><h3 id="2-2-웹-페이지를-전송하는-HTTP-F-B"><a href="#2-2-웹-페이지를-전송하는-HTTP-F-B" class="headerlink" title="2-2. 웹 페이지를 전송하는 HTTP(F/B)"></a>2-2. 웹 페이지를 전송하는 HTTP(F/B)</h3><p>웹 페이지가 표시되는 과정이나 HTTP 메시지가 어떤 식으로 구성돼있는지 설명하고 있다.<br>URL에 대한 설명과 HTTP 헤더, 바디, 요청과 응답, 그리고 status code에 대해서도 설명해주고 있다.  </p><h3 id="2-3-웹-서비스와-웹-애플리케이션-F-B"><a href="#2-3-웹-서비스와-웹-애플리케이션-F-B" class="headerlink" title="2-3. 웹 서비스와 웹 애플리케이션(F/B)"></a>2-3. 웹 서비스와 웹 애플리케이션(F/B)</h3><p>웹 서비스/어플리케이션이 뭐고 서로 어떻게 정보를 교환하는지 설명하고 있다.<br>사용성도 높여주고 서버의 부담을 줄여주는(html 전체를 내려주는 게 아니라 필요한 애만 내려주면 되니까) ajax에 대한 간단한 설명,<br>GET/POST 메소드의 차이에 대해 알려주고 있다.<br>학부 시절에 GET은 URL에 요청의 내용이 노출되니 보안에 민감하지 않은 정보인 검색이나 게시판 페이지 등등에 쓰이고 URL 길이에 제약이 있다고 배웠는데 면접에서 이렇게 답변하면 탈탈 털릴 것이다.<br>URL은 리소스의 경로를 나타내는 것이지 비밀번호, ID와 같은 정보는 리소스라고 보기에는 애매~한 것 같다.<br>따라서 로그인 같은 건 POST를 사용한다.<br>또한 POST라고 보안에 좋은 게 아니다.(패킷 캡쳐하면 다 보인다.)<br>POST는 리퀘스트에 Body(json이나 파일 전송에 쓰이는 multipart/form-data 등등)을 실어 보낼 때 쓰기도 하고,<br>GET은 URL 입력만으로 요청이 전송되기 때문에 혹시나 유저가 실수로 URL을 입력할 수도 있으므로 데이터의 변경이 일어나는 작업은 웬만해서는(조회수를 늘리는 경우 등등 빼고) GET으로 하면 안 된다.<br>또한 GET과 POST를 설명하려면 다른 HTTP Method인 PUT, DELETE, FETCH, OPTION 등등과 REST(FUL) API를 접목시켜서 설명해야하는데 책에서는 딱히 설명하고 있진 않다.</p><h3 id="2-4-세션을-유지하기-위한-쿠키-F-B"><a href="#2-4-세션을-유지하기-위한-쿠키-F-B" class="headerlink" title="2-4. 세션을 유지하기 위한 쿠키(F/B)"></a>2-4. 세션을 유지하기 위한 쿠키(F/B)</h3><p>세션은 뭘까?<br>일반적으로 세션은 <strong>허용된 유저가 리소스 사용하는 걸 허락하게 해주는 기간</strong>이라고 보면 된다.<br>세션은 API 마냥 어디에서 쓰이느냐에 따라 아주 다양한 의미를 가지지만 HTTP 프로토콜 내에서 위에 설명한 세션을 접목시켜보자면  </p><ol><li>유저가 로그인을 한다.  </li><li>서버에서는 로그인에 성공하면 세션(A라는 유저는 2099년 1월 30일까지 로그인을 해야하만 하는 리소스에 접근이 가능하다는 정보를 담고 있는 파일)을 서버에 저장한다.  </li></ol><p>여기까지가 세션이 생성되는 과정이다.<br>하지만 HTTP 프로토콜은 무상태 프로토콜(Stateless protocol)이라서 세션에 대한 정보를 통신에 실어 보내지 않는다. </p><p>그렇다면 무상태 프로토콜은 무엇이며 왜 쓸까?<br>동일한 유저가 보낸 이전 요청과 다음 요청에 대한 상태(세션)을 가지지 않는 프로토콜을 말한다.<br>즉 세션이 없기 때문에 요놈이 로그인 한 상태인지 아닌지 모르게 된다는 말이다.<br>장점으로는 서버의 설계가 단순해진다고 한다. (여기서 말하는 서버가 백엔드가 개발하는 서버를 말하는 건지 다른 서버를 말하는 건지 모르겠다. 아마 내부적으로 알아서들 처리해주기 때문에 내가 잘 모르는 거일 수도 있다.)  </p><p>그럼 HTTP 프로토콜에서는 세션을 어떻게 유지할까?(로그인 상태를 어떻게 유지할까?)<br>바로 쿠키라는 것을 통해서 유지한다.<br>쿠키에다가 세션에 대한 ID를 보내주고 매번 통신할 때마다 클라이언트는 서버로 쿠키를 보낸다.<br>서버는 해당 쿠키로 유저를 식별하므로 쿠키가 탈취당하면 해킹을 당했다고 보면 된다. (이걸 보완한 방법도 있는데 아직 이건 공부를 안 했다.)<br>또한 로그인이 필요치 않은 단순 이미지 파일 요청에 대해서도 요청에 쿠키를 실어 보내기 때문에 쿠키는 세션 유지에 필요한 최소한의 정보만 담고 있는 게 좋은 것 같다.  </p><h3 id="2-5-이메일-B"><a href="#2-5-이메일-B" class="headerlink" title="2-5. 이메일(B)"></a>2-5. 이메일(B)</h3><p>사실 메일 서비스를 구현해보지 않고 항상 써드파티들을 이용하다보니 크게 ~ 와닿지는 않았다.<br>하지만 메일을 보내는 프로토콜(SMTP, Simple Mail Transfer Protocol)과 메일을 받는 프로토콜(POP, Post Office Protocol)이 따로 있다는 사실은 신기했다.  </p><h3 id="2-6-PC끼리-파일-공유하기"><a href="#2-6-PC끼리-파일-공유하기" class="headerlink" title="2-6. PC끼리 파일 공유하기"></a>2-6. PC끼리 파일 공유하기</h3><p>이거는 사실 뭐 웹개발 할 때는 필요없고 사내에서 그냥 파일 공유할 때 알아두면(사실 뭐 몰라도 사용하는 데는 문제 없지만) 좋은 것 같다.<br>여기서 말하는 파일 공유는 같은 네트워크 상에 존재하는 PC끼리 파일 공유를 하는 P2P(Peer to Peer) 방식이기 때문에 중앙에서 관리해주는 서버가 없는 방식이다.<br>따라서 새로 연결되는 컴퓨터는 브로드캐스팅(네트워크에 연결된 모든 PC에 데이터를 보냄)을 통해 입주 신고를 한다.<br>그럼 원래부터 네트워크에 있던 모든 PC들이 파일 공유에 필요한 정보들을 새로 입주한 PC에게 주면 파일 공유 준비는 끝나게 된다.<br>또한 OS 별로 파일 공유를 위한 프로토콜이 다르다. (윈도우는 SMB, 맥은 SMB, AFP, 리눅스는 SMB, NFS)<br>예전에는 그래서 다른 OS간 파일 공유가 안 됐었는데 요새는 SMB로 대동단결 된 것인지 뭐 어떻게든 공유를 할 수 있는 모양이다.  </p><h3 id="2-7-파일을-전송하는-FTP-B"><a href="#2-7-파일을-전송하는-FTP-B" class="headerlink" title="2-7. 파일을 전송하는 FTP(B)"></a>2-7. 파일을 전송하는 FTP(B)</h3><p>파일 전송을 위한 프로토콜인데 보안에 취약해서 SSH 프로토콜을 이용하는 SFTP(SSH FTP 또는 Secure FTP)를 사용한다.<br>그래서인지 대표 포트가 SSH와 똑같은 22번 포트를 사용한다.<br>파일 전송만을 하는 SCP(Secure CoPy) 프로토콜(얘도 22번 포트를 사용한다)과는 달리 SFTP는 원격지의 파일의 제어를 어느정도 허용한다.  </p><p>FTP는 파일을 주고받기 위해서도 쓰이지만(이 때 데이터 커넥션이라는 접속 모드를 사용)<br>명령어를 보내기 위해서도 사용한다.(이 때 컨트롤 커넥션이라는 접속 모드를 사용, 디렉토리/파일의 생성/이동/삭제/수정 등등)<br>또한 HTTP 프로토콜과는 달리 허용된 유저만 접근을 허락하는 목적으로 설계된 프로토콜이라 요청과 응답이 끝났다고 해서 바로 연결을 끊는 게 아니다.<br>기본적으로 HTTP 보다는 동접이 많지 않을 것이므로 바로 연결을 끊을 이유가 없다.<br>또한 상태를 가지는 프로토콜이기 때문에 HTTP 처럼 매번 쿠키와 같이 접속에 대한 정보를 계속해서 보내줄 필요도 없다.</p><p>또 액티브 모드와 패시브 모드란 게 있는데<br>액티브 모드를 사용하면 ftp 서버의 방화벽 중에 아웃바운드 트래픽에 걸려서 응답을 못 받는 경우가 존재한다.<br>이럴 때 패시브 모드를 사용해서 서버에서 클라이언트로 데이터 커넥션을 만드는 게 아니라 역으로 클라이언트에서 서버로 데이터 커넥션을 만들어서 통신하면 된다. </p><h3 id="2-8-원격지의-컴퓨터-제어하기-B"><a href="#2-8-원격지의-컴퓨터-제어하기-B" class="headerlink" title="2-8. 원격지의 컴퓨터 제어하기(B)"></a>2-8. 원격지의 컴퓨터 제어하기(B)</h3><p>원격지의 컴퓨터를 제어할 때는 GUI(Graphic User Interface) 방식으로 직접 마우스를 움직여서 컨트롤 하는 방법이 있지만,<br>일반적인 컴퓨터와 달리 서버의 경우에는 CLI(Command Line Interface) 방식으로 마우스를 쓸 수 없는 환경의 OS를 사용하는 게 대부분이다.<br>서버의 역할을 수행하는데 GUI를 쓸 필요가 없기도 하고 CLI로 간단하게 명령어만 날리면 되기 때문이다.<br>이런 CLI OS(뭐 GUI도 마찬가지고)를 원격지에서 제어하기 위한 프로토콜로 SSH를 많이 쓴다. (과거에는 Telnet을 많이 썼지만 보안 상 이슈로 대부분 SSH로 통신한다.)<br>사용해보면 마치 내 컴퓨터에서 명령어 내리는 거 마냥 신기하게 바로바로 명령어들을 수행할 수 있다.<br>이걸 사용해서 서버의 설정을 바꾸고 배포하고 지지고 볶고 다 할 수 있다. (하지만 서버가 한 두대도 아니고, 짜치는 건 다 자동화하는 추세라서 직접 접속할 필요가 없기도 하다.)  </p><h3 id="2-9-Voice-over-IP와-영상-스트리밍-B"><a href="#2-9-Voice-over-IP와-영상-스트리밍-B" class="headerlink" title="2-9. Voice over IP와 영상 스트리밍(B)"></a>2-9. Voice over IP와 영상 스트리밍(B)</h3><p>유선 통화와 핸드폰으로 통화 할 때 3G까지는 회선 교환 방식으로 통신이 일어났는데<br>아마 4G인 LTE(Long Term Evolution)부터는 패킷 교환 방식 중에 데이터 그램 방식을 사용하고, VoIP 프로토콜을 사용하는 모양이다.<br>데이터 그램 방식 중에도 UDP 방식(음성 일부가 지지직 대는 현상을 느꼈을텐데 아마 UDP 방식으로 통신을 하기 때문인 듯…?)을 사용하는 것 같다.<br>왜냐하면 음성 중 일부가 유실 되어도 그렇게 크리티컬한 상황은 아니고 실시간성이 보장돼야하기 때문에 안정성 보다는 성능이 보장돼야하기 때문에 TCP 보다는 UDP 방식을 택한 것 같다.</p><p>동영상 스트리밍 같은 경우에도 위와 마찬가지의 이유로 UDP 프로토콜을 사용하는데 아직 동영상 프로토콜이 보편화 된 것이 아니라 일부 네트워크 환경에서 차단 될 가능성이 있다고 한다.<br>따라서 HTTP 프로토콜에 동영상 데이터를 싣는데 일반적인 TCP + HTTP의 조합이 아닌 실시간 성이 어느정도 보장되는 UDP + HTTP의 조합으로 가는 거 같다.</p><h3 id="2-10-크롬-개발-도구로-HTTP-메시지-살펴보기-F-B"><a href="#2-10-크롬-개발-도구로-HTTP-메시지-살펴보기-F-B" class="headerlink" title="2-10. 크롬 개발 도구로 HTTP 메시지 살펴보기(F/B)"></a>2-10. 크롬 개발 도구로 HTTP 메시지 살펴보기(F/B)</h3><p>엄청 엄청 중요하다.<br>백엔드가 응답 잘 내려주고 있다는데 뻥치고 있을 수도 있으므로 응답을 어떻게 주는지 봐야한다.<br>마찬가지로 프론트가 요청 잘 보내고 있다고 뻥치고 있을지도 모르므로 요청을 어떻게 주는지 봐야한다.<br>이럴 때 실제 동작하는 코드 위에서 어떻게 데이터를 주고받는지 제일 간단하게 확인하는 방법은 크롬 개발자 도구의 네트워크 탭을 보는 것이다.<br>아마 AJAX를 사용해서 API를 호출하는 경우가 가장 많으므로 XHR(AJAX로 통신하기 위해서는 XMLHttpRequest로 통신하기 때문에, XHR이라고 줄여 부르는 듯, Fetch API를 쓰는 경우에도 여기 뜸)<br>탭을 눌러서 확인해보면 된다.<br>그럼 메소드, URL, 헤더, 바디에 뭘 실어서 보내고 응답받는지 다 확인할 수 있다.  </p><h3 id="MIME-Multipurpose-Internet-Mail-Extensions-F-B"><a href="#MIME-Multipurpose-Internet-Mail-Extensions-F-B" class="headerlink" title="MIME(Multipurpose Internet Mail Extensions)(F/B)"></a>MIME(Multipurpose Internet Mail Extensions)(F/B)</h3><p>원래는 이메일을 위해서 나온 애이다.<br>컴퓨터는 서구권에서 만들어져서 원래 영어 +@로 영미권에서만 사용하는 문자들의 집합인 ASCII 코드로 표현할 수 있는 데이터만 실어 보낼 수 있었다.<br>하지만 첨부파일을 보내고 싶은데 이거는 텍스트가 아니라 보낼 수 없어서 텍스트 외의 데이터를 실어 보내기 위해서 MIME이 나왔다.<br>한글의 경우에도 ASCII 코드에 해당하지 않기 때문에 MIME을 활용해서 이메일을 보내고 있다.  </p><p>하지만 이걸 뛰어넘어서 이메일이 아닌 HTTP로 통신하는 경우에도 MIME을 활용하고 있다.<br>내가 서버로 JSON 데이터를 보내고 싶으면 HTTP Body에 JSON을 실어보낸다고 끝이 아니다.<br>이 정보가 JSON이니까 그거에 맞게 해석해야한다 라는 정보를 HTTP Request 어딘가에 실어야한다.<br>그 정보를 HTTP Headers안에 Content-Type이라는 키(key) 안에 application/json 이라는 값(value)로 실어서 보낸다.<br>저 application/json 이라는 문자를 MIME이라고 부르며 MIME Type이라고 부르기도 한다.<br>MIME Tpye은 type/subtype으로 구성된다.</p><p>가끔 이미지 확장자를 jpg만 받는 사이트가 있으면 확장자만 png 같은 확장자를 jpg로 바꿔서 올리는 경우도 있다.<br>하지만 실제로 파일을 까보면 헤더에 image/png라는 정보가 있어서 서버나 클라이언트에서 마임타입으로 체크를 하면 업로드에 실패할 것이다.  </p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(네트워크) TCP/IP 쉽게, 더 쉽게 목차 리뷰 - 1장 컴퓨터 네트워크</title>
      <link href="/2018/03/30/tcp-ip-book-index/"/>
      <url>/2018/03/30/tcp-ip-book-index/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/tcp-ip-book-index/thumb.png" alt=""><br>오래전에 이 책을 추천받았으나 최근에 읽어보게 되었다.<br>백엔드 개발자로 일하면서 프론트 엔드 개발자와 의사소통을 원활히 하기 위해서는 서로 네트워크에 대한 기본 지식이 있어야하는 것 같다.<br>이 글은 빠르게 목차를 리뷰하며 백엔드에게 필요한 내용인지, 프론트에게 필요한 내용인지, 공통적으로 알아야하는 내용인지 개인적인 기준에서 분류해봤다.  </p><a id="more"></a><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>내가 여태까지 봐왔던 네트워크 계층 설명글들은 대부분 <a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95" rel="external nofollow noopener noreferrer" target="_blank">OSI 7 Layer</a>를 기준으로 설명을 풀어나가고 있다.<br>OSI 7 Layer는 각 계층이 하는 역할이 명확해서 설명하기가 명쾌하다.<br>하지만 이론과 현실 사이의 괴리감이랄까… OSI 7 Layer는 구현하기가 복잡하거나, 성능 등등의 이슈(굳이 여러 계층으로 쪼갤 필요 없이 하나의 장비가 여러 역할을 수행하는 게 더 나을 때도 있으므로)로 인해<br>실제 구현된 건 대부분 4계층으로 구성된 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%84%B7_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C_%EC%8A%A4%EC%9C%84%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">TCP/IP Stack</a>으로 구현이 많이 돼있다.<br>이 책은 신기하게도 TCP/IP Stack에 기반해서 각 계층의 역할을 설명하고 있다.<br>따라서 진짜 구현된 모델에 대한 이해를 증진시키는 데는 좋은 것 같으나 당장 <a href="https://aws.amazon.com/" rel="external nofollow noopener noreferrer" target="_blank">AWS</a>나 다른 글들을 보면 L4니 L2니 L7이니 해서 OSI 7 Layer로 설명된 글들이 많아서<br>OSI 7 Layer와 책에 설명된 TCP/IP Stack을 매핑시켜 이해하기 위해 책 앞 부분을 많이 왔다갔다 해야하는 단점이 존재하는 것 같다.  </p><p>또한 책이 TCP/IP Stack에 대한 전반적인 내용을 200페이지도 안 되는 분량으로 녹여내다보니 전반적인 흐름을 알기는 좋으나<br>각각의 계층에 대해 딥하게는 다루지 않고, 그림도 아기자기 잘 설명돼있어서(+풀컬러) 입문 서적으로 좋은 것 같다.<br>각 목차 뒤에 F(ront), B(ack)을 적어놨으니 자신의 직군에 맞춰 딥하게 볼지 그냥 흐름만 볼지, 아예 안 볼지 판단하길 바란다.  </p><p>예를 들면 프론트는 클라이언트 측에 웹서비스를 제공해주는 일을 하는데 그 중에서 서버가 제공해주는 API로 통신을 해서 데이터를 땡겨와야 한다.<br>웹서비스를 제공하기 위해서는 HTTP(S) 프로토콜을 사용하고, 서버의 API와 통신할 때도 HTTP(S)로 통신을 한다.<br>HTTP 프로토콜은 정보 공유를 위해 만들어진 프로토콜이므로 엄청난 수의 클라이언트가 접속하게 된다.<br>통신을 위한 통로에 수십만명이 한 번에 들어오게 끔 하면 가능한지도 모르겠고, 매번 그 만큼의 사람이 들어오는 것도 아니고, 비용 낭비도 엄청날 것이다.<br>따라서 통신을 위한 통로를 독점하는 게 아니라 항상 연결을 맺고 끊어서 다른 사람들이 원활하게 접속을 하게 해준다.<br>예를 들면 이 통로를 통해서는 동시에 100명만 들어올 수 있게 만들고 나한테 볼 일이 끝난 애들은 다 연결을 끊는 것이다.(사실 이런 설정은 백엔드가 한다.)<br>이 때 연결을 위해 사용하는 프로토콜이 TCP 프로토콜이다. (UDP 프로토콜도 있지만 웹 서비스 내에서는 대부분 데이터를 손실없이 전달해주는 TCP 프로토콜을 사용한다.)<br>따라서 프론트 엔드 개발자라면 HTTP 프로토콜은 물론이고 TCP 프로토콜까지 알아야 어떻게 하면 통신을 최적화 할 수 있을지 생각할 수 있게 된다.</p><p>백엔드의 경우에는 HTTP(S), TCP 프로토콜만 안다고 해서 끝나는 게 아니다.<br>SSH 프로토콜을 이용해서 서버에 원격으로 붙어서 명령어를 날리기도 하고, FTP 프로토콜을 이용해서 파일 업로드/다운로드가 가능한 서버를 설계해야할 수도 있기 때문이다.<br>SSH 프로토콜을 사용하려면 여러 인증 방식 중에 키로 인증하는 방식이 있는데 그럼 공개키, 비공개키, 대칭키, 비대칭키 막 이런 내용이 나오는데 이런 보안적인 요소도 알아야한다.<br>이 내용은 HTTPS에 사용되는 TLS 인증서의 암호화 방식에도 적용된다.<br>또한 동영상 스트리밍 서버를 만든다고 하면 UDP 프로토콜을 사용한다.<br>기본적으로 TCP 프로토콜은 해주는 일이 많으므로(데이터 전송에 실패하면 재전송 처리 등등) 성능이 안 받쳐주는데<br>UDP 프로토콜(보내기만 할 뿐, 잘 받았는지 확인을 하지 않는다. 그래서 가끔 동영상이 깨져서 나오는 현상들이 나온다.<br>하지만 크리티컬한 이슈는 아니고 매번 똑같은 부분에서 동영상이 깨져나오는 게 아니고 네트워크 상황에 따라 달라지기 때문이다.)은 그거보다 성능이 낫기 때문이다.<br>또한 AWS를 사용하다보면 그 아랫단인 IP/Router/Subnet Mask 등등의 영역도 잘 알아야한다.<br>보안을 위해 외부에서 접근이 가능한 요소(다양한 요청을 분산해주는 로드 밸런서)와 내부에서만 접근이 가능한 요소(웹서버, DB 등등)을 구성해야하는데…<br>그러면 네트워크를 어떻게 구성해야할 것이며, 이 네트워크 안에 서버는 몇 대를 둘 것이며, 퍼블릭 요소들과 프라이빗 요소들은 어떻게 통신을 할 것이며<br>어떤 요청들을 받고 말지 네트워크부터 보안에 대한 요소들을 직접 다뤄야하는 경우가 오는데 이럴 때 이 내용들을 알고 있으면 정말 무릎을 탁 치게 되는 날이 온다.  </p><p>더 아랫단이나 부가적인 요소들은 알면 +@, 몰라도 그만인 것 같은데 호기심이 충만하면 알고 싶을 것이다.<br>위에서 설명하지 않은 모뎀, 이더넷 카드, 랜선 등등은 사실 하드웨어 단으로 내려가는 거니 백엔드가 굳이 알 필요가 있나 싶다.(물론 알면 좋다.)<br>또한 데이터 전송에 실패했을 때 어떤 전략으로 재전송시킬 것인지(어플리케이션 단이 아닌 하드웨어 단에서 패킷을 처음부터 전송할 건지, 실패한 부분을 알아내서 그거부터 전송할 것인지)<br>이런 내용들은 내가 봤을 때는 굳이 알 필요가 있나 싶은데 분명 알아두면 어딘가는 써먹을 일이 있을테니 공부해둬야할 것 같긴 하다.  </p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#1장-컴퓨터-네트워크">컴퓨터 네트워크</a></li><li><a href="/2018/03/31/tcp-ip-book-index-2/#2장-네트워크-서비스와-애플리케이션-계층">네트워크 서비스와 애플리케이션 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-3/#3장-트랜스포트-계층">트랜스포트 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-4/#4장-라우팅과-인터넷-계층">라우팅과 인터넷 계층</a></li><li><a href="/2018/04/01/tcp-ip-book-index-5/#5장-하드웨어와-네트워크-인터페이스-계층">하드웨어와 네트워크 인터페이스 계층</a></li><li><a href="/2018/03/31/tcp-ip-book-index-6/#6장-보안">보안</a></li></ol><h2 id="1장-컴퓨터-네트워크"><a href="#1장-컴퓨터-네트워크" class="headerlink" title="1장, 컴퓨터 네트워크"></a>1장, 컴퓨터 네트워크</h2><p>전반적으로 네트워크가 무엇이고 종류에 뭐가 있고, 그 네트워크를 구성하고 있는 계층이 뭔지 설명하고 있다.<br>백엔드 개발자라면 다 알아야하는 내용이다.  </p><h3 id="1-1-컴퓨터-네트워크의-종류-F-B"><a href="#1-1-컴퓨터-네트워크의-종류-F-B" class="headerlink" title="1-1. 컴퓨터 네트워크의 종류(F/B)"></a>1-1. 컴퓨터 네트워크의 종류(F/B)</h3><p>간단하게 네트워크가 뭐하는 놈인지, 인터넷이 뭔지, 무선 네트워크엔 뭐가 있는지 간략하게 설명하고 있다.</p><h3 id="1-2-컴퓨터-네트워크-역할-F-B"><a href="#1-2-컴퓨터-네트워크-역할-F-B" class="headerlink" title="1-2. 컴퓨터 네트워크 역할(F/B)"></a>1-2. 컴퓨터 네트워크 역할(F/B)</h3><p>네트워크가 뭔 일들을 하는지 그림으로 설명하고 있으니 그냥 아 그런가보다 하고 훑어보면 된다.  </p><h3 id="1-3-서버와-클라이언트-F-B"><a href="#1-3-서버와-클라이언트-F-B" class="headerlink" title="1-3. 서버와 클라이언트(F/B)"></a>1-3. 서버와 클라이언트(F/B)</h3><p>이거 모르고 웹 개발 하면 안 된다.<br>서버는 스펙(사양, 성능)을 보고 얘기하는 게 아니라 서비스를 제공하는 애인지(요청에 대한 응답을 하는 애인지)로 구분된다.<br>간단하게 토렌트로 파일을 다운로드 받으면 내가 클라이언트이고, 다운받은 파일을 공유하면 내가 서버가 되는 거다.<br>근데 대부분 웹 서버의 경우에 동접수 몇만명 찍으면 일반 스펙으로는 못 견디기 때문에 서버용 컴퓨터는 대부분 일반 컴보다는 스펙들이 좋다.  </p><h3 id="1-4-패킷-교환-방식-F-B"><a href="#1-4-패킷-교환-방식-F-B" class="headerlink" title="1-4. 패킷 교환 방식(F/B)"></a>1-4. 패킷 교환 방식(F/B)</h3><p>패킷은 그냥 데이터(html 소스 코드 등등)를 잘게 쪼개놓은 거라고 보면 된다.<br>데이터를 하나로 통짜로 보내다가 전송 실패하면 그 큰 데이터를 다시 처음부터 보내야하므로<br>데이터를 잘게 쪼개서 보내면 실패한 애만 재전송하면 되는 등 이점이 크니까 그냥 아 잘게 쪼갰나 보다, 그런 걸 패킷(킬로바이트 마냥 그냥 하나의 단위이다.)라고 보면 됨.  </p><p>패킷 교환 방식과 함께 회선 교환 방식을 설명하고 있는데,<br>회선 교환 방식은 통신 루트 하나 뚫어놓고 걔랑 주구장창 통신하면 돼서 통신 품질이 매우 좋다.(안정적)<br>통화할 때는 내가 통화하려는 사람하고만 통신하면 되므로(남이 엿들으면 안 되므로) 회선 교환방식을 이용한다.<br>하지만 해당 회선을 점유하고 있으므로 언제 통화가 올 지 모른다.<br>무한정 대기하므로 idle time(쉬는 시간)이 길어지므로 효율적으로 사용하는 건 아니다.<br>또한 연결 지향형이기 때문에 연결이 맺어지기 전까지는 데이터를 보낼 수 없다.  </p><p>패킷 교환 방식은 그냥 회선 교환 방식이랑 정반대이다.<br>회선을 공유하기 때문에 idle time이 적어 효율적이며<br>이미 많은 애가 해당 통로로 통신중이면 딜레이가 발생하고(불안정), 누군가 엿들을지도 모른다.   </p><p>패킷 교환 방식도 두 가지가 존재하는데  </p><ol><li>가상 회선 방식 - 연결 지향형이고, 회선 교환 방식이 물리적인 연결이라면 얘는 논리적인 연결을 함. (TCP)  </li><li>데이터 그램 방식 - 비연결 지향형이고, 음… 잘 떠오르지 않는데 UDP에서 이 방식을 사용함(UDP의 이름 자체가 User Datagram Protocol, 데이터그램을 포함하고 있음.)</li></ol><h3 id="1-5-1-컴퓨터-네트워크와-계층-모델-F-B"><a href="#1-5-1-컴퓨터-네트워크와-계층-모델-F-B" class="headerlink" title="1-5-1. 컴퓨터 네트워크와 계층 모델(F/B)"></a>1-5-1. 컴퓨터 네트워크와 계층 모델(F/B)</h3><p>계층 모델(각각의 역할에 맞게 분류하고 추상화한 것, 예를 들면 Windows(OS) 라는 레이어 위에 Chrome(Browser) 라는 레이어 위에 V8(JS Engine)이 있듯이…)<br>에 대해 설명하고 있는데 일반적으로 네트워크를 설명할 때 사용하는 OSI 7 Layer가 아닌 TCP/IP Stack으로 설명하고 있다.<br>OSI 7 Layer는 Open Systems Interconnection의 줄임말로 다른 시스템(서로 다른 네트워크? 플랫폼? 장비?)끼리 어떻게 하면 잘 연결되게 만들까 고민하다가 나온 모델이다.<br>7 Layer는 그 계층을 역할에 따라 7개로 쪼갠 것이다.<br>브라우저는 운영체제가 잘 구현됐겠거니… 신뢰를 하고 구현을 해놓은 것이다.<br>JS 엔진은 브라우저가 잘 구현돼겠거니… 신뢰를 하고 구현을 해놓은 것이다.<br>이렇듯 서로 자신의 역할(단일책임? 관심사 분리?)만 수행하면 되니 다른 애가 무슨 일을 하는지는 신경도 쓰지 않는다.<br>OSI 7 Layer도 마찬가지로 서로 무슨 역할을 하는지 관심은 없고 오로지 자기가 맡은 일을 잘 해서 상위, 혹은 하위 레이어로 잘 보내주기만 하면 된다.<br>하지만 이 책에서는 OSI 7 Layer 대신 TCP/IP Stack으로 구현된 게 대부분이다 보니 TCP/IP Stack을 기준으로 설명을 한 것 같다.  </p><h3 id="1-5-2-각-계층을-통과하는-데이터의-형태-B"><a href="#1-5-2-각-계층을-통과하는-데이터의-형태-B" class="headerlink" title="1-5-2. 각 계층을 통과하는 데이터의 형태(B)"></a>1-5-2. 각 계층을 통과하는 데이터의 형태(B)</h3><p>데이터를 보낼 때는 상위 레이어에서 하위 레이어로 터널링(각 계층을 터널이라 생각하고 해당 터널을 하나하나 지나간다고 생각하면 됨)을 하며 지나가고<br>터널링을 하면 할 수록 캡슐화(각 터널에서 헤더(데이터 통신에 필요한 정보들)을 하나씩 가져다 붙혀서 하나의 캡슐 알약을 만든다고 생각)가 진행이 되고,<br>반대로 데이터를 받을 때는 하위 레이어에서 상위 레이어로 터널링하면서 캡슐을 하나하나씩 까서 실제 필요한 데이터만 전달받게 되는 것이다.  </p><h3 id="1-6-4개-계층의-동작-방식-F-B"><a href="#1-6-4개-계층의-동작-방식-F-B" class="headerlink" title="1-6. 4개 계층의 동작 방식(F/B)"></a>1-6. 4개 계층의 동작 방식(F/B)</h3><p>사실 프론트는 뭐 가장 상위 레이어인 애플리케이션 계층과 그 아랫단인 트랜스포트 계층까지만 알면 되는 것 같다.  </p><h3 id="1-6-1-애플리케이션-계층-F-B"><a href="#1-6-1-애플리케이션-계층-F-B" class="headerlink" title="1-6-1. 애플리케이션 계층(F/B)"></a>1-6-1. 애플리케이션 계층(F/B)</h3><p>실질적으로 사용자가 바로 체감할 수 있는 영역이다.<br>어떤 프로토콜을 사용할지(HTTP, FTP, SSH 등등), 요청은 대부분 URI를 통해서 진행된다.  </p><h3 id="1-6-2-트랜스포트-계층-F-B"><a href="#1-6-2-트랜스포트-계층-F-B" class="headerlink" title="1-6-2. 트랜스포트 계층(F/B)"></a>1-6-2. 트랜스포트 계층(F/B)</h3><p>여기서 TCP 프로토콜을 사용할지, UDP 프로토콜을 사용할지, 기타 등등을 사용할지가 결정된다.<br>프론트 엔드는 대부분 HTTP(S)로 통신을 하고, HTTP는 대부분 TCP 프로토콜 위에서 도니 TCP 프로토콜이 어떻게 동작하는지까지만 알면 되는 것 같다.<br>물론 백엔드는 그 아랫단까지 다 공부해야겠지만…<br>port를 가지고 어떤 장비에게 가야할지 골라내는 역할을 한다.  </p><h3 id="1-6-3-인터넷-계층-B"><a href="#1-6-3-인터넷-계층-B" class="headerlink" title="1-6-3. 인터넷 계층(B)"></a>1-6-3. 인터넷 계층(B)</h3><p>ip를 가지고 어떤 장비에 가야할지 골라내는 역할을 한다.<br>사실 ip 프로토콜만 있는 게 아니라 IPSec(IPv6에서 지원해주는 듯… 패킷을 암호화)나 ICMP(서버 살아있나 핑 날릴 때 등등)도 존재한다.</p><h3 id="1-6-4-네트워크-인터페이스-계층-B"><a href="#1-6-4-네트워크-인터페이스-계층-B" class="headerlink" title="1-6-4. 네트워크 인터페이스 계층(B)"></a>1-6-4. 네트워크 인터페이스 계층(B)</h3><p>완전 아랫단에 속한다.<br>아래와 같은 장비들이 여기에 속한다.  </p><ol><li>어느 장비(방향)으로 가야하는지 정보를 알려주는 Router,  </li><li>아날로그 신호(광랜이라면 빛)를 디지털 신호(0과 1)로 encode 해주는 MOdulator,<br>디지털 신호를 아날로그 신호로 decode 해주는 DEModulator.<br>두 개의 역할을 모두 수행하는 Modem.<br>모뎀이라고 하면 전화망을 통해서 연결돼서 굉장히 느린 장비 아닌가? 라고 생각할 수 있는데<br>그런 애들을 <a href="https://en.wikipedia.org/wiki/Modem#Dialup_modem" rel="external nofollow noopener noreferrer" target="_blank">Dialup Modem</a>이라고 부른다.<br>아날로그 신호 ↔ 디지털 신호의 기능만 수행한다면 전부 모뎀이다.<br>ADSL, VDSL, FTTH(Fiber To The Home, 광랜) 등등도 전부 모뎀이라고 부를 수 있다.  </li><li>서로 다른 장비끼리 통신이 가능하게 연결해주는 Lan Cable(랜선)<br>랜선에도 규격(스펙)이 있는데 1기가 광랜을 설치했다고 하더라도 안 좋은 랜선을 쓰면 그 속도를 받춰주지 못한다. </li><li>컴퓨터가 통신이 가능하게 식별 가능한 주소를 부여해주는 Ethernet Card. (한국에선 랜카드라고 많이 불림.)<br>모뎀, 랜선이 좋아봤자 이더넷 카드도 스펙이 꾸지면 제 속도를 내지 못한다.</li></ol><h3 id="1-7-통신-규약과-프로토콜-F-B"><a href="#1-7-통신-규약과-프로토콜-F-B" class="headerlink" title="1-7. 통신 규약과 프로토콜(F/B)"></a>1-7. 통신 규약과 프로토콜(F/B)</h3><p>프로토콜은 서버와 클라이언트가 어떻게 통신을 할지 규약을 정의해놓은 것이다.<br>여러가지 프로토콜(규약)이 존재하며 각 계층에서 사용하는 프로토콜이 다르다.<br>대표적인으로 어플리케이션 계층에서 웹서비스를 제공해주는 HTTP 프로토콜, 트랜스포트 계층에서 신뢰성 있는 연결을 제공해주는 TCP 프로토콜 등등이 있다.<br>이런 프로토콜들도 각각 스펙이 있고 그 스펙에 맞춰 브라우저를 구현하거나 OS를 구현한 것이다.  </p><h3 id="1-8-인터넷의-영향-F-B"><a href="#1-8-인터넷의-영향-F-B" class="headerlink" title="1-8. 인터넷의 영향(F/B)"></a>1-8. 인터넷의 영향(F/B)</h3><p>인터넷의 특징과 나오기 전/후에 대한 내용을 설명하고 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 타임머신을 타고 시간 여행 떠나기</title>
      <link href="/2018/03/30/mock-time-with-time-machine/"/>
      <url>/2018/03/30/mock-time-with-time-machine/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/mock-time-with-time-machine/thumb.png" alt="타임머신을 타고 시간 여행을 떠나보자.">  </p><h2 id="문제의-발단"><a href="#문제의-발단" class="headerlink" title="문제의 발단"></a>문제의 발단</h2><p>가끔 현재 시간을 기준으로 코드를 짜야할 때가 있다.<br>이런 경우에 자바의 경우에는 <code>LocalDate, LocalTime, LocalDateTime</code> 등등의 클래스에 있는 static 메서드인 now 메서드로 현재 시간을 구한다.<br>아래와 같이 말이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 테스트 하기 어렵게 하기 위해서 일부러 메소드가 메소드를 계속해서 호출하는 형태로 작성함.</span></span><br><span class="line">    <span class="comment">// 현재 시간이 오전인지 알아내는 메소드</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalTime.now().isBefore(LocalTime.of(<span class="number">12</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>하지만 이렇게 현재 시간에 <strong>의존</strong>하는 코드를 테스트하기란 매우 어렵다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 이 테스트는 오전에는 통과하고 오후에는 깨지는 테스트가 된다.</span></span><br><span class="line">        assertTrue(App.isAM());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 배포 스크립트에 테스트가 통과하지 못하면 배포가 실패하게 끔 구성돼있다면 오전에만 배포해야하거나 테스트를 끄고 배포를 수행해야할 것이다.<br>가장 간단하게 떠오르는 해결 방안은 현재 시간을 파라미터로 받는 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAM</span><span class="params">(LocalTime now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method(now);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(LocalTime now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method2(now);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method2</span><span class="params">(LocalTime now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method3(now);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method3</span><span class="params">(LocalTime now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now.isBefore(LocalTime.of(<span class="number">12</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 하면 현재 시간을 내 마음대로 컨트롤 해서 아래와 같이 항상 통과시키는 테스트를 작성할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertTrue(App.isAM(LocalTime.of(<span class="number">11</span>, <span class="number">59</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 위와 같이 하면 처음 메소드 도입부(isAM)부터 now를 쓸 때까지 계속해서 now를 던지는 의미없는 행위를 반복해야한다.  </p><h2 id="타임머신을-통해서-나이스하게-문제-해결하기"><a href="#타임머신을-통해서-나이스하게-문제-해결하기" class="headerlink" title="타임머신을 통해서 나이스하게 문제 해결하기"></a>타임머신을 통해서 나이스하게 문제 해결하기</h2><p>우선 LocalTime, LocalDate, LocalDateTime의 now 메소드를 보면 아래와 같이 구현돼있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> now(Clock.systemDefaultZone());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">now</span><span class="params">(Clock clock)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(clock, <span class="string">"clock"</span>);</span><br><span class="line">    <span class="keyword">final</span> Instant now = clock.instant();  <span class="comment">// called once</span></span><br><span class="line">    ZoneOffset offset = clock.getZone().getRules().getOffset(now);</span><br><span class="line">    <span class="keyword">return</span> ofEpochSecond(now.getEpochSecond(), now.getNano(), offset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">ofEpochSecond</span><span class="params">(<span class="keyword">long</span> epochSecond, <span class="keyword">int</span> nanoOfSecond, ZoneOffset offset)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(offset, <span class="string">"offset"</span>);</span><br><span class="line">    NANO_OF_SECOND.checkValidValue(nanoOfSecond);</span><br><span class="line">    <span class="keyword">long</span> localSecond = epochSecond + offset.getTotalSeconds();  <span class="comment">// overflow caught later</span></span><br><span class="line">    <span class="keyword">long</span> localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);</span><br><span class="line">    <span class="keyword">int</span> secsOfDay = (<span class="keyword">int</span>)Math.floorMod(localSecond, SECONDS_PER_DAY);</span><br><span class="line">    LocalDate date = LocalDate.ofEpochDay(localEpochDay);</span><br><span class="line">    LocalTime time = LocalTime.ofNanoOfDay(secsOfDay * NANOS_PER_SECOND + nanoOfSecond);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalDateTime(date, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일단 간단하게만 보면 now를 호출할 때 <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Clock.html" rel="external nofollow noopener noreferrer" target="_blank">Clock</a>만 모킹해서 넘겨주면 된다.<br>Clock은 timezone(아마도 <a href="https://ko.wikipedia.org/wiki/%ED%98%91%EC%A0%95_%EC%84%B8%EA%B3%84%EC%8B%9C" rel="external nofollow noopener noreferrer" target="_blank">UTC</a>일 것 같다.)을 기준으로 date와 time을 제공해준다.<br>기본적으로 Clock을 고정(fix) 시키지 않으면 디폴트로 OS에 설정된 타임존과 시간을 기준으로 현재 시간을 반환한다.  </p><p>다행히 Clock은 fixed 메서드를 통해 모킹할 수 있고, 모킹한 Clock을 가지고 현재 시간을 구하게 하면 문제는 깔끔하게 해결할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeMachine</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 디폴트로 운영체제에 설정된 타임존과 시간을 기준으로 Clock을 반환한다.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Clock clock = Clock.systemDefaultZone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clock을 모킹할 때 쓸 timezone인데 이 포스트에서는 timezone을 뛰어넘은 모킹은 다루지 않으므로 운영체제에 설정된 UTC 타임존을 사용하겠다.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZoneOffset zoneOffset = ZoneOffset.UTC;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 내가 모킹한, 혹은 현재 시간을 가진 Clock 인스턴스를 가지고 현재 시간을 구하게 된다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">dateTimeOfNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now(clock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">timeOfNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalTime.now(clock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">dateOfNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.now(clock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 지정한 날짜/시간으로 현재 시간을 고정시킨다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeTravelAt</span><span class="params">(LocalDateTime dateTime)</span></span>&#123;</span><br><span class="line">        clock = Clock.fixed(dateTime.atOffset(zoneOffset).toInstant(), zoneOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeTravelAt</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 여기서 중요한 건 시간이고 날짜는 중요치 않다.</span></span><br><span class="line">        clock = Clock.fixed(time.atDate(LocalDate.now()).atOffset(zoneOffset).toInstant(), zoneOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeTravelAt</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 여기서 중요한 건 날짜고 시간은 중요치 않다.</span></span><br><span class="line">        clock = Clock.fixed(date.atStartOfDay().atOffset(zoneOffset).toInstant(), zoneOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 모킹한 현재 시간을 다시 원래 현재 시간으로 되돌리는 메소드이다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        clock = Clock.systemDefaultZone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>타임머신이란 이름이 매우 몽환적인 분위기를 풍기는 것 같기도 하고, 참 매력적이다.  </p><p>Clock.fixed 메소드의 예제는 아래를 참고하면 쉽게 이해할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFixedClock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 2011년 1월 1일 1시 1분 0초</span></span><br><span class="line">        LocalDateTime dateTime = LocalDateTime.of(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// UTC +09:00 서울/도쿄 기준 2011년 1월 1일 1시 1분 0초</span></span><br><span class="line">        Instant instant = dateTime.atOffset(ZoneOffset.ofHours(<span class="number">9</span>)).toInstant();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// UTC +09:00 2011년 1월 1일 1시 1분 0초를 UTC ±00:00 기준으로 변환한 Clock</span></span><br><span class="line">        Clock fixedClock = Clock.fixed(instant, ZoneOffset.ofHours(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// UTC +09:00 기준의 시간을 UTC ±00:00 기준의 시간으로 변경했으므로 9시간만 빼면 된다.</span></span><br><span class="line">        assertThat(LocalDateTime.now(fixedClock), is(LocalDateTime.of(<span class="number">2010</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 우리가 만든 타임머신을 도대체 어떻게 써먹을지 아래 예제로 알아보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TimeMachine.timeOfNow().isBefore(LocalTime.of(<span class="number">12</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쓸 데 없이 now를 매개변수로 넘기던 것에서 우리가 만든 타임머신에서 지정한 시간으로 현재 시간을 구해오고 있다.<br>시간 여행(timeTravelAt 메소드)을 하지 않았다면 기본적으로 현재 시간을 반환한다.  </p><p>그럼 시간 여행을 떠날 시간이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeMachine.timeTravelAt(LocalTime.of(<span class="number">11</span>, <span class="number">59</span>));</span><br><span class="line">        assertTrue(App.isAM());</span><br><span class="line">        assertThat(TimeMachine.timeOfNow(), not(LocalTime.now()));</span><br><span class="line"></span><br><span class="line">        TimeMachine.timeTravelAt(LocalTime.of(<span class="number">12</span>, <span class="number">59</span>));</span><br><span class="line">        assertFalse(App.isAM());</span><br><span class="line">        assertThat(TimeMachine.timeOfNow(), not(LocalTime.now()));</span><br><span class="line"></span><br><span class="line">        TimeMachine.reset();</span><br><span class="line">        assertThat(TimeMachine.timeOfNow(), is(LocalTime.now()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시스템에 의존하지 않고 저렇게 나이스 하게 모킹한 코드를 보고 엄청난 센세이션을 느꼈다.<br>앞으로도 어떠한 요소에도 의존하지 않는 이런 우아한 코드를 지향하도록 노력해야겠다.</p><h2 id="참조링크"><a href="#참조링크" class="headerlink" title="참조링크"></a>참조링크</h2><p><a href="https://stackoverflow.com/a/29360514/8778461" rel="external nofollow noopener noreferrer" target="_blank">Mocking time in Java 8’s java.time API</a></p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> TDD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JPA) Embedded Type</title>
      <link href="/2018/02/20/jpa-embedded-type/"/>
      <url>/2018/02/20/jpa-embedded-type/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jpa-embedded-type/thumb.png" alt="출처: http://www.datamodel.com/index.php/2014/06/24/big-data-nosql-and-data-modeling-big-challenges-in-data-modeling/"></p><h2 id="일반적인-테이블-구조의-문제점"><a href="#일반적인-테이블-구조의-문제점" class="headerlink" title="일반적인 테이블 구조의 문제점"></a>일반적인 테이블 구조의 문제점</h2><p>일반적인 DB 테이블 구조에 맞춰 엔티티를 만들다보면 아래와 같이 만들게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate saleStartDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate saleEndDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> normalPrice;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> discountPrice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getSaleStartDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saleStartDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaleStartDate</span><span class="params">(LocalDate saleStartDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saleStartDate = saleStartDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getSaleEndDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saleEndDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaleEndDate</span><span class="params">(LocalDate saleEndDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saleEndDate = saleEndDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNormalPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> normalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNormalPrice</span><span class="params">(<span class="keyword">int</span> normalPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.normalPrice = normalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDiscountPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discountPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiscountPrice</span><span class="params">(<span class="keyword">int</span> discountPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.discountPrice = discountPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>객체 지향 관점에서 봤을 때 판매 시작/종료 날짜와 일반가/할인가는 전혀 관련이 없는 데이터이다.<br>응집력이 낮은 데이터들끼리 모여있으므로 테이블을 아래와 같이 설계하는 게 더 응집도 높은 엔티티가 될 것 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Period</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="keyword">private</span> Deal deal;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate saleStartDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate saleEndDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Deal <span class="title">getDeal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeal</span><span class="params">(Deal deal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deal = deal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getSaleStartDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saleStartDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaleStartDate</span><span class="params">(LocalDate saleStartDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saleStartDate = saleStartDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getSaleEndDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saleEndDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaleEndDate</span><span class="params">(LocalDate saleEndDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saleEndDate = saleEndDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>응집도가 높은(서로 관련이 있는) 판매 시작/종료 날짜를 포함하는 Period라는 테이블을 따로 파서 엔티티로 만들고,<br>외래키를 사용하여 Deal 테이블과 매핑하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="keyword">private</span> Deal deal;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> normalPrice;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> discountPrice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Deal <span class="title">getDeal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeal</span><span class="params">(Deal deal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deal = deal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNormalPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> normalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNormalPrice</span><span class="params">(<span class="keyword">int</span> normalPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.normalPrice = normalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDiscountPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discountPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiscountPrice</span><span class="params">(<span class="keyword">int</span> discountPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.discountPrice = discountPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>응집도가 높은 일반가/할인가를 포함하는 Period라는 테이블을 따로 파서 엔티티로 만들고,<br>외래키를 사용하여 Deal 테이블과 매핑하였다.</p><p>좀 더 객체지향 관점에서 바라본 Deal 엔티티는 아래와 같이 변경될 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"deal"</span>)</span><br><span class="line">    <span class="keyword">private</span> Period period;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"deal"</span>)</span><br><span class="line">    <span class="keyword">private</span> Price price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Period <span class="title">getPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> period;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeriod</span><span class="params">(Period period)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.period = period;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Price <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Price price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>외래키는 deal 테이블의 id로 잡아서 각각 period, price 테이블에 뒀다고 가정한다.<br>위와 같이 테이블을 일일이 쪼개기란 매우 귀찮은 일이다.<br>그리고 조인을 하기 때문에 쪼개기 전보다 성능상 좋지 않은 점도 많다.  </p><h2 id="Embedded-Type"><a href="#Embedded-Type" class="headerlink" title="Embedded Type"></a>Embedded Type</h2><p>이럴 때 쓰는 게 바로 Embedded Type이다.<br>백문이 불여일견, 코드로 바로 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Period</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate saleStartDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate saleEndDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getSaleStartDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saleStartDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaleStartDate</span><span class="params">(LocalDate saleStartDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saleStartDate = saleStartDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getSaleEndDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saleEndDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaleEndDate</span><span class="params">(LocalDate saleEndDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saleEndDate = saleEndDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmbeddedType으로 응집도가 높은 판매 시작/종료 날짜를 정의하였다.<br>EmbeddedType을 정의할 클래스에 @Embeddable 어노테이션을 달아줘야하고,<br>엔티티가 아니기 때문에 식별자나 조인을 위한 엔티티가 없어도 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Price</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> normalPrice;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> discountPrice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNormalPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> normalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNormalPrice</span><span class="params">(<span class="keyword">int</span> normalPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.normalPrice = normalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDiscountPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discountPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiscountPrice</span><span class="params">(<span class="keyword">int</span> discountPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.discountPrice = discountPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마찬가지로 EmbeddedType으로 응집도가 높은 일반가/할인가를 정의하였다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DealEmbedded</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">private</span> Period period;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">private</span> Price price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Period <span class="title">getPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> period;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeriod</span><span class="params">(Period period)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.period = period;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Price <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Price price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필드를 일일이 나열하는 대신 응집도가 높은 EmbeddedType을 사용하면 되고,<br>가져다 쓸 때는 @Embedded 어노테이션을 달아주면 된다.<br>EmbeddedType을 null로 세팅하면 관련된 필드들이 모두 null로 세팅돼서 DB에 저장된다.</p><p>EmbeddedType을 쓰면 테이블을 따로 만들어주지 않아도 되고, 조인을 사용하지 않으니 성능 상 이슈도 없고,<br>응집도가 높은 클래스끼리 따로 빼놨으니 좀 더 보기 좋은(?) 형태가 됐다고 말할 수 있다.</p><h2 id="엔티티-vs-값-타입"><a href="#엔티티-vs-값-타입" class="headerlink" title="엔티티 vs 값 타입"></a>엔티티 vs 값 타입</h2><p>@Entity가 안 붙은 걸 전부 값 타입이라고 말할 수 있다.<br>둘의 차이점은 영속성 컨텍스트에서 추적이 가능하냐, 가능하지 않느냐이다.<br>엔티티는 식별자(@Id가 붙은 필드)가 존재하여 엔티티의 변화 추적이 가능하지만,<br>값 타입의 경우에는 해당 값이 바뀌어버리면 식별자를 가지고 있는 게 아니라 추적이 불가능하다.<br>따라서 값 타입의 경우에는 엔티티에 의존적이고, 변화를 감지해야하는 경우에는 엔티티로 만들어야할 것이다.  </p><p>간단하게 값 타입에 대해 정리하자면 다음과 같다.  </p><ol><li>기본 값 타입<br>엄밀히 말하자면 primitive type(int, long, boolean 등등) 만을 뜻하는 것은 아니다.<br>불변하는 타입(Integer, String 등등)까지 포함한 경우를 말한다.  </li><li>Embedded 타입<br>위에서 많이 설명했다.  </li><li>값 타입 컬렉션<br>1과 2 타입을 컬렉션(List, Set, Map 등등)으로 가지고 있는 경우를 말한다.<br>많이 쓸까… 싶기도 하고 나중에 자세히 알아봐야겠다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> DB </category>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> JPA </tag>
            
            <tag> ORM </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Jackson) LocalDate, LocalTime, LocalDateTime 뽀개기 - Serialize</title>
      <link href="/2018/01/16/jackson-local-date-time-serialize/"/>
      <url>/2018/01/16/jackson-local-date-time-serialize/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jackson-local-date-time-serialize/thumb.png" alt=""></p><p><a href="https://github.com/FasterXML/jackson" rel="external nofollow noopener noreferrer" target="_blank">잭슨</a>은 JSON -&gt; Java 클래스로 Deserialize, Java 클래스 -&gt; JSON으로 Serialize 할 때 매우 유용한 라이브러리다.  </p><p>하지만 잭슨이 나온 이후에 자바 8이 나왔는지 모르겠는데 LocalDate, LocalTime, LocalDateTime 등등의 클래스를 기본적으로 깔끔하게 처리해주지 못한다.<br>따라서 이번에는 어렵지는 않지만 새로 프로젝트 구성할 때마다 매번 까먹어서 찾아 헤매던 케이스들을 정리해봤다.<br>또한 예제의 설명은 스프링 부트를 기준으로 설명하겠다.  </p><a id="more"></a><p>우선 <a href="/2018/01/15/jackson-local-date-time-deserialize/">Deserialize</a>를 안 본 사람은 해당 내용에서 이어지는 포스트이기 때문에 보고 오도록 하자.  </p><h2 id="3줄-요약"><a href="#3줄-요약" class="headerlink" title="3줄 요약"></a>3줄 요약</h2><ol><li>Serialize 한 형태가 요상하니 jackson-datatype-jsr310을 Dependency에 추가해두자.  </li><li>모든 필드마다 @JsonFormat 어노테이션 달아주기 귀찮으니 LocalDate, LocalTime, LocalDateTime 등등에 대한 기본 Custom Serializer를 만들어주자.  </li><li><code>spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false</code>를 쓰면 내용이 좀 상세하게 나오니 @JsonFormat을 애용하자.   </li></ol><h2 id="Serialize"><a href="#Serialize" class="headerlink" title="Serialize"></a>Serialize</h2><p>우선 아래와 같이 api를 만들자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DateType <span class="title">get</span><span class="params">(DateType dateType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DateType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 JSON으로 Serialize할 클래스를 만들자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="keyword">private</span> LocalTime time = LocalTime.now();</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 아래와 같이 응답이 드럽게(?) 온다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date"</span>: &#123;</span><br><span class="line">        <span class="attr">"year"</span>: <span class="number">2018</span>,</span><br><span class="line">        <span class="attr">"month"</span>: <span class="string">"JANUARY"</span>,</span><br><span class="line">        <span class="attr">"dayOfMonth"</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">"dayOfWeek"</span>: <span class="string">"TUESDAY"</span>,</span><br><span class="line">        <span class="attr">"era"</span>: <span class="string">"CE"</span>,</span><br><span class="line">        <span class="attr">"dayOfYear"</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">"leapYear"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"monthValue"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"chronology"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"ISO"</span>,</span><br><span class="line">            <span class="attr">"calendarType"</span>: <span class="string">"iso8601"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"time"</span>: &#123;</span><br><span class="line">        <span class="attr">"hour"</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">"minute"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"second"</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="attr">"nano"</span>: <span class="number">754000000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"dateTime"</span>: &#123;</span><br><span class="line">        <span class="attr">"year"</span>: <span class="number">2018</span>,</span><br><span class="line">        <span class="attr">"month"</span>: <span class="string">"JANUARY"</span>,</span><br><span class="line">        <span class="attr">"dayOfMonth"</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">"dayOfWeek"</span>: <span class="string">"TUESDAY"</span>,</span><br><span class="line">        <span class="attr">"dayOfYear"</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">"monthValue"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"hour"</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">"minute"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"second"</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="attr">"nano"</span>: <span class="number">754000000</span>,</span><br><span class="line">        <span class="attr">"chronology"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"ISO"</span>,</span><br><span class="line">            <span class="attr">"calendarType"</span>: <span class="string">"iso8601"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>혹시 @DateTimeFormat을 안 붙여서 그런가…??  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time = LocalTime.now();</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그래도 응답오는 건 똑같다…<br>이번엔 @JsonFormat으로 바꿔보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time = LocalTime.now();</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그래도 똑같이 응답이 온다…<br>아마 잭슨이 LocalDate 보다 먼저 나와서 대응을 제대로 못하는 거 같다.  </p><h3 id="JSR-310-Java-Specification-Request-Date-and-Time-API"><a href="#JSR-310-Java-Specification-Request-Date-and-Time-API" class="headerlink" title="JSR-310 (Java Specification Request - Date and Time API)"></a><a href="https://jcp.org/en/jsr/detail?id=310" rel="external nofollow noopener noreferrer" target="_blank">JSR-310</a> (Java Specification Request - Date and Time API)</h3><p>이전 포스트에서 봤다 싶이 JSR-310을 잭슨에서 대응(?)한 <a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310" rel="external nofollow noopener noreferrer" target="_blank">Jackson Datatype: JSR310</a>을 Dependency에 추가해주자.<br>그리고 다시 java 클래스에는 어노테이션을 한 번 없애보자.<br>그리고 다시 요청을 보내보면 아래와 같이 응답이 온다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date"</span>: [</span><br><span class="line">        <span class="number">2018</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">16</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"time"</span>: [</span><br><span class="line">        <span class="number">11</span>,</span><br><span class="line">        <span class="number">19</span>,</span><br><span class="line">        <span class="number">9</span>,</span><br><span class="line">        <span class="number">274000000</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"dateTime"</span>: [</span><br><span class="line">        <span class="number">2018</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">16</span>,</span><br><span class="line">        <span class="number">11</span>,</span><br><span class="line">        <span class="number">19</span>,</span><br><span class="line">        <span class="number">9</span>,</span><br><span class="line">        <span class="number">274000000</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아까 보다는 보기 깔끔해졌지만 저렇게 배열로 담겨서 오는 건 우리가 원하는 형태가 아니다.<br>@DateTimeFormat을 달아보면 위와 똑같은 응답이다…<br>그렇다면 @JsonFormat을 달아보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time = LocalTime.now();</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 우리가 원하는 형태로 아래와 같이 응답이 온다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2018-01-16"</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"11:21:10"</span>,</span><br><span class="line">    <span class="attr">"dateTime"</span>: <span class="string">"2018-01-16 11:21:10"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@JsonFormat을 일일이 달아주기 귀찮은 경우에는 Custom Serializer를 만들기 전에 아래 내용도 고려해보자.<br>Spring Boot의 profile에 아래 내용을 추가해주자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false</span><br></pre></td></tr></table></figure><p>그리고 DateType 클래스에서 @JsonFormat 어노테이션을 제거하면 아래와 같이 응답이 온다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2018-01-16"</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"11:23:02.215"</span>,</span><br><span class="line">    <span class="attr">"dateTime"</span>: <span class="string">"2018-01-16T11:23:02.215"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아무런 어노테이션을 안 썼을 때보다는 볼만하지만 그래도 저렇게 상세한 정보까지는 원치 않을 것이다.<br>@DateTimeFormat 어노테이션을 달아도 마찬가지고, @JsonFormat 어노테이션을 달면 원하는 형태로 날아오지만 그럼 profile에 추가하나 마찬가지다.<br>이 속성은 그냥 저렇게 상세한 시각이 필요할 때만 쓰면 될 거 같다.  </p><h3 id="Custom-Serializer"><a href="#Custom-Serializer" class="headerlink" title="Custom Serializer"></a>Custom Serializer</h3><p>이제 저번 포스트에 Custom Deserializer를 만들었 듯이 이번에는 Custom Serializer를 만들어보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Module <span class="title">jsonMapperJava8DateTimeModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleModule <span class="keyword">module</span> = <span class="keyword">new</span> SimpleModule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span>.addSerializer(LocalDate.class, <span class="keyword">new</span> JsonSerializer&lt;LocalDate&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    LocalDate localDate, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                jsonGenerator.writeString(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>).format(localDate));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span>.addSerializer(LocalTime.class, <span class="keyword">new</span> JsonSerializer&lt;LocalTime&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    LocalTime localTime, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                jsonGenerator.writeString(DateTimeFormatter.ofPattern(<span class="string">"kk:mm:ss"</span>).format(localTime));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span>.addSerializer(LocalDateTime.class, <span class="keyword">new</span> JsonSerializer&lt;LocalDateTime&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    LocalDateTime localDateTime, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                jsonGenerator.writeString(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd kk:mm:ss"</span>).format(localDateTime));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">module</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 했을 때 아래와 같은 요소들이 없어도 우리가 원하는 대로 잘 작동한다.  </p><ul><li>jackson-datatype-jsr310  </li><li>spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false  </li><li>@DateTimeFormat, @JsonFormat</li></ul><p>하지만 특정 필드에 대해서는 다르게 Serialize 해야할 수 있으니 jackson-datatype-jsr310은 살려두자.<br>이제 특정 필드에만 다른 Serializer를 적용해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateSerializer.class)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalTimeSerializer.class)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time = LocalTime.now();</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateTimeSerializer.class)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사실상 @DateTimeFormat 어노테이션은 위에서 있으나 마나 한 사실을 알게 되었다.<br>이렇게 했을 땐 잭슨의 기본 LocalDateTime Serializer를 쓰기 때문에 아래와 같이 나온다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date"</span>: [</span><br><span class="line">        <span class="number">2018</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">16</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"time"</span>: [</span><br><span class="line">        <span class="number">11</span>,</span><br><span class="line">        <span class="number">48</span>,</span><br><span class="line">        <span class="number">25</span>,</span><br><span class="line">        <span class="number">189000000</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"dateTime"</span>: [</span><br><span class="line">        <span class="number">2018</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">16</span>,</span><br><span class="line">        <span class="number">11</span>,</span><br><span class="line">        <span class="number">48</span>,</span><br><span class="line">        <span class="number">25</span>,</span><br><span class="line">        <span class="number">189000000</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>profile에 <code>spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false</code>을 넣으면 아래와 같은 내용을 받게 된다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2018-01-16"</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"11:50:19.917"</span>,</span><br><span class="line">    <span class="attr">"dateTime"</span>: <span class="string">"2018-01-16T11:50:19.917"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>좀 더 깔끔하게 출력하기 위해 @DateTimeFormat을 써보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateSerializer.class)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalTimeSerializer.class)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time = LocalTime.now();</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateTimeSerializer.class)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요청 응답 오는 건 전혀 다르지 않다. 완전 무쓸모넹… ㅠㅠ<br>그럼 profile에서 <code>spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false</code>을 빼고 @JsonFormat 어노테이션으로 바꿔보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateSerializer.class)</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalTimeSerializer.class)</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time = LocalTime.now();</span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateTimeSerializer.class)</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 우리가 원하는대로 응답이 온다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"date"</span>: <span class="string">"2018-01-16"</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"11:54:17"</span>,</span><br><span class="line">    <span class="attr">"dateTime"</span>: <span class="string">"2018-01-16 11:54:17"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Jackson </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Jackson) LocalDate, LocalTime, LocalDateTime 뽀개기 - Deserialize</title>
      <link href="/2018/01/15/jackson-local-date-time-deserialize/"/>
      <url>/2018/01/15/jackson-local-date-time-deserialize/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jackson-local-date-time-deserialize/thumb.png" alt=""></p><p><a href="https://github.com/FasterXML/jackson" rel="external nofollow noopener noreferrer" target="_blank">잭슨</a>은 JSON -&gt; Java 클래스로 Deserialize, Java 클래스 -&gt; JSON으로 Serialize 할 때 매우 유용한 라이브러리다.  </p><p>하지만 잭슨이 나온 이후에 자바 8이 나왔는지 모르겠는데 LocalDate, LocalTime, LocalDateTime 등등의 클래스를 기본적으로 깔끔하게 처리해주지 못한다.<br>따라서 이번에는 어렵지는 않지만 새로 프로젝트 구성할 때마다 매번 까먹어서 찾아 헤매던 케이스들을 정리해봤다.<br>또한 예제의 설명은 스프링 부트를 기준으로 설명하겠다.  </p><a id="more"></a><p>이 글을 본 다음에는 후속작인 <a href="/2018/01/15/jackson-local-date-time-serialize/">Serialize</a>를 보도록 하자.  </p><h2 id="3줄-요약"><a href="#3줄-요약" class="headerlink" title="3줄 요약"></a>3줄 요약</h2><ol><li>모든 필드마다 @JsonFormat 어노테이션 달아주기 귀찮으니 LocalDate, LocalTime, LocalDateTime 등등에 대한 기본 Custom Deserializer를 만들어주자.  </li><li>특정 필드는 잭슨의 기본 Deserializer를 써야할 수도 있으니 jackson-datatype-jsr310을 Dependency에 추가해두자.  </li><li>@DateTimeFormat은 제대로 안 먹히는 필드도 있으니 @JsonFormat을 애용하도록 하자.</li></ol><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><p>파라미터로 데이터를 각각 받을 때는 JSON 데이터를 받는 게 아니므로 Jackson의 Deserialize와는 무관하게 작동한다.<br>우선 파라미터로 데이터를 받는 api를 만들어보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(@RequestParam LocalDate date, @RequestParam LocalTime time, @RequestParam LocalDateTime dateTime)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GET /?date=2011-11-11&amp;time=11:11:11&amp;dateTime=2017-11-11 11:11:11</code>으로 요청을 날려보면 아래와 같은 응답을 받을 수 있다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1516027261943</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">    <span class="attr">"exception"</span>: <span class="string">"org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalDate'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.RequestParam java.time.LocalDate] for value '2011-11-11'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2011-11-11]"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>파라미터로 넘긴 값들을 String으로 인식해서 TypeMismatchException이 발생했다.<br>이럴 땐 @DateTimeFormat 어노테이션을 파라미터에 달아주면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DateType <span class="title">get</span><span class="params">(@RequestParam</span></span></span><br><span class="line"><span class="function"><span class="params">                        @DateTimeFormat(pattern = <span class="string">"yyyy-MM-dd"</span>)</span></span></span><br><span class="line"><span class="function">                        LocalDate date,</span></span><br><span class="line"><span class="function">                        @RequestParam</span></span><br><span class="line"><span class="function">                        @<span class="title">DateTimeFormat</span><span class="params">(pattern = <span class="string">"kk:mm:ss"</span>)</span></span></span><br><span class="line"><span class="function">                        LocalTime time,</span></span><br><span class="line"><span class="function">                        @RequestParam</span></span><br><span class="line"><span class="function">                        @<span class="title">DateTimeFormat</span><span class="params">(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span></span></span><br><span class="line"><span class="function">                        LocalDateTime dateTime) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Deserialize"><a href="#Deserialize" class="headerlink" title="Deserialize"></a>Deserialize</h2><h3 id="Parameter-Command-객체"><a href="#Parameter-Command-객체" class="headerlink" title="Parameter(Command 객체)"></a>Parameter(Command 객체)</h3><p>그럼 파라미터로 데이터를 받으면서 잭슨의 Deserializer를 태울려면 어떻게 해야할까?<br>아래와 같이 컨트롤러를 수정해주면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(DateType dateType)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestParam으로 받던 데이터들을 하나의 클래스로 퉁쳤다.<br><a href="https://stackoverflow.com/questions/7583577/what-is-the-command-object-in-spring-framework" rel="external nofollow noopener noreferrer" target="_blank">what is the command object in spring framework</a><br>에 따르면 Command Object는 그냥 VO/POJO/JavaBean/기타 등등을 일컫는 것 같다.<br>이제 그 커맨드 객체를 만들어보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate date;</span><br><span class="line">    <span class="keyword">private</span> LocalTime time;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">(LocalDate date, LocalTime time, LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GET /?date=2011-11-11&amp;time=11:11:11&amp;dateTime=2017-11-11 11:11:11</code>으로 요청을 날려보면 아래와 같은 응답을 받게 된다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1516036778600</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">    <span class="attr">"exception"</span>: <span class="string">"org.springframework.beans.BeanInstantiationException"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Failed to instantiate [com.example.demo.DateType]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.example.demo.DateType.&lt;init&gt;()"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>커맨드 객체로 받는 클래스에는 무조건 기본 생성자가 있어야한다.<br>하지만 위에 매개변수를 3개 받는 생성자를 만들었기에 아무런 매개변수도 받지 않는 생성자를 만들어야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate date;</span><br><span class="line">    <span class="keyword">private</span> LocalTime time;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">(LocalDate date, LocalTime time, LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다시 동일한 요청을 보내면 아래와 같은 응답을 받게 된다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1516036927928</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">    <span class="attr">"exception"</span>: <span class="string">"org.springframework.validation.BindException"</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"codes"</span>: [</span><br><span class="line">                <span class="string">"typeMismatch.dateType.date"</span>,</span><br><span class="line">                <span class="string">"typeMismatch.date"</span>,</span><br><span class="line">                <span class="string">"typeMismatch.java.time.LocalDate"</span>,</span><br><span class="line">                <span class="string">"typeMismatch"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"arguments"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"codes"</span>: [</span><br><span class="line">                        <span class="string">"dateType.date"</span>,</span><br><span class="line">                        <span class="string">"date"</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"defaultMessage"</span>: <span class="string">"date"</span>,</span><br><span class="line">                    <span class="attr">"code"</span>: <span class="string">"date"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defaultMessage"</span>: <span class="string">"Failed to convert property value of type 'java.lang.String' to required type 'java.time.LocalDate' for property 'date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [java.time.LocalDate] for value '2011-11-11'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2011-11-11]"</span>,</span><br><span class="line">            <span class="attr">"objectName"</span>: <span class="string">"dateType"</span>,</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"date"</span>,</span><br><span class="line">            <span class="attr">"rejectedValue"</span>: <span class="string">"2011-11-11"</span>,</span><br><span class="line">            <span class="attr">"bindingFailure"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"typeMismatch"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"codes"</span>: [</span><br><span class="line">                <span class="string">"typeMismatch.dateType.dateTime"</span>,</span><br><span class="line">                <span class="string">"typeMismatch.dateTime"</span>,</span><br><span class="line">                <span class="string">"typeMismatch.java.time.LocalDateTime"</span>,</span><br><span class="line">                <span class="string">"typeMismatch"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"arguments"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"codes"</span>: [</span><br><span class="line">                        <span class="string">"dateType.dateTime"</span>,</span><br><span class="line">                        <span class="string">"dateTime"</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"defaultMessage"</span>: <span class="string">"dateTime"</span>,</span><br><span class="line">                    <span class="attr">"code"</span>: <span class="string">"dateTime"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defaultMessage"</span>: <span class="string">"Failed to convert property value of type 'java.lang.String' to required type 'java.time.LocalDateTime' for property 'dateTime'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [java.time.LocalDateTime] for value '2017-11-11 11:11:11'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2017-11-11 11:11:11]"</span>,</span><br><span class="line">            <span class="attr">"objectName"</span>: <span class="string">"dateType"</span>,</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"dateTime"</span>,</span><br><span class="line">            <span class="attr">"rejectedValue"</span>: <span class="string">"2017-11-11 11:11:11"</span>,</span><br><span class="line">            <span class="attr">"bindingFailure"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"typeMismatch"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"codes"</span>: [</span><br><span class="line">                <span class="string">"typeMismatch.dateType.time"</span>,</span><br><span class="line">                <span class="string">"typeMismatch.time"</span>,</span><br><span class="line">                <span class="string">"typeMismatch.java.time.LocalTime"</span>,</span><br><span class="line">                <span class="string">"typeMismatch"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"arguments"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"codes"</span>: [</span><br><span class="line">                        <span class="string">"dateType.time"</span>,</span><br><span class="line">                        <span class="string">"time"</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"defaultMessage"</span>: <span class="string">"time"</span>,</span><br><span class="line">                    <span class="attr">"code"</span>: <span class="string">"time"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defaultMessage"</span>: <span class="string">"Failed to convert property value of type 'java.lang.String' to required type 'java.time.LocalTime' for property 'time'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [java.time.LocalTime] for value '11:11:11'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [11:11:11]"</span>,</span><br><span class="line">            <span class="attr">"objectName"</span>: <span class="string">"dateType"</span>,</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"time"</span>,</span><br><span class="line">            <span class="attr">"rejectedValue"</span>: <span class="string">"11:11:11"</span>,</span><br><span class="line">            <span class="attr">"bindingFailure"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"typeMismatch"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Validation failed for object='dateType'. Error count: 3"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>역시나 String으로 인식해서 발생하는 문제다.<br>@DateTimeFormat을 사용하자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">(LocalDate date, LocalTime time, LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 다시 GET 요청을 보내면 정상적으로 Deserialize 돼서 오류가 나지 않는다.  </p><h3 id="Body-JSON"><a href="#Body-JSON" class="headerlink" title="Body (JSON)"></a>Body (JSON)</h3><p>Requset Body로 보낼 객체는 위에서 만든 커맨드 객체를 재활용해서 api를 만들어보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(@RequestBody DateType dateType)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>POST /</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"date"</span>: <span class="string">"2011-11-11"</span>,</span><br><span class="line"><span class="attr">"time"</span>: <span class="string">"11:11:11"</span>,</span><br><span class="line"><span class="attr">"dateTime"</span>: <span class="string">"2011-11-11 11:11:11"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>으로 요청을 날려보면 아래와 같은 응답을 받을 수 있다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1516031758629</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">    <span class="attr">"exception"</span>: <span class="string">"org.springframework.http.converter.HttpMessageNotReadableException"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"JSON parse error: Can not construct instance of java.time.LocalDate: no String-argument constructor/factory method to deserialize from String value ('2011-11-11'); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of java.time.LocalDate: no String-argument constructor/factory method to deserialize from String value ('2011-11-11')\n at [Source: java.io.PushbackInputStream@405079af; line: 2, column: 10] (through reference chain: com.example.demo.DateType[\"date\"])"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>웬일인지 모르겠지만 문제가 발생한다.  </p><h4 id="JSR-310-Java-Specification-Request-Date-and-Time-API"><a href="#JSR-310-Java-Specification-Request-Date-and-Time-API" class="headerlink" title="JSR-310 (Java Specification Request - Date and Time API)"></a><a href="https://jcp.org/en/jsr/detail?id=310" rel="external nofollow noopener noreferrer" target="_blank">JSR-310</a> (Java Specification Request - Date and Time API)</h4><p><a href="http://wonwoo.ml/index.php/post/1008" rel="external nofollow noopener noreferrer" target="_blank">Spring Jpa java8 date (LocalDateTime) 와 Jackson</a>을 참고했을 때<br>Java8이 나오기 전에는 Date 클래스가 좀 허접했다고 한다.<br>그 이전에는 <a href="http://www.joda.org/joda-time/" rel="external nofollow noopener noreferrer" target="_blank">Joda Time</a>이라는 라이브러리를 사용했다고 한다.<br>이 JSR-310 스펙은 조다 타임의 창시자도 같이 제정했다고 하니 아주 믿을만(?)한 스펙인 거 같다.<br>이 스펙의 구현체가 LocalDate, LocalTime, LocalDateTime 등등인 것 같다.  </p><p>잭슨에서 제대로 저런 날짜/시간 관련 클래스를 (De)Serialize 하려면 <a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310" rel="external nofollow noopener noreferrer" target="_blank">Jackson Datatype: JSR310</a>을 Dependency에 추가해줘야한다.<br>Maven이나 Gradle에 추가해주자.  </p><p>그리고 나서 다시 서버를 띄워보면 다음과 같은 응답이 날아온다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="number">1516032507565</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">    <span class="attr">"exception"</span>: <span class="string">"org.springframework.http.converter.HttpMessageNotReadableException"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"JSON parse error: Can not deserialize value of type java.time.LocalDateTime from String \"2011-11-11 11:11:11\": Text '2011-11-11 11:11:11' could not be parsed at index 10; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.time.LocalDateTime from String \"2011-11-11 11:11:11\": Text '2011-11-11 11:11:11' could not be parsed at index 10\n at [Source: java.io.PushbackInputStream@c126518; line: 4, column: 14] (through reference chain: com.example.demo.DateType[\"dateTime\"])"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어떤 이유에선지 LocalDateTime만 제대로 Deserialize 못 하고 있다.<br>아래와 같이 request body를 수정해주면 된다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"date"</span>: <span class="string">"2011-11-11"</span>,</span><br><span class="line"><span class="attr">"time"</span>: <span class="string">"11:11:11"</span>,</span><br><span class="line"><span class="attr">"dateTime"</span>: <span class="string">"2011-11-11T11:11:11"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 날짜와 시간 사이에 존재하는 저 T가 꼴불견이다.<br>저 T를 날리기 위해서는 잭슨의 어노테이션인 @JsonFormat을 쓰면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate date;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime time;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">(LocalDate date, LocalTime time, LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = LocalDate.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 하고 T를 뺀 상태로 응답을 보내면 아주 잘 날아온다.  </p><h3 id="Custom-Deserializer"><a href="#Custom-Deserializer" class="headerlink" title="Custom Deserializer"></a>Custom Deserializer</h3><p>하지만 이렇게 되면 날짜/시간 클래스에게 일일이 어노테이션을 달아줘야하니 귀챠니즘이 상당해진다.<br>이럴 때 잭슨의 기본 Deserializer를 오버라이딩한 Custom Deserializer를 사용하게 설정을 수정해주면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Module <span class="title">jsonMapperJava8DateTimeModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleModule <span class="keyword">module</span> = <span class="keyword">new</span> SimpleModule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span>.addDeserializer(LocalDate.class, <span class="keyword">new</span> JsonDeserializer&lt;LocalDate&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalDate <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> LocalDate.parse(jsonParser.getValueAsString(), DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span>.addDeserializer(LocalTime.class, <span class="keyword">new</span> JsonDeserializer&lt;LocalTime&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalTime <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> LocalTime.parse(jsonParser.getValueAsString(), DateTimeFormatter.ofPattern(<span class="string">"kk:mm:ss"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span>.addDeserializer(LocalDateTime.class, <span class="keyword">new</span> JsonDeserializer&lt;LocalDateTime&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> LocalDateTime.parse(jsonParser.getValueAsString(), DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd kk:mm:ss"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">module</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 DateType 클래스에서 @JsonFormat 어노테이션을 빼주자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate date;</span><br><span class="line">    <span class="keyword">private</span> LocalTime time;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">(LocalDate date, LocalTime time, LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = LocalDate.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사실 Custom Deserializer를 쓰면 jackson-datatype-jsr310은 필요 없긴 하다.<br>(하지만 나중에 Serialize를 위해서는 또 필요하기 때문에 지우진 말자.)<br>이렇게 하면 이제 @DateTimeFormat이나 @JsonFormat은 무력화되는 것 같다.  </p><p>만약 특정 필드만 오버라이딩한 Deserializer를 안 쓰려면 아래와 같이 하면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDate date;</span><br><span class="line">    <span class="keyword">private</span> LocalTime time;</span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(using = LocalDateTimeDeserializer.class)</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy/MM/dd kk:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(LocalDate date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTime <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(LocalTime time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateTime</span><span class="params">(LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">(LocalDate date, LocalTime time, LocalDateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = LocalDate.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@JsonFormat 대신에 @DateTimeFormat을 쓰면 아무런 효과가 없다.  </p><p>이제 아래와 같이 요청을 보내보자.<br><code>POST /</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"date"</span>: <span class="string">"2011-11-11"</span>,</span><br><span class="line"><span class="attr">"time"</span>: <span class="string">"11:11:11"</span>,</span><br><span class="line"><span class="attr">"dateTime"</span>: <span class="string">"2011/11/11 11:11:11"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정상적으로 요청이 들어갔다면 성공한 것이다.</p><p>이제는 <a href="/2018/01/15/jackson-local-date-time-serialize/">Serialize</a>를 보도록 하자.  </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Jackson </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JPA) Entity와 EntityManager와 EntityManagerFactory</title>
      <link href="/2018/01/14/jpa-entity-manager-factory/"/>
      <url>/2018/01/14/jpa-entity-manager-factory/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/jpa-entity-manager-factory/thumb.png" alt="엔티티는 과자, 엔티티 매니저는 아줌마, 엔티티 매니저 팩토리는 과자 공장"><br>이미지 출처: <a href="http://m.blog.daum.net/umji0112/11794517?categoryId=646664" rel="external nofollow noopener noreferrer" target="_blank">&lt;박상문의 Photo &amp; Essay&gt;평양 육아원의 모습</a></p><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>DB의 테이블과 매칭이 되는 개념이라고 보면 된다.<br>그렇다면 왜 이름이 Table이 아니라 Entity일까…?  </p><p>만약 DB에 member라는 테이블이 있고, 해당 테이블의 스키마가 아래와 같다고 해보자.  </p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Member`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>그렇다면 엔티티는 아래와 같이 만들 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적으로 JPA는 모든 필드를 불러오게 끔 구현돼있다.<br>하지만 모든 케이스에서 id, name, age 필드를 다 다루지 않는다.<br>어떤 경우에는 id, name 필드만 다루는 경우도 있을 수 있다.<br>그런 경우에 대비해서 다음과 같이 엔티티 클래스를 하나 더 만들 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"Member"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberOnlyName</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>따라서 테이블은 한 개지만, 엔티티는 경우에 따라서 여러 개를 만들 수 있다.<br>혹은 JPA를 좀 더 잘 다룬다면 하나의 엔티티로도 충분히 커버를 할 수 있기도 하다.  </p><h2 id="EntityManager"><a href="#EntityManager" class="headerlink" title="EntityManager"></a>EntityManager</h2><p>위에 언급한 엔티티를 관리하는 역할을 수행하는 클래스이다.<br>그럼 어떤 방식으로 엔티티 매니저는 엔티티들을 관리할까?<br>엔티티 매니저 내부에 <strong>영속성 컨텍스트(Persistence Context)</strong>라는 걸 두어서 엔티티들을 관리한다.  </p><h3 id="영속성-컨텍스트-Persistence-Context"><a href="#영속성-컨텍스트-Persistence-Context" class="headerlink" title="영속성 컨텍스트(Persistence Context)"></a>영속성 컨텍스트(Persistence Context)</h3><p><img src="/images/jpa-entity-manager-factory/entity-manager.png" alt=""><br>영속성: 기본적으로 컴퓨터 공학에서 영속성이라고 하면 <strong>비휘발성</strong>이라고 보면 될 것 같다.<br>휘발성은 프로그램이 꺼지거나 전원이 나가면 데이터가 날아가는 경우를 휘발성이라 하고, 그 반대가 비휘발성이다.<br>하지만 휘발성과 비휘발성 이란 단어는 저장 장치(메인 메모리나 플래시 메모리 등등)의 특징을 나타낼 때 많이 쓰고,<br>영속성이란 단어는 DB에 관해 설명할 때 많이 사용하는 것 같다.  </p><p>컨텍스트: 직역하면 맥락, 문맥이란 뜻인데 프로그래밍 쪽에선 좀 다른 뜻으로 쓰이는 것 같다.<br>내가 알기로는 하나의 환경, 공간? 쯤으로 이해하고 사용하고 있다.  </p><blockquote><p>영속성 컨텍스트는 <strong>엔티티를 영구히 저장하는 환경</strong>이다.<br>출처: 자바 ORM 표준 JPA 프로그래밍(김영한 저) 92P, 3.2 영속성 컨텍스트란?  </p></blockquote><p>하지만 개발자가 직접 영속성 컨텍스트를 뜯어보거나 그 내부를 들여다 볼 수는 없어서 약간은 논리적이거나 추상적인 개념으로 바라봐야한다.  </p><p>여러 엔티티 매니저가 하나의 영속성 컨텍스트를 공유할 수도 있다고 한다.<br>그리고 영속성 컨텍스트를 책의 저자는 <strong>엔티티를 영구히 저장하는 환경</strong>이라고 했는데 내가 봤을 때는<br><strong>영속성 컨텍스트를 관리하는 모든 엔티티 매니저가 초기화 및 종료되지 않는 한 엔티티를 영구히 저장하는 환경</strong>이라고 정정해야할 것 같다.<br>그냥 영구히 저장 된다고 하면 프로그램을 껐다 켜도 영속성 컨텍스트는 항상 살아 있을 것 같다는 생각이 든다.<br>하지만 프로그램을 끄기도 전에 엔티티 매니저를 초기화 및 종료 시키는 코드를 만나면 해당 영속성 컨텍스트는 소멸된다.  </p><h4 id="엔티티-매니저와-영속성-컨텍스트의-엔티티-관리"><a href="#엔티티-매니저와-영속성-컨텍스트의-엔티티-관리" class="headerlink" title="엔티티 매니저와 영속성 컨텍스트의 엔티티 관리"></a>엔티티 매니저와 영속성 컨텍스트의 엔티티 관리</h4><p>그럼 엔티티 매니저와 영속성 컨텍스트는 어떻게 엔티티를 관리할까?<br>우선 한 명의 멤버를 추가하는 코드를 살펴보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Join</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 아직까지는 해당 엔티티를 엔티티 매니저가 관리하지 않는다.</span></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setName(name);</span><br><span class="line">        member.setAge(age);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 엔티티 매니저가 있다고 가정.</span></span><br><span class="line">        <span class="comment">// 추후에 엔티티 매니저 팩토리와 함께 엔티티 매니저를 어떻게 생성하는지 설명.</span></span><br><span class="line">        EntityManager em;</span><br><span class="line">        EntityTransaction tx = em.getTransaction();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 엔티티 매니저에서 수행하는 모든 로직은 트랜잭선 안에서 수행돼야 한다.</span></span><br><span class="line">            tx.begin();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 이렇게 하면 해당 엔티티 매니저의 영속성 컨텍스트에 위에서 만든 member 객체가 저장된다.  </span></span><br><span class="line">            <span class="comment">// 이제 member 엔티티는 엔티티 매니저의 관리 대상이 되고, 영속성을 가졌다고 말할 수 있다.</span></span><br><span class="line">            em.persist(member);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 트랜잭션을 커밋한다.</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="comment">// 어떤 이유에서 오류가 났다면 트랜잭션을 롤백 시켜줘야한다.</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 엔티티 매니저를 종료시켜줘야 한다.  </span></span><br><span class="line">            <span class="comment">// 아마 더 이상 사용하지 않는 자원이므로 더 이상 사용하지 않는 자원이라고 표시하는 것 같다.</span></span><br><span class="line">            <span class="comment">// 그럼 아마 GC가 해당 엔티티 매니저 자원을 수거해가서 메모리에 반환하지 않을까??</span></span><br><span class="line">            <span class="comment">// 성능 상 문제가 있어서 이렇게 종료시켜줘야 하는 건지 모르겠다. </span></span><br><span class="line">            em.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 두 가지 설명하지 않은 개념이 있다.<br>엔티티가 영속성을 가졌을 때의 특징(엔티티의 생명주기)와 트랜잭션이다.<br>엔티티의 생명 주기는 나중에 엔티티 매니저를 사용하는 이유와 관련해서 따로 정리해야겠다.  </p><h4 id="트랜잭션-Transaction"><a href="#트랜잭션-Transaction" class="headerlink" title="트랜잭션(Transaction)"></a>트랜잭션(Transaction)</h4><p>하나의 작업 단위라고 보면 될 것 같다.<br>예를 들면 <code>상품 구매</code>라는 하나의 작업을 보면 아래와 같은 자잘한 작업들이 존재한다.</p><ol><li>상품의 재고 조회  </li><li>유저의 잔고 조회  </li><li>상품의 재고 -1  </li><li>유저의 잔고에서 돈을 뺌.  </li><li>주문 생성  </li></ol><p>이런 5개의 작업은 중간에 하나라도 뻑나면 작업 전체가 뻑났다고 보고 아예 맨 처음 상태로 돌려야한다.<br>4번에서 뻑났을 때 상품의 재고도 -1 했던 걸 원래 처음 상태로 돌려놔야 정상적인 작동이라고 말할 수 있다.<br>이렇게 오류가 났을 때 처음 상태로 돌아가는(rollback) 작업의 단위를 트랜잭션이라고 한다.<br>트랜잭션이 모두 정상적으로 수행됐을 때는 commit을 수행해서 작업 내용을 실제 DB와 엔티티 매니저에 반영한다.</p><p>그럼 JPA에서 모든 로직은 왜 트랜잭션 안에서 수행해야하는 것일까…?<br>물론 조회 로직은 트랜잭션 안에서 수행해야 할 필요도 없고, 트랜잭션의 단위가 커지면 데드락 이슈에 봉착하기 때문에 최대한 트랜잭션의 단위를 작게 잡으면서 안정성을 가져가는 게 베스트다.<br>그건 JPA가 쿼리를 한 방에 날리기 때문이다.  </p><h4 id="쓰기-지연-SQL-저장소"><a href="#쓰기-지연-SQL-저장소" class="headerlink" title="쓰기 지연 SQL 저장소"></a>쓰기 지연 SQL 저장소</h4><p><img src="/images/jpa-entity-manager-factory/sql-manager.png" alt=""><br>영속성 컨텍스트 안에는 <strong>쓰기 지연 SQL 저장소</strong>라는 공간이 따로 존재한다.<br>만약 아래와 같은 코드가 있다고 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Join</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 아직까지는 해당 엔티티를 엔티티 매니저가 관리하지 않는다.</span></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setName(name);</span><br><span class="line">        member.setAge(age);</span><br><span class="line">        </span><br><span class="line">        Member member2 = <span class="keyword">new</span> Member();</span><br><span class="line">        member2.setName(name);</span><br><span class="line">        member2.setAge(age);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 엔티티 매니저가 있다고 가정.</span></span><br><span class="line">        <span class="comment">// 추후에 엔티티 매니저 팩토리와 함께 엔티티 매니저를 어떻게 생성하는지 설명.</span></span><br><span class="line">        EntityManager em;</span><br><span class="line">        EntityTransaction tx = em.getTransaction();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 엔티티 매니저에서 수행하는 모든 로직은 트랜잭선 안에서 수행돼야 한다.</span></span><br><span class="line">            tx.begin();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 쿼리는 전송되지 않는다.</span></span><br><span class="line">            em.persist(member);</span><br><span class="line">            em.persist(member2);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 커밋하는 시점에 쿼리가 전송된다.</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="comment">// 어떤 이유에서 오류가 났다면 트랜잭션을 롤백 시켜줘야한다.</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 엔티티 매니저를 종료시켜줘야 한다.  </span></span><br><span class="line">            <span class="comment">// 아마 더 이상 사용하지 않는 자원이므로 더 이상 사용하지 않는 자원이라고 표시하는 것 같다.</span></span><br><span class="line">            <span class="comment">// 그럼 아마 GC가 해당 엔티티 매니저 자원을 수거해가서 메모리에 반환하지 않을까??</span></span><br><span class="line">            <span class="comment">// 성능 상 문제가 있어서 이렇게 종료시켜줘야 하는 건지 모르겠다. </span></span><br><span class="line">            em.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>트랜잭션을 생각하지 않고 의식의 흐름대로 코드의 동작을 추측해보면…  </p><ol><li>쿼리가 두 번 날아갈 것이다.  </li><li>만약에 멤버 2를 저장하는 시점에서 롤백을 해야할 때는 날리지 않아도 될 멤버 1에 대한 삽입 쿼리를 날리게 된 격이다.  </li></ol><p>하지만 쓰기 지연 SQL 저장소 및 트랜잭션에 의해 아래와 같이 동작한다.  </p><ol><li>트랜잭션이 커밋 되기 직전까지 모든 쿼리문은 영속성 컨텍스트 내부의 쓰기 지연 SQL 저장소에 저장된다.  </li><li>트랜잭션이 커밋되는 순간 모든 쿼리가 한 방에 날아간다.  </li><li>만약 트랜잭션 내부에서 오류가 나서 롤백을 해야한다면 애초에 날리지도 않을 쿼리를 날리지도 않는다.  </li></ol><p>위와 같이 성능 이슈 때문에 모든 로직을 트랜잭션 내부에서 처리하게끔 하려는 것인 것 같다.  </p><h2 id="EntityManagerFactory"><a href="#EntityManagerFactory" class="headerlink" title="EntityManagerFactory"></a>EntityManagerFactory</h2><p>엔티티 매니저는 여러 스레드가 동시에 접근하면 동시성 문제가 발생하므로 스레드 간에 절대 공유하면 안 된다.  </p><p>동시성(Concurrency): 유저가 체감하기에는 동시에 수행하는 거 처럼 보이지만 사실은 유저가 체감할 수 없는 짧은 시간단위로 작업들을 번갈아가면서 수행하는 것이다.<br>예를 들면 싱글 코어에서 멀티 스레드를 구현하기 위해서 쓰이는 기법?이다.<br>각 스레드들이 동시에 동작하는 거 같지만 알고 보면 스레드들이 아주 짧은 시간마다 번갈아가면서 작업을 수행하고 있는 것이다.<br>병렬(Parallelism): 우리가 생각하는 그 진짜 동시에 실행하는 개념을 생각하면 될 것 같다.<br>실제로 동시에 여러 작업이 수행되는 개념이다.<br>멀티 코어에서 멀티 스레드를 구현할 때 쓰이는 기법?이다.<br>각 스레드들이 동시에 동작한다. </p><p><del>내가 과자 먹으려고 하는데 누가 와서 뺏어먹을 수도 있기 때문에…</del><br>내가 데이터를 수정하고 있는데 다른 스레드에서 해당 데이터를 미리 수정해버리면 안 되기 때문…<br>따라서 엔티티 매니저는 하나를 공유하면 안 되고, 상황에 따라서 계속해서 만들어줘야한다.<br>그럼 이런 엔티티 매니저는 누가 만들어줄까?<br>바로 엔티티 매니저 팩토리(공장)이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Join</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 아직까지는 해당 엔티티를 엔티티 매니저가 관리하지 않는다.</span></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setName(name);</span><br><span class="line">        member.setAge(age);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// META-INF/persistence.xml에서 이름이 db인 persistence-unit을 찾아서 엔티티 매니저 팩토리를 생성 </span></span><br><span class="line">        EntityManagerFatory emf = Persistence.createEntityManagerFactory(<span class="string">"db"</span>);</span><br><span class="line">        EntityManager em = emf.createEntityManager();</span><br><span class="line">        EntityTransaction tx = em.getTransaction();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 엔티티 매니저에서 수행하는 모든 로직은 트랜잭선 안에서 수행돼야 한다.</span></span><br><span class="line">            tx.begin();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 이렇게 하면 해당 엔티티 매니저의 영속성 컨텍스트에 위에서 만든 member 객체가 저장된다.  </span></span><br><span class="line">            <span class="comment">// 이제 member 엔티티는 엔티티 매니저의 관리 대상이 되고, 영속성을 가졌다고 말할 수 있다.</span></span><br><span class="line">            em.persist(member);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 트랜잭션을 커밋한다.</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="comment">// 어떤 이유에서 오류가 났다면 트랜잭션을 롤백 시켜줘야한다.</span></span><br><span class="line">            tx.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 엔티티 매니저를 종료시켜줘야 한다.  </span></span><br><span class="line">            <span class="comment">// 아마 더 이상 사용하지 않는 자원이므로 메모리에 자원을 반환하지 않으면</span></span><br><span class="line">            <span class="comment">// 성능 상 문제가 있어서 이렇게 종료시켜줘야 하는 건지 모르겠다. </span></span><br><span class="line">            em.close();</span><br><span class="line">        &#125;</span><br><span class="line">        emf.close(); <span class="comment">// 마찬가지로 엔티티 매니저 팩토리도 더이상 쓰지 않는다면 종료시켜줘야 한다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>공장(엔티티 매니저 팩토리)에서 제품(엔티티 매니저)를 찍어내는 개념이라고 보면 될 것 같다.<br>엔티티 매니저 팩토리는 엔티티 매니저와 달리 여러 스레드가 동시에 접근해도 안전하다.<br>단순히 엔티티 매니저만 찍어대는 녀석이기 때문이다.  </p><p>비용도 보면 공장을 짓는 비용은 굉장히 크다.<br>그래서 엔티티 매니저 팩토리는 DB 당 하나 밖에 사용하지 않는다.<br>그에 비해 공장에서 제품을 찍어내는 것은 너무나도 당연하고 빈번하게 일어나는 일이기 때문에 비용이 엄청 크게 들지 않는다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EMF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      EntityManagerFatory emf = Persistence.createEntityManagerFactory(<span class="string">"db"</span>);</span><br><span class="line">      EntityManagerFatory emf2 = Persistence.createEntityManagerFactory(<span class="string">"db"</span>);</span><br><span class="line">      </span><br><span class="line">      System.out.println(emf == emf2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 그냥 일반적으로 엔티티 매니저 팩토리를 사용하면 계속 새로운 엔티티 매니저 팩토리를 생성한다.<br>따라서 동일한 엔티티 매니저 팩토리를 공유해서 사용하려면 싱글턴 인스턴스나 의존성 주입 등등을 통해 개발자의 의식적인 노력이 필요하다.  </p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> DB </category>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> JPA </tag>
            
            <tag> ORM </tag>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>travis-ci와 coveralls를 이용하여 좀 더 안전하게 협업하기</title>
      <link href="/2017/12/10/travis-ci-coveralls/"/>
      <url>/2017/12/10/travis-ci-coveralls/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/travis-ci-coveralls/thumb.png" alt="">  </p><p>이 글은 <a href="/2017/12/10/ts-node-mocha-chai">Typescript + TSLint + Mocha + Chai + ts-node + NYC로 모던한 프론트 엔드 테스트 환경 구축하기</a>,<br><a href="/2017/12/10/bundle-with-rollup">rollup.js를 통해 모듈 번들링하기</a>에서 이어지는 내용이며,  </p><p>여러 주제를 다루다보니 깊게 다루지는 않고 각각이 무엇을 하는 것인지만 간단하게 설명과 예제를 곁들여 진행하고 있습니다.<br>또한 예제 진행은 <a href="https://www.jetbrains.com/idea/" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ</a>를 통해 진행했습니다.<br><a href="https://www.jetbrains.com/webstorm/" rel="external nofollow noopener noreferrer" target="_blank">WebStorm</a>으로 진행해도 상관 없고, <a href="https://code.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">VS Code</a>와 진행하면 더 짱짱맨일지도 모르겠습니다.  </p><a id="more"></a><p>각 단계 별 깃헙 저장소 브랜치를 제공하고 있고, 이 포스트의 최종 결과물은 <a href="https://github.com/perfectacle/front-test-setting" rel="external nofollow noopener noreferrer" target="_blank">front-test-setting 저장소</a>에서 확인 가능합니다.</p><h2 id="CI-Continuous-Integration"><a href="#CI-Continuous-Integration" class="headerlink" title="CI(Continuous Integration)"></a>CI(Continuous Integration)</h2><p>지속적인 통합이라고 직역이 되는데 그냥 뭔소린지 모르겠으니 영어의 느낌을 그대로 갖고 있는 게 좋은 것 같다.<br>CI는 <code>빌드, 테스트, 배포 등등의 잡다구레한 일을 자동화 해주는 도구</code> 정도로 알고 있다.<br>우리는 여기서 빌드와 테스트만 자동화 해볼 예정이다.  </p><h3 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a><a href="https://travis-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">Travis CI</a></h3><p>유사품으로 <a href="https://jenkins-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">젠킨스</a>라는 게 있는데 이거는 별도의 CI 서버를 구축해야해서 사내에서 많이 쓰고,<br>Travis CI를 사용하면 별도의 서버를 구축하지 않고 바로 사용이 가능하기 때문에 오픈소스 진영에서 많이 사용한다.<br>그럼 이 CI를 왜 써야할까…?  </p><ol><li>일단 내가 테스트 코드 매번 돌리기 귀찮음…(푸시하면 알아서 Travis CI가 돌고 결과를 알려줌.)  </li><li>풀리퀘스트 받을 때 남이 내 코드를 어떤 식으로 깔아뭉갰을지 모르므로 테스트가 통과됐으면 내 코드에 대한 안전성도 보장됨.  </li></ol><p>여러가지 이유가 있겠지만 나는 주로 위 이유 때문에 Travis CI를 사용했다.<br><img src="/images/travis-ci-coveralls/travis-ci01.png" alt="홈페이지로 가서 sign in with github을 누르고 로그인 해주자."></p><p><img src="/images/travis-ci-coveralls/travis-ci02.png" alt="Travis CI가 요청하는 권한들을 승인해주자."></p><p><img src="/images/travis-ci-coveralls/travis-ci03.png" alt="이런 화면이 나오면..."></p><p><img src="/images/travis-ci-coveralls/travis-ci04.png" alt="우측 상단의 프로필 - Accounts를 눌러주자."></p><p><img src="/images/travis-ci-coveralls/travis-ci05.png" alt="그리고 Sync Account를 한 번 해주자."></p><p><img src="/images/travis-ci-coveralls/travis-ci06.png" alt="그럼 우리의 저장소가 보이게 된다.">  </p><p><img src="/images/travis-ci-coveralls/travis-ci07.png" alt="원하는 저장소를 on 해주고, 톱니바퀴를 눌러보자."></p><p><img src="/images/travis-ci-coveralls/travis-ci08.png" alt="어떨 때 빌드할 것인지 cronjob 등등의 설정이 가능하다."></p><p>그리고 travis ci에 대한 설정 파일도 만들어줘야한다.<br>우선 우리의 코드는 자바스크립트이기 때문에 Node.js 위에서 돌리면 된다.<br>.travis.yml 파일을 만들고 아래와 같이 설정해주면 된다.  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"node"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"lts/*"</span></span><br></pre></td></tr></table></figure><p>각 버전에 대한 자세한 설명은 <a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/#Specifying-Node.js-versions" rel="external nofollow noopener noreferrer" target="_blank">Specifying-Node.js-versions</a>을 참고하면 된다.  </p><p><img src="/images/travis-ci-coveralls/travis-ci09.png" alt="깃헙 저장소에 push를 하게 되면 travis ci가 자동으로 돌게 된다."></p><p><img src="/images/travis-ci-coveralls/travis-ci10.png" alt="노란 아이콘을 누르고 들어오면 빌드에 대한 상세한 상황을 볼 수 있다.">  </p><p><img src="/images/travis-ci-coveralls/travis-ci11.png" alt="모든 빌드를 성공하면 Build Passing이란 간지나는 뱃지가 생성된다.">  </p><p><img src="/images/travis-ci-coveralls/travis-ci12.png" alt="배지를 클릭하면 배지를 달 수 있는 각종 양식을 제공한다."></p><p><img src="/images/travis-ci-coveralls/travis-ci13.png" alt="풀리퀘를 날려도 알아서 Travis CI가 돈다.">  </p><p>따라서 빌드가 성공하지 않은 풀리퀘는 적어도 확인해 볼 것도 없이 반려하면 되는 풀리퀘가 되는 것이다.<br>(가끔 노드 버전에 따라 xx 맞게 설치도 실패하는 경우도 많아서 100% 신뢰할 만한 건 아니다.)</p><h2 id="Coveralls"><a href="#Coveralls" class="headerlink" title="Coveralls"></a><a href="http://coveralls.io/" rel="external nofollow noopener noreferrer" target="_blank">Coveralls</a></h2><p>NYC(Istanbul)은 로컬에서 테스트 커버리지를 측정하는 도구였다.<br>Coveralls는 깃헙 저장소와 연계해서 NYC로 측정한 테스트 커버리지를 알려준다.  </p><p><img src="/images/travis-ci-coveralls/coveralls01.png" alt="우리는 돈이 없으니 Get Started For Free를 눌러주자."></p><p><img src="/images/travis-ci-coveralls/coveralls02.png" alt="깃헙을 쓰니까 깃헙 저장소로 가입하자."></p><p><img src="/images/travis-ci-coveralls/coveralls03.png" alt="coveralls의 권한을 승인해주자.">  </p><p><img src="/images/travis-ci-coveralls/coveralls04.png" alt="그리고 나서 Add some repos를 눌러서 저장소를 추가해주자.">  </p><p><img src="/images/travis-ci-coveralls/coveralls05.png" alt="Sync repo를 눌러서 한 번 싱크를 맞춰주자.">  </p><p><img src="/images/travis-ci-coveralls/coveralls06.png" alt="원하는 저장소를 ON 해주자.">  </p><p><img src="/images/travis-ci-coveralls/coveralls07.png" alt="그럼 이제 Deatils 버튼이 생기는데 클릭해보자.">  </p><p><img src="/images/travis-ci-coveralls/coveralls08.png" alt="private 저장소를 위한 coveralls 설정"><br>우리 저장소는 public이라 해당 설정을 할 필요가 없지만 로컬에서 테스트 커버리지에 대한 결과도 coveralls로 전송하려면 위 과정을 진행해야한다.<br>그리고 repo_token의 경우에는 저장소에 접근 가능한 토큰이므로 절대 외부로 공개해서는 안 된다.  </p><p>우선 coveralls를 설치하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S coveralls</span><br></pre></td></tr></table></figure><p>그리고 프로젝트 디렉토리에 .coveralls.yml 파일을 만들자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .coveralls.yml</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service_name:</span> <span class="string">travis-pro</span></span><br><span class="line"><span class="attr">repo_token:</span> <span class="string">&#123;token&#125;</span></span><br></pre></td></tr></table></figure><p>해당 파일은 토큰을 가지고 있기 때문에 어디에도 공개해서는 안 되는 정보기 때문에 꼭 .gitignore에 등록해두자.  </p><p>그리고 nyc의 테스트 커버리지의 정보를 전송하기 위해 package.json에 coveralls 스크립트를 추가하자.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"coveralls"</span>: <span class="string">"nyc report --reporter=text-lcov | coveralls"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>npm test</code>를 때리고 <code>npm run coveralls</code>를 때리고 나면 coveralls로 해당 테스트 커버리지 정보가 전송된다.  </p><p><img src="/images/travis-ci-coveralls/coveralls09.png" alt="coveralls로 로컬에서 측정한 테스트 커버리지가 잘 전송됐다.">  </p><p><img src="/images/travis-ci-coveralls/coveralls10.png" alt="해당 빌드를 눌러보면 자세한 정보를 볼 수 있다.">  </p><p>이제 Travis CI와 Coveralls를 연계해 볼 차례이다.<br>설정은 간단하게 .travis.yml에 아래 코드만 추가해주면 된다.  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coveralls</span></span><br></pre></td></tr></table></figure><p>빌드가 성공하면 테스트 커버리지를 coveralls로 전송하는 스크립트만 추가하면 된다.  </p><p>이제 푸시/풀리퀘를 날려도 coveralls가 자동으로 테스트 커버리지를 측정한다.  </p><p><img src="/images/travis-ci-coveralls/coveralls11.png" alt="이제 풀리퀘를 날리면 간지나게 coveralls가 붙게 된다."></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>Typescript, TSLint, Mocha, Chai, ts-node, nyc, rollup, Travis CI, Coveralls 등 다양한 주제를 다루려다보니<br>포스팅 시간도 길었고 내용도 루즈해졌고, 깊이도 거의 없다 싶이 해서 아쉽긴 한 포스트입니다.<br>하지만 뭔가 이제 오픈소스나 작업 환경을 좀 더 간지나게 세팅할 수 있다는 것에 뿌듯하긴 한데…<br>이런 게 설레발 주도 개발인가 싶기도 하네요… ㅎㅎ</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travis CI </tag>
            
            <tag> Coveralls </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rollup.js를 통해 모듈 번들링하기</title>
      <link href="/2017/12/10/bundle-with-rollup/"/>
      <url>/2017/12/10/bundle-with-rollup/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/bundle-with-rollup/thumb.png" alt=""></p><p>이 글은 <a href="/2017/12/10/ts-node-mocha-chai">Typescript + TSLint + Mocha + Chai + ts-node + NYC로 모던한 프론트 엔드 테스트 환경 구축하기</a>에서 이어지는 내용이며,<br>이 글을 본 이후에 <a href="/2017/12/10/travis-ci-coveralls">travis-ci와 coveralls를 이용하여 좀 더 안전하게 협업하기</a>를 보는 걸 추천드립니다.<br>여러 주제를 다루다보니 깊게 다루지는 않고 각각이 무엇을 하는 것인지만 간단하게 설명과 예제를 곁들여 진행하고 있습니다.<br>또한 예제 진행은 <a href="https://www.jetbrains.com/idea/" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ</a>를 통해 진행했습니다.<br><a href="https://www.jetbrains.com/webstorm/" rel="external nofollow noopener noreferrer" target="_blank">WebStorm</a>으로 진행해도 상관 없고, <a href="https://code.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">VS Code</a>와 진행하면 더 짱짱맨일지도 모르겠습니다.  </p><a id="more"></a><p>각 단계 별 깃헙 저장소 브랜치를 제공하고 있고, 이 포스트의 최종 결과물은 <a href="https://github.com/perfectacle/front-test-setting/tree/rollup-umd" rel="external nofollow noopener noreferrer" target="_blank">rollup-umd 브랜치</a>에서 확인 가능합니다.  </p><h2 id="모듈-번들러"><a href="#모듈-번들러" class="headerlink" title="모듈 번들러"></a>모듈 번들러</h2><p>typescript 컴파일러나, ES2015+ to ES5 트랜스파일러인 바벨의 경우에는 모듈 간의 의존관계를 알지 못한다.<br>따라서 <a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">Webpack</a>이나 <a href="https://rollupjs.org/" rel="external nofollow noopener noreferrer" target="_blank">Rollup</a>, <a href="https://parceljs.org/" rel="external nofollow noopener noreferrer" target="_blank">parcel</a>과 같은 모듈 번들러로 번들링해야한다.  </p><p>기존에 익숙했던 Webpack과 같은 모듈 번들러 대신에 Rollup을 사용한 이유는 <a href="https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c" rel="external nofollow noopener noreferrer" target="_blank">Webpack and Rollup: the same but different</a><br>이 글에서 <code>Use webpack for apps, and Rollup for libraries</code>이란 구문과 페이스북의 리액트가 rollup을 쓰고 있기 때문에 호기심이 생겨서<br>예제로 만들어 볼 라이브러리를 말아보기 위해서 롤업을 선택해봤다.  </p><h2 id="라이브러리-완성하기"><a href="#라이브러리-완성하기" class="headerlink" title="라이브러리 완성하기"></a>라이브러리 완성하기</h2><p>전에는 util.ts 파일 하나만 있으니 의존 관계를 누가 봐도 알기 쉬웠다.<br>따라서 이번에는 모듈 간의 의존 관계를 조금 복잡하게 해보자.  </p><p>src 폴더 안에 util2.ts 파일을 만들고 아래와 같이 만들어주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/util2.ts</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removedDigits = (numberContainsNotDigits: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> numberContainsNotDigits.replace(<span class="regexp">/[\d]/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>해당 함수의 유닛테스트를 test/util2.spec.ts에 만들어주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">test</span>/util2.spec.ts</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;removedDigits&#125; <span class="keyword">from</span> <span class="string">'../src/util2'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'util2'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">'test removedDigits'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        expect(removedDigits(<span class="string">'010-123-3333'</span>)).to.be.equal(<span class="string">'--'</span>);</span><br><span class="line">        expect(removedDigits(<span class="string">'93/05/30'</span>)).to.be.equal(<span class="string">'//'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그리고 해당 모듈들을 하나로 뭉친 진입점(entry point)로 src 폴더에 index.ts를 만들자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/index.ts</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;removedDigits&#125; <span class="keyword">from</span> <span class="string">'./util2'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;removedNotDigits&#125; <span class="keyword">from</span> <span class="string">'./util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  removedDigits, removedNotDigits</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그리고 index.ts는 테스트 커버리지에 포함시키지 않게 .nycrc 설정에 해당 내용을 추가해주자.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"src/index.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>npm test</code>를 때려서 테스트가 정상적으로 수행되는지 확인하자.</p><h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><p>우선 설치부터 해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S rollup rollup-plugin-typescript2 rollup-plugin-tslint rollup-plugin-uglify</span><br></pre></td></tr></table></figure><p>우리 라이브러리는 타입스크립트로 만들 거고, tslint도 쓸 거고, 코드의 양을 줄이기 위해 minify 및 변수 난독화 진행을 위해서 uglify까지 설치했다.  </p><h4 id="package-json-세팅하기"><a href="#package-json-세팅하기" class="headerlink" title="package.json 세팅하기"></a>package.json 세팅하기</h4><p>package.json의 main과 name을 아래와 같이 바꾸고 빌드 스크립트를 추가하자.<br>main은 require 혹은 import 했을 때 직접적으로 import 되는 파일이니 엔트리 포인트를 잘 정해놔야한다.<br>또한 name은 npm에 올릴 생각이라면 npm repository에 올라간 라이브러리와 중복되면 안 된다.<br>그냥 github repository에다가 올려놓고 설치하거나 로컬에 올려놓고 설치하려면 적당한 이름을 지으면 된다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"utils"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist/index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"npm test &amp;&amp; rollup -c"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트가 실패하면 빌드를 실행하지 않는다.<br>만약 테스트를 돌리긴 하지만 테스트가 실패해도 빌드를 수행하고 싶은 경우에는 아래와 같이 빌드 스크립트를 구성하면 된다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"npm test; rollup -c"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-d-ts-만들기"><a href="#index-d-ts-만들기" class="headerlink" title="index.d.ts 만들기"></a>index.d.ts 만들기</h4><p>우리의 라이브러리에 대한 타입 정의 파일을 만들어야한다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch index.d.ts</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'utils' &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 숫자를 포함한 문자열에서 숫자를 제외한 문자를 제거하는 함수</span></span><br><span class="line"><span class="comment">     * @param numberContainsNotDigits 숫자 이외의 문자를 포함한 문자열</span></span><br><span class="line"><span class="comment">     * @return 숫자만 포함한 문자열</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removedNotDigits</span>(<span class="params">numberContainsNotDigits: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 숫자를 포함한 문자열에서 숫자만 제거하는 함수</span></span><br><span class="line"><span class="comment">     * @param numberContainsDigits 숫자를 포함한 문자열</span></span><br><span class="line"><span class="comment">     * @return 숫자만 제외한 문자열</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removedDigits</span>(<span class="params">numberContainsDigits: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 index.d.ts를 만들어두지 않는다면 아래와 같은 현상이 발생한다.<br><img src="/images/bundle-with-rollup/d-ts-01.png" alt="모듈에 대한 타입 정의를 찾을 수 없다."></p><p><img src="/images/bundle-with-rollup/d-ts-02.png" alt="모듈을 로드하고 . 찍었을 때 제대로 자동완성이 되지 않는다.">  </p><p>index.d.ts를 만들어두면 위 현상이 발생하지 않는다.<br><img src="/images/bundle-with-rollup/d-ts-03.png" alt="모듈에 대한 타입 정의를 잘 찾을 수 있다.">  </p><p><img src="/images/bundle-with-rollup/d-ts-04.png" alt=". 찍어도 자동완성이 잘 된다."></p><p>하지만 index.d.ts를 추가하고 테스트해보면 <code>TypeError: Unable to require .d.ts file.</code> 오류가 발생하니 .nycrc를 아래와 같이 수정해줘야한다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"src/index.ts"</span>,</span><br><span class="line">    <span class="string">"**/*.d.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rollup-config-js-세팅하기"><a href="#rollup-config-js-세팅하기" class="headerlink" title="rollup.config.js 세팅하기"></a>rollup.config.js 세팅하기</h4><ul><li>CommonJS 스펙을 준수한 모듈로 번들링하는 경우<br>대부분 Node.js에서만 쓸 용도의 라이브러리를 만들 때 이 경우에 해당한다.<br>rollup.config.js 파일을 아래와 같이 적어주자.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">'rollup-plugin-typescript2'</span>;</span><br><span class="line"><span class="keyword">import</span> tslint <span class="keyword">from</span> <span class="string">'rollup-plugin-tslint'</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'./package.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/index.ts'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: pkg.main,</span><br><span class="line">    format: <span class="string">'cjs'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    typescript(),</span><br><span class="line">    tslint()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>npm build</code> 때리면 빌드된 commonjs 모듈 파일이 dist/index.js에 나오게 된다.  </p><p>설치는 아래와 같이 하면 된다. (자신의 상황에 맞게 설치하면 된다.)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S git://github.com/perfectacle/front-test-setting.git<span class="comment">#rollup-cjs</span></span><br></pre></td></tr></table></figure><p>사용은 아래와 같이 하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;removedDigits, removedNotDigits&#125; = <span class="built_in">require</span>(<span class="string">'utils'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(removedDigits(<span class="string">'93-05'</span>)); <span class="comment">// -</span></span><br></pre></td></tr></table></figure><ul><li>ES Module 스펙을 준수한 모듈로 번들링하는 경우<br>import/export 모듈로 사용하기 위해서 사용하는데 대부분 웹팩과 같은 번들러를 사용할 때 많이 사용한다.<br>rollup.config.js 파일을 아래와 같이 적어주자.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">'rollup-plugin-typescript2'</span>;</span><br><span class="line"><span class="keyword">import</span> tslint <span class="keyword">from</span> <span class="string">'rollup-plugin-tslint'</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'./package.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/index.ts'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: pkg.main,</span><br><span class="line">    format: <span class="string">'es'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    typescript(),</span><br><span class="line">    tslint()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>npm build</code> 때리면 빌드된 ES 모듈 파일이 dist/index.js에 나오게 된다.  </p><p>설치는 아래와 같이 하면 된다. (자신의 상황에 맞게 설치하면 된다.)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S git://github.com/perfectacle/front-test-setting.git<span class="comment">#rollup-esm</span></span><br></pre></td></tr></table></figure><p>사용은 아래와 같이 하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;removedDigits, removedNotDigits&#125; <span class="keyword">from</span> <span class="string">'utils'</span></span><br><span class="line"><span class="built_in">console</span>.log(removedDigits(<span class="string">'93-05'</span>)); <span class="comment">// -</span></span><br></pre></td></tr></table></figure><ul><li>브라우저 전용으로 모듈을 번들링하는 경우<br>브라우저는 모든 리소스가 받아져있는 상태가 아니라서 좀 특수성을 가지기 때문에 CommonJS 스펙 모듈의 사용이 불가능하고,<br>ES 모듈을 구현한 브라우저는 크롬 62+ 말고는 없는 것으로 알고 있다.<br>따라서 브라우저를 지원하기 위해서는 아래와 같이 설정해야한다.  </li></ul><p>우선 package.json에 main 프로퍼티를 수정해주자.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist/util.min.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>롤업 설정은 아래와 같이 바꿔주자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">'rollup-plugin-typescript2'</span>;</span><br><span class="line"><span class="keyword">import</span> tslint <span class="keyword">from</span> <span class="string">'rollup-plugin-tslint'</span>;</span><br><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'./package.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/index.ts'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: pkg.main,</span><br><span class="line">    format: <span class="string">'iife'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// name으로 만든 이름이 전역에 생길 객체의 이름이니 필수이다.</span></span><br><span class="line">  name: <span class="string">'utils'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    typescript(),</span><br><span class="line">    tslint(),</span><br><span class="line">    uglify()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>설치는 아래와 같이 하면 된다. (자신의 상황에 맞게 설치하면 된다.)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S git://github.com/perfectacle/front-test-setting.git<span class="comment">#rollup-browser</span></span><br></pre></td></tr></table></figure><p>그리고 html 파일에서 사용할 때는 아래와 같이 사용하면 된다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 요렇게 쓰면 번거로우니 대부분 CDN을 지원한다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/utils/dist/util.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> &#123;removedDigits, removedNotDigits&#125; = utils;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(removedDigits(<span class="string">'93-05'</span>)); <span class="comment">// -</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>복합적인 상황<br>우리가 만드려는 라이브러리가 범용적으로 사용됐으면 하는 바람이라면 아래와 같이 설정을 하면 된다.<br>우선 package.json에 browser 프로퍼티를 추가해주자.  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist/index.js"</span>,</span><br><span class="line">  <span class="attr">"browser"</span>: <span class="string">"dist/util.min.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>롤업 설정은 아래와 같이 해주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">'rollup-plugin-typescript2'</span>;</span><br><span class="line"><span class="keyword">import</span> tslint <span class="keyword">from</span> <span class="string">'rollup-plugin-tslint'</span>;</span><br><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'./package.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    <span class="comment">// Node and other module bulder for UMD build</span></span><br><span class="line">    &#123;</span><br><span class="line">        input: <span class="string">'src/index.ts'</span>,</span><br><span class="line">        output: &#123;</span><br><span class="line">            file: pkg.main,</span><br><span class="line">            format: <span class="string">'umd'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">'utils'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            typescript(),</span><br><span class="line">            tslint()</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// browser-friendly IIFE build</span></span><br><span class="line">    &#123;</span><br><span class="line">        input: <span class="string">'src/index.ts'</span>,</span><br><span class="line">        output: &#123;</span><br><span class="line">            file: pkg.browser,</span><br><span class="line">            format: <span class="string">'iife'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">'utils'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            typescript(),</span><br><span class="line">            tslint(),</span><br><span class="line">            uglify()</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>umd는 es 모듈, commonjs, amd, iife 등등 모든 모듈 방식을 커버하는 모듈 방식이다.<br>하지만 umd는 기본적으로 iife 모듈보다 용량이 크기 때문에 iife를 uglify 한 것을 브라우저에서 쓰고,<br>나머지 환경에서는 umd 모듈 파일을 사용하는 게 좋다.</p><p>설치는 아래와 같이 하면 된다. (자신의 상황에 맞게 설치하면 된다.)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S git://github.com/perfectacle/front-test-setting.git<span class="comment">#rollup-umd</span></span><br></pre></td></tr></table></figure><p>우선 node에서 사용할 때는 아래와 같이 하면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;removedDigits, removedNotDigits&#125; = <span class="built_in">require</span>(<span class="string">'utils'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(removedDigits(<span class="string">'93-05'</span>)); <span class="comment">// -</span></span><br></pre></td></tr></table></figure><p>다른 모듈 번들러에서 사용할 때는 아래와 같이 사용하면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;removedDigits, removedNotDigits&#125; <span class="keyword">from</span> <span class="string">'utils'</span></span><br><span class="line"><span class="built_in">console</span>.log(removedDigits(<span class="string">'93-05'</span>)); <span class="comment">// -</span></span><br></pre></td></tr></table></figure><p>브라우저에서 사용할 때는 아래와 같이 사용하면 된다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 요렇게 쓰면 번거로우니 대부분 CDN을 지원한다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/utils/dist/util.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> &#123;removedDigits, removedNotDigits&#125; = utils;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(removedDigits(<span class="string">'93-05'</span>)); <span class="comment">// -</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>저는 리액트를 써볼 때 웹팩을 써서 웹팩이 익숙했었는데 rollup을 써보고 나니 앱이 아닌 라이브러리의 경우에는 롤업이 더 적합한 것 같다는 느낌도 많이 들었네요.<br>이 다음 번 시리즈에는 마지막 포스트인 <a href="/2017/12/10/travis-ci-coveralls">travis-ci와 coveralls를 이용하여 좀 더 안전하게 협업하기</a>을 보시면 됩니다.<br>오픈소스, 남들과 협업할 때 어떻게 내 코드의 안전성을 쉽고 빠르게 보장할 수 있을지에 대해 정리해놓았습니다.</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rollup </tag>
            
            <tag> CommonJS </tag>
            
            <tag> ESModule </tag>
            
            <tag> UMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript + TSLint + Mocha + Chai + ts-node + NYC로 모던한 프론트 엔드 테스트 환경 구축하기</title>
      <link href="/2017/12/10/ts-node-mocha-chai/"/>
      <url>/2017/12/10/ts-node-mocha-chai/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ts-node-mocha-chai/thumb.png" alt="">  </p><p>이 글은 <a href="/2017/12/10/bundle-with-rollup">rollup.js를 통해 모듈 번들링하기</a>, <a href="/2017/12/10/travis-ci-coveralls">travis-ci와 coveralls를 이용하여 좀 더 안전하게 협업하기</a>을 읽기 전에 읽어야할 포스트이며<br>여러 주제를 다루다보니 깊게 다루지는 않고 각각이 무엇을 하는 것인지만 간단하게 설명과 예제를 곁들여 진행하고 있습니다.<br>또한 예제 진행은 <a href="https://www.jetbrains.com/idea/" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ</a>를 통해 진행했습니다.<br><a href="https://www.jetbrains.com/webstorm/" rel="external nofollow noopener noreferrer" target="_blank">WebStorm</a>으로 진행해도 상관 없고, <a href="https://code.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">VS Code</a>와 진행하면 더 짱짱맨일지도 모르겠습니다.  </p><a id="more"></a><p>각 단계 별 깃헙 저장소 브랜치를 제공하고 있고, 이 포스트의 최종 결과물은 <a href="https://github.com/perfectacle/front-test-setting/tree/nyc" rel="external nofollow noopener noreferrer" target="_blank">nyc 브랜치</a>에서 확인 가능합니다.</p><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript?"></a><a href="https://www.typescriptlang.org/" rel="external nofollow noopener noreferrer" target="_blank">Typescript</a>?</h2><p><a href="https://github.com/perfectacle/front-test-setting/tree/ts" rel="external nofollow noopener noreferrer" target="_blank">ts 브랜치</a>에 예제 파일이 올라가있습니다.  </p><p>기존 자바스크립트는 동적 타입이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변수 a에는 어떠한 값이든 들어갈 수 있다.</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">'1'</span>;</span><br><span class="line">a = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수의 매개변수에 뭐가 들어가야할지, 리턴 타입은 무엇인지 함수 선언부를 가지 않는 이상은 알아차리기 힘들다.</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="function"><span class="params">val</span> =&gt;</span> +val;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 따라서 사용하는 측에서는 해당 코드가 에러인지 아닌지는 실행을 해보거나 함수 선언부를 보지 않는 이상은 힘들다.</span></span><br><span class="line">b(<span class="string">'1'</span>).call(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// Uncaught TypeError: b(...).call is not a function</span></span><br></pre></td></tr></table></figure><p>하지만 정적 타입인 타입스크립트에서는 위의 코드를 아래와 같이 런타임 전인 컴파일 에러로 체크해주기 때문에<br>아예 실행 조차 되지 않는 다는 것을 알려주기 때문에 좀 더 안전하게 코드를 작성할 수 있다.<br><img src="/images/ts-node-mocha-chai/ts00.png" alt=""></p><h3 id="Why-Typescript"><a href="#Why-Typescript" class="headerlink" title="Why Typescript?"></a>Why Typescript?</h3><p>기존에 자바스크립트와 같이 동적 타입이 가지는 문제점을 위에서 지적하긴 했지만 그래도 왜 써야하는지 납득이 잘 가지 않는 경우를 대비해 간단하게 나마 비교를 해보았다.<br><img src="/images/ts-node-mocha-chai/js01.png" alt="우선 함수를 사용하려고 할 때 해당 함수의 매개변수 타입과 리턴 타입을 알지 못한다."><br>이는 위에서 설명한 바와 같이 직접 함수 선언부를 찾아가야한다는 단점이 있다.  </p><p><img src="/images/ts-node-mocha-chai/js02.png" alt="갓텔리제이 마저 포기한 자바스크립트의 타입 추론"><br>타입 추론은 맥 OS 기준 커맨드+P 키를 누르면 볼 수 있다.</p><p><img src="/images/ts-node-mocha-chai/js03.png" alt=". 찍은 이후에 어떤 프로퍼티를 사용해야할지 동공지진이 일어날 것이다."><br>이 메소드가 반환하는 게 무슨 타입인지 모르기 때문에 또 직접 함수 선언부를 봐야한다.  </p><p>물론 아예 방법이 없는 것은 아니고 <a href="http://usejsdoc.org/" rel="external nofollow noopener noreferrer" target="_blank">jsdoc</a>을 이용하면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 문자열을 숫자로 반환하는 함수</span></span><br><span class="line"><span class="comment"> * @param val&#123;string&#125; 숫자 문자열</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125; 숫자</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="function"><span class="params">val</span> =&gt;</span> [val];</span><br></pre></td></tr></table></figure><p>위처럼 return 타입에 number를 명시해놓고 배열을 리턴하게 짠 코드를 막지는 못한다.  </p><p><img src="/images/ts-node-mocha-chai/jsdoc01.png" alt="이제 함수를 쓰려고 할 때 리턴 타입과 매개변수 타입을 알 수 있다.">  </p><p><img src="/images/ts-node-mocha-chai/jsdoc02.png" alt="매개변수에 뭘 넣어야하는지 잘 알려주는 갓텔리제이">  </p><p><img src="/images/ts-node-mocha-chai/jsdoc03.png" alt=". 찍었을 때 이제 숫자에서만 사용 가능한 속성들이 자동완성으로 뜬다.">  </p><p><img src="/images/ts-node-mocha-chai/jsdoc04.png" alt="인텔리제이로 본 함수의 doc"><br>맥 OS 기준 컨트롤+J 키를 누르면 doc을 볼 수 있다.  </p><p><img src="/images/ts-node-mocha-chai/jsdoc05.png" alt="하지만 사용자의 마이웨이는 막지 못한다."><br>위 사진이 전적으로 왜 타입스크립트를 써야하는지 설명하고 있다.<br>내가 아무리 함수마다 일일이 jsdoc 다느라 뻘짓을 했어도 사용자 측에서 다 무시하고 마이웨이로 코딩하면 런타임 에러로 뻗는다.<br>아예 저런 코드는 실행 자체를 하게 하면 안 되는데 나 조차도 저렇게 코딩을 할지도 모르는 상황이고,<br>오픈소스나 실무에서 협업을 하다보면 저런 현상은 빈번하게 겪게 된다.<br>내가 일일이 다 확인하고 코드리뷰 할 수도 없는 노릇이고 일을 좀 더 효율적으로 하기 위해서 이런 노력을 줄여야한다.  </p><p>그럼 타입스크립트는 어떤지 비교해보자.</p><p><img src="/images/ts-node-mocha-chai/ts01.png" alt="jsdoc 없이도 타입 추론을 잘 한다.">  </p><p><img src="/images/ts-node-mocha-chai/ts02.png" alt="어떤 매개변수를 넣어줘야할지 아주 친절하다.">  </p><p><img src="/images/ts-node-mocha-chai/ts03.png" alt=". 을 찍고 나서도 어디로 가야할지 힌트 제공이 된다.">  </p><p><img src="/images/ts-node-mocha-chai/ts04.png" alt="마이웨이 코딩이 불가능해진다."><br>어쨋든 ts를 다이렉트로 실행하지 못하기 때문에 js 파일로 컴파일 해야하는데 저런 코드는 컴파일 오류로 아예 js 파일로 컴파일 자체가 되질 않는다.<br>따라서 아예 실행 조차 불가능한 코드가 되어버린다.  </p><p>여기까지 봤을 때 js는 jsdoc을 일일이 달아줘야하고, 사용자의 인지적인 노력이 필요한데 ts는 그런 귀찮음이 전혀 사라지게 되는 것이다.<br>물론 이 외에도 ts가 지원하는 기능들은 무궁무진하다. (ES2015+의 슈퍼셋 격이니…)</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>그럼 직접 설치해보고 사용해볼 시간이다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init --y</span><br><span class="line">npm i -S typescript</span><br></pre></td></tr></table></figure><p>위와 package.json을 만들고 타입스크립트를 설정하면 인텔리제이가 알아서 타입스크립트 신택스를 지원해준다.  </p><p><img src="/images/ts-node-mocha-chai/ts05.png" alt="혹시 오류가 난다면 위와 같이 인텔리제이에서 세팅을 해주면 된다."></p><p>ts 컴파일러도 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" rel="external nofollow noopener noreferrer" target="_blank">자세한 설정</a>이 가능한데 글의 범주를 넘어서므로 tsconfig.json을 프로젝트 루트 디렉토리에 아래와 같이 만들었다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"umd"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TSLint"><a href="#TSLint" class="headerlink" title="TSLint"></a>TSLint</h2><p><a href="https://github.com/perfectacle/front-test-setting/tree/tslint" rel="external nofollow noopener noreferrer" target="_blank">tslint 브랜치</a>에 예제 파일이 올라가있습니다.</p><p>협업을 하게 되다보면 서로 코딩 스타일이 다르다.<br>누가 맞고, 틀렸다는 게 아니라 서로 협업을 하는 입장에서는 코딩 컨벤션을 만들고 준수해야 가독성이나 남이 짠 코드에 대한 이해도도 분명히 높아지게 된다.<br>누구는 문자열을 쓰는데 싱글 쿼테이션 쓰고, 누구는 더블 쿼테이션 쓰고, 누구는 들여쓰기를 탭으로 하고, 누구는 스페이스바 2칸으로 하고 그러다보면<br>서로 협업한 코드는 엉망진창이 되고, 파일 별로도 중구난방인 코드가 될 것이다.</p><h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><p>그럼 직접 설치해보고 사용해볼 시간이다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S tslint</span><br></pre></td></tr></table></figure><p>tslint도 자세한 설정이 가능하고, 아래는 간단한 설정을 만들어 본 것이다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"defaultSeverity"</span>: <span class="string">"error"</span>,</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"tslint:recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"jsRules"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"quotemark"</span>: [<span class="literal">true</span>, <span class="string">"single"</span>],</span><br><span class="line">    <span class="attr">"indent"</span>: [<span class="literal">true</span>, <span class="string">"spaces"</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="attr">"curly"</span>: [<span class="literal">true</span>, <span class="string">"ignore-same-line"</span>],</span><br><span class="line">    <span class="attr">"whitespace"</span>: [<span class="literal">true</span>, <span class="string">"check-operator"</span>],</span><br><span class="line">    <span class="attr">"no-trailing-whitespace"</span>: [<span class="literal">true</span>, <span class="string">"ignore-blank-lines"</span>],</span><br><span class="line">    <span class="attr">"max-line-length"</span>: [<span class="literal">true</span>, <span class="number">150</span>],</span><br><span class="line">    <span class="attr">"trailing-comma"</span>: [<span class="literal">true</span>, &#123;<span class="attr">"multiline"</span>: <span class="string">"never"</span>, <span class="attr">"singleline"</span>: <span class="string">"never"</span>&#125;],</span><br><span class="line">    <span class="attr">"ordered-imports"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"no-unused-expression"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"no-unused-variable"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"no-console"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/ts-node-mocha-chai/tslint01.png" alt="인텔리제이에서는 위와 같이 설정해줘야한다.">  </p><p><img src="/images/ts-node-mocha-chai/tslint02.png" alt="tslint를 적용하니 들여쓰기를 2칸 스페이스로 지정했으니 탭으로 들여쓰기 한 코드는 빨간 줄이 간다."></p><h2 id="Test-Code"><a href="#Test-Code" class="headerlink" title="Test Code"></a>Test Code</h2><p><a href="https://github.com/perfectacle/front-test-setting/tree/mocha-chai" rel="external nofollow noopener noreferrer" target="_blank">mocha-chai 브랜치</a>에 예제 파일이 올라가있습니다.</p><p>테스트 코드를 왜 짜야하는지는 구글링을 하면 쉽게 찾을 수 있는데 간단하게 내가 생각한 내용을 정리해봤다.  </p><ul><li>코드에 대한 신뢰도가 높아진다.<br>내가 기존 코드를 수정해도 미리 작성해놓은 테스트 코드가 잘 작동한다면 안심하고 코드를 짤 수 있다.<br>나 혼자 짜면 못 느낄텐데 협업을 하게 되다보면 내 코드 남이 깔아뭉개 놔서 테스트가 실패하는 경우가 빈번해서 사전에 오류를 잡을 수 있는데<br>테스트 코드가 없다면 기존에 내가 짜놓은 로직이 제대로 잘 작동한다는 보장이 없어지게 된다.  </li><li>테스트 해야할 포인트가 줄어든다.<br>테스트를 돌려보고 어떤 테스트가 실패했는지 해당 테스트 코드의 구현부만 다시 손보면 된다.<br>테스트 코드가 없다면 어디서부터 손을 봐야할지 난감한 상황이 많을텐데 이를 방지해준다.  </li></ul><p>물론 이 외에도 수두룩 빽빽한데 나는 아직 테스트 코드 짜는데 늅늅이니 이정도로… ㅠㅠ</p><p>테스트 코드를 짜는데도 테스트를 먼저 작성하고 코드를 후에 구현하는 TDD나<br>ajax를 타야하는 테스트, DB를 거쳐야하는 테스트를 위한 Mocking이나<br>UI 단을 위한 E2E 테스트 등등 많은데 우선 여기서는 간단하게 함수 단위의 유닛 테스트만 만들어보겠다.</p><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a><a href="https://mochajs.org/" rel="external nofollow noopener noreferrer" target="_blank">Mocha</a></h3><p>mocha는 자바스크립트 코드를 테스트 해주는 도구이다.<br>유사 도구로 <a href="https://jasmine.github.io/" rel="external nofollow noopener noreferrer" target="_blank">Jasmine</a>도 있다.<br>바로 설치를 해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S mocha @types/mocha</span><br></pre></td></tr></table></figure><p>@types/mocha는 mocha에 대한 타입 정의를 해놓은 것이다.<br>ts 코드 내에서 모카를 쓰려면 모카에 대한 타입 정의가 있어야 오류 없이 사용 가능하다.<br>그리고 mocha를 쓰기 전에 Chai에 대해서도 알아보고 같이 쓰자.</p><h3 id="Chai"><a href="#Chai" class="headerlink" title="Chai"></a><a href="http://chaijs.com/" rel="external nofollow noopener noreferrer" target="_blank">Chai</a></h3><p>mocha를 바로 사용해도 되지만, mocha를 다양한 <a href="https://mochajs.org/#assertions" rel="external nofollow noopener noreferrer" target="_blank">Assertion 라이브러리</a>들과 사용하면 좀 더 테스트 코드의 가독성이 올라간다.<br>물론 우리나라 문법이나 정서(?)하고는 맞지 않아 보이기도 하지만 영미권 문법으로 이해하기가 한층 수월해져서 많이 쓰이는 것 같다.<br>그 중에 Chai라는 Assertion 라이브러리는 여러 스타일(should, expect, assert)의 Assertion을 지원해주는 라이브러리이다.<br>바로 설치해서 간단한 사용 방법을 알아보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S chai @types/chai</span><br></pre></td></tr></table></figure><p>그리고 프로젝트에 src 디렉토리를 만들고 그 안에 util.ts를 만들어서 아래와 같이 코딩해주자.<br>mocha의 디폴트 테스트 디렉토리가 test이고, spec은 자바스크립트 테스트 코드 파일 이름의 컨벤션 같다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir src</span><br><span class="line">touch src/util.ts</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 숫자를 제외한 문자들을 지워주는 함수이다.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removedNotDigits = (numberContainsNotDigits: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> numberContainsNotDigits.replace(<span class="regexp">/[^\d]/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그리고 test 디렉토리를 만들고, util.spec.ts 라는 util 파일의 테스트 코드를 만들어주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line">touch <span class="built_in">test</span>/util.spec.ts</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'util'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">'test removedNotDigits'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        expect(removedNotDigits(<span class="string">'0123'</span>)).to.be.equal(<span class="string">'0123'</span>);</span><br><span class="line">        expect(removedNotDigits(<span class="string">'010-123-3333'</span>)).to.be.equal(<span class="string">'0101233333'</span>);</span><br><span class="line">        expect(removedNotDigits(<span class="string">'93/05/30'</span>)).to.be.equal(<span class="string">'930530'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그럼 막 빨간줄이 쫙쫙 갈 것이다.<br>여기서 갓텔리제이의 진가를 발휘할 시간이다.  </p><p><img src="/images/ts-node-mocha-chai/mocha-chai01.png" alt="removedNotDigits로 커서를 이동하면 뭔가 넣을 게 있는 거 처럼 힌트를 준다.">  </p><p><img src="/images/ts-node-mocha-chai/mocha-chai02.png" alt="Alt+Enter 키를 누르고 Add import statement를 클릭해주자."><br>그럼 util.ts의 removedNotDigits 함수가 제대로 임포트 된다.  </p><p><img src="/images/ts-node-mocha-chai/mocha-chai03.png" alt="expect 에서도 Alt+Enter 키를 누르고 Import &#39;expect&#39; from &quot;chai&quot;를 클릭해주자.">  </p><p>그리고 test 디렉토리 안에 모카 설정 파일인 mocha.opts 파일을 만들어서 아래와 같이 테스트 코드의 디렉토리를 설정해주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">test</span>/mocha.opts</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--recursive</span><br><span class="line">test/**/*.spec.ts</span><br></pre></td></tr></table></figure><p>그리고 package.json에서 test 스크립트를 다음과 같이 바꿔주면 된다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"mocha"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 터미널에서 다음 명령어를 실행하면 테스트 코드를 실행할 수 있다!  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>그럼 아래와 같은 오류를 마주하게 될 것이다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (exports, require, module, __filename, __dirname) &#123; import &#123;removedNotDigits&#125; from <span class="string">'../src/util'</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="ts-node"><a href="#ts-node" class="headerlink" title="ts-node"></a>ts-node</h3><p><a href="https://github.com/perfectacle/front-test-setting/tree/ts-node" rel="external nofollow noopener noreferrer" target="_blank">ts-node 브랜치</a>에 예제 파일이 올라가있습니다.</p><p>Node.js는 javascript 런타임이지, Typescript 런타임이 아니다.<br>따라서 Typescript 런타임인 ts-node를 설치해야한다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S ts-node</span><br></pre></td></tr></table></figure><p>그리고 mocha.opts 파일에서 아래 한 줄을 추가해줘야한다.<br><code>--require ts-node/register</code>  </p><p><img src="/images/ts-node-mocha-chai/tsnode01.png" alt="그리고 다시 npm test를 때리면 테스트가 성공적으로 마친 걸 볼 수 있다."><br><img src="/images/ts-node-mocha-chai/tsnode02.png" alt="IntelliJ와 같은 IDE를 쓰면 좌측 재생 모양 버튼을 클릭해서 원하는 테스트만 쪼개서 실행하기가 간편하다.">  </p><h2 id="Test-Coverage"><a href="#Test-Coverage" class="headerlink" title="Test Coverage"></a>Test Coverage</h2><p><a href="https://github.com/perfectacle/front-test-setting/tree/nyc" rel="external nofollow noopener noreferrer" target="_blank">nyc 브랜치</a>에 예제 파일이 올라가있습니다.</p><p>테스트 커버리지란 내 테스트 코드로 내가 만든 소스들을 얼마나 커버하고 있는지 를 나타내는 지표이다.<br>테스트 커버리지가 100%면 모든 코드에 대한 테스트 코드가 작성해도 됐다고 보면 무방하다.<br>100%가 되면 좋겠지만 나도 아직 테스트 코드 늅늅이라 어느 정도가 적당한 커버리지인지는 모르겠다.  </p><h3 id="Istanbul"><a href="#Istanbul" class="headerlink" title="Istanbul"></a><a href="https://istanbul.js.org/" rel="external nofollow noopener noreferrer" target="_blank">Istanbul</a></h3><p>Istanbul은 자바스크립트의 테스트 커버리지 도구이다.<br>하지만 여기서는 Istanbul을 사용하지 않을 것이다.</p><h3 id="NYC"><a href="#NYC" class="headerlink" title="NYC"></a><a href="https://github.com/istanbuljs/nyc" rel="external nofollow noopener noreferrer" target="_blank">NYC</a></h3><p>NYC는 Istanbul의 CLI이다.<br>New York City의 줄임말이라는데 참 지명을 좋아한다.<br>나중에 Seoul.js도 나왔으면 ㅎㅎㅎ…</p><p>여튼 NYC x Mocha를 하면 테스트 커버리지를 자동으로 측정할 수 있다.<br>바로 설치해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S nyc</span><br></pre></td></tr></table></figure><p>그리고 .nycrc 파일을 만들어서 간단하게 세팅해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .nycrc</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"require"</span>: [</span><br><span class="line">        <span class="string">"ts-node/register"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"include"</span>: [</span><br><span class="line">        <span class="string">"src/**/*.ts"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"extension"</span>: [</span><br><span class="line">        <span class="string">".ts"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"exclude"</span>: [</span><br><span class="line">        <span class="string">"**/*.d.ts"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"reporter"</span>: [</span><br><span class="line">        <span class="string">"text-summary"</span>,</span><br><span class="line">        <span class="string">"html"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"all"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 mocha.opts에서는 아래 설정을 제거해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--require ts-node/register</span><br></pre></td></tr></table></figure><p>그리고 package.json의 test 스크립트를 다음과 같이 수정해주자.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"nyc mocha"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/ts-node-mocha-chai/nyc01.png" alt="npm test를 때리면 text-summary 리포터의 결과로 테스트 커버리지를 볼 수 있다.">  </p><p><img src="/images/ts-node-mocha-chai/nyc02.png" alt="html 리포터의 결과로 coverage 폴더 안에 html과 관련된 파일들이 생겼다.">  </p><p><img src="/images/ts-node-mocha-chai/nyc03.png" alt="html 파일을 열어보면 보기 좋게 테스트 커버리지가 나온다.">  </p><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>저도 수박 겉핥기로 예제를 따라하며 정리해본 내용이고, 정리해야할 내용이 방대해서 좀 깊이없이 다뤄서 이 부분은 직접 찾아보셔야할 겁니다.<br>이 글의 목적은 그런 것에 대한 디테일 한 설명이 아니라 이런 것도 있다~ 정도의 소개 정도니 자세한 것은 직접 찾아보시길 바랍니다.<br>그리고 지금까지 진행항 내용만으로는 우리가 만든 ts 파일을 외부 사람들이 직접 사용하지 못하니<br>다음 시리즈인 <a href="/2017/12/10/bundle-with-rollup">rollup.js를 통해 모듈 번들링하기</a>를 통해 실제 사람들이 쓸 수 있는 js 파일 형태로 만들어보도록 하겠습니다.</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
            <tag> TSLint </tag>
            
            <tag> Mocha </tag>
            
            <tag> Chai </tag>
            
            <tag> ts-node </tag>
            
            <tag> NYC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(CD(N)) Netlify로 github page에서 jekyll 마냥 hexo(hugo, etc.)을 이용해보자</title>
      <link href="/2017/11/21/netlify/"/>
      <url>/2017/11/21/netlify/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/netlify/thumb.png" alt=""></p><p>이 포스트는 <a href="https://devfest17-seoul.firebaseapp.com" rel="external nofollow noopener noreferrer" target="_blank">2017 GDG Seoul</a>에서 <a href="https://devfest17-seoul.firebaseapp.com/schedule/?sessionId=115" rel="external nofollow noopener noreferrer" target="_blank">Github와 CloudFlare를 이용한 무료 고성능 웹 어플리케이션 호스팅</a>을<br>주제로 발표하신 <a href="https://devfest17-seoul.firebaseapp.com/speakers/7" rel="external nofollow noopener noreferrer" target="_blank">박병진</a> 님의 세션을 듣고 삘이 꽂혀서 바로 실행에 옮긴 삽질을 포스팅했습니다.</p><h2 id="깃헙-페이지의-문제점"><a href="#깃헙-페이지의-문제점" class="headerlink" title="깃헙 페이지의 문제점"></a>깃헙 페이지의 문제점</h2><p>기본적으로 <a href="https://pages.github.com/" rel="external nofollow noopener noreferrer" target="_blank">github page</a>는 <a href="https://jekyllrb.com/" rel="external nofollow noopener noreferrer" target="_blank">지킬</a>이 내장돼있다.<br>따라서 지킬에서 사용한 템플릿들은 별도의 static html 파일로 빌드하지 않아도 서비스가 가능하다.<br>하지만 지킬을 설치하기 어려운 환경이거나 윈도우 유저(과거엔 윈도우에서 지킬 설치가 좀 힘들었다.), 비 지킬 유저(<a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">hexo</a>, <a href="https://gohugo.io/" rel="external nofollow noopener noreferrer" target="_blank">hugo</a>, etc.)의 경우에는  </p><a id="more"></a><ul><li>빌드 된 정적인 파일  </li><li>빌드 되기 전인 템플릿 파일  </li></ul><p>두 벌을 관리해야했다. (별도의 브랜치 혹은 저장소에서 관리를 해야했다.)<br>심지어 자신의 저장소에 빌드 된 파일이 아닌 템플릿 파일이 올라갔다고 착각한 사람들도 많다.<br>컴퓨터를 포맷해서 낭패보기 전에 얼른 다른 브랜치나 저장소에 백업을 해두자.<br>또한 깃헙 페이지의 경우에는 <a href="https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC" rel="external nofollow noopener noreferrer" target="_blank">CDN</a>을 제공하지 않아 글로벌 서비스에는 제약이 따르고,<br>소스의 최적화(minify 및 uglify, 이미지 압축 등등)를 직접 빌드 도구를 돌려야했다.  </p><h2 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a><a href="https://www.netlify.com/" rel="external nofollow noopener noreferrer" target="_blank">Netlify</a></h2><p>netlify는 CI(빌드 및 배포)+CDN의 개념으로 볼 수 있다.<br>그리고 위의 단점들을 고스란히 해결해줬다.<br>물론 커스텀 도메인이 없다면 *.netlify.com 이란 허접스러운 도메인을 써야해서 github.io라는 간지나는 도메인을 눈물을 머금으며 버릴 수 밖에 없다.<br>그나마 닷컴 도메인을 싸게 살 수 있으므로 관심이 있는 사람은 <a href="/2017/11/21/domain-register-godaddy/">(DNS) 1331원에 .com 도메인 사기 (feat. GoDaddy)</a>를 참고하자.  </p><p>당연히 <a href="https://app.netlify.com/signup" rel="external nofollow noopener noreferrer" target="_blank">회원가입</a>부터 진행해야한다.<br>요즘은 소셜 로그인이 활성화가 돼있어서 좀 덜 귀찮은 편인 것 같다.<br>이 포스트에서는 깃헙 페이지+hexo를 netlify로 마이그레이션(?) 할 거기 때문에 github으로 로그인을 진행했다.  </p><h2 id="CD-Continuous-Deploy"><a href="#CD-Continuous-Deploy" class="headerlink" title="CD(Continuous Deploy)"></a>CD(Continuous Deploy)</h2><p>깃헙 페이지와 마찬가지로 무중단 배포를 지원한다.<br>로그인을 하고 나서는 New site from Git 버튼을 클릭해서 netlify에 빌드+배포 할 깃헙 리파지토리를 선택해주자.  </p><p><img src="/images/netlify/00.png" alt=""><br>아마 요 설정에서 어떻게 해야할지 막막(?)할 것이다.<br>github.io를 버리고 갑자기 도메인 이전을 하면 이전 사용자가 혼란을 겪을 수 있으므로 우선 master 브랜치는 냅두고, 별도의 브랜치(나의 경우엔 netlify)를 팠다.<br>만약 신규로 깃헙 페이지를 파는 경우에는 master 브랜치를 바라보게 하면 될 것이다.  </p><p>그리고 빌드 명령어도 어떻게 넣어야할지 애매할텐데 나의 경우에는 <code>hexo clean &amp; hexo deploy; exit 0</code> 명령을 때리는 npm 스크립트를 집어넣었다.<br><code>hexo clean &amp; hexo deploy; exit 0</code>를 넣어도 상관 없는데 뒤에 exit 0를 빼면 <code>Build script returned non-zero exit code: 2</code>라면서 빌드에 실패하게 된다.<br>퍼블리시 디렉토리는 플랫폼(지킬, 헥소, 휴고, 등등) 별로 다를 가능성이 크니 직접 로컬에서 테스트 해보자.<br>위 설정을 다 마쳤다면 deploy를 하자.</p><p><img src="/images/netlify/01.png" alt=""><br>혹시 배포 중에 빌드 오류 등등이 일어날 지 모르니 배포 중인 항목을 선택해서 로그를 유심히 살펴보자.<br>나의 경우에는 빌드하는데 2~3분 가량 걸렸고, CDN의 각 엣지 포인트에 배포되기까지는 5분 가량 걸린 것 같다.  </p><h2 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h2><p><img src="/images/netlify/02.png" alt="해괴망측한 도메인"><br>배포를 성공적으로 마쳤으면 저 해괴망측한 도메인으로 접속이 가능하다.<br>우선 저 도메인부터 바꾸기 위해 site settings를 누르자.<br>그리고 change site name을 눌러서 도메인 및 사이트 이름을 변경해주면 된다.<br>하지만 여전히 *.netlify.com으로 세팅되기 때문에 커스텀 도메인을 사용하고 싶은 사람은 <a href="#도메인-세팅">도메인 세팅</a> 파트를 참조하자.  </p><h2 id="빌드와-배포-설정"><a href="#빌드와-배포-설정" class="headerlink" title="빌드와 배포 설정"></a>빌드와 배포 설정</h2><p>사이트 세팅을 통해서 들어온 페이지에서 좌측 탭을 보면 Build &amp; deploy가 있으니 그걸 클릭해서 들어가자.  </p><ul><li>Deploy settings - 빌드 관련해서 브랜치, 배포 명령어 등등을 설정할 수 있다.  </li><li>Build environment variables - 귀찮으니 <a href="https://www.netlify.com/docs/continuous-deployment/#build-environment-variables" rel="external nofollow noopener noreferrer" target="_blank">문서</a>를 참고하자.  </li><li>Build hooks - 빌드하고 나서 incomming, outgoing web hook을 설정할 수 있다.  </li><li>Single page apps - <del>구글은 지원하지만 네이버는 지원하지 않는</del>검색 엔진이 자바스크립트를 해석하지 못하는 경우 SEO 측면에서 SPA는 큰 결함을 가지는데 서버사이드 렌더링을 지원해주는 것 같다.  </li><li>Post processing - 가끔 보면 google analytics 등등의 경우에 헤드에 스크립트 등등을 삽입해야하는데 요런 코드들을 여기다가 심어놓으면 된다.  </li><li>Asset optimization - 사이트를 최적화해주면 된다고 보면 된다, 안 할 이유가 없으니 enable 시켜주자.  </li><li>Deploy notifications - 빌드 이벤트가 발생할 때 웹훅을 등록해놓는 설정이다.  </li></ul><h2 id="도메인-세팅"><a href="#도메인-세팅" class="headerlink" title="도메인 세팅"></a>도메인 세팅</h2><p>허접한 netlify 도메인에서 탈출할 시간이다.<br>단돈 1331원이면 가능하니 <a href="/2017/11/21/domain-register-godaddy/">(DNS) 1331원에 .com 도메인 사기 (feat. GoDaddy)</a>를 참고해서 닷컴 도메인을 사두고 진행하자.<br>이번엔 좌측 탭에서 Domain management를 클릭해주자.  </p><p>Custom domain에서 add custom domain을 선택하고 자신의 도메인을 등록하자.  </p><p><img src="/images/netlify/03.png" alt="절대 한번에 제대로 되는 법이 없다"><br>아마 위와 같은 오류를 마주치게 될 것이다.<br>오류 문구를 읽다보면 다음과 같은 문장과 마주하게 된다.  </p><blockquote><blockquote><p>Warning! With your current configuration, you won’t benefit from the full advantages of a CDN if you use an A record.<br>   We recommend changing your site’s custom domain to www.*.com, or switching to a DNS provider that supports ANAME or ALIAS records.</p></blockquote></blockquote><p>GoDaddy의 경우에는 dns 관리에서 alias 레코드가 없고 a 레코드만 존재해서 뭔가 CDN의 이점을 충분히 못 받는 것 같아서 찜찜하고,<br>www.*.com과 같이 사용하는 걸 권장한다는 것 같아서 뭔가 좀 그렇다.  </p><p>따라서 Use Netlify DNS를 눌러서 CDN의 이점을 최대한(?) 누려보자!<br>그러면 오류 메세지가 바뀌면서 어떤 네임서버를 추가해야하는지 알려준다.<br>도메인의 DNS관리(GoDaddy의 경우 도메인 관리 - 해당 도메인의 DNS 관리로 들어와야 함)로 가서 네임서버를 변경하자.  </p><p><img src="/images/netlify/04.png" alt="GoDaddy의 경우에는 다음과 같이 하면 된다."><br>저장을 누르고 약 5분이 지난 후 새로고침을 해보면 아래와 같이 해당 도메인으로 정상적인 접근이 가능하다는 것을 볼 수 있다.  </p><p><img src="/images/netlify/05.png" alt="감격의 눈물이 주륵주륵"></p><p>아래로 내려서 HTTPS 탭에서 TLS(a.k.a SSL) 인증서를 붙이자.<br>별도의 인증서가 없다면 Verify DNS configuration - Let’s Encrypt certificate를 클릭하자. (Let’s Encrypt 만만세)<br>원래 Let’s Encrypt에서 발급한 인증서의 경우에는 30일 마다 주기적으로 갱신해줘야하는 귀챠니즘이 존재하는데 알아서 해주는 것 같다.  </p><p>Force HTTPS 탭에서는 http to https(reverse proxy)가 가능하다.<br>당연히 안 해줄 이유가 없으므로 enable 시키자.  </p><p>나머지 설정은 알아서 하자…</p><h2 id="포스트-작성-시-주의사항"><a href="#포스트-작성-시-주의사항" class="headerlink" title="포스트 작성 시 주의사항"></a>포스트 작성 시 주의사항</h2><p>깃헙 페이지로 포스트를 작성할 때 마크다운 문법으로 작성하고 포스트의 날짜도 정할 수 있는데<br>빌드된 로그를 보면 zone.offset has been deprecated in favor of zone.utcOffset 이런 로그가 엄청 찍혀있고,<br>실제 포스트 작성 날짜보다 하루 일찍 URL에 박혀서 배포가 나가는 경우가 있다.<br>우리나라는 UTC+09:00를 쓰기 때문인지 가끔씩 포스트 작성 시간이 09시를 넘어가지 않으면 전날로 URL이 박혀서 배포가 나가게 된다.<br>github page에 직접 운영할 때는 별 이슈가 없었지만, 앞으로 포스트 쓸 때는 각별히 주의를 해야할 것 같다. </p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Web Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(DNS) 1331원에 .com 도메인 사기 (feat. GoDaddy)</title>
      <link href="/2017/11/21/domain-register-godaddy/"/>
      <url>/2017/11/21/domain-register-godaddy/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/domain-register-godaddy/thumb.png" alt=""></p><p>웹 개발을 배울 때 항상 나만의 도메인을 가지고 싶었다.<br>github.io 라는 간지나는 도메인을 가지고 있긴 했지만, 지킬 내장이라 hexo를 쓰는 나로선 조금의 불편함이 존재했다.<br>따라서 io 도메인을 사려고 했지만 <a href="https://kr.godaddy.com/tlds/io-domain" rel="external nofollow noopener noreferrer" target="_blank">6만원이 넘어갔다…</a><br>그래서 값은 싸지만 나름 구리지 않은 닷컴 도메인을 사기로 마음 먹고 가장 저렴한 곳을 찾았다.  </p><a id="more"></a><h2 id="GoDaddy"><a href="#GoDaddy" class="headerlink" title="GoDaddy"></a><a href="https://godaddy.com" rel="external nofollow noopener noreferrer" target="_blank">GoDaddy</a></h2><p>우선 기본적으로 <a href="https://sso.godaddy.com/account/create?realm=idp&path=%2F&app=mya" rel="external nofollow noopener noreferrer" target="_blank">회원가입</a>을 진행해야 한다.<br>나는 귀찮아서 소셜 로그인(페북)을 이용했다.<br>그 이후에 <a href="https://godaddy.com" rel="external nofollow noopener noreferrer" target="_blank">메인 페이지</a>로 가서 도메인을 검색하자.<br>똑같은 도메인이라 하더라도 사람들이 많이 찾는 단어일 수록 가격이 높으니 적당한 단어(자신을 알릴 수 있는?)를 선택하자.  </p><p><img src="/images/domain-register-godaddy/01.png" alt=""><br>메인 페이지에서 도메인을 검색했다면 이런 페이지가 나온다.<br>닷컴 도메인이 현재 가장 싸고 그나마 덜 구리므로 유니크한 닷컴 도메인이 나올 때까지 검색을 하고 카트에 추가를 클릭하고 카트로 이동하자.<br>그리고 나서 뭔 필요없는 옵션들을 막 선택하라고 하는데 다 필요없다고 하자, 다 돈 든다.  </p><p><img src="/images/domain-register-godaddy/02.png" alt=""><br>그리고 최소 구매 단위인 1년을 선택하면 아마 12,800원이 찍힐 것이다.<br>1331원에 구매했다면서 어그로 끌었다고 생각할 수도 있는데 프로모션 코드에 <code>cjcgroupc</code>를 넣자.<br>만약 유효하지 않다고 나오면 <a href="https://www.groupon.com/coupons/stores/godaddy.com" rel="external nofollow noopener noreferrer" target="_blank">GoDaddy 쿠폰 모음</a>에서 쿠폰을 새로 받으면 된다.  </p><p><img src="/images/domain-register-godaddy/03.png" alt=""><br>가격이 1299원까지 떨어졌고 마스터/비자 등등 해외 사이트 결제가 가능한 카드로 진행하면 된다.  </p><p><img src="/images/domain-register-godaddy/04.png" alt="혹시나 못 믿을까봐 인증"><br>아마 또 별도의 수수료가 있거나 해서 1331원까지 올라간 것 같다.  </p><p>여기서 끝난 건 아니다. 도메인 관리 등등의 페이지로 가면 아래와 같이 이메일 인증해야 도메인을 관리할 수 있다고 한다.<br><img src="/images/domain-register-godaddy/05.png" alt=""><br>그런데 이 버튼 눌러도 오는 이메일이라곤 결제 내역이나 지들 서비스 홍보하는 메일 뿐이다.<br>이거 때문에 한시간 가까이 뻘짓을 했지만 <strong>이메일 전송을 누르고 1시간 정도 기다리면 된다.</strong><br>나도 이걸 몰라서 주말에 혼자서 돈날렸나 안절부절 했지만 1시간 후에 이메일 폭탄을 받았다.  </p><p><img src="/images/domain-register-godaddy/06.png" alt="1시간 가량 기다리다 보면 다음과 같은 메일을 받을 수 있다."><br>이메일을 큐에다 쌓아 놓고 일괄 발송 처리하는 것 같은데 그 주기가 1시간 정도 걸리나보다.<br>그리고 1년 단위로 도메인 자동 갱신(결제)이 걸려 있는데 이걸 풀어야 다음 번에도 싼 값에 갱신이 가능한 것 같다.  </p><p>여기까지 마쳐야 도메인 관리가 가능해진다!</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Web Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(DB) MySQL의 데이터를 Elasticsearch로 마이그레이션하기</title>
      <link href="/2017/11/06/mysql-to-elasitcsearch/"/>
      <url>/2017/11/06/mysql-to-elasitcsearch/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/mysql-to-elasitcsearch/thumb.png" alt=""></p><p>MySQL의 데이터를 Elasticsearch로 마이그레이션 할 때 다음과 같은 방법이 존재한다.  </p><ol><li><del>일일이 노가다로 집어넣기</del></li><li>Logstash의 <a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html" rel="external nofollow noopener noreferrer" target="_blank">logstash-input-jdbc</a> 플러그인 사용하기.  </li><li><a href="https://github.com/siddontang/go-mysql-elasticsearch" rel="external nofollow noopener noreferrer" target="_blank">go-mysql-elasticsearch</a> 사용하기.  </li></ol><p>logstash-input-jdbc 같은 경우에는 다음과 같은 단점이 존재한다.  </p><a id="more"></a><ol><li>테이블 명 일일이 입력  </li><li>테이블 별 프라이머리 키 일일이 입력  </li><li>메모리도 많이 잡아먹고, 엄청나게 오래 걸림(성공해본 적이 단 한 번도… ㅜㅜ)</li></ol><p>하지만 단점만 존재하는 것은 아니고 SQL 쿼리문을 써서 사용할 데이터를 뽑아올 수 있다는 점이 큰 메리트라고 할 수 있다.  </p><p>go-mysql-elasticsearch의 장단점은 logstash-input-jdbc와 반대가 아닐까 싶다.<br>따라서 go-mysql-elasticsearch를 토대로 마이그레이션하는 방법을 설명하겠다.<br>(내가 Mac을 쓰므로 맥 기반으로 설명을…)</p><h2 id="사전-설치-사항"><a href="#사전-설치-사항" class="headerlink" title="사전 설치 사항"></a>사전 설치 사항</h2><ul><li>MySQL  </li><li>Elasticsearch  </li><li>Git</li></ul><h2 id="MySQL-bin-log-설정하기"><a href="#MySQL-bin-log-설정하기" class="headerlink" title="MySQL bin log 설정하기"></a>MySQL bin log 설정하기</h2><p>기본적으로 go-mysql-elasticsearch는 MySQL의 bin log를 토대로 싱크를 맞추기 때문에 설치하기 전에 bin log를 세팅해주자.<br>기존적이르 replication DB(혹은 Slave DB) 말고 Master 쪽에 bin log를 만들어주자.<br>replication DB(혹은 Slave DB)는 Master DB의 bin log를 토대로 싱크를 맞추기 때문에 Master DB 쪽에 bin log를 세팅해주는 게 정신 건강에 좋다.  </p><p>먼저 MySQL의 설정을 고쳐야하는데 다음 커맨드로 설정 파일을 찾아낼 수 있다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql --verbose --<span class="built_in">help</span> | grep my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 그럼 아마 다음과 비슷한 결과가 나올 것이다.</span></span><br><span class="line"><span class="comment"># /etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf</span></span><br></pre></td></tr></table></figure><p>왼쪽에 있는 파일부터 순차적으로 참조하여 하나라도 걸리는 게 있으면 그 녀석이 설정 파일이 되는 것이다.  </p><p>나의 경우에는 /usr/local/etc/my.cnf 파일을 제외하고 아무런 설정파일이 미존재 파일이라 해당 파일을 다음과 같이 수정해주었다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">bind</span>-address = 127.0.0.1</span><br><span class="line"><span class="built_in">log</span>-bin = mysql-bin</span><br><span class="line">server-id = 1001</span><br><span class="line">binlog_format = ROW</span><br></pre></td></tr></table></figure><p>log-bin은 bin log가 만들어질 경로이고, server-id는 go-mysql-elasticsearch와 맞춰줘야한다.<br>또한 go-mysql-elasticsearch가 binlog_format = ROW만 지원하므로 위와 같이 적어주자.  </p><p>설정 파일을 바꿨으므로 MySQL을 다시 시작하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server restart</span><br></pre></td></tr></table></figure><p>서버가 재시작 됐다면 아래 쿼리를 입력해서 bin log가 제대로 생성되고 있는지 알아보자.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'log_bin'</span>;</span><br></pre></td></tr></table></figure><h2 id="golang-설치하기"><a href="#golang-설치하기" class="headerlink" title="golang 설치하기"></a>golang 설치하기</h2><p>우선 go-mysql-elasticsearch는 golang으로 만들어져있으므로 golang부터 설치해보자.<br>설치는 다양한 방법이 있지만 가장 간단한 brew로 진행을 하겠다.    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install go</span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/wiki/Setting-GOPATH" rel="external nofollow noopener noreferrer" target="_blank">Setting GOPATH</a>를 참고하여 GOPATH를 지정해주자.<br>본인이 bash를 쓰는지 zsh를 쓰는지 잘 판단해서 GOPATH를 지정해주자.<br>그리고 해당 설정 파일에 다음과 같은 내용을 추가해주자.<br>아래는 brew를 이용하여 설치한 GOPATH이니 버전과 본인이 설치한 버전에 맞춰서 GOPATH를 알맞게 지정해줘야한다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=/usr/<span class="built_in">local</span>/Cellar/go/1.9.2</span><br></pre></td></tr></table></figure><p>그리고 터미널을 새로 띄우거나 껐다 켜야 GOPATH가 제대로 잡히는데 아래 커맨드를 입력하면 새로고침(?) 효과가 있다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment"># 또는 아래와 같이...</span></span><br><span class="line"><span class="comment"># source ~/.bash_profile</span></span><br></pre></td></tr></table></figure><h2 id="go-mysql-elasticsearch-설치하기"><a href="#go-mysql-elasticsearch-설치하기" class="headerlink" title="go-mysql-elasticsearch 설치하기"></a>go-mysql-elasticsearch 설치하기</h2><p><del>해당 저장소의 <a href="https://github.com/siddontang/go-mysql-elasticsearch#install" rel="external nofollow noopener noreferrer" target="_blank">Install</a>을 보고 따라하면 된다.</del><br>아래 명령어들을 따라 치자.<br>혹시나 <a href="#실험적-기능">실험적 기능</a>을 이용해보고 싶은 사람은 깃헙 주소를 <code>github.com/perfectacle/go-mysql-elasticsearch</code>과 같이 고쳐서 설치하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package github.com/siddontang/go-mysql-elasticsearch: no Go files in ... 이런 에러가 나면 무시해주자.</span></span><br><span class="line">go get github.com/siddontang/go-mysql-elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd: no such file or directory: ... 이런 에러가 나면 GOPATH가 제대로 설정되지 않은 것이니 PATH를 다시 잡거나 터미널을 다시 열고 시도해보자.</span></span><br><span class="line"><span class="variable">$GOPATH</span>/src/github.com/siddontang/go-mysql-elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Makefile에 있는 스크립트들을 실행하는 커맨드이다. 코드를 수정하고 컴파일하려면 해당 커맨드를 실행해야한다.</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h2><p>대충 <a href="https://github.com/siddontang/go-mysql-elasticsearch#how-to-use" rel="external nofollow noopener noreferrer" target="_blank">문서</a> 보고, <a href="https://github.com/siddontang/go-mysql-elasticsearch/blob/master/etc/river.toml" rel="external nofollow noopener noreferrer" target="_blank">설정 예제 파일</a> 보면 어떻게 해야할지 각이 나온다.<br>DB와 테이블 관련 내용은 <a href="https://github.com/siddontang/go-mysql-elasticsearch#source" rel="external nofollow noopener noreferrer" target="_blank">Source</a>를 만지면 되고, 특정 컬럼만 싱크를 맞추는 등등의 복잡한 설정을 하려면 <a href="https://github.com/siddontang/go-mysql-elasticsearch#rule" rel="external nofollow noopener noreferrer" target="_blank">Rule</a>를 만져야한다.<br>또한 기본적으로 go-mysql-elasticsearch는 하나의 인덱스(RDS로 치면 DB)에 여러 타입(RDS로 치면 테이블)을 두는 게 아니라<br>한 인덱스에 하나의 타입(테이블 명과 일치하게끔)을 넣는 걸 디폴트 동작으로 두었으니 하나의 인덱스에 다 때려박고 싶거나 한다면 위의 Rule 파트를 참조해야한다.<br>또한 <a href="https://github.com/siddontang/go-mysql-elasticsearch#wildcard-table" rel="external nofollow noopener noreferrer" target="_blank">Wildcard table</a>을 이용하면 테이블 이름을 일일이 입력해야하는 수고를 줄일 수 있는데, 아직은 그 기능이 좀 미약하다.<br>혹시나 데이터베이스 내에 존재하는 모든 테이블의 싱크를 맞추고자 한다면 <a href="https://github.com/perfectacle/go-mysql-elasticsearch" rel="external nofollow noopener noreferrer" target="_blank">포크 뜬 저장소</a>를 다시 go get 메소드로 받아서<br><em>.toml 파일에서 `tables = [“</em>“]`로 설정해주면 된다.<br>모든 설정을 마쳤으면 아래 커맨드를 입력해서 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 반드시 go-mysql-elasticsearch가 저장된 곳으로 이동 후에 아래 커맨드를 입력해야한다.</span></span><br><span class="line"><span class="comment"># toml 파일의 디렉토리도 꼭 설정해주자.</span></span><br><span class="line">./bin/go-mysql-elasticsearch -config=*.toml</span><br></pre></td></tr></table></figure><h2 id="server-id를-모르는-경우"><a href="#server-id를-모르는-경우" class="headerlink" title="server_id를 모르는 경우"></a>server_id를 모르는 경우</h2><p>AWS RDS의 경우 my.cnf를 수정하는 대신 Parameter Group를 정하게 되는데 거기서 server_id를 직접 지정하는 게 아니라 generate 되는 값이다.<br>따라서 우리가 직접 지정하는 것이 아니기 때문에 어떤 값으로 generation 됐는지 확인하기 위해서는 아래 쿼리문을 실행해보고 *.toml 파일에 적용시켜주면 된다.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@server_id</span><br></pre></td></tr></table></figure><h2 id="리셋하기"><a href="#리셋하기" class="headerlink" title="리셋하기"></a>리셋하기</h2><p>go-mysql-elasticsearch를 맨 처음에 켰을 때는 싱크가 아주 잘 맞는다.<br>하지만 실수(?)로 해당 프로그램을 종료했다가 재시작하면 빈로그가 종료된 시점 이후의 데이터에 대해서만 싱크를 맞추기 시작한다.<br>이럴 땐 *.toml 파일의 data_dir로 설정한 디렉토리로 가서 master.info 파일을 삭제한 후 프로그램을 재시작하면 된다.  </p><h2 id="실험적-기능"><a href="#실험적-기능" class="headerlink" title="실험적 기능"></a>실험적 기능</h2><p>go-mysql-elasticsearch 저장소로 풀리퀘를 날렸지만 나의 실력 미숙으로 인해 컨벤션이나 테스트 코드 등등의 부분이 부족하여 아직 머지되지 않은 기능들이다.<br>그렇기 때문에 글을 작성하는 17/11/06에는 최신버전임을 장담하지만 그 이후에는 디프리케잇 된 버전이 될 가능성도 높다.  </p><h3 id="데이터베이스-내에-존재하는-모든-테이블을-싱크하는-기능"><a href="#데이터베이스-내에-존재하는-모든-테이블을-싱크하는-기능" class="headerlink" title="데이터베이스 내에 존재하는 모든 테이블을 싱크하는 기능"></a>데이터베이스 내에 존재하는 모든 테이블을 싱크하는 기능</h3><p>간단하게 아래와 같이 tables에 *를 넣는 것만으로 가능하다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">schema = &quot;test&quot;</span><br><span class="line">tables = [&quot;*&quot;]</span><br><span class="line"></span><br><span class="line"># *을 쓰면 테이블을 2개 이상 넣으면 오류가 난다.</span><br><span class="line"># tables = [&quot;*&quot;, &quot;table&quot;]</span><br></pre></td></tr></table></figure><h3 id="Primary-Key가-없는-테이블-싱크-안-맞추기"><a href="#Primary-Key가-없는-테이블-싱크-안-맞추기" class="headerlink" title="Primary Key가 없는 테이블 싱크 안 맞추기"></a>Primary Key가 없는 테이블 싱크 안 맞추기</h3><p>만약 Primary Key가 없는 테이블이 있는 경우, *으로 모든 테이블과 동기화를 맞추는데 다음과 같은 에러와 마주치게 될 것이다.<br><code>.../go-mysql-elasticsearch/river/river.go:244: schema.table must have a PK for a column</code><br>그럼 또 일일이 PK가 존재하는 테이블을 입력해야한다.<br>이런 수고를 미연에 방지하고자 *.toml 파일에서 아래 속성만 true로 바꿔주면 PK가 없는 테이블은 자동 무시하게 된다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Primary Key가 없는 테이블은 무시</span><br><span class="line">skip_non_pk = true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> DB </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> DB </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) call by value vs call by reference</title>
      <link href="/2017/10/30/js-014-call-by-value-vs-call-by-reference/"/>
      <url>/2017/10/30/js-014-call-by-value-vs-call-by-reference/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-014-call-by-value-vs-call-by-reference/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 열 네 번째 시리즈는 call by value vs call by reference를 주제로 진행하겠다.</p><a id="more"></a><h2 id="call-by-뭐시기…"><a href="#call-by-뭐시기…" class="headerlink" title="call by 뭐시기…?"></a>call by 뭐시기…?</h2><p>Call by 뭐시기 하는 것은 <a href="https://ko.wikipedia.org/wiki/%ED%8F%89%EA%B0%80_%EC%A0%84%EB%9E%B5_(%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)" rel="external nofollow noopener noreferrer" target="_blank">평가 전략(Evaluation Strategy)</a> 중에 하나이며 위키피디아에서는 아래와 같이 서술하고 있다.  </p><blockquote><p>프로그래밍 언어에서 함수 호출의 아규먼트(argument)의 순서를 언제 결정하고 함수에 어떤 종류의 값을 통과시킬지 결정하는 것</p></blockquote><p>즉 함수에 인자로 뭘 던지느냐에 따라서 함수가 어떻게 실행될지에 대한 방법?을 결정하는 것이라고 보면 된다.<br>여러가지 호출 방법들이 있지만 오늘은 대표적인 <a href="#call-by-value">call by value</a>와 <a href="#call-by-reference">call by reference</a>에 대해 살펴보도록 하자.  </p><h2 id="parameter-vs-arguments"><a href="#parameter-vs-arguments" class="headerlink" title="parameter vs arguments"></a>parameter vs arguments</h2><p>우선 call by value에 들어가기에 앞서서 parameter(매개변수)와 arguments(인자)에 대해 짚고 넘어가자.<br>parameter는 formal parameter(형식 매개변수)로 인식하면 되고, arguments는 actual parameter(실인자)로 받아들이면 된다.<br>간단하게 예제로 살펴보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123; <span class="comment">// parameter, formal parameter, 매개변수, 형식 매개변수</span></span><br><span class="line">  <span class="comment">// code...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">func(a); <span class="comment">// arguments, actual parameter, 인자, 실인자</span></span><br></pre></td></tr></table></figure><p>parameter, formal parameter, 매개변수, 형식 매개변수는 <strong>b</strong>가 되는 것이고,<br>실제로 넘어가는 값인 arguments, actual parameter, 인자, 실인자는 <strong>1</strong>이 되는 것이다.</p><p>parameter는 <strong>함수 선언부</strong>에 정의되고, arguments는 <strong>함수 호출부</strong>에서 사용된다.</p><h2 id="call-by-value"><a href="#call-by-value" class="headerlink" title="call by value"></a><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value" rel="external nofollow noopener noreferrer" target="_blank">call by value</a></h2><p>위키피디아에서는 call by value를 다음과 같이 설명하고 있다.</p><blockquote><p>Call by value (also referred to as pass by value) is the most common evaluation strategy,<br> used in languages as different as C and Scheme. In call by value,<br>  the argument expression is evaluated,<br>   and the resulting value is bound to the corresponding variable in the function<br>   (frequently by copying the value into a new memory region).<br>    If the function or procedure is able to assign values to its parameters,<br>     only its local copy is assigned—that is,<br>      anything passed into a function call is unchanged in the caller’s scope when the function returns.</p></blockquote><p>영어가 잘 안 되니 대충 call by value의 설명을 요약해보자면 다음과 같다.  </p><ol><li>arguments로 <strong>값</strong>이 넘어온다.  </li><li>값이 넘어올 때 <strong>복사된 값</strong>이 넘어온다.</li><li>caller(호출하는 녀석)가 인자를 복사해서 넘겨줬으므로 callee(호출당한 녀석)에서 해당 인자를 지지고 볶아도 caller는 <strong>영향을 받지 않는다</strong>.  </li></ol><p>간단한 예제로 살펴보자. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123; <span class="comment">// callee</span></span><br><span class="line">  b = b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">func(a); <span class="comment">// caller</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>기본적으로 자바스크립트는 <a href="/2017/07/01/js-009-data-type-primitive-value/">원시값</a>을 arguments로 넘겨주면 call by value의 형태로 작동한다.<br>따라서 caller가 1을 arguments로 넘겨줘도 그 값은 복사되어 넘어오기 때문에 callee 내부에서 지지고 볶고 해도 전혀 영향을 받지 않아서 결과적으로 a 값은 원래 값인 1이 찍히게 된다.</p><h2 id="call-by-reference"><a href="#call-by-reference" class="headerlink" title="call by reference"></a><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_reference" rel="external nofollow noopener noreferrer" target="_blank">call by reference</a></h2><p>위키피디아에서는 call by reference를 다음과 같이 설명하고 있다.  </p><blockquote><p>Call by reference (also referred to as pass by reference) is an evaluation strategy where a function receives an implicit reference to a variable used as argument,<br> rather than a copy of its value. This typically means that the function can modify (i.e. assign to) the variable used as argument—something that will be seen by its caller.<br>  Call by reference can therefore be used to provide an additional channel of communication between the called function and the calling function.<br>   A call-by-reference language makes it more difficult for a programmer to track the effects of a function call,<br>    and may introduce subtle bugs.</p></blockquote><p>역시나 영어가 부족하니 대충 call by reference를 요약해보자면 다음과 같다.  </p><ol><li>arguments로 <strong>reference(값에 대한 참조 주소, 메모리 주소를 담고있는 변수)</strong>를 넘겨준다.  </li><li>reference를 넘기다 보니 해당 reference가 가리기는 값을 <strong>복사하지는 않는다</strong>.  </li><li>caller(호출하는 녀석)가 인자를 복사해서 넘기지 않았으므로 callee(호출당한 녀석)에서 해당 인자를 지지고 볶으면 caller는 <strong>영향을 받는다</strong>.  </li></ol><p>간단한 예제로 살펴보자. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123; <span class="comment">// callee</span></span><br><span class="line">  b.a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">func(a); <span class="comment">// caller</span></span><br><span class="line"><span class="built_in">console</span>.log(a.a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><del>기본적으로 자바스크립트는 <a href="/2017/07/01/js-010-data-type-object/">참조 타입</a>을 arguments로 넘겨주면 call by reference의 형태로 작동한다.<br>따라서 caller가 객체 a를 parameter로 넘겼을 때 실제 arguments로 넘어오는 값은 객체 a에 대한 reference이지 복사된 객체 a가 아니다.<br>따라서 callee 내부에서 지지고 볶고 하면 영향을 받기 때문에 조심해서 사용해야한다.</del>라고들 오해하고 있다.  </p><h2 id="call-by-sharing"><a href="#call-by-sharing" class="headerlink" title="call by sharing"></a><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing" rel="external nofollow noopener noreferrer" target="_blank">call by sharing</a></h2><p>call by reference에서 끝날 줄 알았는데 뜬금없이 sharing까지 나와버렸다.<br>이게 왜 나왔는지는 아래 예제를 한번 봐보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123; <span class="comment">// callee</span></span><br><span class="line">  b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">func(a); <span class="comment">// caller</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>참조 타입을 넘겼는데 값이 변하지 않았다.<br>바로 자바스크립트에서는 무조건 call by value로 작동하기 때문이다.<br>사람들이 참조 타입을 넘기면 call by reference로 작동한다고 알고 있고, 위 코드가 그 생각이 오해임을 명백하게 밝혀주고 있다.<br>자바스크립트(자바, 루비, 파이썬 등등도 마찬가지…)에서는 참조 타입을 인자로 넘기면 참조값에 대한 <strong>복사본</strong>을 만들어서 넘긴다.  </p><p>이해하기 쉽게 도식화 하면 다음과 같다.  </p><p><strong>메모리 주소는 임의로 지정.</strong><br><img src="/images/js-014-call-by-value-vs-call-by-reference/01.png" alt=""><br>변수 a에 담기는 것은 객체 {}가 담겨있는 메모리 주소 0x12이다. (원시값이 아닌 참조 타입이기 때문)</p><p><img src="/images/js-014-call-by-value-vs-call-by-reference/02.png" alt=""><br>a에 대한 참조값을 복사한 value(b)가 새로 생성된다.<br>아직까지는 이 참조된 값이 {} 객체를 가리키고 있다.  </p><p><img src="/images/js-014-call-by-value-vs-call-by-reference/03.png" alt=""><br><code>=</code> 연산자로 참조값을 재할당하기 때문에 기존에 참조하던 {}에서 1로 참조 대상이 변경되었다.  </p><p>C++을 배웠던 사람이라면 알고있던 call by value와는 다르단 느낌에 매우 혼동을 하게 된다.<br>따라서 이런 혼동을 줄이고자 call by sharing이 등장한 것 같다.  </p><h2 id="Quiz-댓글-유도-작전"><a href="#Quiz-댓글-유도-작전" class="headerlink" title="Quiz(댓글 유도 작전)"></a>Quiz(댓글 유도 작전)</h2><p>그렇다면 아래 예제의 결과는 무엇일까?<br>그 이유까지 한 번 적어보도록 하자! (제발 ㅠㅠ)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  b = (b.a=<span class="number">1</span>);</span><br><span class="line">  b.b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">func(a);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ??</span></span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ol><li>자바스크립트에서 call by reference는 존재하지 않고 <strong>call by value만 존재</strong>한다.  </li><li>참조 타입을 인자로 넘기면 참조값에 대한 <strong>복사본</strong>이 넘어간다.  </li><li>이러한 혼동을 줄이고자 call by sharing이란 용어로 부르기도 한다.</li></ol><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" rel="external nofollow noopener noreferrer" target="_blank">Is Java “pass-by-reference” or “pass-by-value”?</a>  </li><li><a href="https://brunch.co.kr/@kd4/2" rel="external nofollow noopener noreferrer" target="_blank">자바의 아규먼트 전달 방식</a></li><li><a href="http://mussebio.blogspot.kr/2012/05/java-call-by-valuereference.html" rel="external nofollow noopener noreferrer" target="_blank">Java 인자 전달 방식: Call-by-{Value | Reference}?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(HTTP) 상태 코드 - 307 vs 308</title>
      <link href="/2017/10/16/http-status-code-307-vs-308/"/>
      <url>/2017/10/16/http-status-code-307-vs-308/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/http-status-code-307-vs-308/thumb.png" alt="">  </p><p>redirect를 위한 HTTP 상태 코드 301과 302에 대해 잘 모르겠다면 아래 링크를 참고하고 글을 읽도록 하자.<br><a href="http://www.aun-korea.com/301%EB%A6%AC%EB%94%94%EB%A0%89%EC%85%98-302%EB%A6%AC%EB%94%94%EB%A0%89%EC%85%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%82%AC%EC%9A%A9%EB%B2%95/" rel="external nofollow noopener noreferrer" target="_blank">301리디렉션 &amp; 302리디렉션의 차이(사용법)</a>  </p><h2 id="307-Temporary-Redirect-vs-308-Permanent-Redirect"><a href="#307-Temporary-Redirect-vs-308-Permanent-Redirect" class="headerlink" title="307 Temporary Redirect vs 308 Permanent Redirect"></a><a href="https://tools.ietf.org/html/rfc7231#section-6.4.7" rel="external nofollow noopener noreferrer" target="_blank">307 Temporary Redirect</a> vs <a href="https://tools.ietf.org/html/rfc7538#section-3" rel="external nofollow noopener noreferrer" target="_blank">308 Permanent Redirect</a></h2><p>307은 302와 유사하고, 308은 301과 유사하다.<br>다만 차이점이 있다면 전송 받은 HTTP Method를 유지한다는 것이다.<br>301과 302는 redirect 시킬 때 method를 get으로 바꿔서 전송한다.<br>따라서 get 요청을 보낼 때는 문제가 없지만 post 메소드를 요청했을 때 문제가 발생할 수 있다.<br>http to https redirect를 구현할 때 301 또는 302 상태 코드를 쓰게 되면<br>http 프로토콜을 통해 post 메소드로 날아온 게 https 프토토콜을 통해 get 메소드로 변경되면서 컨트롤러나 라우터에 매핑되는 URI가 없어서 오류가 나게 된다.<br>따라서 301 대신에 308을, 302 대신에 307을 쓰면 좀 더 안전하게 redirect 시킬 수 있다.<br>또한 이제 301과 302를 redirect라는 명칭으로 부를 수도 없다.<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301" rel="external nofollow noopener noreferrer" target="_blank">301은 Moved Permanently</a>로, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302" rel="external nofollow noopener noreferrer" target="_blank">302는 Found</a>로 명칭이 변경되었다.  </p><a id="more"></a><h2 id="지금-당장-쓸-수-있나"><a href="#지금-당장-쓸-수-있나" class="headerlink" title="지금 당장 쓸 수 있나?"></a>지금 당장 쓸 수 있나?</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307" rel="external nofollow noopener noreferrer" target="_blank">MDN - 307 Temporary Redirect</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308" rel="external nofollow noopener noreferrer" target="_blank">MDN - 308 Permanent Redirect</a><br>클라이언트 측에서는 문제가 없어보인다.  </p><p>308 응답 코드는 <a href="https://nginx.org/en/CHANGES" rel="external nofollow noopener noreferrer" target="_blank">nginx 1.13.0</a>에 추가되었다.<br>하지만 aws ec2에서 nginx 버전을 확인하면 아래와 같이 나온다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br><span class="line"><span class="comment"># nginx version: nginx/1.12.1</span></span><br></pre></td></tr></table></figure><p>또한 yum으로 업데이트 때려봐도 이게 최신버전이라고 나온다.<br>설치하려면 복잡하고 불안해서 못하겠다…  </p><p><a href="https://ci.apache.org/projects/httpd/trunk/doxygen/group__HTTP__Status.html#ga8b5ce939a6c68f4a9a4c37d205a2eeaa" rel="external nofollow noopener noreferrer" target="_blank">Apache는 2</a>부터 지원하는 것 같은데 정확히 몇 부터 지원하는지는 모르겠다…<br>yum 으로 설치해도 사용이 가능한지는 모르겠다. <del>(절대 귀찮아서 그러는 게 아님…)</del></p><h2 id="마무으리"><a href="#마무으리" class="headerlink" title="마무으리"></a>마무으리</h2><p>의외로 클라이언트는 지원을 잘 하는데 웹서버가 지원을 안 해서 의외였다.<br><a href="https://stackoverflow.com/questions/42136829/whats-difference-between-http-301-and-308-status-codes" rel="external nofollow noopener noreferrer" target="_blank">What’s difference between HTTP 301 and 308 status codes?</a>에 더 자세한 답변이 있고,<br><a href="https://softwareengineering.stackexchange.com/questions/99894/why-doesnt-http-have-post-redirect" rel="external nofollow noopener noreferrer" target="_blank">Why doesn’t HTTP have POST redirect?</a>도 참고하자.<br>그리고 아래 그림이 정말 잘 정리가 돼있는 것 같다.<br><img src="/images/http-status-code-307-vs-308/status.png" alt="출처: http://racksburg.com/choosing-an-http-status-code/">  </p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Web Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> HTTP </tag>
            
            <tag> GET </tag>
            
            <tag> POST </tag>
            
            <tag> Web Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ELB) HTTPS 서버를 열어보자</title>
      <link href="/2017/10/05/https-with-elb/"/>
      <url>/2017/10/05/https-with-elb/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/https-with-elb/thumb.png" alt="요청을 분산해주는 Load Balancer">  </p><p>ELB가 요청 분산 및 오토 스케일링을 위한 것도 있지만 SSL 암호화 지원도 해줘서<br>인스턴스에 SSL 인증서를 물리면 인스턴스에서 암/복호화 등등의 리소스 낭비가 이뤄지지만 ELB에 물리면 ELB에서 다 처리되기 때문에<br>서버 입장에서는 부담이 더 줄어들게 된다.<br>하지만 역시 공짜는 아니니 <a href="https://aws.amazon.com/ko/elasticloadbalancing/pricing/" rel="external nofollow noopener noreferrer" target="_blank">Elastic Load Balancing 요금</a> 파트를 참조하자.<br>돈이 없거나(ㅜㅜ) 공부 목적이 있는 사람은 직접 <a href="/2017/10/05/letsencrypt-with-certbot-feat-aws/">EC2 인스턴스(서버)에 HTTPS 서버 열기</a>를 참고하자.  </p><a id="more"></a><h2 id="Certificate-Manager-SSL-인증서"><a href="#Certificate-Manager-SSL-인증서" class="headerlink" title="Certificate Manager(SSL 인증서)"></a>Certificate Manager(SSL 인증서)</h2><p>L4를 생성하기 전에 HTTPS 프로토콜을 위한 SSL 인증서를 만들어야한다.<br><a href="https://aws.amazon.com/ko/blogs/korea/new-aws-certificate-manager-deploy-ssltls-based-apps-on-aws/" rel="external nofollow noopener noreferrer" target="_blank">공짜라고 하니</a> 걱정하지말고 만들자.  </p><ol><li>Certificate Manager 서비스로 이동한다.  </li><li>상단에 있는 인증서 요청 클릭  </li><li>도메인 이름 입력(유효한 도메인인지 체크하지 않으므로 일단 원하는 도메인 입력)  </li><li>검토 및 요청 클릭 후 확인 및 요청 클릭 후 계속 클릭.  </li><li>인증서 검증 보류 상태인데 관리자 이메일로 인증서를 유효하게 만들 수 있는 이메일이 갔을 것이고, 그 이메일을 확인해서 인증서를 확인시켜주자.    </li><li>상태가 발급완료로 뜨면 끝.</li></ol><p>쫀쫀(?)하게도 다운로드는 지원하지 않는다.<br>AWS 내에서만 쓸 수 있는데 SSL 인증서를 요구하는 서비스들이 대부분 유료기 때문에 노림수로 만든 거 같다.</p><h2 id="ELB-L4-Load-Balancer"><a href="#ELB-L4-Load-Balancer" class="headerlink" title="ELB (L4, Load Balancer)"></a>ELB (L4, Load Balancer)</h2><p>L4로 요청을 보내면 로드 밸런싱 전략에 맞게 각각의 요청을 각 인스턴스에 맞게 분배시켜주는 역할을 한다.<br>L4는 Layer 4, OSI 7계층의 4계층인 Transport Layer를 뜻하는 것 같다.  </p><ol><li>EC2 서비스로 이동한다.  </li><li>좌측 메뉴 중에 LOAD BALANCING - Load Balancers 메뉴로 이동한다.  </li><li>Create Load Balancer 버튼을 클릭하자.  </li><li>세 가지가 나오는데 우리는 Application Load Balancer를 Create하면 된다.<br>잘은 모르겠지만, Network Load Balancer는 대용량 처리를 위한 것 같고,<br>Classic Load Balancer는 과거 방식(물리적인 서버를 구성해서 해당 서버를 로드 밸런서로 활용, 아마도 트래픽을 감당 못해서 그렇게 한 듯?)인데<br>현재는 소프트웨어(nginx 같은 웹서버 등등)로 처리할 수 있을 정도로 많은 발전이 이뤄진 것 같다.  </li><li>Name은 L4를 식별하기 위한 이름,<br>Scheme에서 internet-facing은 외부에서도 접근 가능한 것이고, internal은 내부에서만 사용하는 것인데 우리는 외부 접속을 위해서도 쓰므로 internet-facing을 선택.<br>IP address type은 IPv4로도 충분하니 내비두자.  </li><li>리스너 프로토콜은 보안을 위해 HTTP는 HTTPS로 리다이렉트를 위해 내비두고,<br>Add Listener를 클릭해서 HTTPS(443 포트)도 추가해주.  </li><li>Availability Zones에서 VPC(IDC 같은 역할)<br>어느 IDC에 존재하는 인스턴스를 이용할지 모르므로(확장성 고려?) Availability Zone을 모두 체크하고 Next!  </li><li>Certificate type &gt; Choose a certificate from ACM (recommended)를 선택하고(기본적으로 선택돼있긴 하지만…) SSL 인증서를 선택하고 Next!  </li><li>Security Group을 선택하고 Next!  </li><li>New Target Group으로 내비두고 이름 설정하고, Protocol은 HTTP로 target type은 instance로 하고 Next!<br>실제 인스턴스에는 HTTPS를 위한 SSL 인증서를 물려놓은 게 아니므로 HTTP로 선택해야한다.  </li><li>인스턴스 선택하고 80번 포트로 Add to registered 버튼 클릭으로 추가하고 Next하고 Create로 마무리 하자.</li><li>다시 로드 밸런서 서비스로 이동해서 해당 로드밸런서의 DNS Name을 카피해두자.</li></ol><h2 id="Route-53-도메인-등록"><a href="#Route-53-도메인-등록" class="headerlink" title="Route 53 (도메인 등록)"></a>Route 53 (도메인 등록)</h2><p>DNS용으로 사용하는 TCP/UDP 포트로 53번 포트를 사용하는데 그것에 유래해서 Route 53이란 이름을 지은 것 같다.  </p><ol><li>Route 53 서비스로 이동하자.  </li><li>Hosted zones로 이동해서 원하는 도메인 네임이 없으면 새로 생성하고, 도메인 네임을 클릭해서 들어가자.</li><li>Name에 서브 도메인을 입력하고, Alias를 Yes로 체크한 후에 ELB의 DNS Name을 입력하고 Create를 클릭하면 된다. </li></ol><h2 id="웹서버-설정"><a href="#웹서버-설정" class="headerlink" title="웹서버 설정"></a>웹서버 설정</h2><p>여기서는 nginx를 사용하지만 다른 서버도 비슷할 것으로 예상된다.  </p><ol><li>터미널을 이용해서 ELB에 물려놓은 EC2 인스턴스로 접속을 한다.  </li><li>nginx 서버에서 다음와 같이 설정을 해주어야한다.<br>기본적인 설정 파일은 /etc/nginx/conf.d/virtual.conf에 있다.  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ~.;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ELB stores the protocol used between the client</span></span><br><span class="line">    <span class="comment"># and the load balancer in the X-Forwarded-Proto request header.</span></span><br><span class="line">    <span class="comment"># Check for 'https' and redirect if not</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_x_forwarded_proto</span> != <span class="string">'https'</span>) &#123;</span><br><span class="line">        rewrite ^ https://<span class="variable">$host</span><span class="variable">$request_uri</span>? permanent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header HOST <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 브라우저로 접속해서 http to https 및 SSL 인증서가 제대로 적용됐는지 확인해보면 된다.  </p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>끝이다.<br>혹시 공부 목적이거나 과금이 부담된다면 <a href="/2017/10/05/letsencrypt-with-certbot-feat-aws/">EC2 인스턴스(서버)에 HTTPS 서버 열기</a>를 참고하자.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> ELB </tag>
            
            <tag> CertificateManager </tag>
            
            <tag> HTTPS </tag>
            
            <tag> EC2 </tag>
            
            <tag> Route53 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Certbot) 공짜로 HTTPS 서버를 열어보자. (feat. AWS)</title>
      <link href="/2017/10/05/letsencrypt-with-certbot-feat-aws/"/>
      <url>/2017/10/05/letsencrypt-with-certbot-feat-aws/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/letsencrypt-with-certbot-feat-aws/thumb.png" alt="귀염둥이 Certbot"></p><p>기본적으로 서버와 도메인(SSL 인증서에 넣을)은 확보가 돼있는 상태로 진행을 해야한다.<br>자본이 빵빵하고(?) 좀 더 간단한 걸 원한다면 <a href="/2017/10/05/https-with-elb/">AWS ELB로 HTTPS 서버 열기</a>를 보자.<br>해당 포스트는 ELB 말고 인스턴스에 직접 도메인을 달고, 인스턴스에서 직접 HTTPS 서버를 서비스 하고자 하는 포스트이다.</p><a id="more"></a><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP 통신은 데이터를 암호화하지 않아서 보안에 취약하다.<br>따라서 HTTPS 프로토콜로 통신을 해야하는데 암/복호화를 하려면 키가 존재해야하고,<br>그 키는 인증된 기관에서 만든 게 아니면 신뢰할 수 없는 키가 된다.<br>이 키에 대한 정보가 SSL 인증서에 들어가있는 것이고 이 SSL 인증서를 발급해주는 기관들이 따로 있다.<br>(사실 SSL의 이름은 TLS로 바뀌었지만 계속해서 SSL로 쓰이는 듯…)<br>그런데 그 인증서를 발급해주는 기관에서는 돈을 받고 SSL 인증서를 발급해주고 일정 기간마다 돈을 추가로 내서 갱신해야한다.  </p><h2 id="공짜-SSL-인증서-발급기관"><a href="#공짜-SSL-인증서-발급기관" class="headerlink" title="공짜 SSL 인증서 발급기관"></a>공짜 SSL 인증서 발급기관</h2><p><a href="https://letsencrypt.org/" rel="external nofollow noopener noreferrer" target="_blank">Let’s Encrypt</a>라는 사이트에서 공짜로 SSL 인증서를 발급해준다.<br>과거에는 어떻게 했는지 모르겠지만 지금은 <a href="https://certbot.eff.org/" rel="external nofollow noopener noreferrer" target="_blank">Certbot</a>이라는 프로그램을 통해서<br>Let’s Encrypt의 SSL 인증서를 발급받을 수 있다.<br>또한 Let’s Encrypt는 90일 동안만 유효한 SSL 인증서를 발급해주는데 Certbot을 이용하면 갱신이 매우 쉬워진다.  </p><h2 id="Route-53-도메인-설정하기"><a href="#Route-53-도메인-설정하기" class="headerlink" title="Route 53(도메인) 설정하기"></a>Route 53(도메인) 설정하기</h2><p>기본적으로 도메인을 확보한 이후에 또 해야하는 게 있다.<br>바로 해당 도메인에 대한 CAA(Certificate Authority Authorization) Record를 추가해야한다.<br><a href="https://sslmate.com/caa/" rel="external nofollow noopener noreferrer" target="_blank">SSLMate’s CAA Record Generator</a>에 들어가면 만들 수 있다지만 들어가봐도 네트워크 지식이 없다보니 그냥 아래 스샷과 같이 만들었다.<br><img src="/images/letsencrypt-with-certbot-feat-aws/route53.png" alt="SSL 인증서 발급을 위한 CAA Record"><br>name에는 당연히 발급을 위한 도메인이 들어가야한다.</p><h2 id="Certbot"><a href="#Certbot" class="headerlink" title="Certbot"></a>Certbot</h2><p><a href="https://certbot.eff.org/" rel="external nofollow noopener noreferrer" target="_blank">Certbot</a> 사이트에 들어가면 어떻게 설치하는지 나오지만 나도 헷갈려서 직접 정리해보았다.<br><strong>이 포스트에서는 OS는 Amazon Linux AMI와 웹서버는 nginx를 사용하였다.</strong></p><p>혹시 커맨드를 입력했을 때 권한이 없다고 하면 귀찮으니까 root 유저로 진행하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>SSL 인증서를 발급받기 전에 nginx와 같은 웹서버는 무조건 중단해야한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx stop</span><br></pre></td></tr></table></figure><p>이제 아래 커맨드를 입력해서 certbot 설치를 하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://dl.eff.org/certbot-auto</span><br><span class="line">chmod +x certbot-auto</span><br><span class="line">mv certbot-auto /usr/bin/certbot-auto</span><br></pre></td></tr></table></figure><p>그리고 실제 SSL 인증서를 발급받아보도록 하자.<br>현재 AWS Linux는 아직 정식 지원이 아닌지 –debug를 붙여줘야한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">certbot-auto certonly --standalone -d 발급받을도메인</span><br><span class="line"></span><br><span class="line"><span class="comment"># 위 과정에서 이메일을 물어볼 수도 있다.</span></span><br><span class="line"><span class="comment"># 아래와 같은 메시지가 나온다면 발급에 성공한 것이다.</span></span><br><span class="line"><span class="comment"># IMPORTANT NOTES:</span></span><br><span class="line"><span class="comment">#  - Congratulations! Your certificate and chain have been saved at</span></span><br><span class="line"><span class="comment">#    /etc/letsencrypt/live/example.com/fullchain.pem. Your cert will</span></span><br><span class="line"><span class="comment">#    expire on 2018-mm-dd. To obtain a new version of the certificate in</span></span><br><span class="line"><span class="comment">#    the future, simply run Certbot again.</span></span><br><span class="line"><span class="comment">#  - If you like Certbot, please consider supporting our work by:</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#    Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate</span></span><br><span class="line"><span class="comment">#    Donating to EFF:                    https://eff.org/donate-le</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There were too many requests of a given type :: Error creating new authz :: Too many invalid authorizations recently.</span><br><span class="line">Please see the logfiles in /var/log/letsencrypt for more details.</span><br></pre></td></tr></table></figure><p>위와 같은 오류를 만났다면 단시간 내에 SSL 발급 요청을 너무 많이 했는데 모두<br>유효하지 않은 요청이라 악의적이라 판단해서 해당 도메인에 대해 발급 요청이 일시 중단된 상태이다.<br>1시간 가량 기다린 후에 진행하면 다시 되는 것 같다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- The following errors were reported by the server:</span><br><span class="line">Domain: &lt;my_domain&gt;</span><br><span class="line">Type: connection</span><br><span class="line">Detail: CAA record for &lt;my_domain&gt; prevents issuance</span><br></pre></td></tr></table></figure><p>위와 같은 오류는 도메인에 CAA record가 제대로 등록되지 않았다는 것이다.<br>도메인명과 CAA 레코드에 제대로 된 값들이 들어갔는지 다시 확인해보자.  </p><h2 id="적용하기"><a href="#적용하기" class="headerlink" title="적용하기"></a>적용하기</h2><p>nginx 서버에서 다음와 같이 설정을 해주어야한다.<br>기본적인 설정 파일은 /etc/nginx/conf.d/virtual.conf에 있다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ~.;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>80번 포트로 들어오면 다시 https로 리다이렉트 시키는 부분이다.<br>301 redirect는 영구적으로 옮겼을 때 사용한다.  </p><p>그리고 아래 부분에는 HTTPS 서버를 리스닝 하는 부분을 추가해주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name  ~.;</span><br><span class="line">    listen 443;</span><br><span class="line">    </span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      /etc/letsencrypt/live/도메인/fullchain.pem;</span><br><span class="line">    ssl_certificate_key  /etc/letsencrypt/live/도메인/privkey.pem;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 특정 포트로 다시 보내고 싶을 때</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header HOST $http_host;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-NginX-Proxy true;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#     proxy_pass http://127.0.0.1:8080;</span></span><br><span class="line">    <span class="comment">#     proxy_redirect off;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>도메인 부분에 SSL 인증서를 발급받은 도메인을 입력하면 된다.<br>그리고 실제 톰캣과 같은 WAS나 서버가 띄워져있는 포트로 보내려면 주석을 지우고 포트를 바꿔주면 된다.<br>그리고 아래와 같이 nginx 서버를 재구동 하고 브라우저에서 도메인을 입력하고 http to https와 ssl 인증서가 제대로 적용됐는지 확인해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br><span class="line"><span class="comment"># 혹시 재시작이 안 됐다면 아래 커맨드를 입력하자.</span></span><br><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h2 id="자동-갱신하기"><a href="#자동-갱신하기" class="headerlink" title="자동 갱신하기"></a>자동 갱신하기</h2><p>Certbot으로 발급 받았다 하더라도 Let’s Encrypt의 SSL 인증서를 발급받은 것이기 때문에 유효기간은 90일이다.<br>따라서 수동으로 갱신할 때 명령어는 다음과 같다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot-auto renew</span><br></pre></td></tr></table></figure><p>하지만 갱신일이 30일 이상 남은 경우에는 아래와 같은 오류를 보게될 것이다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cert not yet due for renewal</span><br></pre></td></tr></table></figure><p>따라서 테스트를 위해서는 –dry-run 옵션을 추가해야한다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot-auto renew --dry-run</span><br></pre></td></tr></table></figure><p>하지만 이번에는 아래와 같은 오류가 나게 된다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">produced an unexpected error: Problem binding to port 443: Could not bind to IPv4 or IPv6.. Skipping.</span><br><span class="line">All renewal attempts failed. The following certs could not be renewed</span><br></pre></td></tr></table></figure><p>갱신하려는 인증서를 이미 nginx 서버에서 사용중이기 때문에 갱신이 불가능하다는 내용이다.<br>따라서 nginx를 스탑하고 갱신하고 다시 start 해야하는데 귀찮으므로 hook 옵션을 제공해서 아래와 같이 사용하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot-auto renew --pre-hook <span class="string">"service nginx stop"</span> --post-hook <span class="string">"service nginx start"</span> --dry-run</span><br></pre></td></tr></table></figure><p>드디어 아래와 같은 성공 메시지를 보게 될 것이다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, all renewals succeeded. The following certs have been renewed:</span><br></pre></td></tr></table></figure><p>하지만 아직 테스트 단계이므로 실제로 갱신이 이루어지지는 않는다.<br>갱신일이 궁금하다면 아래 커맨드를 입력하면 된다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> | openssl s_client -connect localhost:443 2&gt;/dev/null | openssl x509 -noout -dates</span><br></pre></td></tr></table></figure><p>30일 남았는지 일일이 체크해서 갱신하기란 매우 귀찮다.<br>따라서 매달 1일에 갱신하는 커맨드를 실행하게 끔 crontab을 사용하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 잡을 등록</span></span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고 아래 잡을 추가하고 저장하자.</span></span><br><span class="line">0 0 1 * * certbot-auto renew --pre-hook <span class="string">"service nginx stop"</span> --post-hook <span class="string">"service nginx start"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 등록된 잡 목록 보기</span></span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>crontab 규칙은 <a href="https://crontab.guru/" rel="external nofollow noopener noreferrer" target="_blank">crontab.guru</a>에서 확인할 수 있고, 직접 만들거나 결과를 예측해볼 수도 있다.  </p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>끝이다.<br>아직 나도 갱신일이 30일 넘게 남아서(사실 오늘 만들어봤지만…) 테스트를 해보지 않았다.<br>나중에 시간이 지나면 잘 되는지 보고 다시 수정해봐야겠다.<br>이 과정이 좀 어렵고 자본이 빵빵하다면(?) <a href="/2017/10/05/https-with-elb/">AWS ELB로 HTTPS 서버 열기</a>를 보자.</p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> HTTPS </tag>
            
            <tag> EC2 </tag>
            
            <tag> Route53 </tag>
            
            <tag> Nginx </tag>
            
            <tag> LetsEncrypt </tag>
            
            <tag> Certbot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>지도 API 성능 개선기</title>
      <link href="/2017/09/28/map-api-performance-improvement/"/>
      <url>/2017/09/28/map-api-performance-improvement/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/map-api-performance-improvement/thumb.png" alt="">  </p><h2 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h2><p><img src="/images/map-api-performance-improvement/01.png" alt="크롬 개발자 도구 네트워크 탭에서 본 API 호출"><br>Time은 데이터 전체를 파싱하는데 걸린 시간이니 무시하고…<br>트래픽이 13MB 남짓…<br>사용자가 조건을 바꿔서 검색을 한다면 데이터 광탈범이 될 가능성이 다분한 상황이었다.  </p><p><img src="/images/map-api-performance-improvement/03.png" alt="순수 응답 시간을 알고 싶어서 다운로드 받아봄"><br>응답 시간이 22초 남짓…  </p><p><img src="/images/map-api-performance-improvement/16.png" alt="StopWatch를 통해 어느 작업에서 병목이 가장 많이 발생하는지 파악">  </p><h2 id="원인-파악"><a href="#원인-파악" class="headerlink" title="원인 파악"></a>원인 파악</h2><h3 id="쿼리"><a href="#쿼리" class="headerlink" title="쿼리"></a>쿼리</h3><p><img src="/images/map-api-performance-improvement/17.png" alt="숙박 연동사 실제 가격 주입하는 부분"><br>숙박 연동 최저가는 jooq로 불러오고 있고, 숙박 연동사 테이블은 jpa로 불러오고 있음.<br>순수 네이티브 쿼리가 아닌 이상 퍼포먼스가 제대로 나오지 않을 것으로 판단됨.  </p><a id="more"></a><p><img src="/images/map-api-performance-improvement/05.png" alt="딜 목록 불러오는 쿼리"><br>실제로 필요한 건 특정 필드 뿐인데 모든 필드를 다 긁어오고 있어서 쿼리 실행속도가 느려진 것임.  </p><h3 id="용량"><a href="#용량" class="headerlink" title="용량"></a>용량</h3><p><img src="/images/map-api-performance-improvement/08.png" alt="실제로 저장된 응답값"><br>이 응답값에는 세 가지 문제점이 존재한다.</p><p><img src="/images/map-api-performance-improvement/09.png" alt="쓸 데 없는 공백을 포함하고 있었다."><br>이 데이터를 줄였을 때 1MB 정도 가량이 줄어들었다.</p><p><img src="/images/map-api-performance-improvement/10.png" alt="쓸 데 없는 컬럼들도 포함하고 있었다."><br>treeAllId라던지, clusterName이나 빈 배열 등등 다른 값들을 가지고 유추할 수 있는 값들을 제거하였다.<br>딱히 이 부분에서는 데이터를 크게 줄일 수가 없었다.  </p><p><img src="/images/map-api-performance-improvement/11.png" alt="컬럼의 값을 가공하지 않고 그대로 들고 있다."><br>이미지의 URL을 담고 있는 컬럼을 불러와서 필요한 정보만 뿌려주는 게 아니라 모든 데이터를 가공없이 뿌려주고 있었다.<br>이 컬럼의 데이터가 하나의 딜에 대한 데이터의 3/4 이상을 차지하고 있었다.<br>대부분의 쓸 데 없는 데이터가 여기서 낭비되고 있었다.</p><h2 id="문제-해결"><a href="#문제-해결" class="headerlink" title="문제 해결"></a>문제 해결</h2><h3 id="아예-API-서버로-따로-분리"><a href="#아예-API-서버로-따로-분리" class="headerlink" title="아예 API 서버로 따로 분리"></a>아예 API 서버로 따로 분리</h3><p>맵 API는 방대한 양의 데이터를 가져오므로 서버의 리소스 사용이 많아 아예 별도의 서버로 구축하기로 판단했다.    </p><h3 id="빠른-응답속도-보장"><a href="#빠른-응답속도-보장" class="headerlink" title="빠른 응답속도 보장"></a>빠른 응답속도 보장</h3><p>클러스터와 딜을 함께 내려주다보니 초기에 유저가 기다려야하는 속도는 15~20초 남짓 대기해야한다.<br><img src="/images/map-api-performance-improvement/12.png" alt="이 화면에서 클러스터를 그리기 위한 정보는 중심 좌표, 지역 코드, 딜 갯수가 끝이다."><br>굳이 딜 목록까지 내려 줄 필요가 없다고 판단이 들어서 클러스터(갯수 포함) 따로 딜 따로 내려주게 끔 API를 두 개로 분리하였다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/api/v4/map/hotel (클러스터)</span><br><span class="line">/api/v4/map/hotel/deals (딜, 기존 API)</span><br></pre></td></tr></table></figure><p>클러스터를 그리기 위한 클러스터 API는 응답 속도가 1~2초 남짓이라 유저가 불편을 느끼지 못할 수준이다.<br>유저가 방심(?)하는 사이에 몰래(?) 딜을 뿌려주는 API를 호출하고 있으면 웬만한 유저들에게는 불편함을 주지 않을 것이다.  </p><h3 id="중간-점검"><a href="#중간-점검" class="headerlink" title="중간 점검"></a>중간 점검</h3><p><img src="/images/map-api-performance-improvement/18.png" alt="데이터는 2MB 남짓으로 줄어들었고, 응답속도도 11초 가량 걸렸다."></p><p><img src="/images/map-api-performance-improvement/19.png" alt="가장 오래 걸리는 게 숙박 딜 실제 가격 주입 부분이다."><br>아직 이정도 시간 가지고는 서비스 하기에는 무리가 있어 보였다.  </p><h3 id="캐싱하기"><a href="#캐싱하기" class="headerlink" title="캐싱하기"></a>캐싱하기</h3><p><strong>딜들과 카테고리 ID를 매핑하는 부분</strong>과 <strong>숙박 딜의 실제 가격을 주입하는 부분</strong>은 애초부터 판매 중인 모든 딜에 대한 정보만 들고있으면 된다.<br>즉, 조건에 구애받지 않는다는 뜻이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HotelDealMinPricesMapper hotelDealMinPricesMapper;</span><br><span class="line">    <span class="keyword">private</span> DealPartnersMapper dealPartnersMapper;</span><br><span class="line">    <span class="keyword">private</span> TreeDealMapMapper treeDealMapMapper;</span><br><span class="line">    <span class="keyword">private</span> CategoryIds categoryIds;</span><br><span class="line">    <span class="keyword">private</span> HotelPartnersAndPrices hotelPartnersAndPrices;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HotelDealMinPricesMapper hotelDealMinPricesMapper, DealPartnersMapper dealPartnersMapper,</span></span></span><br><span class="line"><span class="function"><span class="params">            TreeDealMapMapper treeDealMapMapper, CategoryIds categoryIds, HotelPartnersAndPrices hotelPartnersAndPrices</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hotelDealMinPricesMapper = hotelDealMinPricesMapper;</span><br><span class="line">        <span class="keyword">this</span>.dealPartnersMapper = dealPartnersMapper;</span><br><span class="line">        <span class="keyword">this</span>.treeDealMapMapper = treeDealMapMapper;</span><br><span class="line">        <span class="keyword">this</span>.categoryIds = categoryIds;</span><br><span class="line">        <span class="keyword">this</span>.hotelPartnersAndPrices = hotelPartnersAndPrices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** crontab</span></span><br><span class="line"><span class="comment">     1.Seconds</span></span><br><span class="line"><span class="comment">     2.Minutes</span></span><br><span class="line"><span class="comment">     3.Hours</span></span><br><span class="line"><span class="comment">     4.Day-of-Month</span></span><br><span class="line"><span class="comment">     5.Month</span></span><br><span class="line"><span class="comment">     6.Day-of-Week</span></span><br><span class="line"><span class="comment">     7.Year (optional field)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 */2 * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeisureAndHotelCategoryIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        categoryIds.setLeisureCategoryIds(treeDealMapMapper.selectLeisureCategoryId());</span><br><span class="line">        categoryIds.setHotelCategoryIds(treeDealMapMapper.selectHotelCategoryId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 */2 * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPricesAndPartners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hotelPartnersAndPrices.setPartners(dealPartnersMapper.selectDealPartnersAll());</span><br><span class="line">        hotelPartnersAndPrices.setPrices(hotelDealMinPricesMapper.selectMinPricesAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>서버를 띄웠을 때 최초 1회, 2시간 마다 캐싱하도록 설정하였다.  </p><h3 id="또-다시-중간-점검"><a href="#또-다시-중간-점검" class="headerlink" title="또 다시 중간 점검"></a>또 다시 중간 점검</h3><p><img src="/images/map-api-performance-improvement/20.png" alt="4~6초 가량으로 줄어들었다.">  </p><p><img src="/images/map-api-performance-improvement/21.png" alt="최대 오래 걸리는 게 딜 목록을 불러오는 부분이다.">  </p><p><img src="/images/map-api-performance-improvement/26.png" alt="제일 데이터가 큰 컬럼인 LIST_IMAGE_JSON 컬럼을 빼자 속도가 3배 가량 빨라졌다."></p><h2 id="또-다시-캐싱-전략-세우기"><a href="#또-다시-캐싱-전략-세우기" class="headerlink" title="또 다시 캐싱 전략 세우기"></a>또 다시 캐싱 전략 세우기</h2><p>따라서 모든 딜의 LIST_IMAGE_JSON 컬럼 또한 캐시하도록 하였다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 */2 * * ?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDealsThumbnail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    thumbs.setLeisureThumbs(dealMMapper.selectLeisureThumbnail());</span><br><span class="line">    thumbs.setHotelThumbs(dealMMapper.selectHotelThumbnail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 캐시한 썸네일과 DB에서 불러온 딜 목록을 매핑하도록 변경하였다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mappingDealAndThumbnail</span><span class="params">(List&lt;DealInMap&gt; dealList, Map&lt;Long, String&gt; thumbs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (DealInMap deal : dealList) &#123;</span><br><span class="line">        String thumb = thumbs.get(deal.getId());</span><br><span class="line">        <span class="keyword">if</span>(thumb != <span class="keyword">null</span>) deal.setThumb(thumb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/map-api-performance-improvement/27.png" alt="훨씬 빨라진 실행 속도들"></p><p>하지만 여전히 2~4초 가량 걸리는 상황이었고, 숙박 연동사의 가격을 주입하는 부분은 쿼리문을 쓰지도 않는데 왜 이렇게 오래 걸리는지 한번 파보았다.<br><img src="/images/map-api-performance-improvement/30.png" alt="수많은 리스트 사이에서 딜 아이디 가지고 원하는 요소를 찾는 구문"><br>기본적으로 List에서 데이터를 검색할 때는 입력되는 데이터의 양에 따라 비례하여 처리시간이 증가하는 알고리즘 -O(N)- 이고,<br>(ArrayList는 인덱스를 가지고 순차적으로 탐색하지 않지만 순차적인 숫자 이외에 인덱스를 가지지 않으므로 순서를 모르면 말짱꽝이다.)<br>Map의 경우에는 key, value의 쌍으로 이루어져있어서 입력되는 데이터의 크기에 상관없이 항상 같은 처리 시간을 보장 받는 알고리즘 -O(1)- 이다.<br>Big-O 표기법에 관해서는 <a href="http://www.mydiyworld.net/?p=440" rel="external nofollow noopener noreferrer" target="_blank">초보자를 위한 Big O 표기법 따라잡기</a>을 참고하자.<br>따라서 해당 자료구조를 전부 해시맵으로 바꿔주었다.<br><img src="/images/map-api-performance-improvement/31.png" alt="총 실행 시간이 2초 내외로 줄어들었다.">  </p><p><img src="/images/map-api-performance-improvement/32.png" alt="클러스터 목록을 불러오는 쿼리문"><br>딜 카운트를 세는 것까지 포함하다보니 빨간 박스 안에서 distinct를 쓰게 되었고 그로 인해 속도가 매우 느려졌다.<br>따라서 클러스터 목록을 불러오는 부분도 다음과 같이 캐싱을 했다.  </p><ul><li><p>처음부터 모든 클러스터 목록을 다 불러온다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ct.id treeId, cts.sub_category_tree_id treeAllId,</span><br><span class="line">    ct.tree_code, cts.boundary_n, cts.boundary_e, cts.boundary_w, cts.boundary_s</span><br><span class="line"><span class="keyword">FROM</span> DEAL_M d</span><br><span class="line"><span class="keyword">JOIN</span> TREE_DEAL_MAP tdm</span><br><span class="line">    <span class="keyword">ON</span> d.id = tdm.deal_id</span><br><span class="line"><span class="keyword">JOIN</span> CATEGORY_TREE ct</span><br><span class="line">    <span class="keyword">ON</span> tdm.category_tree_id = ct.id <span class="keyword">AND</span> ct.tree_group_id = <span class="number">27</span> <span class="keyword">AND</span> <span class="number">3</span> &gt; ct.depth</span><br><span class="line"><span class="keyword">JOIN</span> CATEGORY_TREE_SPATIAL cts <span class="keyword">ON</span> ct.id = cts.category_tree_id</span><br><span class="line"><span class="keyword">WHERE</span> deal_status = <span class="string">'IN_SALE'</span> <span class="keyword">AND</span> d.display_yn = <span class="string">'Y'</span> <span class="keyword">AND</span> display_standard_yn = <span class="string">'Y'</span> <span class="keyword">AND</span> del_yn = <span class="string">'N'</span></span><br><span class="line">    <span class="keyword">AND</span> d.lat <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">AND</span> d.lon <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">AND</span> deal_type != <span class="string">'DEAL'</span></span><br></pre></td></tr></table></figure></li><li><p>모든 딜들도 함께 다 불러온다.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.id, d.deal_nm, d.<span class="string">`STANDARD_PRICE`</span>, d.zeropass_price, d.group_price, d.lat, d.lon,</span><br><span class="line">    ct.<span class="string">`tree_code`</span>, d.deal_type</span><br><span class="line"><span class="keyword">FROM</span> DEAL_M d</span><br><span class="line"><span class="keyword">JOIN</span> TREE_DEAL_MAP tdm</span><br><span class="line">    <span class="keyword">ON</span> d.id = tdm.deal_id</span><br><span class="line"><span class="keyword">JOIN</span> <span class="string">`CATEGORY_TREE`</span> ct</span><br><span class="line">    <span class="keyword">ON</span> tdm.<span class="string">`CATEGORY_TREE_ID`</span> = ct.id <span class="keyword">AND</span> ct.tree_group_id = <span class="number">27</span> <span class="keyword">AND</span> ct.depth = <span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> deal_status = <span class="string">'IN_SALE'</span> <span class="keyword">AND</span> d.display_yn = <span class="string">'Y'</span> <span class="keyword">AND</span> display_standard_yn = <span class="string">'Y'</span> <span class="keyword">AND</span> del_yn = <span class="string">'N'</span></span><br><span class="line">    <span class="keyword">AND</span> d.lat <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">AND</span> d.lon <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">AND</span> deal_type != <span class="string">'DEAL'</span></span><br></pre></td></tr></table></figure></li><li><p>1과 2를 일정 시간 간격으로 캐싱한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 */2 * * ?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLeisureCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Cluster&gt; clusters = Cluster.group(clusterAndDealMapper.selectForClusters(<span class="keyword">true</span>));</span><br><span class="line">    List&lt;DealInMap&gt; deals = clusterAndDealMapper.selectForClustersWithDeals(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    clusterCache.setLeisureClusters(clusters);</span><br><span class="line">    clusterCache.setLeisureClustersWithDeals(clustersWithDeals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>요청이 들어오면 필터링 조건에 부합하는 딜의 ID만 구한다.<br>distinct나 group by로 중복된 딜을 제거할 수 있으나 성능 이슈가 있어서 자바에서 중복 딜을 제거하는 방향으로 개발함.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> deal_id <span class="keyword">FROM</span> HOTEL_DEAL_MIN_PRICES</span><br><span class="line"><span class="keyword">WHERE</span> expire_at &gt; <span class="keyword">now</span>() <span class="keyword">AND</span> ymd <span class="keyword">BETWEEN</span> <span class="string">'2017-10-11'</span> <span class="keyword">AND</span> <span class="string">'2017-10-14'</span> <span class="keyword">AND</span> max_capacity &gt;= <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>캐싱한 딜 목록과 조건에 부합하는 딜 ID 목록을 비교하여 조건에 맞는 딜들만 남긴다.  </p></li><li><p>딜과 클러스터를 매핑하고 딜의 갯수를 구한다.  </p></li></ul><p>조건에 구애 받지 않는 모든 쿼리를 캐싱하고 최소한의 쿼리만 날리고 데이터들을 매핑하게 끔 하다보니 0.5초 내외로 시간을 단축시킬 수 있었다.<br><img src="/images/map-api-performance-improvement/33.png" alt=""> </p><h2 id="차후-개선-사항-시간-문제-및-공수와-효율성-문제"><a href="#차후-개선-사항-시간-문제-및-공수와-효율성-문제" class="headerlink" title="차후 개선 사항 (시간 문제 및 공수와 효율성 문제)"></a>차후 개선 사항 (시간 문제 및 공수와 효율성 문제)</h2><ul><li>2MB로 줄였다 하더라도 필터를 계속해서 바꾸다 보면 유저 입장에서는 부담되는 용량일 수도 있다.<br><img src="/images/map-api-performance-improvement/15.png" alt="딜을 내려주는 API에서 반복되는 키값을 빼고 순서를 보장한 배열로 만들어 내려주는 형태로 바꿔주면 데이터를 0.5MB 이상 단축할 수 있다.">    </li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Performance </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring Boot) Gradle의 Profile(dev/production)을 구분지어보자.</title>
      <link href="/2017/09/23/Spring-boot-gradle-profile/"/>
      <url>/2017/09/23/Spring-boot-gradle-profile/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Spring-boot-gradle-profile/thumb.png" alt="">  </p><p>메이븐은 기본적으로 빌드할 때 프로필을 지정할 수 있는 것 같은데 gradle은 직접 삽질을 하면서 깨달았다.<br>다음의 글들을 보고 Spring boot 1.5.7과 Gradle 3.x(아마)? 에 맞게, 내 입맛에 맞게 각색해보았다.  </p><ul><li><a href="http://osozaki.tistory.com/14" rel="external nofollow noopener noreferrer" target="_blank">Gradle 배포 환경 별 설정파일 분리</a></li><li><a href="http://yookeun.github.io/java/2016/04/11/gradle-packing/" rel="external nofollow noopener noreferrer" target="_blank">Gradle에서 서버별 패키징 하기</a></li></ul><a id="more"></a><h2 id="Profile-구성하기"><a href="#Profile-구성하기" class="headerlink" title="Profile 구성하기"></a>Profile 구성하기</h2><p>기본적인 스프링 부트 프로젝트는 다음과 같은 구조를 가질 것이다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ project명</span><br><span class="line">  + src</span><br><span class="line">    + main</span><br><span class="line">      + java</span><br><span class="line">        + package명</span><br><span class="line">          - Application.java</span><br><span class="line">      + resources</span><br><span class="line">        - application.properties</span><br><span class="line">    + test</span><br><span class="line">- build.gradle</span><br><span class="line">- gradlew</span><br><span class="line">- gradlew.bat</span><br></pre></td></tr></table></figure><p>이를 다음과 같이 나눠보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+ project</span><br><span class="line">  + src</span><br><span class="line">    + main</span><br><span class="line">      + java</span><br><span class="line">        + package</span><br><span class="line">          - Application.java</span><br><span class="line">      + resources</span><br><span class="line">        - application-core.properties</span><br><span class="line">      + resources-env</span><br><span class="line">        + dev</span><br><span class="line">          - application.properties</span><br><span class="line">        + prod</span><br><span class="line">          - application.properties</span><br><span class="line">    + test</span><br><span class="line">- build.gradle</span><br><span class="line">- gradlew</span><br><span class="line">- gradlew.bat</span><br></pre></td></tr></table></figure><p>…/resources에는 공통적으로 쓰는 설정들이 들어가면 된다.<br>application-core.properties에는 테스트 삼아서 다음과 같이 저장해주자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=core</span><br><span class="line">core=core</span><br></pre></td></tr></table></figure><p>…/resources-env/dev에는 개발에 필요한 파일들만 들어가면 된다.<br>application.properties에는 테스트 삼아서 다음과 같이 지정해주자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=dev</span><br></pre></td></tr></table></figure><p>…/resources-env/prod에는 개발에 필요한 파일들만 들어가면 된다.<br>application.properties에는 테스트 삼아서 다음과 같이 지정해주자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=prod</span><br></pre></td></tr></table></figure><h2 id="build-gradle-수정하기"><a href="#build-gradle-수정하기" class="headerlink" title="build.gradle 수정하기"></a>build.gradle 수정하기</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ext.profile = (!project.hasProperty(<span class="string">'profile'</span>) || !profile) ? 'dev' : profile</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">main &#123;</span><br><span class="line">resources &#123;</span><br><span class="line">srcDirs <span class="string">"src/main/resources"</span>, <span class="string">"src/main/resources-env/$&#123;profile&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>profile 속성의 기본값은 dev이고 그 값에 따라서 리소스 폴더를 지정하는 것이다.<br>resources 폴더는 공통적으로 쓰이는 설정 파일들이기 때문에 공통적으로 들어가면 된다.  </p><p>샘플 예제는 다음과 같다.  </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">ext &#123;</span><br><span class="line">springBootVersion = <span class="string">'1.5.7.RELEASE'</span></span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'eclipse'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 위치 전에 profile을 구분하는 구문이 오면 오류가 난다.</span></span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.example'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter'</span>)</span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext.profile = (!project.hasProperty(<span class="string">'profile'</span>) || !profile) ? 'dev' : profile</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">main &#123;</span><br><span class="line">resources &#123;</span><br><span class="line">srcDirs <span class="string">"src/main/resources"</span>, <span class="string">"src/main/resources-env/$&#123;profile&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="properties를-사용하는-스프링-빈-만들기"><a href="#properties를-사용하는-스프링-빈-만들기" class="headerlink" title="properties를 사용하는 스프링 빈 만들기"></a>properties를 사용하는 스프링 빈 만들기</h2><p>project/src/main/java/package명 아래에 Bean.java를 만들어주자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;core&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String core;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String test;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">        System.out.println(core);</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">        System.out.println(test);</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@PostConstruct 어노테이션을 사용해서 간단하게 스프링 컨텍스트?가 로딩된 이후에 메소드를 실행하게 했다.<br>또한 스프링 빈으로 등록해야 profile에 있는 값을 불러올 수 있으므로 @Component 어노테이션을 사용했다.<br>@Value 어노테이션은 profile에 등록된 값을 얻어오는 녀석이다. </p><h2 id="실행하기"><a href="#실행하기" class="headerlink" title="실행하기"></a>실행하기</h2><p>당연히 터미널에서 프로젝트 디렉토리로 이동해야한다.  </p><ul><li>Gradle CLI 사용하기<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! prod</span></span><br><span class="line">SPRING_PROFILES_ACTIVE=core gradle clean bootRun -Pprofile=prod</span><br><span class="line"><span class="comment">#! dev</span></span><br><span class="line">SPRING_PROFILES_ACTIVE=core gradle clean bootRun</span><br></pre></td></tr></table></figure></li></ul><p>…/resources 디렉토리 내의 properties 파일을 뒤져서 spring.profiles.active가 core인 녀석을 찾아서 적용시킨다는 내용이다.<br>또한 profile이라는 매개변수에 prod를 인자로 넘긴다는 뜻이다.<br>profile의 기본값을 dev로 지정해줬기 때문에 dev용 bootRun에서는 빼줘도 된다.</p><ul><li>Gradlew 사용하기<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! prod</span></span><br><span class="line">SPRING_PROFILES_ACTIVE=core ./gradlew clean bootRun -Pprofile=prod</span><br><span class="line"><span class="comment">#! dev</span></span><br><span class="line">SPRING_PROFILES_ACTIVE=core ./gradlew clean bootRun</span><br></pre></td></tr></table></figure></li></ul><p>graldew는 Gradle CLI 설치 안 한 사람, 혹은 Gradle의 버전에 의존하지 않고 항상 동일한 Gradle 버전으로 빌드/실행고 싶을 때 매우 유용하다.<br>gradlew를 이용하기 위해서는 gradle/wrapper 디렉도리에 있는 gradle-wrapper.properties와 gradle-wrapper.jar 파일이 필요하다.<br>따라서 해당 디렉토리를 .gitignore에 등록하는 불상사를 일으키지 말자.</p><ul><li>IDE 사용하기<br>IDE를 사용하면 GUI라는 친숙한 환경, 클릭 한 번으로 여러 환경 변수와 설정을 넣어서 실행할 수 있다는 장점이 있다.<br>물론 AWS나 CLI만 지원하는 환경이라면 위의 두 방법을 활용해야할 것이다.<br>인텔리제이(갓텔리제이)를 찬양 경배하므로 갓텔리제이로 설명.<br><img src="/images/Spring-boot-gradle-profile/01.png" alt="IDE 우상단에 있는 박스를 누르고 Edit Configurations...을 선택"><br><img src="/images/Spring-boot-gradle-profile/02.png" alt="설정 창에서 좌상단에 보이는 + 버튼을 눌러 Gradle을 선택"><br><img src="/images/Spring-boot-gradle-profile/03.png" alt=""><br>Name에는 프로덕션용으로 bootRun prod를 넣어주고, Gradle project에 project 이름(자동완성 됨)을 입력하고,<br>우측 상단의 Single instance only를 체크해서 서버는 하나만 뜨게 하자.(중복 실행 방지, 포트 충돌 방지)<br>tasks에는 실행할 태스크를 입력하면 되는데 bootRun이 spring boot를 실행하는 태스크이다.<br>그리고 Arguments에 해당 인자를 넘겨야 prod profile이 적용되고,<br>Environment Variables에 SPRING_PROFILES_ACTIVE=core까지 지정해줘서 core profile까지 사용하도록 하자.<br>또한 task가 실행되기 전에 clean task를 실행해야하므로 좌하단에 보이는 노란색 박스에 있는 + 버튼을 눌러주자.<br><img src="/images/Spring-boot-gradle-profile/04.png" alt="Run Gradle Task를 선택해주자."><br><img src="/images/Spring-boot-gradle-profile/05.png" alt="위와 같은 형태로 입력해주자."><br><img src="/images/Spring-boot-gradle-profile/06.png" alt="개발용 bootRun Task도 만들어주자"><br>production과 동일한데 Arguments에 인자를 넘길 필요가 없다.<br>왜냐하면 dev profile이 기본값이기 때문이다.<br><img src="/images/Spring-boot-gradle-profile/07.png" alt="bootRun 태스크를 선택하고 실행/디버깅을..."></li></ul><p>위 방법으로 실행해보면 prod/dev에 따라 다른 결과가 나오는 부분도 있고 core에서 불러온 값은 항상 동일하다.  </p><h2 id="빌드하기"><a href="#빌드하기" class="headerlink" title="빌드하기"></a>빌드하기</h2><p>SPRING_PROFILES_ACTIVE=core가 빠진 이유는 빌드할 때는 리소스(profile이 담긴) 디렉토리는 지정할 수 있지만<br>profile 파일 자체를 지정할 수는 없기 때문이고, 실행할 때 넘겨줘야한다.  </p><ul><li><p>Gradle CLI 사용하기</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! prod</span></span><br><span class="line">gradle clean build -Pprofile=prod</span><br><span class="line"><span class="comment">#! dev</span></span><br><span class="line">gradle clean build</span><br></pre></td></tr></table></figure></li><li><p>Gradlew 사용하기(Gradle CLI 설치 안 한 사람)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! prod</span></span><br><span class="line">./gradlew clean build -Pprofile=prod</span><br><span class="line"><span class="comment">#! dev</span></span><br><span class="line">./gradlew clean build</span><br></pre></td></tr></table></figure></li><li><p>IDE 사용하기<br><img src="/images/Spring-boot-gradle-profile/01.png" alt="IDE 우상단에 있는 박스를 누르고 Edit Configurations...을 선택"><br><img src="/images/Spring-boot-gradle-profile/02.png" alt="설정 창에서 좌상단에 보이는 + 버튼을 눌러 Gradle을 선택"><br><img src="/images/Spring-boot-gradle-profile/08.png" alt="프로덕션용 build task"><br><a href="#실행하기">실행하기</a>의 IDE 사용하기 파트를 참고해서 내용을 채워넣자.<br><img src="/images/Spring-boot-gradle-profile/09.png" alt="개발용 build task"><br><a href="#실행하기">실행하기</a>의 IDE 사용하기 파트를 참고해서 내용을 채워넣자.<br><img src="/images/Spring-boot-gradle-profile/10.png" alt="build 태스크를 선택하고 실행/디버깅을...">  </p></li></ul><h2 id="왜-이렇게-빌드해야하는-걸까"><a href="#왜-이렇게-빌드해야하는-걸까" class="headerlink" title="왜 이렇게 빌드해야하는 걸까?"></a>왜 이렇게 빌드해야하는 걸까?</h2><p><img src="/images/Spring-boot-gradle-profile/11.png" alt="빌드할 때 사용된 리소스들"><br>다른 방식으로 하게되면 개발용/프로덕션용 리소스(+코어 리소스는 필수이므로 제외) 두 개 다 포함되게 된다.<br>그럼 개발 서버의 jar 파일이 털렸을 때 압축파일만 풀면 프로덕션 DB 정보 등등까지 알아낼 수 있게 된다.<br>따라서 보안 측면에서 이렇게 좀 귀찮게(?) 빌드해야하는 것이다.  </p><h2 id="빌드한-결과물을-실행하기"><a href="#빌드한-결과물을-실행하기" class="headerlink" title="빌드한 결과물을 실행하기"></a>빌드한 결과물을 실행하기</h2><p>서버에 jar(던 war던) 파일을 배포해서 실행을 할 때는 다음과 같이 하면 된다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dspring.profiles.active=core application.jar</span><br></pre></td></tr></table></figure><h2 id="테스트-코드-작성하기"><a href="#테스트-코드-작성하기" class="headerlink" title="테스트 코드 작성하기"></a>테스트 코드 작성하기</h2><p>test 디렉토리로 가서 기본적으로 만들어진 테스트 클래스를 다음과 같이 수정해주자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"core"</span>)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;core&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String core;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String test;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertThat(core, is(<span class="string">"core"</span>));</span><br><span class="line">        assertThat(test, is(<span class="string">"dev"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>class 이름은 본인이 만든 거에 맞게 설정하고, 테스트 툴은 JUnit4를 사용하였다.(스프링 부트 기본 내장)<br>@ActiveProfiles를 넣어서 spring.profiles.active=core인 profile을 찾는 것이다.<br>또한 테스트를 실행할 때 profile 매개변수를 넘기지 않았으므로(모든 테스트에 다 넘기려면 ㅎㄷㄷ…) 기본값인 dev profile이 적용된다.<br>스프링 컨텍스트가 제대로 로드됐는지 확인하기 위해 @Value 어노테이션으로 profile에 저장된 값을 불러오고 그걸 검증하는 테스트 코드를 짜봤다.  </p><p>이거 때문에 총 삽질한 시간만 8시간 이상은 되는 것 같다.<br>또 정리만 3시간 이상을… 또르르… ㅠㅠ</p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring Boot) get/post 리퀘스트를 다뤄보자.</title>
      <link href="/2017/09/19/Spring-boot-get-post-mapping/"/>
      <url>/2017/09/19/Spring-boot-get-post-mapping/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Spring-boot-get-post-mapping/thumb.png" alt="">  </p><p>근본없이 궁금한 부분만 찾아서 공부하다보니 아직 정리가 덜 된 글이다 보니 그 점은 감안하고 보길 바란다.</p><h2 id="컨트롤러를-만들자"><a href="#컨트롤러를-만들자" class="headerlink" title="컨트롤러를 만들자"></a>컨트롤러를 만들자</h2><p>Node.js(+Express)의 Router와 매우 유사한 것 같다.<br>URI와 http method, parameter만 매핑해주는 녀석이다.  </p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">sayHello</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam String name,</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam <span class="keyword">int</span> age,</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(required = <span class="keyword">false</span>)</span> String hobby</span></span><br><span class="line"><span class="function">            ) </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setHobby(hobby);</span><br><span class="line">        person.setName(name);</span><br><span class="line">        person.setAge(age);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestBody Person person</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        System.out.println(person.getAge());</span><br><span class="line">        System.out.println(person.getHobby());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://highcode.tistory.com/24" rel="external nofollow noopener noreferrer" target="_blank">@RestController</a>에 대한 설명은 링크를 참조하자.  </p><p>get일 때는 파라미터를 URI에 실어서 보내고, post일 때는 body에 실어보내면 된다.<br>나는 큰 착각을 한 게 post로 보낼 때는 대부분 json으로 보내는 경우가 많다보니<br>json의 프로퍼티와 컨트롤러에 매핑된 함수의 파라미터가 유사할 줄 알았다.<br>하지만 요청 json과 유사한 형태의 VO(Value Object)? TO(Transfer Object)? DO(Domain Object)?<br>를 만들어야하는데 셋 중에 뭐가 맞는 말인지 모르겠다.  </p><h2 id="VO-TO-DO"><a href="#VO-TO-DO" class="headerlink" title="VO? TO? DO?"></a>VO? TO? DO?</h2><p>여튼 만들어보자.<br>Person이라는 클래스를 만들면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와 매핑되는 리퀘스트 json은 다음과 같을 것이다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"양간장"</span>,</span><br><span class="line"><span class="attr">"age"</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">"hobby"</span>: <span class="string">"자전거 타기"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="요청-응답하기"><a href="#요청-응답하기" class="headerlink" title="요청/응답하기"></a>요청/응답하기</h2><p>실제 서버를 띄우고 이제 <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop" rel="external nofollow noopener noreferrer" target="_blank">포스트맨</a>을 가지고 장난질을 해보자.  </p><p>요청 헤더: <code>get http://localhost:8080/api/?name=양권성&amp;age=22</code><br>응답:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"hobby"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>왜 name은 안 뜨는 걸지 골똘히 고민해보자.  </p><p>요청 헤더: <code>post http://localhost:8080/api/ Content-Type=application/json</code><br>요청 바디:  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"양간장"</span>,</span><br><span class="line"><span class="attr">"age"</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">"hobby"</span>: <span class="string">"자전거 타기"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>Request Body에 json으로 데이터를 실어 보낼 때 주의해야한다.<br>무조건 DO(아니면 VO 또는 TO)를 만들고 그걸 파라미터로 받자.<br>multipart나 FormData로 전송하는 경우는 나중에 다뤄봐야겠다.  </p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring Boot) properties 값을 불러와보자</title>
      <link href="/2017/09/18/Spring-boot-properties-use/"/>
      <url>/2017/09/18/Spring-boot-properties-use/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Spring-boot-properties-use/thumb.png" alt="">  </p><p>근본없이 궁금한 부분만 찾아서 공부하다보니 아직 정리가 덜 된 글이다 보니 그 점은 감안하고 보길 바란다.  </p><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>Node.js로 서버를 구성하다보면 포트 등등의 설정 정보를 json으로 저장하듯이 스프링 부트에서는 properties 파일을 사용하는 것 같다.<br>물론 YAML 파일로도 만들 수 있는 것 같은데 일단 아는 게 properties 파일이다보니 그걸로 진행해보겠다.<br>우선 스프링 부트를 만들면 기본 파일인 application.properties 파일을 아래와 같이 구성해보자.  </p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key=&quot;asdf&quot;</span><br></pre></td></tr></table></figure><h2 id="properties-사용하는-클래스-만들기"><a href="#properties-사용하는-클래스-만들기" class="headerlink" title="properties 사용하는 클래스 만들기"></a>properties 사용하는 클래스 만들기</h2><p>이제 이걸 사용하는 클래스를 만들어보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>눈여겨 볼 어노테이션이 두 개 있다.  </p><ul><li><p>Component<br>스프링에서 관리하는 빈이라는 걸 알려주기 위한 어노테이션인 것 같다.<br>자바 빈과 스프링 빈은 차이가 있다.<br>자바 빈은 기본 생성자가 있고, getter, setter 메소드가 있고 등등의 특징이 있는 클래스인 것 같다.<br>스프링 빈은 스프링 컨테이너(?)에 의해 관리되는 객체들을 스프링 빈이라고 부르는 것 같다.<br>(자세한 설명은 <a href="https://stackoverflow.com/questions/21866571/difference-javabean-and-spring-bean" rel="external nofollow noopener noreferrer" target="_blank">Difference JavaBean and Spring bean</a>을 참고하자.)<br>여튼 properties에 있는 값을 사용하려면 둘이 스프링에 의해 같이 관리돼야하기 때문에<br>클래스를 스프링 빈으로 등록해야하는 것 같다.<br>자세하게는 모르겠다 ㅠㅠ<br><a href="http://jojoldu.tistory.com/27" rel="external nofollow noopener noreferrer" target="_blank">@Bean vs @Component</a>을 보면 둘 사이에도 명확한 차이가 있는 것 같은데 링크를 참조해보자. (나도 잘 모르니 ㅠㅠ)  </p></li><li><p>Value<br>properties의 어느 속성을 적용할지 정하는 것 같다.  </p></li></ul><h2 id="테스트-코드로-테스트-하기"><a href="#테스트-코드로-테스트-하기" class="headerlink" title="테스트 코드로 테스트 하기"></a>테스트 코드로 테스트 하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.core.Is.is;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestsTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">private</span> Tests tests;</span><br><span class="line">    <span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertThat(<span class="string">"asdf"</span>, is(tests.getKey()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Test test = new Test();</code>와 같은 방식 대신에 @Inject 어노테이션을 사용했다.<br><code>@Autowired</code>와 동일한 역할을 한다고 한다.<br>다만 Inject는 자바에서 지원하는 표준 어노테이션이고, Autowired는 스프링에서 지원해주는 것 같다.<br>build.gradle의 dependency에 <code>compile(&#39;javax.inject:javax.inject:1&#39;)</code> 을 추가하면 된다.<br>자세한 설명은 아래 링크를…<br><a href="http://deoki.tistory.com/28" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC 어노테이션 기반 설정 - 2 . @Autowired</a>  </p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>중요한 것은 @Component, @Value, @Inject(@Autowired) 라는 점을 생각하자!</p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring) 자바 빈즈 객체를 XML 파일로 관리하면서 DI하기 - property 태그</title>
      <link href="/2017/09/05/spring-di-v2/"/>
      <url>/2017/09/05/spring-di-v2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/spring-di-v2/thumb.png" alt=""></p><p>beans.xml 파일을 수정해보자.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"koreanTire"</span> <span class="attr">class</span>=<span class="string">"KoreanTire"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"americanTire"</span> <span class="attr">class</span>=<span class="string">"AmericanTire"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"Car"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tire2"</span> <span class="attr">ref</span>=<span class="string">"koreanTire"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>beans의 property는 getter/setter와 매핑이 된다.<br>Car.java를 수정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tire tire;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(Tire tire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tire = tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire2</span><span class="params">(Tire tire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tire = tire;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Driver.java를 수정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Driver.java</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/src/beans.xml"</span>);</span><br><span class="line">        Car car = (Car)context.getBean(<span class="string">"car"</span>);</span><br><span class="line"></span><br><span class="line">        car.getTire2().wheel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>property를 지정했기 때문에 koreanTire가 DI됐다.  </p><p>참조 블로그 - <a href="http://expert0226.tistory.com/193" rel="external nofollow noopener noreferrer" target="_blank">스프링을 통한 의존성 주입 - 스프링 설정 파일(xml)에서 속성 주입</a></p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring) 자바 빈즈 객체를 XML 파일로 관리하면서 DI하기 - @Autowired</title>
      <link href="/2017/09/05/spring-di-v3/"/>
      <url>/2017/09/05/spring-di-v3/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/spring-di-v3/thumb.png" alt=""></p><p>Car 클래스를 수정해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Tire tire33;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tire33;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire</span><span class="params">(Tire tire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tire33 = tire;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context/spring-context-3.1.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tire33"</span> <span class="attr">class</span>=<span class="string">"KoreanTire"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"americanTire"</span> <span class="attr">class</span>=<span class="string">"AmericanTire"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"Car"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Autowired 한 멤버 변수와 bean의 id가 매칭되는 걸 볼 수 있다.<br>또한 &lt;context:annotation-config /&gt;을 추가해줘야하고, property 태그의 생략이 가능하다.  </p><p>참조 블로그 - <a href="http://expert0226.tistory.com/194" rel="external nofollow noopener noreferrer" target="_blank">스프링을 통한 의존성 주입 - @Autowired 를 통한 속성 주입</a></p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring) 자바 빈즈 객체를 XML 파일로 관리하면서 DI하기 - 기본</title>
      <link href="/2017/09/04/spring-di-v1/"/>
      <url>/2017/09/04/spring-di-v1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/spring-di-v1/thumb.png" alt=""></p><p>일반 자바를 가지고 DI를 해본 <a href="/2017/09/04/di-v3/">v3</a>에서는 Car 클래스를 자바 빈즈 스펙을 제대로 준수해서 만들지 않았다.<br>따라서 한 번 자바 빈즈 스펙에 맞춰 바꿔보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tire tire;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(Tire tire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tire = tire; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire</span><span class="params">(Tire tire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tire = tire;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>getter/setter와 기본 생성자가 있어야 자바 빈즈 스펙을 준수한 것이었는데 저번에는 기본 생성자가 없어서 추가했다.<br>그럼 이제 beans.xml 파일을 만들고 자바 빈즈 객체들을 등록해보자.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tire"</span> <span class="attr">class</span>=<span class="string">"KoreanTire"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"americanTire"</span> <span class="attr">class</span>=<span class="string">"AmericanTire"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"Car"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id 부분에는 식별할 수 있는 이름을 적고, class에는 패키지와 클래스명 포함 풀 경로를 적어주면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Driver.java</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/src/beans.xml"</span>);</span><br><span class="line">        Car car = (Car)context.getBean(<span class="string">"car"</span>);</span><br><span class="line">        Tire tire = (Tire)context.getBean(<span class="string">"tire"</span>);</span><br><span class="line">        car.setTire(tire);</span><br><span class="line"></span><br><span class="line">        car.getTire().wheel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml에서 id가 tire인 애만 바꾸면 컴파일을 다시 하지 않아도 타이어의 교체가 가능해진다.<br>하지만 여기서 코드가 더 줄어들을 수 있다.<br><a href="/2017/09/05/spring-di-v2/">v2</a>에서 확인해보자~  </p><p>참조 블로그 - <a href="http://expert0226.tistory.com/192" rel="external nofollow noopener noreferrer" target="_blank">스프링을 통한 의존성 주입 - XML 파일 사용</a></p>]]></content>
      
      
      <categories>
          
          <category> Back-end </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection(의존성 주입)을 알아보자 - 생성자 함수</title>
      <link href="/2017/09/04/di-v2/"/>
      <url>/2017/09/04/di-v2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/di-v2/thumb.png" alt=""></p><p><a href="/2017/09/04/di-v1/">v1</a>에는 재사용 가능한 코드가 있음에도 불구하고 미묘(?)한 차이 때문에 계속 각국의 타이어를 장착한 자동차 클래스를 만들어야하는 단점이 있었다.<br>이는 자동차를 만들 때 이미 타이어를 만드는 방법이 결정되어 있기 때문에 발생하는 문제이다.<br>(<strong>자동차(전체)</strong>가 <strong>타이어(부분)</strong>에 <strong>의존</strong>하고 있는 코드)<br>즉, 자동차를 만들 때 타이어를 만드는 방법을 결정하면 되는 사항이다.<br>(<strong>의존하는 부분(타이어)</strong>을 <strong>전체(자동차)</strong>에 <strong>주입</strong>시키는 패턴)  </p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tire.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tire</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KoreanTire.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreanTire</span> <span class="keyword">implements</span> <span class="title">Tire</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"구르다"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AmericanTrie.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanTire</span> <span class="keyword">implements</span> <span class="title">Tire</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wheel"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    Tire tire;</span><br><span class="line">    Car(Tire tire) &#123; <span class="comment">// 매개변수의 다형성을 사용</span></span><br><span class="line">        <span class="keyword">this</span>.tire = tire;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        KoreanTire koreanTire = <span class="keyword">new</span> KoreanTire();</span><br><span class="line">        AmericanTire americanTire = <span class="keyword">new</span> AmericanTire();</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(koreanTire);</span><br><span class="line">        car.tire.wheel(); <span class="comment">// 구르다</span></span><br><span class="line">        </span><br><span class="line">        car.tire = americanTire;</span><br><span class="line">        <span class="comment">// 아래와 같은 것도 되니 바로 멤버 변수에 접근해서 설정하는 것은 추천하지 않는다.</span></span><br><span class="line">        <span class="comment">// car.tire = null;</span></span><br><span class="line">        car.tire.wheel(); <span class="comment">// wheel</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 되면 Tire 클래스들만 쭉쭉 추가하면 되고 Car 클래스는 각국 별로 만들 필요가 없어지게 된다.<br>또한 tire 교체도 가능하지만 올바른 값이 들어왔는지 유효성 검사할 방법이 없다.<br>그럼 <a href="/2017/09/04/di-v3/">v3</a>에서는 이러한 문제점을 개선해보도록 하자.</p><p>참조 블로그 - <a href="http://expert0226.tistory.com/190" rel="external nofollow noopener noreferrer" target="_blank">생성자를 통한 의존성 주입</a></p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection(의존성 주입)을 알아보자 - setter</title>
      <link href="/2017/09/04/di-v3/"/>
      <url>/2017/09/04/di-v3/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/di-v3/thumb.png" alt=""></p><p><a href="/2017/09/04/di-v2/">v2</a>에는 자동차를 생산할 때 어떤 타이어를 만들지 정할 수 있고 새로운 타이어로 교체도 가능했다.<br>하지만 올바른 값이 들어왔는지 유효성 검사할 방법이 없다.<br>사실 변경할 수는 있지만 안전하지 않고 그닥 권장하는 방법이 아니다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tire tire;</span><br><span class="line">    Car(Tire tire) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tire = tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setter로 유효성 검사를 위해선 어쩔 수 없이(?) tire를 얻기 위해선 getter를 써야함.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tire <span class="title">getTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setter로 다음과 같이 유효성 검사가 가능해짐.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTire</span><span class="params">(Tire tire)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tire == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.tire = tire;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Driver.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        KoreanTire koreanTire = <span class="keyword">new</span> KoreanTire();</span><br><span class="line">        AmericanTire americanTire = <span class="keyword">new</span> AmericanTire();</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(koreanTire);</span><br><span class="line">        car.getTire().wheel(); <span class="comment">// 구르다</span></span><br><span class="line">        car.setTire(americanTire);</span><br><span class="line">        car.getTire().wheel(); <span class="comment">// wheel</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setter를 사용해 좀 더 안전하게(?) 타이어를 교체할 수 있게 되었다.<br>대부분 getter/setter를 사용하는 이유는 아마 다음과 같을 것이다.  </p><ol><li>자바 빈즈 스펙이기 때문  </li><li>유효성 검사나 get 하기 전에 처리할 내용이 있기 때문<br>아마 생각 없이 1번 때문에, 아니면 getter와 setter가 그냥 습관이 된 경우가 대부분일 것이다.<br>순수 자바라면 여기서 끝냈을테지만, 이 방법도 타이어를 교체하려면 계속 컴파일 해야한다는 단점이 있다.<br>스프링으로 이런 자바 빈즈 객체를 XML 파일로 관리해서 DI 하는 방법을 쓰면 컴파일 하지 않고 타이어를 교체할 수 있다.  </li></ol><p>참조 블로그 - <a href="http://expert0226.tistory.com/191" rel="external nofollow noopener noreferrer" target="_blank">속성을 통한 의존성 주입</a></p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection(의존성 주입)을 알아보자 - 막코딩 하기</title>
      <link href="/2017/09/04/di-v1/"/>
      <url>/2017/09/04/di-v1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/di-v1/thumb.png" alt=""></p><p>이 글은 의존성 주입을 전혀 적용하지 않은, 의존성 주입이 뭔지 모르는 상태로 짠 코드이다.<br>우선 문제점을 먼저 파악해봐야 뭐가 되지 않을까 싶어서 막코딩을 해봤다고 가정해보자.<br>우선 미국산 타이어가 장착된 자동차, 한국산 타이어가 장착된 자동차를 만들어야한다고 생각해보자.<br>그럼 우선 미국산, 한국산 타이어 클래스 두 개가 필요할 것이다.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KoreanTire.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreanTire</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"구르다"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AmericanTire.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanTire</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wheel"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 각각 미국산 타이어를 장착한 자동차, 한국산 타이어를 장착한 자동차 클래스 두 개를 만들면 끝난다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KoreanCar.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreanCar</span> </span>&#123;</span><br><span class="line">    KoreanTire koreanTire;</span><br><span class="line">    KoreanCar() &#123;</span><br><span class="line">        koreanTire = <span class="keyword">new</span> KoreanTire();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AmericanCar.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCar</span> </span>&#123;</span><br><span class="line">    AmericanTire AmericanTire;</span><br><span class="line">    AmericanCar() &#123;</span><br><span class="line">        AmericanTire = <span class="keyword">new</span> AmericanTire();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 이제 이 차를 운전할 사람들을 만들어보자.(한국차를 구매한다고 가정)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Driver.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        KoreanCar koreanCar = <span class="keyword">new</span> KoreanCar();</span><br><span class="line">        koreanCar.koreanTire.wheel(); <span class="comment">// 구르다</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프로그램은 완성됐고 개발은 끝났다.<br>하지만 영국, 일본, 중국, 태국, 방글라데시, 보스니아 헤르체고비나 등등의 타이어를 장착한 자동차를 만들어야한다면…?<br>클래스는 기하 급수적으로 늘어날 것이고 동일한 코드들이 반복되는데도 불구하고 재사용이 불가능한 코드이므로 계속 자동차, 드라이버 클래스들을 만들어야한다.<br>이런 코드를 보고 유연하지 못하다고 한다. (사교성이 안 좋은 코드이기도 하다 ㅎㅎ…)<br>그럼 <a href="/2017/09/04/di-v2/">v2</a>에서는 이러한 문제점을 개선해보도록 하자.  </p><p>참조 블로그 - <a href="http://expert0226.tistory.com/189" rel="external nofollow noopener noreferrer" target="_blank">프로그래밍에서 의존성이란?</a></p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JazzHop) redpest - Sleepy time beats</title>
      <link href="/2017/08/28/jazz-hop-sleepy-time-beats/"/>
      <url>/2017/08/28/jazz-hop-sleepy-time-beats/</url>
      
        <content type="html"><![CDATA[<img src="./thumb.jpg" style="display: none"><iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330637147&amp;color=ff9900&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe><p>봄의 향그러운 느낌을 한껏 품은 비트다.<br>들으면 잠이 쏟아질 것 같지만 1시간을 넘게 들어도 잠이 안 올 때는 잘 안 온다.  </p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 음악 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jazz </tag>
            
            <tag> Hiphop </tag>
            
            <tag> JazzHop </tag>
            
            <tag> Lofi </tag>
            
            <tag> Chill </tag>
            
            <tag> Sleepy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자바 vs 자바스크립트</title>
      <link href="/2017/08/19/java-vs-javascript/"/>
      <url>/2017/08/19/java-vs-javascript/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/java-vs-javascript/thumb.png" alt="">  </p><p>이 글은 자바와 자바스크립트를 혼동하는 사람, 차이점이 궁금한 사람 등을 위하여 쓴 글입니다.<br>또한 자바스크립트는 다른 언어에 비해 어떤 단점이 있으며 그 단점들을 어떻게 극복해야할지에 대해 다뤄봤습니다.  </p><p>하고 싶은 말 세 줄 요약.  </p><ol><li>자바스크립트 !== 자바(자바 != 자바스크립트), 자바와 자바스크립트는 같지 않다.<br>두 언어 간에는 접점이 크지 않고, 자바스크립트는 자바의 인기에 편승할 목적(마케팅 목적)으로 이름을 지은 것 뿐입니다.  </li><li>자바 커뮤니티 가서 자바스크립트 질문하거나 자바스크립트 커뮤니티 가서 자바 질문을 하는 건 자제해주세요.<br>하지 말라는 건 아닌데 질문자 분께서 원하시는 답(틀린 답을 얻을 수도 있고), 양질의 답을 얻을 가능성, 그리고 빠른 응답을 받기가 힘드실 수 있습니다.  </li><li>제발 자바 스크립트(Java Script)라고 적어서 혼란을 초래하지 말아주세요.<br>제발 제발 부탁드립니다. 가끔 보면 화(…)가 날 때도 있습니다.<br>위와 같이 쓰시는 분들 때문에 이런 혼란이 더 초래되는 것 같습니다.<br>새로 배우시는 분들께 잘못된 인식을 심어주는 것도 굉장히 위험하다고 보니 제발 부탁드리겠습니다.</li></ol><a id="more"></a><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="#자바스크립트의-어원">자바스크립트의 어원</a>  </li><li><a href="#자바스크립트의-탄생-목적">자바스크립트의 탄생 목적</a>  </li><li><a href="#자바의-탄생-배경">자바의 탄생 배경</a>  <ul><li><a href="#Oak">Oak</a>  </li><li><a href="#자바">자바</a>  </li></ul></li><li><a href="#자바스크립트는-인터프리트-언어이다">자바스크립트는 인터프리트 언어이다??</a>  </li><li><a href="#자바는-컴파일-언어다">자바는 컴파일 언어다??</a>  </li><li><a href="#자바스크립트-언어와-자바의-공통점">자바스크립트 언어와 자바의 공통점??</a>  </li><li><a href="#왜-자바스크립트-보고-구리다고-할까">왜 자바스크립트 보고 구리다고 할까??</a>  </li><li><a href="#자바스크립트는-멀티-패러다임-언어이다">자바스크립트는 멀티 패러다임 언어이다.</a>  <ul><li><a href="#객체-지향-프로그래밍-관점에서의-자바스크립트">객체 지향 프로그래밍 관점에서의 자바스크립트</a>  </li><li><a href="#함수형-프로그래밍-관점에서의-자바스크립트">함수형 프로그래밍 관점에서의 자바스크립트</a>  </li></ul></li><li><a href="#자바스크립트는-더-이상-예전의-자바스크립트가-아니다">자바스크립트는 더 이상 예전의 자바스크립트가 아니다.</a>  </li><li><a href="#자바스크립트를-배우기-전에-잘-만들어진-프로그래밍-언어를-먼저-배우는-것을-추천하는-이유">자바스크립트를 배우기 전에 잘 만들어진 프로그래밍 언어를 먼저 배우는 것을 추천하는 이유</a>  </li></ul><h2 id="자바스크립트의-어원"><a href="#자바스크립트의-어원" class="headerlink" title="자바스크립트의 어원"></a>자바스크립트의 어원</h2><p>자바스크립트가 처음 개발할 때부터 자바스크립트였던 건 아니었다.<br>초기에 자바스크립트는 Mocha라는 이름으로 개발되다 추후에 Livescript라는 이름으로 변경되었다.<br>그러다 자바라는 언어가 인기가 많아지자 그 인기에 편승할 목적, 즉 마케팅 목적으로 자바스크립트라는 이름으로 변경 후 세상에 나오게 되었다.<br>당시 자바의 개발사인 썬 마이크로시스템과 자바스크립트의 개발사인 넷 스케이프 사는 ‘자바 라이센스’를 공동으로 소유하고 있어서 이런 일이 가능하였다.  </p><h2 id="자바스크립트의-탄생-목적"><a href="#자바스크립트의-탄생-목적" class="headerlink" title="자바스크립트의 탄생 목적"></a>자바스크립트의 탄생 목적</h2><p>해당 언어의 탄생 목적을 보면 어떤 경우에 해당 언어를 써야할지가 명확해진다.<br><img src="/images/java-vs-javascript/yahoo.png" alt="과거 야후의 모습"><br>과거 웹사이트는 사용자와 상호 작용이 불가능했으며, 페이지가 상당히 정적인 모습을 띄었다.<br>따라서 다음과 같은 것들이 불가능하였다.<br><img src="/images/java-vs-javascript/drop.png" alt="사용자가 메뉴에 마우스를 올리면 하위 메뉴가 보이는 드롭다운 메뉴"><br><img src="/images/java-vs-javascript/valid.png" alt="사용자가 입력한 값을 얻어와서 올바른 값을 입력했는지 현재 페이지에서 유효성 검사하기"></p><p>자바스크립트의 탄생 목적은 이렇듯 <strong>페이지의 동적 제어</strong>였다.<br>다른 프로그래밍 언어(Java, C 등등)의 경우 <strong>하나의 완성된 프로그램</strong>을 만들 목적으로 만들어진 언어에 비해 그 목적 자체가 달랐다.<br>하지만 자바<strong>스크립트</strong>라는 언어에서 보듯이 자바스크립트는 <strong>스크립트 언어</strong>이다.<br>스크립트 언어는 일반적인 프로그래밍 언어와 달리 하나의 완성된 프로그램보다는 <strong>프로그램 사이에 들어가는, 기존의 프로그램들을 제어하거나 보조하는 용도</strong>로 많이 쓰인다.</p><h2 id="자바의-탄생-배경"><a href="#자바의-탄생-배경" class="headerlink" title="자바의 탄생 배경"></a>자바의 탄생 배경</h2><h3 id="Oak-오크"><a href="#Oak-오크" class="headerlink" title="Oak(오크)"></a>Oak(오크)</h3><p>가전제품에 탑재될 소프트웨어를 만들어야해서 C++을 확장해서 사용하려 했지만 C++로는 부적합하였다.<br>따라서 C++의 장점을 도입, 단점을 보완한 Oak라는 언어를 만들게 되었다.<br>Oak는 운영체제에 독립적이라는 장점이 있어 멀티 플랫폼을 지원할 수 있었다.<br>따라서 가전제품이나 PDA와 같은 소형 기기에 탑재될 목적으로 Oak라는 언어를 만들고 있었다.  </p><h3 id="자바"><a href="#자바" class="headerlink" title="자바"></a>자바</h3><p>여러 종류의 운영체제를 사용하는 컴퓨터들이 통신하는 인터넷이 등장하자<br>운영체제에 독립적인 Oak가 이에 적합하다고 판단하여 Oak를<br>인터넷에 적합하도록 그 개발 방향을 바꾸면서 이름을 Java로 변경하였다.<br>따라서 백엔드, 서버 쪽 진영을 보면 그렇게 자바를 많이 쓰는 이유가 자바가 <strong>웹에 적합한 언어</strong>이기 때문이다.<br>또한 오래 전 만들어졌기 때문에 안정성과 다양한 커뮤니티가 형성된 것도 한 몫하는 것 같다.</p><h2 id="자바스크립트는-인터프리트-언어이다"><a href="#자바스크립트는-인터프리트-언어이다" class="headerlink" title="자바스크립트는 인터프리트 언어이다??"></a>자바스크립트는 인터프리트 언어이다??</h2><p><a href="/2017/08/07/js-jit-compile/">(자알쓰) JIT 컴파일</a>을 참조하자.  </p><h2 id="자바는-컴파일-언어다"><a href="#자바는-컴파일-언어다" class="headerlink" title="자바는 컴파일 언어다??"></a>자바는 컴파일 언어다??</h2><p>컴파일하면 소스 코드를 기계어로 변환하는 과정이라고 알고 있는데, 엄밀히 말하면 자바는 소스코드를 기계어로 변환하지 않는다.<br>자바는 소스 코드를 각 자바 바이트 코드로 변환한다.<br>그 이후 JVM(Java Virtual Machine)이 그 자바 바이트 코드를 기계어로 변환한다.<br>즉 실행할 때 마다 매번 자바 바이트 코드를 기계어로 변환하는 JIT 컴파일 방식을 취한다.  </p><h2 id="자바스크립트-언어와-자바의-공통점"><a href="#자바스크립트-언어와-자바의-공통점" class="headerlink" title="자바스크립트 언어와 자바의 공통점??"></a>자바스크립트 언어와 자바의 공통점??</h2><p>자바와 자바스크립트가 공통점이 많아서 자바스크립트라고 이름을 붙였다고 주장을 할 수도 있다.<br>하지만 그 정도 공통점은 C와 Java 사이에도 있는 공통점과 같이 다른 프로그래밍 언어 사이에서도 존재하는 프로그래밍 언어라면 가지고 있어야할 당연한 개념들이다.<br>자바스크립트는 하나의 특정 언어보다는 여러 언어 사이에서 다양한 개념을 차용한 언어이다.  </p><ul><li>자바에서는 문법과 ‘원시 값 vs 객체 관계’  </li><li>스키마와 오크에서는 일급 객체인 함수  </li><li>셀프에서는 프로토타입 상속  </li><li>펄과 파이썬에서는 문자열, 배열, 정규표현식을 빌려왔다.  </li></ul><h2 id="왜-자바스크립트-보고-구리다고-할까"><a href="#왜-자바스크립트-보고-구리다고-할까" class="headerlink" title="왜 자바스크립트 보고 구리다고 할까??"></a>왜 자바스크립트 보고 구리다고 할까??</h2><p>기존에 다른 프로그래밍 언어(Java, C 등등)을 배웠던 사람은 자바스크립트를 배울 때 매우 어려워한다.<br>개념이 어렵다기 보다는 다른 프로그래밍 언어와 공통된 규칙을 어기는 경우, 당연히 그렇게 동작할 것이라고 생각한 경우를 <strong>배신(?)</strong>한 경우가 많다.<br>그래서 깊은 공부 없이 자바스크립트를 학습 후 <strong>기존의 프로그래밍 언어와 같이</strong> 사용했을 때는 다음과 같은 문제점이 존재한다.  </p><ul><li>함수 단위의 스코프<br>아래 글도 참고해보자.<br><a href="/2017/04/27/js-003-scope/">(자알쓰) Scope Part. 1</a><br><a href="/2017/05/19/js-004-scope/">(자알쓰) Scope Part. 2</a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 2가 아니라 10</span></span><br></pre></td></tr></table></figure></li></ul><p>기존 프로그래밍 언어에서는 <strong>당연히</strong> 변수의 스코프는 {}블록 단위였다.<br>즉 당연하다고 생각한 변수 스코프를 무심코 썼다간 큰 코 다치기 쉽상이다.<br>이를 위해서는 아래와 같이 작업해야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution #1</span></span><br><span class="line"><span class="comment">// 변수 이름을 다르게 하기</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution #2</span></span><br><span class="line"><span class="comment">// 즉시 실행 함수(IIFE)를 활용하여 별도의 함수 스코프를 생성</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution #3</span></span><br><span class="line"><span class="comment">// ES2015에 도입된 개념인 블록 단위의 스코프를 지원하는 const/let을 사용</span></span><br><span class="line"><span class="keyword">const</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>하지만 이와 반대로 자바는 블록 단위의 스코프이다.</strong></p><ul><li>모듈화 미지원<br>아래 글도 참고해보자.<br><a href="/2017/05/20/js-005-module/">(자알쓰) 모듈화 Part. 1</a><br><a href="/2017/05/20/js-006-module/">(자알쓰) 모듈화 Part. 2</a><br><a href="http://d2.naver.com/helloworld/12864" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a><br>자바스크립트의 모든 코드는 전역 스코프를 사용한다.<br>따라서 아래와 같은 경우에는 다음과 같은 문제점이 존재한다.  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'as'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'df'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 'd'</span></span><br></pre></td></tr></table></figure><p>스크립트 태그 삽입 순서에 따라 a 값이 바뀌게 되고 a 값의 안정성을 보장할 수 없다.<br>저 값이 어디로 어떻게 튈지 몰라서 에러를 유발하는 코드가 될 수도 있다.<br>만약 누군가가 a에 3이라는 값을 넣었으면 3은 숫자이고 인덱스로 접근이 불가능하니 오류가 나기 마련이다.<br>따라서 다음과 같이 해결해야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution #1</span></span><br><span class="line"><span class="comment">// 네임스페이스 패턴을 활용하기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> a = a || &#123;&#125;;</span><br><span class="line">a.a = <span class="string">'as'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">var</span> b = b || &#123;&#125;;</span><br><span class="line">b.a = <span class="string">'df'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="built_in">console</span>.log(a.a[<span class="number">0</span>]); <span class="comment">// 'a'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution #2</span></span><br><span class="line"><span class="comment">// ES2015의 모듈 문법인 import/export Syntax 사용하기</span></span><br><span class="line"><span class="comment">// 지원하는 브라우저/Node가 없으므로 Webpack 등등의 Module Bundler의 사용이 필수적임.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">'as'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">'df'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'a.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution #3</span></span><br><span class="line"><span class="comment">// Node.js에서는 CommonJS 방식으로 모듈화를 구현할 수 있음.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line">exports.a = <span class="string">'as'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line">exports.a = <span class="string">'df'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;a&#125; = <span class="built_in">require</span>(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution #4</span></span><br><span class="line"><span class="comment">// 브라우저에서는 모든 파일을 다운로드 받아야한다는 특수성 때문에 비동기로 모듈을 로딩해야한다.  </span></span><br><span class="line"><span class="comment">// 이를 위한 모듈화 방법으로는 AMD 방식이 있으며 이를 구현한 라이브러리는 RequireJS가 있다.  </span></span><br><span class="line"><span class="comment">// http://requirejs.org 를 참조하자.</span></span><br></pre></td></tr></table></figure><p>1번 솔루션인 네임스페이스 패턴은 전역 스코프를 더럽힌다는 단점(전역 스코프에 변수 a와 b가 두둥실 떠다니게 됨.)이 존재한다.<br>외부에서 참조하려면 어쩔 수 없이 전역 스코프에서 모듈을 구현해야하지만 외부에서 참조할 일 없는 변수는<br>자바스크립트의 함수 단위의 스코프를 활용한 즉시 실행 함수 패턴(IIFE, Immediately Invoked Function Expressions)를 사용하면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>즉 a.js와 b.js는 서로 다른 스코프를 가지게 된다는 의미이고 전역 스코프가 아닌 로컬 스코프(함수는 별도의 스코프를 형성하므로)를 사용하게 되는 격이다.<br>위에서 보이는 문제점들은 전부 스코프가 너무 넓다는 문제점들이다.<br>스코프가 너무 넓으면 여러 곳에서 접근이 가능하고, 여러곳에서 접근이 가능하다는 소리는 내가 작성한 코드를 다른 개발자가 쉽게 수정이 가능하단 뜻이며<br>그 코드로 인해 프로그램이 뻗을 수도 있으므로 스코프는 좁은 것이 최대한 코드의 안정성을 보장할 수 있는 길이라고 할 수 있을 것 같다.</p><p><strong>하지만 자바에서는 모듈화를 클래스나 패키지를 통해 구현할 수 있는 것으로 알고 있다.</strong>  </p><ul><li>호이스팅<br><a href="/2017/04/26/js-002-hoisting/">(자알쓰) Hoisting</a>을 참고하자.</li><li><em>자바에서는 호이스팅이란 개념이 존재하지 않는다.*</em><br>&nbsp;</li><li>동적 타입<br>자바스크립트는 기본적으로 변수를 만들 때 변수의 타입을 지정하지 않는다.<br>따라서 해당 변수에는 문자열이 담겼다가 숫자가 담길 수도 있다.<br>처음에는 이러한 유연함 때문에 변수의 타입을 생각하지 않고 코딩하기 때문에 코딩이 더 빨리 되는 것 같아서 좋다.<br>하지만 몇 달 후, 내가 짠 코드도 보기 이해하기 힘든데 남이 짠 코드를 유지보수 해야하는 경우,<br>혹은 앱의 규모가 대규모로 커지는 경우에는 과연 변수에 어떤 값이 담겼는지 잘 알아낼 수 있을까??  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3개월 전에 작성한 util.js</span></span><br><span class="line"><span class="keyword">var</span> util = util || &#123;&#125;;</span><br><span class="line">util.a = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +a; <span class="comment">// 숫자로 변환하여 반환</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3개월 후에 내가 수정하거나 작성해야할 app.js</span></span><br><span class="line"><span class="keyword">var</span> b = util.a(<span class="string">'aa'</span>);</span><br><span class="line"><span class="comment">// 나는 util.a의 결과가 배열인 줄 알고 splice 메소드를 썼다.</span></span><br><span class="line"><span class="comment">// 하지만 util.a의 결과는 숫자이고 숫자에는 splice 메소드가 존재하지 않으니 에러가 뜰 것이다.</span></span><br><span class="line"><span class="comment">// 만약 정적 타입 언어였다면 util.a의 반환값이 숫자인 것을 알고 당연히 에러라고 에디터에 밑줄을 그어줄테지만</span></span><br><span class="line"><span class="comment">// 변수의 타입이 존재하지 않는 자바스크립트 같은 경우에는 실행했을 때만, 즉 런타임 시에만 오류를 알 수 있다는 단점이 존재한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">0</span>));</span><br></pre></td></tr></table></figure></li></ul><p><strong>자바는 정적 타입의 언어, 즉 변수를 생성할 때 어떤 타입의 변수인지 선언해야하고 죽었다 깨어나도 변수의 타입은 바뀌지 않는다.</strong></p><ul><li>var 없이 변수 선언하기<br>이런 코드 보면 조금 극혐하는 편이다.<br>스코프는 좁을 수록 코드가 안전해진다고 알고 있는데 오히려 스코프를 넓히는 코딩 패턴이다.<br>다음 코드를 살펴보자.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 변수 a를 var 없이 선언했다.</span></span><br><span class="line">  <span class="comment">// 일단 현재 스코프에 변수 a가 없으므로 상위 스코프로 이동한다.</span></span><br><span class="line">  <span class="comment">// 그리고 그 스코프에 존재하는 변수 a의 값을 재할당한다.</span></span><br><span class="line">  a = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 변수 b를 var 없이 선언했다.</span></span><br><span class="line">    <span class="comment">// 일단 현재 스코프에 변수 b가 없으므로 상위 스코프로 이동한다.</span></span><br><span class="line">    <span class="comment">// 그리고 그 스코프에 존재하는 변수 b의 값을 재할당한다.</span></span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  b();</span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 함수 b 실행 이후 b는 더이상 함수가 아닌 숫자 2이다.</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 함수 a 실행 이후 a는 더이상 함수가 아닌 숫자 3이다.</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 얘는 3 그대로이다.</span></span><br></pre></td></tr></table></figure></li></ul><p>어떤 글들을 보면 var 없으면 전역에 변수를 생성한다고 하는데 그게 아니라 스코프 하나씩 위로 타고 올라가서 있는지 없는지 파악 후<br>해당 변수가 존재하는 스코프(없으면 전역까지 가서 생성)에 변수를 재할당 하는 것이다.<br>여튼 이런 실수를 방지하려면 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode" rel="external nofollow noopener noreferrer" target="_blank">Strict Mode</a>를 무조건 사용하자.<br>ES2015+라면 Strict Mode를 사용할 필요가 없다.</p><p><strong>자바는 이렇게 변수를 생성하는 키워드를 생략해서 변수를 생성할 수 없다.</strong></p><h2 id="자바스크립트는-멀티-패러다임-언어이다"><a href="#자바스크립트는-멀티-패러다임-언어이다" class="headerlink" title="자바스크립트는 멀티 패러다임 언어이다."></a>자바스크립트는 멀티 패러다임 언어이다.</h2><p>자바스크립트는 여러 언어로부터 개념을 빌려온 언어이다.<br>셀프에서는 프로토타입 상속 개념을 빌려왔기 때문에 객체 지향 언어에서 말하는 상속의 개념도 구현할 수 있다.<br>따라서 자바스크립트는 <strong>객체 지향 프로그래밍</strong>이 가능하다.<br>또한 스키마와 오크에서는 <a href="/2017/06/30/js-func-00-what/#일급-함수-일급-객체-일급-시민">일급 객체</a>인 함수 개념을 빌려왔기 때문에 <strong>함수형 프로그래밍</strong>도 가능하다.</p><h3 id="객체-지향-프로그래밍-관점에서의-자바스크립트"><a href="#객체-지향-프로그래밍-관점에서의-자바스크립트" class="headerlink" title="객체 지향 프로그래밍 관점에서의 자바스크립트"></a>객체 지향 프로그래밍 관점에서의 자바스크립트</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Parent = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Parent.prototype.sayMyName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Child = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</span><br><span class="line">  <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name); <span class="comment">// 부모의 생성자 함수 호출</span></span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child(<span class="string">'양권성'</span>, <span class="number">99</span>);</span><br><span class="line">c.sayMyName(); <span class="comment">// '양권성'</span></span><br></pre></td></tr></table></figure><p>하지만 이마저도 다음과 같은 문제점이 존재한다.<br>여기서 말하는 멤버는 변수+메소드를 뜻한다.</p><ul><li><p>static 멤버가 존재하지 않는다.<br>인스턴스(객체)를 생성하기 이전에 사용 가능한 static 멤버가 존재하지 않는다.<br>ES2015의 class syntax(말이 class지, 그 내부를 들여다보면 여전히 함수를 통해 객체를 생성하고 있다.)가 도입되면서 static 멤버의 사용도 가능해졌다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> sayHello() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// static 변수는 아직 Stage-2 단계이다.</span></span><br><span class="line">  <span class="comment">// static b = 'b';</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.sayHello(); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></li><li><p>private 멤버를 만들지 못한다.<br>private 멤버가 없다면 아래와 같은 문제점들이 존재하게 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</span><br><span class="line">  <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="literal">null</span>); <span class="comment">// 정상적으로 오류를 뿜어냄.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="number">25</span>);</span><br><span class="line">p2.age = <span class="literal">null</span>; <span class="comment">// age를 재할당 했을 때는 오류를 잡아낼 수가 없음.</span></span><br></pre></td></tr></table></figure></li></ul><p>이를 위해서는 ES2015의 class, 유일한 값을 만들어내는 Symbol, 외부에서 접근 불가능한 별도의 스코프를 만들어냄과 동시에 실행하는 즉시 실행 함수 패턴,<br>내부 스코프에 있는 변수(private 변수)들을 접근하기 위해 클로저 사용, private 변수들에 대한 유효성 검사(?)를 위한 getter/setter 메소드가 사용되었다.<br>사실 Reflect.ownKeys나 Object.getOwnPropertySymbols를 이용하면 Symbol로 만든 private 변수에 접근이 가능하지만,<br>private 접근 지정자가 존재하는 자바에도 Reflect를 사용하면 <a href="http://hiddenviewer.tistory.com/115" rel="external nofollow noopener noreferrer" target="_blank">Private Filed에 접근하기</a>가 가능하다고 한다.<br>Reflect를 사용 했을 때도 private 멤버들을 숨기고 싶다면 <a href="https://gomugom.github.io/how-to-make-private-member/" rel="external nofollow noopener noreferrer" target="_blank">ES6 Class에서 private member를 정의하는 방법</a>를 참조하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 즉시 실행 함수 패턴을 사용하여 별도의 스코프를 생성함과 동시에 함수를 실행.</span></span><br><span class="line">  <span class="comment">// 리턴문 밖에 있는 애들은 getter와 setter를 제외하고는 직접적인 접근이 불가능해서 private이라고 말할 수 있음.</span></span><br><span class="line">  <span class="comment">// 클로저를 사용한 것임.</span></span><br><span class="line">  <span class="keyword">const</span> _name = <span class="built_in">Symbol</span>(<span class="string">'name'</span>);</span><br><span class="line">  <span class="keyword">const</span> _age = <span class="built_in">Symbol</span>(<span class="string">'age'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</span><br><span class="line">      <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</span><br><span class="line">      <span class="keyword">this</span>[_name] = name;</span><br><span class="line">      <span class="keyword">this</span>[_age] = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    get name() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>[_name];</span><br><span class="line">    &#125;</span><br><span class="line">    set name(name) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!name) <span class="keyword">throw</span> <span class="string">'이름을 입력하시오'</span>;</span><br><span class="line">      <span class="keyword">this</span>[_name] = name;</span><br><span class="line">    &#125;</span><br><span class="line">    get age() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>[_age];</span><br><span class="line">    &#125;</span><br><span class="line">    set age(age) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!age) <span class="keyword">throw</span> <span class="string">'나이를 입력하시오'</span>;</span><br><span class="line">      <span class="keyword">this</span>[_age] = age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="literal">null</span>); <span class="comment">// 정상적으로 오류를 뿜어냄.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Person(<span class="string">'양권성'</span>, <span class="number">25</span>);</span><br><span class="line">p2.age = <span class="literal">null</span>; <span class="comment">// age를 재할당 했을 때 또한 오류를 잡아냄.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래 방법으로 private 멤버에 접근이 가능하긴 하다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(p2));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(p2));</span><br></pre></td></tr></table></figure><p><strong>자바는 이런 static 멤버, private 접근 지정자, 메소드 오버라이딩, 오버로딩 등등과 같이 자바스크립트에서 지원하는 것은 물론 지원하지 않는 객체 지향 개념들도 모두 지원하고 있는 언어이다.</strong></p><h3 id="함수형-프로그래밍-관점에서의-자바스크립트"><a href="#함수형-프로그래밍-관점에서의-자바스크립트" class="headerlink" title="함수형 프로그래밍 관점에서의 자바스크립트"></a>함수형 프로그래밍 관점에서의 자바스크립트</h3><p>두말하면 입아프니 <a href="/2017/06/30/js-func-00-what/">함수형 프로그래밍(JS)이란…?</a>을 참고하자.<br><strong>자바에서는 자바8에 Lambda가 출현한 이후 함수형 프로그래밍이 가능해졌는지 모르겠지만 그 이전에는 불가능한 것으로 알고 있다.<br>왜냐하면 자바에서는 함수가 일급 객체가 아니기 때문에 함수의 매개변수로 넘길 수 없기 때문이다.</strong></p><h2 id="자바스크립트는-더-이상-예전의-자바스크립트가-아니다"><a href="#자바스크립트는-더-이상-예전의-자바스크립트가-아니다" class="headerlink" title="자바스크립트는 더 이상 예전의 자바스크립트가 아니다."></a>자바스크립트는 더 이상 예전의 자바스크립트가 아니다.</h2><p>예전에 자스의 출현 목적은 페이지의 동적 제어였지만 <a href="/2017/06/18/what-is-node-js/">브라우저를 탈출한 JS(Node.js)</a>의 출현과 <a href="/2017/04/26/js-001-es/#ES2015-ES6">ES2015의 탄생</a> 이후로<br><strong>이런 걸 자바스크립트로 할 수 있다고??</strong>와 같은 걸 많이 할 수 있게 되었다.  </p><ol><li>서버 구현(Node.js)  </li><li>파일 읽고 쓰기(Node.js)  </li><li>CLI 프로그램 만들기 (예) babel, webpack 등등)  </li><li>모바일 앱 만들기(Ionic2, React Native)  </li><li>데스크탑 앱 만들기(Electron)  </li><li>크롤링 하기(PhantomJS, JSDom 등등)  </li><li>기타 등등</li></ol><p>이제 자바스크립트는 어엿한 프로그래밍 언어의 반열에 올랐다고 볼 수 있고, 그 목적도 이제 페이지의 동적 제어에 벗어나서 <a href="/2017/08/08/js-how-to-learn/">프로그래밍 언어 관점으로 바라보고 학습할 자세</a>가 필요하다.</p><h2 id="자바스크립트를-배우기-전에-잘-만들어진-프로그래밍-언어를-먼저-배우는-것을-추천하는-이유"><a href="#자바스크립트를-배우기-전에-잘-만들어진-프로그래밍-언어를-먼저-배우는-것을-추천하는-이유" class="headerlink" title="자바스크립트를 배우기 전에 잘 만들어진 프로그래밍 언어를 먼저 배우는 것을 추천하는 이유"></a>자바스크립트를 배우기 전에 잘 만들어진 프로그래밍 언어를 먼저 배우는 것을 추천하는 이유</h2><p>ES2015의 출현으로 자바스크립트의 많은 단점들이 보완됐지만 여전히 단점들(동적 타입, 인터페이스의 부재, 다른 언어의 좋은 개념들 등등)이 존재한다.<br>ES5 시절에는 아주 홍수 같이 많았다.(호이스팅, 모듈화, 함수단위 스코프 등등)<br>이런 문제점은 누가 짚어주지 않는 이상 모르는 경우가 허다하다.<br>하지만 만약 자바나 C 같은 이런 단점들이 존재하지 않는 언어들을 먼저 배웠다면  </p><blockquote><blockquote><p>어? 동적 타입 언어네? 정적 타입으로 도와주는 라이브러리가 없나?<br>모듈화는 어떻게 구현해야할까?</p></blockquote></blockquote><p>등등과 같은 고민들을 누가 말해주지 않더라도 혼자서라도 해볼 가능성이 조금이라도 올라가며 누군가 설명을 해주면 쉽게 이해가 가능하다.<br>또한 자바 등등과 같이 잘 만들어지지 않은 언어를 배우지 않다보면 캡슐화, private 멤버의 필요성을 느낄 수가 없게 된다.<br>정통 프로그래밍 언어를 배웠다면 이게 없으면 당연히 문제라고 생각해볼만한 개념들이 자바스크립트에는 상당히 많다.<br>물론 그 배경에는 짧은 개발 기간과 페이지 동적 제어라는 목적 때문이었겠지만…  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자바스크립트 학습 방법</title>
      <link href="/2017/08/08/js-how-to-learn/"/>
      <url>/2017/08/08/js-how-to-learn/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-how-to-learn/thumb.png" alt=""></p><p>이 포스트는 제가 다년간 자바스크립트를 설렁 설렁 공부하다 작년 1년동안 빡시게 공부해온 경험을 토대로 작성한 글입니다.<br>따라서 이 글을 읽으시는 분들께서는 본인과 맞지 않는 부분도 존재할 수 있으니 그 점은 참고하고 적절한 필터링을 하시면 되겠습니다.  </p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="#들어가기에-앞서">들어가기에 앞서</a>  <ul><li><a href="#역사를-먼저-알아보자">역사를 먼저 알아보자</a></li><li><a href="#자바스크립트는-자바가-아니다">자바스크립트는 자바가 아니다</a>  </li><li><a href="#HTML-CSS의-연장선-상으로-자바스크립트를-바라보지-말자">HTML, CSS의 연장선 상으로 자바스크립트를 바라보지 말자</a>  </li><li><a href="#JS를-브라우저와-떼놓고-생각하자">JS를 브라우저와 떼놓고 생각하자</a>  </li><li><a href="#JS는-더이상-Toy-Language-장난감-가지고-놀듯-쉽고-깊이-없이-배워도-되는-언어-가-아니다">JS는 더이상 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니다.</a>  </li></ul></li><li><a href="#어떻게-공부해야할까">어떻게 공부해야할까?</a><ul><li><a href="#1-잘-만들어졌다고-알려진-언어들을-먼저-공부하자">1. 잘 만들어졌다고 알려진 언어들을 먼저 공부하자</a>  <ul><li><a href="#1-1-그게-싫다면-쉽게-쉽게-쓰여진-책을-먼저-읽자">1-1. 그게 싫다면 쉽게 쉽게 쓰여진 책을 먼저 읽자</a>  </li></ul></li><li><a href="#2-소문난-책들을-위주로-읽자-단-jQuery-빼고">2. 소문난 책들을 위주로 읽자, 단 jQuery 빼고</a>  <ul><li><a href="#2-1-MDN-Stackoverflow와-친해지자">2-1. MDN, Stackoverflow와 친해지자</a>  </li><li><a href="#2-2-ES5를-끝내고-ES2015-를-할-필요가-없다">2-2. ES5를 끝내고 ES2015+를 할 필요가 없다</a>  </li></ul></li><li><a href="#3-NPM과-Babel을-배우자">3. NPM과 Babel을 배우자</a>  </li><li><a href="#4-ES2015-가-익숙해졌다면-Typescript를-공부해보자">4. ES2015+가 익숙해졌다면 Typescript를 공부해보자</a>  </li></ul></li><li><a href="#번외편">번외편</a><ul><li><a href="#1-코드-검사-도구를-사용하자">1. 코드 검사 도구를 사용하자.</a>  </li><li><a href="#2-Task-Runner를-배우자">2. Task Runner를 배우자</a>  </li><li><a href="#3-Module-Bundler를-배우자">3. Module Bundler를 배우자</a>  </li><li><a href="#4-TDD를-공부하자">4. TDD를 공부하자</a>  </li></ul></li><li><a href="#마치며">마치며</a></li></ul><a id="more"></a><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>먼저 들입다 자바스크립트 공부를 하지 말고 아래 내가 열거한 사항들을 먼저 보고 공부를 해보자.<br>나의 다년간의 노하우가 녹아있으니 쏙쏙 빼먹길 바란다.<br>이러한 노하우들을 보고 실제 자바스크립트를 <a href="#어떻게-공부해야할까">어떻게 공부해야할지</a>에 대해 알아보자.<br>또한 에이전시/쇼핑몰에 종사하는 분들은 ES2015+를 실무에서 접할 기회가 적기 때문에 <a href="#2-1-MDN-Stackoverflow와-친해지자">2-1. MDN, Stackoverflow와 친해지자</a> 파트까지만 공부해도 실무에서는 전혀 무리가 없을 것이다.<br>하지만 스타트업, 자사 서비스/대규모 JS 앱을 개발하는 환경에 종사하는 분들은 ES2015+를 실무에서 매우 빈번하게 사용하고 있을 것이므로 그 이후 챕터까지 모두 공부하는 걸 추천한다.  </p><h3 id="역사를-먼저-알아보자"><a href="#역사를-먼저-알아보자" class="headerlink" title="역사를 먼저 알아보자"></a>역사를 먼저 알아보자</h3><p>해당 프로그래밍 언어가 어떤 문제를 해결하기 위해 나왔는지 등등에 대해 파악을 하게 되면 좀 더 해당 언어를 잘 쓸 수 있게 된다.<br>먼저 초기 브라우저에는 페이지를 보여주기만 할 뿐, 유저와 상호작용을 하지 못했다.<br>유저가 값을 입력하는게 불가능하다보니 그에 대한 응답도 불가능했던 것이다.<br>따라서 페이지의 <strong>동적인 처리</strong>를 위해서 자바스크립트가 나왔다고 해도 과언이 아니다.<br>당시에 자바스크립트는 하나의 프로그램을 만드는 목적 보다도 <strong>ID에 공백을 넣은 경우, 메뉴에 마우스를 올린 경우</strong> 등등의 동적인 처리가 주된 목적이었다.<br>따라서 하나의 완성된 프로그램을 만들기에는 다소 부족한 점도 많았고, 10일이라는 짧은 개발 시간 탓에 설계 상 버그 등등이 많다.<br>이러한 점들은 <a href="/categories/Programming/ECMAScript/자알쓰/">자알쓰</a>에서 하나하나 정리하고 있으니 해당 포스트를 참고해보자.</p><h3 id="자바스크립트는-자바가-아니다"><a href="#자바스크립트는-자바가-아니다" class="headerlink" title="자바스크립트는 자바가 아니다"></a>자바스크립트는 자바가 아니다</h3><p>가끔 보면 자바스크립트 커뮤니티에 자바 질문을 올리는 사람들이 있다.<br><strong>자바 스크립트(Java Script)가 아니라 자바스크립트(Javascript)다.</strong> 둘은 엄연히 다르다.<br>왜 이런 이름이 붙었는지에 대해서 간단히 알아보자.<br>자바스크립트의 이름의 변천사는 모카(Mocha) - 라이브스크립트(Livescript) - 자바스크립트(Javascript)이다.<br>자바스크립트는 다음과 같은 언어에서 영향을 받았다.  </p><ul><li>자바에서는 문법과 ‘원시 값 vs 객체 관계’  </li><li>스키마와 오크에서는 일급 객체인 함수  </li><li>셀프에서는 프로토타입 상속  </li><li>펄과 파이썬에서는 문자열, 배열, 정규표현식을 빌려왔다.  </li><li>또한 워낙 여러 언어로부터 영향을 받은 덕에 함수형 프로그래밍(일급 객체인 함수)과 객체지향 프로그래밍(객체, 상속)을 함께 사용하곤 한다.</li></ul><p>따라서 자바스크립트는 자바와 직접적인 연관 관계가 커서 그렇게 이름이 붙은 게 아니라 자바의 인기에 탑승하려는 <del>노이즈</del><strong>마케팅 전략</strong>을 사용한 게 아닐까 싶다.  </p><h3 id="HTML-CSS의-연장선-상으로-자바스크립트를-바라보지-말자"><a href="#HTML-CSS의-연장선-상으로-자바스크립트를-바라보지-말자" class="headerlink" title="HTML, CSS의 연장선 상으로 자바스크립트를 바라보지 말자"></a>HTML, CSS의 연장선 상으로 자바스크립트를 바라보지 말자</h3><p>많은 사람들이 HTML, CSS를 배우고 그 이후에 홈페이지를 <strong>동적</strong>으로 제어할 목적으로 자바스크립트를 배운다.<br>자바스크립트는 <strong>프로그래밍 언어</strong>이다.<br>C언어와 같은 프로그래밍 언어를 배운다고 하면 C언어를 배우지 그 전에 컴퓨터 사이언스를 <strong>굳이</strong> 배우고 시작할 필요는 없다.<br>배우면 좋지만 배우지 않고 시작해도 상관이 없다는 뜻이다.<br>즉, 그 말은 병행해도 된다는 뜻이며 HTML을 배우지 않고 JS를 먼저 배워도 된다는 뜻이다.  </p><h3 id="JS를-브라우저와-떼놓고-생각하자"><a href="#JS를-브라우저와-떼놓고-생각하자" class="headerlink" title="JS를 브라우저와 떼놓고 생각하자"></a>JS를 브라우저와 떼놓고 생각하자</h3><p>브라우저에서 제공하는 JS는 크게 세 파트로 나눌 수가 있다.  </p><ol><li>DOM(Document Object Model)<br>자바스크립트에 자주 사용하는 <code>document.getElementById()</code>와 같이 <strong>document 객체</strong>에 해당하는 내용들을 지칭한다.  </li><li>BOM(Browser Object Model)<br>자바스크립트에서 자주 사용하는 <code>window.alert()</code>와 같이 <strong>window 객체</strong>에 해당하는 내용들을 지칭한다.  </li><li><a href="/2017/04/26/js-001-es/">ES(ECMAScript)</a></li></ol><p>오잉? 브라우저에서 제공하는 JS? 그럼 다른 곳에서도 JS를 쓸 수 있단 말인가?<br>그렇다. <a href="/2017/06/18/what-is-node-js/">Node.js</a>에서도 JS를 쓸 수 있으며 브라우저에서는 할 수 없었던 여러가지를 할 수 있게 되었다.  </p><ol><li>File I/O<br>파일의 입/출력과 관련된 내용이다.  </li><li>서버 API<br>서버를 구축하는 것 등등에 관한 내용이다.</li><li>ES(ECMAScript)  </li><li>기타 등등 너무 많음.</li></ol><p>따라서 우리는 먼저 ES를 마스터해야한다.<br>Node.js와 Browser라는 플랫폼에서 공통적으로 쓸 수 있는 내용이기도 하며 ES에 해당하는 내용들이<br>여타 프로그래밍 언어들(C, Java 등등)이 가지고 있어야할 내용들(변수, 함수, 자료형, 조건문, 반복문 등등)이 포함된 내용이기 때문에<br>프로그래밍 언어 관점에서 자바스크립트를 배우려면 ES를 먼저 파야한다.  </p><p>자바스크립트를 브라우저와 절친 먹여놓고 공부하기 시작하다보면 다음과 같은 함정에 빠지게 된다.<br>일반적인 수학에서 함수는 <strong>입력 값이 있으면 출력 값이 있다</strong>라는 개념이다.<br>프로그래밍 세계에서 함수의 <strong>입력 값은 매개변수, 출력 값은 반환하는 값</strong>과 연결이 된다.<br>따라서 <strong>두 수의 합을 반환하는 함수</strong>를 만들라고 하면 다양한 결과가 나오게 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 아래 두 케이스가 모범 답안</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과를 확인하려고자 하는 의지</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add3</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x+y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 브라우저와 짱친 먹은 JS들</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add4</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  alert(x+y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add5</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML += x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(prompt(<span class="string">"숫자를 입력해주세요."</span>));</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(prompt(<span class="string">"숫자를 입력해주세요."</span>));</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML += x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사람들이 <strong>입력</strong>이라고 하면 어느 정도는 함수의 <strong>매개변수</strong>로 이해를 하는 경향이 있다.(일부는 prompt 함수로 입력받는다.)<br>하지만 <strong>반환</strong>의 의미를 <strong>(화면에)출력</strong>으로 받아들이는 경우도 존재하고, 그 화면에 출력하는 방법도 로그창, 경고창, 브라우저에 보여주는 방법 등이 존재한다.<br>이는 모두 브라우저에 <strong>의존</strong>하고 있는 것이다.  </p><h3 id="JS는-더이상-Toy-Language-장난감-가지고-놀듯-쉽고-깊이-없이-배워도-되는-언어-가-아니다"><a href="#JS는-더이상-Toy-Language-장난감-가지고-놀듯-쉽고-깊이-없이-배워도-되는-언어-가-아니다" class="headerlink" title="JS는 더이상 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니다."></a>JS는 더이상 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니다.</h3><p>과거에 어쨌든 간에 현재 자바스크립트는 계속해서 새로운 스펙이 나오고 이제 어엿한 프로그래밍 언어의 반열에 올랐다고 할 수 있다.<br>여전히 동적 타입, typeof 버그 등등의 단점이 존재하지만 이전 자바스크립트 버전으로 작성한 코드와의 호환 때문에 고칠 수 없는 점도 존재해서 여전히 문제는 존재한다.<br>하지만 예전의 Toy Language(장난감 가지고 놀듯 쉽고 깊이 없이 배워도 되는 언어)가 아니란 뜻이며 진지하고 깊숙하게 시간을 내서 배울 가치가 있는 언어이다.</p><h2 id="어떻게-공부해야할까"><a href="#어떻게-공부해야할까" class="headerlink" title="어떻게 공부해야할까?"></a>어떻게 공부해야할까?</h2><p>아직 <a href="#들어가기에-앞서">들어가기에 앞서</a>를 보지 않았다면 꼭 보고 오자.<br>공부에 임하기 전에 자바스크립트를 어떠한 자세로 바라보고 공부해야할지에 대해 적어놓았다.<br>이제 본격적으로 자바스크립트를 어떻게 정복해야할지 스텝 바이 스텝으로 적어보겠다.  </p><h3 id="1-잘-만들어졌다고-알려진-언어들을-먼저-공부하자"><a href="#1-잘-만들어졌다고-알려진-언어들을-먼저-공부하자" class="headerlink" title="1. 잘 만들어졌다고 알려진 언어들을 먼저 공부하자"></a>1. 잘 만들어졌다고 알려진 언어들을 먼저 공부하자</h3><p>사람은 아는만큼 보인다.<br>자바스크립트는 애초에 목적 자체가 프로그램을 만들기 보다는 <strong>페이지의 동적 제어</strong>였고, <strong>10일이라는 짧은 개발 기간</strong> 덕분에 설계 상 문제점이 많은 언어이다.<br>이걸 다른 프로그래밍 언어를 모르는 사람은 그 설계 사항들이 왜 안 좋고 어떤 문제점들이 존재하는지 모른다.<br>그런 걸 친절하게 일일이 다 설명해주는 책이 있으면 모르겠지만 없었던 것 같고, 다 인터넷을 통해 파편화된 지식을 조각 조각 모아야했던 것 같다.<br>혹은 너무 어렵게 설명이 돼있거나…<br>하지만 잘 만들어졌다고 알려진 C나 Java와 같은 언어(동의를 안 하더라도 확실히 예전의 JS보다는 잘 만들어졌다는 데는 동의할 것이다.)를 먼저 공부하고 자바스크립트를 바라보면<br><strong>이거 왜 이렇게 만들었어?, 이렇게 짜면 이런 사항들이 문제가 되겠는데?, 예전에 봤을 때는 못 알아 먹겠는 것들이 이제는 조금씩 보이네?</strong>하고 동일한 내용을 보아도 이해하는 관점이 깊이가 깊어진다.<br>따라서 나는 자바스크립트를 접하기 전에 그런 언어들을 먼저 접하는 걸 추천한다.  </p><h4 id="1-1-그게-싫다면-쉽게-쉽게-쓰여진-책을-먼저-읽자"><a href="#1-1-그게-싫다면-쉽게-쉽게-쓰여진-책을-먼저-읽자" class="headerlink" title="1-1. 그게 싫다면 쉽게 쉽게 쓰여진 책을 먼저 읽자"></a>1-1. 그게 싫다면 쉽게 쉽게 쓰여진 책을 먼저 읽자</h4><p>나는 시간이 별로 없거니와 C언어와 Java는 너무 어렵다(<del>알레르기가 있다</del>)고 생각되는 사람들은 사람들이 말하는 잘 쓰여진 책들 말고 서점에 가서 자신의 눈으로 직접 보고 이해할만한 수준의 책을 골라보자.<br>왜 잘 쓰여진 책보다 쉽게 쓰여진 책을 추천하냐면 일단 뇌를 말랑말랑하게 만들어서 자바스크립트와 친밀도를 높이게 하기 위함이다.<br>처음부터 잘 쓰여진 책을 보다보면 자신이 이해할 수 없는 수준으로 얘기하는 경우가 많다.<br>하지만 쉽게 쉽게 쓰여진 책은 다소 설명이 부족하더라도 이해하는데는 큰 무리가 없고 술술 넘어갈 것이다.<br>이런 책은 깊이 없이 그냥 술술 넘어가며 봐야한다. 그냥 ‘JS가 이런 거구나~’하고 맛보기만 하는 것이지 그렇게 깊이 있게 볼만한 책은 아니다.<br>주로 따라해볼만한 예제가 많고 브라우저와 짱친 먹은 예제들(눈에 바로 바로 결과가 보여지니 학습 유도에는 좋았다) 위주의 책이 보기 좋을 것이다.<br>나의 경우에는 HTML+CSS+JS 무따기 시리즈로 JS를 처음 접했는데 지금은 없어진 것 같다.  </p><h3 id="2-소문난-책들을-위주로-읽자-단-jQuery-빼고"><a href="#2-소문난-책들을-위주로-읽자-단-jQuery-빼고" class="headerlink" title="2. 소문난 책들을 위주로 읽자, 단 jQuery 빼고"></a>2. 소문난 책들을 위주로 읽자, 단 jQuery 빼고</h3><p>여기서 말하는 소문난 책(내 기준)은 다음과 같다.  </p><ul><li><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7400243" rel="external nofollow noopener noreferrer" target="_blank">인사이드 자바스크립트</a>  </li><li><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=8142241" rel="external nofollow noopener noreferrer" target="_blank">자바스크립트를 말하다</a>  </li><li><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=12181869" rel="external nofollow noopener noreferrer" target="_blank">러닝 자바스크립트</a>  </li></ul><p><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=10338797" rel="external nofollow noopener noreferrer" target="_blank">코뿔소 책</a>이나 <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7204207" rel="external nofollow noopener noreferrer" target="_blank">노란책</a>도 유명하다고들 하나 솔직히 1독이라도 끝낸 사람이 얼마나 될까 싶을 정도라서 그닥 추천하지 않았다.<br>그리고 아직 읽어보지 않았지만 <a href="http://book.naver.com/search/search.nhn?sm=sta_hty.book&sug=pre&where=nexearch&query=You+Don%27t+Know+JS" rel="external nofollow noopener noreferrer" target="_blank">You Don’t Know JS 시리즈</a>도 좋은 것 같다.  </p><p>여기서 jQuery를 뺀 이유는 적어도 ES5까지는 알고 나서 제이쿼리를 접하는 걸 추천한다.<br>자바스크립트는 엄연히 <strong>프로그래밍 언어</strong>인데 중간에 jQuery(DOM 조작 라이브러리+@)를 먼저 접하면 프로그래밍 언어 관점 보다는 DOM을 조작하는데 너무 혈안이 될 수도 있다.<br>또 JS를 제대로 모르는 상태에서 jQuery를 접하게 되면 Javascript를 몰라서 나오는 질문을 jQuery를 모르기 때문이라고 생각할 수도 있으며,<br>Javascript로 해결해야하는 상황들을 jQuery의 메소드로 해결하는 상황도 초래할 수 있다.<br>jQuery는 Javascript로 만들어져있기 때문에 절대 VanillaJS(Pure JS)보다 성능 측면에서 좋을 수가 없다.<br>따라서 jQuery를 배우더라도 아직은 그 쪽에 힘을 싣지 않고 Javascript 쪽에 힘을 더 싣는 것을 추천한다.<br>jQuery를 사용하지 않는 곳을 찾기 힘들 정도로 jQuery는 많은 곳에서 사용 중이지만 아래와 같은 글이 있을 정도로 jQuery가 그렇게 짱짱맨인 것 만은 아니다.  </p><ul><li><a href="https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.ko-KR.md" rel="external nofollow noopener noreferrer" target="_blank">You Don’t Need jQuery</a>  </li><li><a href="https://www.tokyobranch.net/archives/6598" rel="external nofollow noopener noreferrer" target="_blank">이제와서 JQUERY를 쓰면 안되는 이유, 혹은 JQUERY와 웹개발의 역사</a>  </li></ul><h4 id="2-1-MDN-Stackoverflow와-친해지자"><a href="#2-1-MDN-Stackoverflow와-친해지자" class="headerlink" title="2-1. MDN, Stackoverflow와 친해지자"></a>2-1. MDN, Stackoverflow와 친해지자</h4><ul><li><a href="https://developer.mozilla.org/" rel="external nofollow noopener noreferrer" target="_blank">MDN</a>은 파이어폭스라는 브라우저를 만든 모질라 재단에서 만든 개발자를 위한 사이트이다.<br>Javascipt 내장 API(Array 관련 메소드 등등)들의 자세한 설명 등등이 나와 있다.<br><a href="http://www.ecma-international.org/ecma-262/7.0/" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript Spec</a>을 보고 이해하기 힘든 내용들은 이 곳에서 자주 참고하자.    </li><li><a href="https://stackoverflow.com/" rel="external nofollow noopener noreferrer" target="_blank">Stackoverflow</a>는 개발자 계의 지식 IN이라고 보면 될 것 같다.<br>검색은 네이버(카페)에 의존하기 보다는 구글링(구글에 검색하는 행위)을 통해 Stackoverflow와 같은 사이트 올라온 글들을 참고하자.<br>네이버의 수 백 배에 달하는 글들과 더 좋은 정보들이 있다보니 더 빨리 문제 해결을 할 수 있는 가능성이 높아진다.<br>한 발 더 나아가서 직접 질문과 답변까지 해보면 금상첨화일 것이다.  </li><li><a href="https://www.w3schools.com/" rel="external nofollow noopener noreferrer" target="_blank">w3schools</a>라는 사이트가 있지만 <a href="http://www.w3fools.com/" rel="external nofollow noopener noreferrer" target="_blank">w3fools</a>란 사이트가 있을 정도로 잘못된 내용 및 업데이트가 늦다보니 간단한 예제 정도만 참고하자.</li></ul><h4 id="2-2-ES5를-끝내고-ES2015-를-할-필요가-없다"><a href="#2-2-ES5를-끝내고-ES2015-를-할-필요가-없다" class="headerlink" title="2-2. ES5를 끝내고 ES2015+를 할 필요가 없다"></a>2-2. ES5를 끝내고 ES2015+를 할 필요가 없다</h4><p><strong>웹 에이전시나 쇼핑몰 등등에 근무하는 사람들은 ES5까지(2-1 챕터)까지만 공부하셔도 업무를 보는데는 크게 지장이 없을 것이다.</strong><br>웹 에이전시나 쇼핑몰에 근무하는 사람들이라면 <a href="/2017/04/26/js-001-es/#ES2015">ES2015+</a>는 고사하고 <a href="/2017/04/26/js-001-es/#ES3-1999">ES3</a>를 사용하고 있을 가능성이 크다.(IE8 때문)<br>그래도 IE8도 곧 사장될 거 같기 때문에(아마도…?) <a href="/2017/04/26/js-001-es/#ES5-2009">ES5</a>를 미리미리 공부해두는 게 좋다.<br>또한 협업하는 사람이 ES2015+를 모른다면 다음과 같은 문제점이 존재한다.  </p><ol><li>협업하는 사람이 ES2015+를 공부해야한다.  </li><li>협업하는 사람이 공부할 의지가 없으면 큰일이다.  </li><li>추후에 사람을 뽑을 때 ES2015+를 알고 있는 사람으로 뽑아야한다.  </li></ol><p>이 외에도 다른 문제점들이 존재하겠지만 당장 떠오르는 것은 이게 끝이다.  </p><p>해당 챕터부터는 스타트업이나 자사 서비스/대규모 앱을 JS로 개발하는 환경에 종사하는 사람들이라면 반드시 거쳐야하는 과정일 것이다. </p><p>과거 나도 ‘ES5를 끝내고 ES2015+를 공부해야하지 않나?’라는 생각 때문에 반년동안 ES5에만 목을 메달다가 어느 스터디에서 ES6(ES2015)와 ES5를 간단하게 비교해주는 내용을 들었는데 정말 혁명이었고 별 거 없었다.<br>ES6 들어서 새로 생긴 Promise, Generator, Iterator 등등의 내용을 다룬 것은 아니고 간단한<br>const/let, Rest Parameter, Default Parameter, Spread Operator, for-of 등등은 정말 금방 배울 수 있다.<br>따라서 내 생각은 똑같은 코드를 ES5로 짜보고 ES2015+로 짜보고 점점 익숙해지면 그 이후에 Promise, Generator, Iterator 등등의 내용을 공부하면 될 것 같다.<br>또한 요즘 프론트 엔드 개발을 할 때 ES5로 짜는 것보다 ES2015+로 짜는 경우가 훨씬 많다.<br>따라서 ES5를 공부할 필요가 없다고 주장하는 사람도 있는데 나는 그 견해와는 입장이 다르다.<br>ES2015+로 짠 코드를 브라우저(특히 MS 계열)에서 정상적으로 지원해주지 않는다.<br>따라서 ES5로 바꿔주어야하는데 결국 브라우저 위에서 도는 것은 ES5 코드이다.<br>그러니까 ES2015+로 짜면서 어느 정도는 ES5로 어떻게 변환될지 상상(?)을 조금 하면서 짤 필요는 있다.<br>ES2015+의 코드를 ES5로 바꿔주는 애가 100% 커버를 해주지 못한다. (그 도구가 꾸진 게 아니라 언어 설계상 오는 차이 때문에…)<br>따라서 대부분은 커버하지만 혹시 모를 에러가 발생할 수도 있으니 ES5 정도는 알아야한다는 게 내 생각이다.  </p><h3 id="3-NPM과-Babel을-배우자"><a href="#3-NPM과-Babel을-배우자" class="headerlink" title="3. NPM과 Babel을 배우자."></a>3. NPM과 Babel을 배우자.</h3><p>우선 ES2015+의 코드를 브라우저에서 100% 지원해주지 않는다.<br>따라서 ES5로 변환(트랜스파일)해줘야 하는데 그 중에 제일 많이 쓰고 좋다고 생각되는 것은 Babel이다.<br>이 Babel을 사용하는 가장 쉬운 방법은 <a href="https://babeljs.io/repl/" rel="external nofollow noopener noreferrer" target="_blank">Babel REPL</a>을 이용하는 것이다.<br>그런데 매번 소스를 복붙 해서 트랜스파일하는 귀찮은 과정을 반복할 것인가?<br>그리고 우리는 바벨이 ES5로 트랜스파일 한 코드를 보고 이해하지 못한다.<br>따라서 우리가 소스 유지보수를 하기 위해서는 ES2015+로 짠 코드 하나, ES5로 트랜스파일 된 코드 하나, 총 두 개를 들고 있어야한다.<br>이런 귀찮은 작업을 줄여주기 위한 것이 <a href="https://babeljs.io/docs/usage/cli/" rel="external nofollow noopener noreferrer" target="_blank">babel-cli</a>이다.<br>MS-DOS 유저라면 익숙할 법한 시꺼먼 창인 터미널(윈도우의 CMD)에서 트랜스파일을 해주는 도구이다.<br>하지만 이 babel-cli를 설치는 npm을 통해서만 가능하다. (왜냐면 babel-cli가 Node.js 위에서 돌기 때문…)<br>npm은 <a href="https://nodejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Node.js</a>를 설치하면 자동으로 설치된다.<br>이 때 우리가 배워야할 것은 두 가지이다.  </p><ol><li>npm 사용 방법(package.json에 대해 공부하기, 모듈 설치 삭제 해보기)  </li><li><a href="https://babeljs.io/docs/usage/cli/#babel" rel="external nofollow noopener noreferrer" target="_blank">babel-cli 사용 방법</a>  </li></ol><h3 id="4-ES2015-가-익숙해졌다면-Typescript를-공부해보자"><a href="#4-ES2015-가-익숙해졌다면-Typescript를-공부해보자" class="headerlink" title="4. ES2015+가 익숙해졌다면 Typescript를 공부해보자"></a>4. ES2015+가 익숙해졌다면 Typescript를 공부해보자</h3><p>ES2015+가 아무리 좋아졌다고 하더라도 다음과 같은 걸 해결하지 못했다.  </p><ol><li>정적 타입  </li><li>사용자가 직접 인터페이스 구현  </li><li>private 접근 지정자<br>등등이 있는데 이 ES2015+의 모든 특성들을 포함한 Superset 격인 Typescript란 게 존재한다.  </li></ol><p>나도 타입스크립트는 잘 모르기 때문에 1번을 토대로 장점을 설명해보겠다.  </p><ol><li>코드의 안정성<br>앱의 규모가 커지면 커질 수록 코드를 파악하기 힘들어지는 경향이 존재한다.<br>또 오랜 시간이 지난 코드를 유지보수 할 때도 마찬가지이다.<br>이럴 때 어떤 메소드를 써야할 때 첫 번째 매개변수로 문자열이 와야하는지, 숫자가 와야하는지, 매개변수를 몇 개를 넘겨야하는지, 생략이 가능한지<br>기존 동적 타입에서는 체크할 수 없었던 내용 등등을 체크하므로 어떻게 메소드를 사용해야하는지 직접 메소드 구현부로 가서 파악할 필요가 없어진다.  </li><li>코드의 자동완성<br>어떤 함수로부터 값을 반환 받았는데 이게 배열인 줄 알고 forEach 메소드를 썼는데 알고보니 Object가 반환되는 경우였다고 생각해보자.<br>기존 동적 타입에서는 어떤 자료형이 반환되는지 모르니 자동완성에 배열의 메소드, 문자열의 메소드 등등이 전부 뜰 것이다.<br>하지만 정적인 타입으로 딱 Object가 반환된다는 게 확정된 메소드라면 자동완성에 배열의 메소드도 뜨지 않을 것이며 배열의 메소드를 사용하면<br>에디터 상에서 오류로 표시되기 때문에 이런 것도 어찌보면 코드의 안정성과 연결이 되는 점이기도 하다.  </li></ol><p>하지만 장점이 있으면 단점이 있듯, 내 기준에서 단점을 서술해보겠다.  </p><ol><li>생산성이 떨어진다(초기에)<br>동적 타입인 js는 코드를 대충 빨리 짜도 돌아간다.<br>따라서 생산성이 높다고 볼 수 있다. (하지만 나중을 생각한다면…)<br>하지만 타입스크립트는 타입 체크가 매우 빡빡하다.<br>따라서 동일한 코드를 짤 때도 더 오래 걸릴 수도 있다.<br>하지만 나중에 되면 아마 타입스크립트가 훨씬 빠를 것이다.  </li><li>외부 라이브러리에 대한 타입 정의도 모두 해줘야한다.<br>이게 제일 사람 미치게 한다.<br>유명한 라이브러리의 경우 미리 다 타입 정의 파일이 있는데 없는 경우에는 직접 만들거나 적폐 세력(any)를 사용해야한다.<br>또한 라이브러리의 버전과 타입 정의한 파일의 버전이 불일치하는 경우도 있고 골칫거리다.<br>이러한 단점 때문에 타입스크립트를 포기하는 경우가 많다. (나도… ㅠㅠ)</li></ol><h2 id="번외편"><a href="#번외편" class="headerlink" title="번외편"></a>번외편</h2><p>해당 파트는 자바스크립트와 직접적으로 관련이 있다고는 말할 수 없다.<br>하지만 나는 자바스크립트로 개발을 한다면(특히 ES2015+) 당연히 알면 좋다고 생각하는 내용들을 정리해봤다.  </p><h3 id="1-코드-검사-도구를-사용하자"><a href="#1-코드-검사-도구를-사용하자" class="headerlink" title="1. 코드 검사 도구를 사용하자."></a>1. 코드 검사 도구를 사용하자.</h3><p>코드를 짤 때 항상 일관성 있게 짜야한다.<br>하물며 한 사람이 짤 때도 문자열을 표시하는데 “”나 ‘’을 혼용한다던지<br>들여쓰기를 위해 탭과 들여쓰기를 혼용한다던지 등등의 경우에 놓이게 되는데<br>다른 사람들과 협업하다보면 하나의 소스 파일의 가독성은 똥망진창이 될 것이다.<br>하지만 사람의 눈으로 꼼꼼히 체크한다 해도 꼭 놓치기 마련이다.<br>이렇게 코딩 컨벤션을 지켰는지와 에러 등등을 체크해주는 툴로 JS에서는 <a href="http://www.jslint.com/" rel="external nofollow noopener noreferrer" target="_blank">JSLint</a>, <a href="http://jshint.com/" rel="external nofollow noopener noreferrer" target="_blank">JSHint</a>, <a href="http://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a> 등등이 있다.<br>각자 <a href="https://github.com/js-jsm/pattern/tree/devlop/02-%EB%8F%84%EA%B5%AC_%EB%8B%A4%EB%A3%A8%EA%B8%B0#코드-검사-도구" rel="external nofollow noopener noreferrer" target="_blank">장단점</a>을 파악해보고 마음에 드는 걸 사용하면 좋은데 ESLint를 추천한다.<br>또한 TS 진영에서는 <a href="https://palantir.github.io/tslint/" rel="external nofollow noopener noreferrer" target="_blank">TSLint</a>를 사용하면 된다.</p><h3 id="2-Task-Runner를-배우자"><a href="#2-Task-Runner를-배우자" class="headerlink" title="2. Task Runner를 배우자"></a>2. Task Runner를 배우자</h3><p>기존의 자바스크립트 소스 코드를 개발하던 방식에는 다음과 같은 문제가 존재한다.  </p><ul><li><p>유저에게 불필요한 데이터를 전송하여 LTE 데이터를 낭비하게 만들고, 그 데이터들로 하여금 로딩 속도를 느리게 만듦으로써 사용자에게 최적화된 UX를 제공해주지 못하고 있다.<br>이게 뭔소린가 싶으면 우리의 소스 코드를 보면 공백과 기나긴 변수명 등등을 가지고 있다.<br>이거는 사람 입장에서 가독성을 높여 유지보수하기 편하게 한 것이지, 컴퓨터 입장에서는 이런 애들은 불필요하다.<br>따라서 공백을 줄이고(minify), 변수명을 난독화(a, b와 같은 걸로 줄이는 작업, uglify)시키는 작업을 해야한다.    </p></li><li><p>우리가 사용하는 웹 브라우저는 HTTP 프로토콜 위에서 통신을 한다.<br>요즘 <a href="http://www.popit.kr/%EB%82%98%EB%A7%8C-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%9E%88%EB%8D%98-http2/" rel="external nofollow noopener noreferrer" target="_blank">HTTP 2</a>도 나왔지만 아직까지 브라우저/서버의 호환 때문에 많은 사람들이 HTTP 1.1을 사용 중이다.<br>HTTP/1.1는 기본적으로 Connection당 하나의 요청을 처리 하도록 설계 되어있다.<br>그래서 동시전송이 불가능하고 요청과 응답이 순차적으로 이루어 지게된다.<br>그렇다 보니 HTML 문서안에 포함된 다수의 리소스 (Images, CSS, Script)를 처리하려면 요청할 리소스 개수에 비례해서 Latency(대기 시간)는 길어지게 된다.<br>SPA(Single Page Application)의 경우 다수의 스크립트 파일을 로딩하나 하나로 합친(concat) 스크립트 파일을 로딩하나 동일하게 작동한다.<br>다수의 파일은 대기 시간이라는 오버헤드(쓸 데 없는 비용(여기서 시간도 비용으로 측정함))가 발생하기 때문에 다수의 스크립트 파일을 하나로 합쳐주는 작업도 해야한다.  </p></li></ul><p>이런 작업을 하는 방법은 여러 가지가 있는데 <a href="https://skalman.github.io/UglifyJS-online/" rel="external nofollow noopener noreferrer" target="_blank">UglifyJS</a>를 이용하는 것이 가장 간단하다.<br>하지만 이는 Babel REPL과 마찬가지로 수동으로 해줘야한다는 단점이 존재한다.<br>이러한 Minify 작업(Task), Uglify 작업, concat 작업 등등 무수한 최적화 작업을 소스 코드가 수정될 때마다 일일이 하고 싶을까?<br>이러한 작업(Task)들을 실행(Run)을 하나의 단위로 묶어서 한 번에 실행시켜주는 Task Runner란 게 존재한다.<br>그 중에서도 <a href="https://gruntjs.com/" rel="external nofollow noopener noreferrer" target="_blank">Grunt</a>와 <a href="https://gulpjs.com/" rel="external nofollow noopener noreferrer" target="_blank">Gulp</a>가 있는데 둘 중에 아무거나 해도 상관이 없을지 모르겠는데 나는 Gulp를 배웠다.  </p><h3 id="3-Module-Bundler를-배우자"><a href="#3-Module-Bundler를-배우자" class="headerlink" title="3. Module Bundler를 배우자."></a>3. Module Bundler를 배우자.</h3><p>자바스크립트에서 스코프는 함수 단위(const와 let은 블록 단위)이고, 모듈이란 게 존재하지 않았다.<br>따라서 <a href="/2017/05/20/js-005-module/#네임스페이스-패턴">네임스페이스 패턴</a>과 같은 꼼수를 사용해서 모듈화를 구현하곤 하였다.  </p><p>시간이 흘러 Node.js 진영에서는 <a href="http://www.commonjs.org/" rel="external nofollow noopener noreferrer" target="_blank">CommonJS</a> 스펙을 준수해서 모듈화를 구현하였다.<br>하지만 웹 브라우저는 사용자들이 <strong>파일을 내려받아야한다</strong>는 특수한 상황이 존재해서 비동기적으로 모듈을 로딩해야한다는 특수한 상황에 놓여있다.<br>이를 위한 <a href="https://github.com/amdjs/amdjs-api/wiki/AMD" rel="external nofollow noopener noreferrer" target="_blank">AMD(Asynchronous Module Definition)</a> 스펙이 있고, 이를 구현한 <a href="http://requirejs.org/" rel="external nofollow noopener noreferrer" target="_blank">RequireJS</a>라는 라이브러리가 있다.<br>자세한 내용은 <a href="http://d2.naver.com/helloworld/12864" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a>를 참고하자.</p><p>하지만 ES2015에 들어와서 Module을 언어단에서 지원해주는 import와 export 문법이 존재한다.<br>하지만 현재 이를 지원하는 브라우저/Node는 <strong>없다</strong>.<br>따라서 브라우저 진영에서는 여전히 A 모듈, B 모듈 등등을 각각 로딩해야하는 사태가 발생했는데 이 때 구세주처럼 등장한 게 Module Bundler이다.<br>Bundle은 ‘꾸러미’라는 의미로 하나로 합친다는 의미를 지니고 있다.<br>Task Runner의 concat은 단순히 소스 코드 자체만을 합치지만 이 Module Bundler는 모듈 간의 관계를 전부 파악해서 단일 모듈(소스 파일)로 Bundling 해준다.<br>따라서 Task Runner에서는 불가능한데 Module Bundler에서는 다음과 같은 것들이 가능하다. (설명은 Webpack 기준)  </p><ol><li><a href="/2017/03/13/webpack2-code-splitting/">Code Splitting(코드 분할)</a>  <ol><li>변경률이 적은 서드파티(제이쿼리, 리액트 등등의 라이브러리나 프레임워크)들을 따로 빼서 사용자의 임시 파일에 저장시켜놓고 방문할 때마다 해당 내용을 캐싱하게 끔 해서 좀 더 로딩 속도를 높이기.  </li><li>SPA라고 해도 사용자가 모든 URI를 방문하는 게 아니니 URI 별로 소스 코드를 빼기.  </li><li>그런데 URI 별로 소스 코드를 빼도 파일의 크기가 너무 작은 경우에는 오히려 요청/응답에 대한 오버헤드가 클 수 있으므로 소스 코드의 최소한의 크기 정하기.  </li></ol></li><li><a href="/2017/03/12/webpack2-tree-shaking/">Tree Shaking(나무의 가지를 흔들어 썩은 열매를 떨어뜨리 듯, 필요없는 코드들을 삭제하기)</a><br>쓰지 않는 코드(변수 함수 등등)들이 있는 경우에 자동으로 번들링 할 때는 없애기.  </li><li>파일의 크기가 작은 경우에는 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" rel="external nofollow noopener noreferrer" target="_blank">Data URL</a>로 리소스를 표현하기(폰트, 이미지, svg 등등)<br>웹팩에서는 js 소스만 모듈로 보는 게 아니라 정적인 리소스들(이미지, 폰트, svg 등등)을 모두 모듈로 보고 있다.<br>그래서 이 모듈(정적인 리소스)들을 컨트롤 할 수 있게 된다.<br>그런데 이미지 크기가 너무 작은 경우에는 요청/응답에 대한 오버헤드를 줄이기 위해 sprite image를 이용할 수도 있고, Data URL을 이용할 수도 있다.<br>하지만 sprite image를 만드는 것은 귀찮고 사용하기도 불편할 때가 있다. (이를 위한 플러그인들도 많지만)<br>그래서인지 모던 브라우저에서는 이런 Data URL을 통해서도 그런 오버헤드를 줄일 수 있다.<br>물론 성능은 sprite image가 Data URL보다 더 뛰어난 것으로 알고 있다.</li></ol><p>원래 Module Bundler 성격은 모듈과 관련된 것만 다루는 것이었는데 이제는 Task Runner의 기능까지 삼켜서 minify, uglify 등등의 기능까지 흡수를 해서 어지간하면 Module Bundler만 사용해도 될 정도이다.<br>하지만 Module Bundling 이전에 처리해야하는 특수한 경우에는 Task Runner에서 작업들을 처리한 이후에 Module Bundler를 돌려야할 것이다.<br>Module Bundler로는 <a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">Webpack</a>, <a href="http://browserify.org/" rel="external nofollow noopener noreferrer" target="_blank">browserify</a>, <a href="https://rollupjs.org/" rel="external nofollow noopener noreferrer" target="_blank">rollup</a> 등등이 있는데<br>Webpack이 제일 사용자도 많고, github start도 많고, 커뮤니티 활성화도 잘 돼있으므로 Webpack을 공부하는 걸 추천한다.  </p><h3 id="4-TDD를-공부하자"><a href="#4-TDD를-공부하자" class="headerlink" title="4. TDD를 공부하자."></a>4. TDD를 공부하자.</h3><p>TDD(Test Driven Development)는 다음과 같은 개발 행위를 말한다.  </p><ol><li>테스트 코드를 먼저 짠다.  </li><li>테스트 코드가 통과하게 앱의 코드를 짠다.  </li></ol><p>이를 통해 얻을 수 있는 장점은 다음과 같다.  </p><ol><li>내가 구현해야 하는 코드(테스트 통과)가 무엇인지 명확해진다.  </li><li>코드를 수정해도 잘 돌아갈 거라는 안심이 된다.<br>테스트 코드를 작성하지 않았으면 코드를 수정하고 해당 메소드를 사용하는 부분을 전부 다시 테스트해봐야한다.<br>하지만 테스트 코드들을 작성했다면 해당 테스트를 통과했다면 수정한 메소드를 사용한 부분들이 정상적으로 동작한다고 볼 수 있으므로 심신에 안정이 찾아오게 된다.  </li></ol><p>TDD는 아니더라도 앱의 코드를 먼저 짜더라도 테스트 코드는 반드시 짜는 습관을 들이자.(나부터라도…)<br>하지만 많은 사람들이 아래와 같은 상황 때문에 TDD를 못하는 것 같다.  </p><ol><li>테스트 코드 짜는데 시간이 더 걸린다.<br>초기에는 그럴지 몰라도 앱의 규모가 커지거나 유지보수를 생각한다면 TDD가 더 오래 걸리지는 않을 것이다. (더 적게 걸리지 않을 지도…)  </li><li>어디서부터 어디까지를 테스트해야할지 모르겠어요.<br>저도 모르겠어요… 누가 좀 알려주신다면 ㅠㅠ  </li><li>E2E(End to End) Test는 어떻게 하죠?<br>저도 UI 단 테스트는 안 해봐서 누군가 피드백을 주신다면 수정하겠습니다.  </li></ol><p>이 TDD를 도와주는 프레임워크로는 <a href="https://jasmine.github.io/" rel="external nofollow noopener noreferrer" target="_blank">jasmine</a>, <a href="https://mochajs.org/" rel="external nofollow noopener noreferrer" target="_blank">mocha</a>, <a href="http://chaijs.com/" rel="external nofollow noopener noreferrer" target="_blank">chai</a> 등등이 있다.<br>그리고 이러한 테스트를 자동으로 돌려주는 등 위 프레임워크들을 도와주는 Test Runner인 <a href="https://karma-runner.github.io/1.0/index.html" rel="external nofollow noopener noreferrer" target="_blank">karma</a>가 있다.  </p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>내가 컴공을 전공하다 보니 비전공자나 입문자에게는 다소 딱딱하게 들리거나 어렵게 들린 내용이 많을 것이다.<br>다 내가 모르는 게 많아 이런 내용들을 쉽게 풀어내는 능력이 부족하기 때문이다 ㅠㅠ…<br>여튼 글을 보고 궁금한 점, 부족한 점, 잘못된 점 등등은 전부 댓글로 피드백 부탁드립니다~~ </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 독학 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) JIT 컴파일</title>
      <link href="/2017/08/07/js-jit-compile/"/>
      <url>/2017/08/07/js-jit-compile/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-jit-compile/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>이번에는 쉬어가는 타임으로 번외편 격인 JIT 컴파일에 대해 간단히 다뤄보았다.  </p><a id="more"></a><h2 id="자바스크립트는-인터스크립트-언어이다"><a href="#자바스크립트는-인터스크립트-언어이다" class="headerlink" title="자바스크립트는 인터스크립트 언어이다?"></a>자바스크립트는 인터스크립트 언어이다?</h2><p>책을 보면 위와 같이 말하는 경우가 존재한다.<br>인터스크립트가 뭔데?에서 부터 막힌다면 아래 내용을 봐보자.  </p><h2 id="컴퓨터는-우리의-소스코드를-어떻게-이해할까"><a href="#컴퓨터는-우리의-소스코드를-어떻게-이해할까" class="headerlink" title="컴퓨터는 우리의 소스코드를 어떻게 이해할까?"></a>컴퓨터는 우리의 소스코드를 어떻게 이해할까?</h2><p>기본적으로 컴퓨터는 기계어(2진수(0과 1)로 이루어진 코드) 밖에 해석하지 못한다.<br><del>바보 녀석 ㅎㅎ</del><br>왜 10진수가 아닌 2진수를 사용하게 됐는지 궁금한 사람은 <a href="/2017/08/07/computer-number-making-reason/">컴퓨터에서 2진수, 8진수, 16진수를 쓰게 된 이유</a>를 참고하자.</p><p>따라서 우리가 작성한 <code>var a = &#39;a&#39;</code>라는 코드를 기계어로 바꿔주는 행위를 해야한다.<br><img src="/images/js-jit-compile/realprogrammers.png" alt="이게 귀찮은 사람은 처음부터 기계어로 코딩하면 된다. (뇌가 좋다면...)"><br>이걸 사람이 직접 바꿔줘야할까…?<br>매우 비효율적이므로 당연히 이를 도와주는 도구가 있는데 그 중 하나가 인터프리터이다.</p><h2 id="인터프리트란…-Interpret"><a href="#인터프리트란…-Interpret" class="headerlink" title="인터프리트란…?(Interpret)"></a>인터프리트란…?(Interpret)</h2><p>코드를 실행하면서 한 줄 한 줄 기계어로 변환 후 실행하는 걸 인터프리트(Interpret)라고 한다.<br>이 인터프리트하는 녀석을 인터프리터라고 부른다.<br>자바스크립트는 이런 인터프리트 방식을 채택한 프로그래밍 언어<strong>였었다.</strong></p><p>자바스크립트는 이런 인터프리트 방식을 채택한 프로그래밍 언어<strong>였었다</strong>라고…?<br>그럼 과거에는 그렇고 지금은 아니라는 말인가…?<br><img src="/images/js-jit-compile/correct.jpeg" alt="딩!동!댕!"><br>모던 브라우저의 자바스크립트 엔진은 모두 JIT 컴파일 방식으로 Javascript 코드를 해석하고 있다.  </p><ul><li>구글에서 개발한 V8(크롬, 오페라와 Node.js)  </li><li>모질라에서 개발한 TraceMonkey(파이어폭스 3.5+부터 탑재)  </li><li>MS에서 개발한 Chakra(IE9+부터 탑재)  </li><li>Webkit 엔진에 탑재된 JavascriptCore(Safari에 탑재)  </li></ul><h2 id="컴파일이란…-Compile"><a href="#컴파일이란…-Compile" class="headerlink" title="컴파일이란…?(Compile)"></a>컴파일이란…?(Compile)</h2><p>이 JIT 컴파일에 대해 알아보기 이전에 컴파일에 대해 알아보도록 하자.<br>우리가 짠 코드 <strong>전체를 한 번에</strong> 기계어로 변환해주는 걸 말한다.<br>이러한 일을 컴파일러(Compiler)가 대신해준다.  </p><h2 id="JIT-컴파일이란…-Just-in-Time-Compile"><a href="#JIT-컴파일이란…-Just-in-Time-Compile" class="headerlink" title="JIT 컴파일이란…?(Just in Time Compile)"></a>JIT 컴파일이란…?(Just in Time Compile)</h2><p>컴파일 방식과 인터프리트 방식의 장점을 짬뽕한 녀석이라고 보면 된다.<br>컴파일 방식은 기계어로 컴파일 된 코드를 바로 실행하므로 빠른 실행 속도를 보장 받는다.<br>인터프리트 방식은 소스가 수정돼도 귀찮게 매번 컴파일을 하지 않아도 된다는 장점이 존재한다.<br>이 JIT 컴파일 방식은 <strong>프로그램을 실행하는 시점에서 필요한 부분을 즉석에서 컴파일</strong>하는 방식이라 동적 컴파일(Dynamic Compile)이라고도 부른다.<br>당연히 과거 인터프리트 방식보다 성능 측면에서 향상이 있어서 사용한다고 보면 될 것 같다.<br>인터프리트는 한줄씩 해석 - 실행 - 해석 - 실행의 반복인데<br>JIT 컴파일은 실행할 때 한번에 해석 - 실행이기 때문이다.</p><p>결론적으로 자바스크립트가 인터프리트 언어라는 것은 과거에나 먹힐 법한 말이고 모던 브라우저(최신 브라우저)와 Node에서는 JIT 컴파일 언어라로 부르는 것이 맞다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> JIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 클로저</title>
      <link href="/2017/08/07/js-013-closure/"/>
      <url>/2017/08/07/js-013-closure/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-013-closure/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 열 세 번째 시리즈는 클로저를 주제로 진행하겠다.</p><a id="more"></a><h2 id="들어가기-전에"><a href="#들어가기-전에" class="headerlink" title="들어가기 전에"></a>들어가기 전에</h2><p>프로그래밍 언어에는 <strong>지역 변수</strong>란 게 존재한다.<br>이 지역변수는 변수의 <a href="/2017/04/27/js-003-scope/">스코프</a>에 의존적이다.<br>여타 프로그맹 언어에서 변수의 스코프는 <strong>{} 블록 단위</strong>지만,<br>자바스크립트의 변수의 스코프는 <strong>함수 단위</strong>이다. (물론 ES6의 const와 let의 스코프는 블록 단위)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 글로벌 스코프 시작</span></span><br><span class="line"><span class="keyword">var</span> global = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 로컬 스코프 func 시작</span></span><br><span class="line">  <span class="keyword">var</span> local = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 로컬 스코프에서는 로컬 스코프와 글로벌 스코프에 접근 가능</span></span><br><span class="line">  <span class="built_in">console</span>.log(global);</span><br><span class="line">  <span class="built_in">console</span>.log(local);</span><br><span class="line">  <span class="comment">// 로컬 스코프 끝</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 글로벌 스코프에서는 글로벌 스코프만 접근 가능</span></span><br><span class="line"><span class="built_in">console</span>.log(global);</span><br><span class="line"><span class="built_in">console</span>.log(local); <span class="comment">// Uncaught ReferenceError: local is not defined</span></span><br><span class="line"><span class="comment">// 글로벌 스코프 끝</span></span><br></pre></td></tr></table></figure><p>스코프의 접근 가능한 스코프는 자기 자신을 포함한 상위 스코프이다.<br>글로벌 스코프의 접근 가능한 범위는 글로벌 스코프가 최상위 스코프이므로 글로벌 스코프 자기 자신 밖에 없고,<br>로컬 스코프 func의 접근 가능한 스코프는 자기 자신인 func와 자신의 상위 스코프인 global 스코프가 된다.</p><h2 id="왜-이런-현상이-발생할까"><a href="#왜-이런-현상이-발생할까" class="headerlink" title="왜 이런 현상이 발생할까?"></a>왜 이런 현상이 발생할까?</h2><p>이는 전역 변수와 지역 변수가 메모리(RAM)의 어느 영역(<a href="/2017/02/09/C-ref-004/">Code, Data, Stack, Heap</a>)에 적재되는지와 관련이 있다.<br>전역 변수는 메모리의 Data라는 영역에 적재돼서 프로그램의 종료 시까지 계속 적재돼있다.<br>따라서 어디서나 사용이 가능하다.<br>지역 변수는 메모리의 Stack이라는 영역에 적재되고, 지역 변수의 생명주기(Lifecycle)는 <strong>함수 호출 시 생성되고 함수가 종료되면 시스템에 의해 반환</strong>된다.</p><h2 id="클로저는-왜-쓸까"><a href="#클로저는-왜-쓸까" class="headerlink" title="클로저는 왜 쓸까?"></a>클로저는 왜 쓸까?</h2><p>위와 같이 지역변수는 함수 호출 시 메모리에 할당되고, 함수가 종료되면 메모리에서 해제된다.<br>따라서 지역변수는 <strong>호출할 때마다 항상 같은 값으로 초기화</strong>된다.<br>하지만 가끔 함수를 호출할 때 <strong>이전에 존재했던 값을 유지</strong>하고 싶어질 때가 있다.<br>그러려면 함수가 종료됐을 때 해당 지역 변수가 메모리에서 해제되면 안 된다.  </p><h2 id="클로저는-어떻게-구현해야할까"><a href="#클로저는-어떻게-구현해야할까" class="headerlink" title="클로저는 어떻게 구현해야할까?"></a>클로저는 어떻게 구현해야할까?</h2><p>함수가 종료돼도 지역 변수가 메모리에서 해제되지 않으려면 어떻게 해야할까?<br>이를 위해서는 자바스크립트의 GC(Garbage Collector, 메모리 상에 쓸 데 없는 녀석 수거해가는 녀석)가 어떻게 동작하는지 간단하게나마 알아봐야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'양간장'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'간장냥'</span>&#125;;</span><br><span class="line">obj = obj2;</span><br></pre></td></tr></table></figure><p>3번 라인에서 obj는 <code>{name: &#39;간장냥&#39;}</code>을 참조하게 만들었다.<br>그럼 <code>{name: &#39;양간장&#39;}</code>이라는 데이터는 참조가 불가능 해졌으므로 사용할 방법이 없는 쓸 데 없는 녀석이 된다.<br>이때 저 <code>{name: &#39;양간장&#39;}</code>은 GC(Garbage Collecting) 대상이 되며 GC(Garbage Collector)가 적절한 시점(개발자 도구 열닫 혹은 일정 시간 이후?)에 수거해간다.<br>따라서 메모리 상에서 데이터가 해제되지 않게 하려면 <strong>누군가는 해당 녀석을 참조</strong>하게 만들어서 GC(Garbage Collecting) 대상에서 제외시켜야한다.<br>이를 위해서는 다음과 같은 조건 제약이 따른다.  </p><ul><li>조건 1. 참조하는 대상이 참조하는 녀석과 접근 가능한 스코프에 있어야 한다.<br>가령 예를 들어 참조하는 대상(<code>{name: &#39;양간장&#39;}</code>)과 참조하는 녀석(<code>obj</code>)이 접근 가능한 스코프에 있어야한다는 소리이다.<br>접근 가능한 스코프 상에 존재해야 오류 없이 해당 데이터를 참조할 수 있기 때문이다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br><span class="line">&#125;;</span><br><span class="line">c();</span><br></pre></td></tr></table></figure></li></ul><p>로컬 스코프 c의 접근 가능한 스코프는 자신을 포함한 상위 스코프이다.  </p><ul><li>로컬 스코프 c</li><li>전역 스코프<br>따라서 로컬 스코프 c에서 로컬 스코프 b로 접근이 불가능하다.    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b++); <span class="comment">// 1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    c();</span><br><span class="line">&#125;;</span><br><span class="line">a(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><p>위 예제에서 로컬 스코프 c가 접근 가능한 스코프는 자신을 포함한 상위 스코프이다.  </p><ul><li>로컬 스코프 c  </li><li>로컬 스코프 a  </li><li>전역 스코프<br>위 코드는 참조하는 대상(<code>b</code>)이 로컬 스코프 a에 있고, 참조하는 녀석(<code>console.log(b)</code>)이 로컬 스코프 c에 있다.  </li><li><em>참조하는 대상(로컬 스코프 a)이 참조하는 녀석(로컬 스포크 c)과 접근 가능한 스코프에 있어야 한다*</em>는 조건을 만족하고 있다.</li></ul><ul><li>조건 2. 참조하는 대상이 존재하는 함수를 호출하는 게 아니라 참조하는 녀석이 존재하는 함수를 직접 호출해야한다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b++); <span class="comment">// 1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    c();</span><br><span class="line">&#125;;</span><br><span class="line">a(); <span class="comment">// 1</span></span><br><span class="line">a(); <span class="comment">// 1</span></span><br><span class="line">a(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><p>기껏 위와 같이 로컬 스코프와 그 내부 스코프로 나누어서 b의 값을 유지하고자 했는데 함수 a를 호출할 때마다 계속해서 1이 출력된다.<br>우리는 b의 값이 유지돼서 b++을 하고 있으므로 호출할 때마다 1이 상승된 값을 원했는데 그게 아니다.<br>그러기 위해서는 조건 2를 만족시켜주면 된다.<br>즉 참조하는 대상(<code>b</code>)이 존재하는 함수 a를 호출할 게 아니라 참조하는 녀석(<code>console.log(b)</code>)이 존재하는 함수 c를 호출해야한다.<br>함수 a를 백날 호출해봤자 지역변수 b를 초기화 시켜주는 구문이 매번 실행되기 때문에 참조를 아무리 한들 b의 값이 유지되는 게 아니다.<br>하지만 스코프의 접근 가능한 스코프는 자신을 포함한 상위 스코프인데 전역 스코프에서 어떻게 로컬 스코프 a에 존재하는 c를 호출할 수 있을까?<br>이는 자바스크립트의 특성인 <strong>함수는 <a href="/2017/06/30/js-func-00-what/#일급-함수-일급-객체-일급-시민">first-class-citizen</a>임</strong>을 활용하면 된다.<br>전역 스코프에서 c를 호출할 수 있게 하려면 전역 변수와 함수 c 사이에 어떠한 매개체를 뚫어줘야한다.<br>이는 위에서 말한 일급 객체의 특성을 살려 함수 a를 호출했을 때 함수 c(를 호출하는 게 아님)를 리턴함으로써 전역 스코프와 함수 c 사이에 다리를 놔준다고 보면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b++);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line">a = a();</span><br><span class="line">a(); <span class="comment">// 1</span></span><br><span class="line">a(); <span class="comment">// 2</span></span><br><span class="line">a(); <span class="comment">// 3</span></span><br><span class="line">a(); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>함수 a를 호출한 결과(내부 함수 c)를 다시 a에 담는 과정이 불필요하다고 생각되니 IIFE(즉시 실행 함수, Immediately Invoked Function Expressions)를 이용하면 아래와 같이 줄일 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b++);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;)();</span><br><span class="line">a(); <span class="comment">// 1</span></span><br><span class="line">a(); <span class="comment">// 2</span></span><br><span class="line">a(); <span class="comment">// 3</span></span><br><span class="line">a(); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>함수 c를 리턴할 수도 있지만, 아래와 같이 익명함수로 리턴하는 게 대부분이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b++);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">a(); <span class="comment">// 1</span></span><br><span class="line">a(); <span class="comment">// 2</span></span><br><span class="line">a(); <span class="comment">// 3</span></span><br><span class="line">a(); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>함수 c와 같이 기명 함수를 리턴하는 경우는 함수 내에서 자기 자신을 호출하는 재귀 함수를 구현할 때 뿐인 것 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b++);</span><br><span class="line">      <span class="keyword">if</span>(b &lt; <span class="number">10</span>) c();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;)();</span><br><span class="line">a(); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">a(); <span class="comment">// 10</span></span><br><span class="line">a(); <span class="comment">// 11</span></span><br><span class="line">a(); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><ul><li>조건 3. 참조하는 대상이 전역 스코프가 아니어야한다.<br>전역 스코프는 어차피 프로그램 종료 시까지 메모리에 계속 할당돼있으므로 상관이 없는 이야기이다.  </li></ul><h2 id="그래서-클로저가-뭔데"><a href="#그래서-클로저가-뭔데" class="headerlink" title="그래서 클로저가 뭔데?"></a>그래서 클로저가 뭔데?</h2><p>먼저 클로저를 설명하기 보다는 적절한 사용 사례를 설명하고 클로저가 뭔지를 풀어 놓는 게 독자의 흥미를 유발할 거 같아서 일부러 뒤로 배치하였다.<br>클로저는 다음과 같이 정의하고 있다.<br>인사이드 자바스크립트 책에서는 <strong>이미 생명 주기가 끝난 외부 함수의 변수를 참조하는 함수</strong>,<br><a href="http://blog.javarouka.me/2012/01/blog-post_13.html" rel="external nofollow noopener noreferrer" target="_blank">한 블로그</a>에서는 <strong>생성 당시의 스코프에 대한 연결을 갖는 블록</strong>이라고 정의하고 있다.<br>즉, 위에서 c가 클로저이다.<br>변수 b는 지역 변수이므로 a 함수 종료와 동시에 죽어야하는 변수이다.<br>하지만 그 생명 주기가 끝난 변수(b)를 참조하는 c라는 함수를 사용해서 클로저를 구현하였다.  </p><h2 id="클로저의-장점"><a href="#클로저의-장점" class="headerlink" title="클로저의 장점"></a>클로저의 장점</h2><ol><li>위에서 본 바와 같이 함수를 호출할 때마다 기존에 생성했던 값을 유지할 수 있다.  </li><li>외부에 해당 변수(참조하고 있는 변수)를 노출시키지 않는다.<br>이게 무슨 장점이냐고 생각한다면 코드의 안정성을 보장해준다는 뜻이다.<br>이는 캡슐화(encapsulation)와도 관련이 있는데 알약을 먹는 사람이 알약만 먹어서 병이 치료만 되면 되지, 그 내부의 내용물은 중요하지 않다는 개념이다.<br>근데 만약 환자가 캡슐을 까서 내용물을 바꾸고 다시 캡슐을 씌우고 그 알약을 먹는다면?? 과연 환자의 상태를 보장할 수 있을까?<br>이렇듯 프로그래밍에서 말하는 캡슐화는 환자가 내용물을 바꾸지 못하게(클로저에서 참조하는 변수를 변경하지 못하게 해서),<br>즉 내가 개발한 소스를 사용하는 입장(내가 될 수도 있고 내가 만든 라이브러리를 사용하는 제 3자가 될 수도 있고)에서 코드의 안정성을 보장받게 되는 것이다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 개발자(약사) 입장에서 짠 코드</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>; <span class="comment">// 개발자가 변수에 값을 넣었다. (약사가 약의 내용물을 넣었다.)</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 클로저를 이용하여 내용을 캡슐화 하였다. (약사가 약들을 캡슐로 감쌌다.)</span></span><br><span class="line">      <span class="built_in">console</span>.log(b++);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> c; <span class="comment">// 사용자(환자)가 해당 변수를 참조만 가능하고(약의 복용만 가능하고), 변경은 불가능하게(캡슐을 까서 그 안의 약물들을 못 갈아치우게) 했다.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 실제 사용자(환자)는 해당 변수(약물)을 변경할 수 있는 방법이 없어서 코드의 안정성(환자의 상태)를 보장받을 수 있다.</span></span><br><span class="line"><span class="keyword">var</span> d = a();</span><br><span class="line">d();</span><br></pre></td></tr></table></figure></li></ol><h2 id="클로저의-단점"><a href="#클로저의-단점" class="headerlink" title="클로저의 단점"></a>클로저의 단점</h2><p>클로저는 위와 같이 좋은 점도 존재하는데 역시 신은 공평하듯 모든 걸 주시지 않았는데 바로 아래와 같은 단점이 존재하기 때문이다.  </p><ul><li>클로저로 참조하는 변수는 프로그램 종료 시까지 계속 메모리에 할당돼있다.</li></ul><p>그게 뭐 어때서? 라고 생각하는 경우가 있을 수도 있고 위 경우가 크게 문제가 되지 않을 수도 있다.<br>하지만 사용 가능한 메모리(브라우저마다 다르겠지만…)를 초과하는 사태가 발생할 수도 있고, 성능 상 좋다고 말할 수 있는 사항은 아니다.<br>위와 같은 현상이 발생하는 이유는 계속해서 참조를 하고 있으므로 GC(Garbage Collecting) 대상이 되지 않기 때문이다.<br>따라서 클로저는 이러한 성능 이슈를 가지고 있기 때문에 항상 주의를 기울여 사용을 최소화해야하며 오남용해서는 안 된다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>클로저를 알아야 자바스크립트 고수니 중급으로 넘어가느니 등등의 얘기가 많이 들리는 것 같은데 실상 제대로 파고들어가 보면 별 거 아니란 사실을 알 수 있다.<br>하지만 이와 같은 사항들을 알기 위해서는 아래와 같은 사항은 반드시 짚고 넘어가야 할 것이다.  </p><ol><li><a href="/2017/04/27/js-003-scope/">변수의 스코프</a>  </li><li><a href="#왜-이런-현상이-발생할까">변수의 생명주기(Lifecycle)</a>  </li><li><a href="#클로저는-어떻게-구현해야할까">GC(Garbage Collector)가 GC(Garbage Collecting)하는 대상</a>  </li><li><a href="/2017/06/30/js-func-00-what/#일급-함수-일급-객체-일급-시민">First Class Citizen</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(상식) 컴퓨터는 어떻게 우리가 작성한 코드를 이해할까?</title>
      <link href="/2017/08/07/how-can-computer-understand-our-source/"/>
      <url>/2017/08/07/how-can-computer-understand-our-source/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/how-can-computer-understand-our-source/thumb.png" alt="">  </p><p>기본적으로 컴퓨터는 기계어(2진수(0과 1)로 이루어진 코드) 밖에 해석하지 못한다.<br><del>바보 녀석 ㅎㅎ</del><br>왜 10진수가 아닌 2진수를 사용하게 됐는지 궁금한 사람은 <a href="/2017/08/07/computer-number-making-reason/">컴퓨터에서 2진수, 8진수, 16진수를 쓰게 된 이유</a>를 참고하자.  </p><p>따라서 우리는 우리가 짠 코드를 기계어로 바꾸는 행위를 해야한다.<br><img src="/images/how-can-computer-understand-our-source/realprogrammers.png" alt="이게 귀찮은 사람은 처음부터 기계어로 코딩하면 된다. (뇌가 좋다면...)"><br>우리의 뇌는 이렇게 좋지도 않고, 효율성 측면에서 이러한 행위를 도와주는 도구가 세 가지가 있다.</p><a id="more"></a><h2 id="1-컴파일-Compile"><a href="#1-컴파일-Compile" class="headerlink" title="1. 컴파일(Compile)"></a>1. 컴파일(Compile)</h2><p>우리가 짠 코드 전체를 기계어로 변환해주는 걸 말한다.<br>이러한 일을 컴파일러(Compiler)가 대신해준다.<br>언어에 의존적이므로 C언어 컴파일러, Java 컴파일러 이렇게 따로 따로 존재한다.  </p><h3 id="링크-Link"><a href="#링크-Link" class="headerlink" title="링크(Link)"></a>링크(Link)</h3><p>우리의 프로그램은 여러 모듈들의 조합으로 이루어져있다.<br>하지만 컴파일러는 각 모듈들을 컴파일만 해줄 뿐, 합쳐주는 역할을 하진 않는다.<br>따라서 이 링크는 여러 모듈들을 단일 프로그램으로 합치는 걸 말한다.<br>링크 하는 프로그램을 링커(Linker)라고 부른다.<br>링커가 링크한 결과로 단일 실행 파일인 *.exe 등등이 만들어진다.  </p><h3 id="로드-Load"><a href="#로드-Load" class="headerlink" title="로드(Load)"></a>로드(Load)</h3><p>단일 실행 파일을 메모리에 적재(Load)시키는 걸 말한다.<br>로더(Loader)가 이런 일을 한다.  </p><h3 id="컴파일-언어의-동작-방식"><a href="#컴파일-언어의-동작-방식" class="headerlink" title="컴파일 언어의 동작 방식"></a>컴파일 언어의 동작 방식</h3><p>코딩 - 컴파일(컴파일러에 의해) - 링크(링커에 의해) - 로드(로더에 의해)</p><h2 id="2-인터프리트-Interpret"><a href="#2-인터프리트-Interpret" class="headerlink" title="2. 인터프리트(Interpret)"></a>2. 인터프리트(Interpret)</h2><p>컴파일 방식은 실행 이전에 컴파일 과정을 거쳐야하므로 시간이 더 소요된다.<br>또한 내용을 바꿀 때마다 계속 컴파일을 해줘야한다는 단점이 존재한다.<br>하지만 인터프리트 방식은 소스 코드가 바뀌어도 컴파일 해주지 않아도 된다.<br>실행하면서 한 줄 한 줄 해석해(인터프리트, Interpret)나가기 때문이다.<br>이 인터프리트 해주는 녀석을 인터프리터(Interpreter)라고 부른다.<br>Javascript가 이에 속했다. (모던한 환경이라면 아니라는 소리다.)<br>하지만 단점으로 한 줄 한 줄 해석하고 실행하기 때문에 컴파일 된 파일을 실행하는 것보다는 느리다는 문제점이 존재한다.  </p><h2 id="3-JIT-컴파일-Just-in-Time-Compile"><a href="#3-JIT-컴파일-Just-in-Time-Compile" class="headerlink" title="3. JIT 컴파일(Just in Time Compile)"></a>3. JIT 컴파일(Just in Time Compile)</h2><p>컴파일 방식과 인터프리트 방식의 장점을 짬뽕한 녀석이라고 보면 된다.<br>컴파일 방식은 기계어로 컴파일 된 코드를 바로 실행하므로 빠른 실행 속도를 보장 받는다.<br>인터프리트 방식은 소스가 수정돼도 귀찮게 매번 컴파일을 하지 않아도 된다는 장점이 존재한다.<br>이 JIT 컴파일 방식은 <strong>프로그램을 실행하는 시점에서 필요한 부분을 즉석에서 컴파일</strong>하는 방식이라 동적 컴파일(Dynamic Compile)이라고도 부른다.<br>자바의 경우 소스코드(*.java) 파일을 JVM(Java Virtual Machine)이 이해할 수 있는 자바 바이트 코드(*.class)로 변환한다.<br>하지만 컴퓨터는 자바 바이트 코드를 해석하지 못한다.<br>따라서 JVM에서는 실행될 때 자바 바이트 코드를 기계어로 해석해주는 JIT 컴파일 방식을 채택했다.<br>또한 Javascript에서도 JS 엔진(Javascript 코드를 해석해주는 역할을 담당하며 브라우저에 의존적이다.) 중에서는 아래와 같은 녀석들이 JIT 컴파일 방식을 채택했다.  </p><ul><li>구글에서 개발한 V8(크롬, 오페라와 Node.js)  </li><li>모질라에서 개발한 TraceMonkey(파이어폭스 3.5+부터 탑재)  </li><li>MS에서 개발한 Chakra(IE9+부터 탑재)  </li><li>Webkit 엔진에 탑재된 JavascriptCore(Safari에 탑재)  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JIT </tag>
            
            <tag> IT </tag>
            
            <tag> Computer </tag>
            
            <tag> 기계어 </tag>
            
            <tag> 컴파일 </tag>
            
            <tag> 인터프리터 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(상식) 컴퓨터에서 2진수, 8진수, 16진수를 쓰게 된 이유</title>
      <link href="/2017/08/07/computer-number-making-reason/"/>
      <url>/2017/08/07/computer-number-making-reason/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/computer-number-making-reason/thumb.png" alt=""><br>여러 책을 보고 혼자서 내린 결론이기 때문에 틀릴 가능성이 있으니 지적해주면 감사하겠습니다 ^^</p><h2 id="최초의-컴퓨터는-10진수를-사용했다"><a href="#최초의-컴퓨터는-10진수를-사용했다" class="headerlink" title="최초의 컴퓨터는 10진수를 사용했다."></a>최초의 컴퓨터는 10진수를 사용했다.</h2><p>나는 처음부터 2진수를 사용한 줄 알았는데 최초의 컴퓨터인 <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%8B%88%EC%95%85" rel="external nofollow noopener noreferrer" target="_blank">에니악</a>은 10진수를 사용했다고 한다.<br>아마도 우리의 손가락이 10개이고 평상시에 연산을 할 때도 10진수를 주로 사용하기 때문에 익숙해서 10진수를 사용했던 게 아닐까?  </p><a id="more"></a><h2 id="그럼-왜-컴퓨터는-2진수를-사용하게-됐을까"><a href="#그럼-왜-컴퓨터는-2진수를-사용하게-됐을까" class="headerlink" title="그럼 왜 컴퓨터는 2진수를 사용하게 됐을까?"></a>그럼 왜 컴퓨터는 2진수를 사용하게 됐을까?</h2><p>전기회로는 전압이 불안정해서 전압을 10단계로 나누어 처리하는데 한계가 있다.<br>따라서 에니악과 <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%93%9C%EC%82%AD" rel="external nofollow noopener noreferrer" target="_blank">에드삭</a>은 10진수를 이용했던 데 반해<br>그 후속 시리즈인 <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%93%9C%EB%B0%95" rel="external nofollow noopener noreferrer" target="_blank">에드박</a>은 전압을 2단계로 나누어 처리하는 2진수를 사용하였다.<br>즉, 전기가 흐르면 1, 전기가 흐르지 않으면 0만으로 동작하게 설계하게 된 것이다.<br>결론을 내리자면 <strong>전기회로는 전압이 불안정해서 전압을 두 단계로 나누어 처리하는 게 안정적이다 보니 2진수를 사용하게 된 것이다.</strong></p><h2 id="8진수-16진수는-왜-생겼을까-4진수는-왜-안-쓰이는-것일까"><a href="#8진수-16진수는-왜-생겼을까-4진수는-왜-안-쓰이는-것일까" class="headerlink" title="8진수, 16진수는 왜 생겼을까? 4진수는 왜 안 쓰이는 것일까?"></a>8진수, 16진수는 왜 생겼을까? 4진수는 왜 안 쓰이는 것일까?</h2><p>2진수는 숫자를 표현하기 위해 상당히 많은 자릿수를 차지한다.<br>코딩할 때도 이렇게 많은 자릿수는 가독성을 해칠 수 있다.<br>따라서 이런 단점을 보완하기 위해 8진수와 16진수가 등장했다.<br>그렇다면 왜 8진수와 16진수일까?<br>2진수 2자리로는 4진수를<br>2진수 3자리로는 8진수를<br>2진수 4자리로는 16진수를 표현할 수 있다.<br>2진수 2자리는 그닥 많은 자릿수를 절약할 수 없어서 사용을 안 하게 된 게 아닐까 싶다…<br>8진수를 사용하는 대표적인 예는 리눅스나 FTP 등에서 파일이나 폴더에 관한 권한을 표현하기 위해 많이 쓰인다.<br>777 을 예로 들면<br>r 읽기 허용(4) w 쓰기 허용(2) x 실행 허용(1) 을 다 더하면 7이 나오고<br>u 사용자(소유자) g 그룹 o 기타(사용자와 그룹을 제외한 사람) 순서로 기술하면 된다.<br>16진수를 사용하는 대표적인 예는 rgb 컬러 코드(#ff00ff), 유니코드(\u0061, U+0061, 0x0061 등등)에서 쓰인다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> Computer </tag>
            
            <tag> 진법 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(상식) 왜 1byte는 8bit일까?</title>
      <link href="/2017/08/07/why-1byte-is-8bit/"/>
      <url>/2017/08/07/why-1byte-is-8bit/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/why-1byte-is-8bit/thumb.png" alt="이미지 출처: http://keybreak.tistory.com/125">  </p><p>과거에는 1byte가 7bit, 9bit 등등이던 시절이 있다고 하지만 현재는 8비트로 거의 표준이 된 것 같다.<br>왜일까?<br>이 포스트는 아래 링크를 참조하여 제 머릿 속을 바탕으로 글을 썼기 때문에 틀린 점이 있다면 댓글로 적어주길 바랍니다~</p><ul><li><a href="http://air802.tistory.com/72" rel="external nofollow noopener noreferrer" target="_blank">아스키(Ascii)</a>  </li><li><a href="https://kldp.org/node/153459" rel="external nofollow noopener noreferrer" target="_blank">메모리 하나당 차지하는 바이트 수에 대해 궁금한 점이 있습니다.</a>  </li><li><a href="https://kldp.org/node/149091" rel="external nofollow noopener noreferrer" target="_blank">메모리 주소당 데이터용량이 1바이트인 이유가 먼가요??</a>  </li><li><a href="http://zepeh.tistory.com/313" rel="external nofollow noopener noreferrer" target="_blank">1바이트는 왜 8비트일까?</a>  </li></ul><a id="more"></a><h2 id="컴퓨터는-미국에서-개발했다"><a href="#컴퓨터는-미국에서-개발했다" class="headerlink" title="컴퓨터는 미국에서 개발했다."></a>컴퓨터는 미국에서 개발했다.</h2><p>따라서 미국 특화(+유럽권과의 통신 등등을 고려하여 유렵권까지 특화)해서 만들었다.<br>따라서 아시아나 아프리카 등등에는 별로 특화돼있지 않았다. (지금은 많이 완화된 것 같지만…)<br>1byte의 bit 수를 결정 짓는 결정적인 요인은 아마 ASCII라는 문자 인코딩 때문일 것이다.<br>ASCII는 미국권 문자를 표현하는 문자 인코딩(문자의 집합)인데 통신을 위한 기호와 특수기호 + 숫자 + 알파벳 대소문자를 표현할 수 있다.<br>당연히 미국에서 개발했으니 미국에서 쓰이는 문자만 표현하면 되는 것이었다.<br>이 ASCII를 표현하는데는 7bit(128자)로 충분했고, 이 ASCII를 베이스로 byte(하나의 문자를 담는 단위)가 결정된 게 아닐까 싶다.  </p><h2 id="그렇다면-왜-1byte는-7bit가-아닌-8bit일까"><a href="#그렇다면-왜-1byte는-7bit가-아닌-8bit일까" class="headerlink" title="그렇다면 왜 1byte는 7bit가 아닌 8bit일까?"></a>그렇다면 왜 1byte는 7bit가 아닌 8bit일까?</h2><p>내가 내린 추측은 아래 두 가지이다.  </p><ol><li>데이터 송수신의 오류를 검출하기 위한 패리티 비트로 1비트가 추가됐다.  </li><li>유럽권을 고려해서 확장 아스키 코드를 베이스로 정했다.<br>유럽권 문자까지 표현하는데 8bit(256자)면 충분하다고 여겨서 정한 것 같다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자료구조) Queue를 만들어보자!</title>
      <link href="/2017/08/06/queue-making/"/>
      <url>/2017/08/06/queue-making/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/queue-making/thumb.png" alt=""><br>큐는 스택과 반대로 선입선출(FIFO, First In First Out)의 구조를 가지는 자료구조이다.<br>먼저 들어온 놈이 먼저 나가는 구조이니 입력 순서에 따른 처리를 위한 자료에서 많이 사용한다. (OS의 프로세스 스케쥴링)<br>스택과 비교해보면 push 대신에 offer, pop 대신에 offer를 메소드를 사용한다.  </p><a id="more"></a><h2 id="만들어보자"><a href="#만들어보자" class="headerlink" title="만들어보자!"></a>만들어보자!</h2><p>기본적으로 큐를 만들어보기 전에 먼저 링크드리스트에 대해 알아야한다.<br>기존에 스택처럼 생각했을 때 두 가지 데이터를 들고 있어야했다.  </p><ol><li>인덱스(몇 번째에 데이터를 삽입하고 뽑아낼지)  </li><li>실제 데이터 덩어리<br>이 경우에는 데이터를 기존의 스택 크기보다 많이 삽입했을 때만 복사가 이루어졌다.<br>하지만 큐의 경우에는 스택과 같이 두 개의 데이터만 들고 있다고 가정했을 때<br>데이터를 기존의 스택 크기보다 많이 삽입했을 때만 복사가 이루어지는 건 당연하고,<br>데이터를 꺼낼 때 처음 인덱스의 데이터를 꺼내야하는데 그렇게 되면 이가 빠진 것처럼 왼쪽이 비기 때문에 전부 한 칸씩 땡겨야한다.<br>즉, 데이터를 삽입/삭제(추출?) 할 때 모두 큰 비용을 들이게 된다.<br>따라서 큐를 구현할 때는 스택에서 출발할 게 아니라 링크드리스트에서 출발을 해야한다.<br>링크드리스트의 구조 대로 구현하면 삽입/삭제가 용이하기 때문이다.  </li></ol>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자료구조) List - LinkedList를 만들어보자!</title>
      <link href="/2017/08/06/linked-list-making/"/>
      <url>/2017/08/06/linked-list-making/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/linked-list-making/thumb.png" alt=""><br>List는 데이터를 순차적으로 저장하므로 선형 구조(한 줄로 계속 되며, 데이터가 끊어지지 않음)이다.<br>또한 여기서 말하는 노드는 하나의 데이터 덩어리라고 보면 될 것 같다.  </p><h2 id="LinkedList란…"><a href="#LinkedList란…" class="headerlink" title="LinkedList란…?"></a>LinkedList란…?</h2><p>LinkedList는 스택의 다음과 같은 단점을 극복하고자 만들어졌다.  </p><a id="more"></a><ul><li>노드의 끝 부분을 제외한 곳에 데이터 삽입<br>스택은 끝 부분에만 데이터를 삽입할 수 있으므로 중간에 데이터를 삽입할 방법이 존재하지 않았다.<br>LinkedList는 배열의 이러한 단점을 노드(배열의 각 요소)가 다음 주소지를 알게 함으로써 그 단점을 극복하였다.</li></ul><p>하지만 신은 공평하듯, 이 LinkedList에도 다음과 같은 장/단점이 있다.  </p><ul><li>데이터의 접근 속도가 느리다.<br>LinkedList는 다음 노드에 대한 참조만을 가지고 있다.<br>따라서 255 번째 노드의 데이터를 불러오려면 처음부터 순차적으로 255 번째 노드까지 접근해야한다.<br>배열에 비해 이러한 접근 속도가 매우 느리다.  </li><li>다음 노드에 대한 참조만 있을 뿐, 이전 노드에 대한 데이터는 없다.<br>따라서 이전 노드의 값을 가져올 수는 없다.<br>이는 Doubly Linked List라는 이중 링크드 리스트라는 자료구조를 만들어 해결하였다.  </li><li>처음 노드에서 마지막 노드로, 혹은 마지막 노드에서 처음 노드로 가려면 시간이 오래 걸린다.<br>Doubly Linked List를 이용해도 순차적인 접근 밖에 되지 않기 때문에 어쨌든 계속해서 노드들을 타고 타고 끝이나 처음으로 이동해야 한다.<br>이러한 단점을 극복하기 위해 처음 노드에 대한 이전 참조를 마지막 노드로, 마지막 노드에 대한 다음 참조를 처음 노드로 이어줘 원형 구조로 만든 Doubly Circular Linked List가 있다.</li></ul><p>따라서 이 LinkedList를 잘 살리려면 중간에 삽입/삭제가 빈번하며 검색을 자주 하지 않는 자료를 담을 때 사용해야한다.  </p><h2 id="만들어보자"><a href="#만들어보자" class="headerlink" title="만들어보자!"></a>만들어보자!</h2><p>먼저 기본적인 Node부터 만들어보았다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    Node(Object o) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span> </span>&#123; <span class="comment">// 마지막 노드인지</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Node node)</span> </span>&#123; <span class="comment">// 내용물과 참조하는 애가 같은지</span></span><br><span class="line">        <span class="keyword">return</span> value.equals(node.getValue()) &amp;&amp; next == node.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Node n = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node n2 = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node n3 = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node n4 = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        n.setNext(n4); <span class="comment">// n 다음에 n4</span></span><br><span class="line">        n2.setNext(n4); <span class="comment">// n2 다음에 n4</span></span><br><span class="line">        n3.setNext(n); <span class="comment">// n3 다음에 n</span></span><br><span class="line">        System.out.println(n.equals(n2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(n.equals(n3)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(n.isLast()); <span class="comment">// false</span></span><br><span class="line">        System.out.println(n4.isLast()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 지금 구조(List)는 n3(2) 다음에 n(2) 다음에 n4(3) 순으로 연결(Linked)돼있다.</span></span><br><span class="line">        <span class="comment">// 초기 노드를 지정해주고, 계속해서 다음 노드를 참조하는 걸 증감식에 적어줌,</span></span><br><span class="line">        <span class="keyword">for</span>(Node node = n3; <span class="keyword">true</span>; node = node.getNext()) &#123; <span class="comment">// 탈출 조건이 있는 무한 반복문</span></span><br><span class="line">            <span class="comment">// 마지막 노드여도 출력까지는 해줘야함.</span></span><br><span class="line">            System.out.println(node.getValue()); <span class="comment">// 2 2 3</span></span><br><span class="line">            <span class="keyword">if</span>(node.isLast()) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 다음엔 LinkedList를 만들어보았다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node[] nodes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idx; <span class="comment">// 현재 리스트의 몇 번째 요소까지 노드가 들어왔는지 확인하는 변수</span></span><br><span class="line"></span><br><span class="line">    LinkedList() &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">// 기본적으로 10개를 만들어주자, 너무 작게 만들면 복사하는 처리 비용이 많이 들테니...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkedList(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        nodes = <span class="keyword">new</span> Node[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123; <span class="comment">// 맨 끝에 삽입하는 경우</span></span><br><span class="line">        <span class="keyword">int</span> size = size();</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 꽉차지 않았다면</span></span><br><span class="line">        <span class="keyword">if</span>(idx != size)  nodes[idx] = node; <span class="comment">// 현재 인덱스에 노드 삽입.</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 꽉 찼으면</span></span><br><span class="line">            Node[] tmpNodes = <span class="keyword">new</span> Node[size+<span class="number">10</span>]; <span class="comment">// 나중에 또 금방 복사하지 않게 적절하게 큰 배열을 만들자.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) tmpNodes[i] = nodes[i]; <span class="comment">// 기존의 값들을 새로운 배열에 복사</span></span><br><span class="line">            tmpNodes[idx] = node; <span class="comment">// 새로운 값 삽입</span></span><br><span class="line">            nodes = tmpNodes; <span class="comment">// 복사한 배열을 원본 배열 변수로 갈아치우기</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idx == <span class="number">0</span>) &#123;</span><br><span class="line">            idx++;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 하나만 넣은 거면 참조 관계를 수정할 필요가 없음.</span></span><br><span class="line">        &#125;</span><br><span class="line">        nodes[idx-<span class="number">1</span>].setNext(nodes[idx++]); <span class="comment">// 이전 노드의 참조를 현재 노드로 변경</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> idx, Object o)</span> </span>&#123; <span class="comment">// 인덱스를 지정해 해당 지점에 삽입하려는 경우</span></span><br><span class="line">        <span class="comment">// List는 선형구조이므로 데이터를 삽입해야할 인덱스보다 더 뒤에 노드를 삽입하는 것은 불가능하다.</span></span><br><span class="line">        <span class="comment">// 당연히 배열의 인덱스를 벗어나는 음수도 불가능하다.</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.idx &lt; idx || idx &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"올바른 인덱스를 입력해주세요!"</span>);</span><br><span class="line">        <span class="comment">// 배열의 중간에 노드를 삽입하는 게 아닌 경우</span></span><br><span class="line">        <span class="keyword">if</span>(idx == <span class="keyword">this</span>.idx) <span class="keyword">this</span>.add(o);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 배열의 중간에 노드를 삽입하는 경우</span></span><br><span class="line">            <span class="keyword">int</span> size = size();</span><br><span class="line">            Node node = <span class="keyword">new</span> Node(o);</span><br><span class="line">            <span class="comment">// 꽉 차지 않았다면 기존과 동일한 사이즈의 배열 생성, 아니라면 넉넉히 길이가 10 더 긴 배열 생성.</span></span><br><span class="line">            Node[] tmpNodes = idx != size ? <span class="keyword">new</span> Node[size] : <span class="keyword">new</span> Node[size+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 복사할 배열을 직접 넘겨줘서 추가하기.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;idx; i++) tmpNodes[i] = nodes[i]; <span class="comment">// idx 이전까지는 그대로 복사</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=idx; i&lt;<span class="keyword">this</span>.idx; i++) &#123; <span class="comment">// last까지 복사</span></span><br><span class="line">                tmpNodes[i+<span class="number">1</span>] = nodes[i]; <span class="comment">// idx 이후는 한 칸씩 밀어서 복사</span></span><br><span class="line">            &#125;</span><br><span class="line">            tmpNodes[idx] = node; <span class="comment">// 새로운 배열에 지금 들어온 노드 삽입</span></span><br><span class="line">            nodes = tmpNodes; <span class="comment">// 복사한 배열을 원본 배열 변수로 갈아치우기</span></span><br><span class="line">            nodes[idx].setNext(nodes[idx-<span class="number">1</span>].getNext()); <span class="comment">// idx 노드는 중간에 끼어들었으므로 idx 노드 이전 노드의 참조를 가리켜야함.</span></span><br><span class="line">            nodes[idx-<span class="number">1</span>].setNext(nodes[idx]); <span class="comment">// idx 이전 노드의 참조는 idx 노드를 가리키고 있어야함.</span></span><br><span class="line">            <span class="keyword">this</span>.idx++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nodes[--idx] = <span class="keyword">null</span>; <span class="comment">// 마지막 노드 삭제 후 인덱스 1 낮춤.</span></span><br><span class="line">        nodes[idx-<span class="number">1</span>].setNext(<span class="keyword">null</span>); <span class="comment">// 이전 노드가 마지막 노드이므로 참조할 노드가 없음.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        Node[] tmpNodes = <span class="keyword">new</span> Node[size()]; <span class="comment">// 배열을 한 칸씩 땡겨야하므로 새롭게 배열 생성.</span></span><br><span class="line">        Node node = getNode(idx).getNext(); <span class="comment">// idx 번째 노드가 갖고 있는 참조 노드</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;idx; i++) tmpNodes[i] = nodes[i]; <span class="comment">// idx 이전까지 복사</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=idx+<span class="number">1</span>; i&lt;<span class="keyword">this</span>.idx; i++) tmpNodes[i-<span class="number">1</span>] = nodes[i]; <span class="comment">// idx 이후로 또 복사</span></span><br><span class="line">        nodes = tmpNodes; <span class="comment">// 복사한 배열을 원본 배열 변수로 갈아치우기</span></span><br><span class="line">        nodes[idx-<span class="number">1</span>].setNext(node);</span><br><span class="line">        <span class="keyword">this</span>.idx--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        Node node = getNode(idx);</span><br><span class="line">        <span class="keyword">return</span> node == <span class="keyword">null</span> ? <span class="keyword">null</span> : node.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        Node node=nodes[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// idx까지 계속 다음 참조 노드를 구함.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;idx; i++, node=node.getNext());</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodes.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkdedListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList l = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        l.add(<span class="number">1</span>);</span><br><span class="line">        l.add(<span class="string">"a"</span>);</span><br><span class="line">        System.out.println(l.get(<span class="number">0</span>)); <span class="comment">// 1</span></span><br><span class="line">        <span class="comment">// 0번째 노드를 구하고 그 참조 노드를 구하고 값을 얻기</span></span><br><span class="line">        System.out.println(l.getNode(<span class="number">0</span>).getNext().getValue()); <span class="comment">// a</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) l.add(i); <span class="comment">// 1 a 0 1 2 3 4 6 7 8 9</span></span><br><span class="line">        System.out.println(l.get(<span class="number">11</span>)); <span class="comment">// 9</span></span><br><span class="line">        l.add(<span class="number">11</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(l.get(<span class="number">11</span>)); <span class="comment">// 22</span></span><br><span class="line"></span><br><span class="line">        LinkedList l2 = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        l2.add(<span class="number">1</span>);</span><br><span class="line">        l2.add(<span class="number">2</span>);</span><br><span class="line">        l2.add(<span class="number">3</span>);</span><br><span class="line">        l2.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(l2.get(<span class="number">3</span>)); <span class="comment">// 4</span></span><br><span class="line">        l2.remove();</span><br><span class="line">        System.out.println(l2.get(<span class="number">3</span>)); <span class="comment">// null</span></span><br><span class="line">        System.out.println(l2.get(<span class="number">1</span>)); <span class="comment">// 2</span></span><br><span class="line">        l2.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(l2.get(<span class="number">1</span>)); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>틀린 게 많을지는 모르겠지만…<br>일단은 구현을 했다는 것에 의의를 두고 나중에 다시 수정해야겠다.  </p>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> LinkedList </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자료구조) List - Stack(Pushdown List)을 만들어보자!</title>
      <link href="/2017/08/05/stack-making/"/>
      <url>/2017/08/05/stack-making/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/stack-making/thumb.png" alt=""><br>List는 데이터를 순차적으로 저장하므로 선형 구조(한 줄로 계속 되며, 데이터가 끊어지지 않음)이다.  </p><h2 id="스택이란…"><a href="#스택이란…" class="headerlink" title="스택이란…?"></a>스택이란…?</h2><p>스택은 후입선출(LIFO, Last In First Out)의 구조를 가지는 자료구조이다.<br>기본적으로 배열이 스택의 구조로 이루어져있고, CPU가 연산을 할 때 연산자에 우선순위 메겨놓고 연산할 때도 스택을 이용하는 것으로 알고 있다.<br>그리고 프로그래밍을 배우다 보면 콜스택이라고 해서 함수의 실행 컨텍스트(EC, Execution Context)가 계속해서 쌓이는데 그 콜스택도 스택이라는 자료구조를 이용하고 있다.<br>몇 번째에다가 데이터를 넣어야하고, 몇 번째에서 데이터를 빼야할지에 대한 인덱스(포인터)를 가지고 있어야한다.<br>데이터 처리를 먼저하고 인덱스를 바꾸는 경우와 인덱스를 바꾸고 데이터를 처리하는 방식이 있다.<br>기본적으로 push()라는 메소드로 데이터를 넣고 pop()라는 메소드로 데이터를 뺀다.  </p><a id="more"></a><h2 id="만들어보자"><a href="#만들어보자" class="headerlink" title="만들어보자!"></a>만들어보자!</h2><p>아직은 쉬운 자료구조라 그런지 만드는데 재미있었다 ㅎㅎ<br>Array도 스택 구조로 이루어져있는 만큼 자바로 구현하면 ArrayList를 상속 받으면 쉽게 구현이 가능하다.<br>또한 기존에 만들었던 스택의 크기보다 더 많은 데이터를 삽입할 경우에는 더 큰 스택을 만들고 기존의 스택을 복사해야하는데 이 때도 자바의 내장 API를 사용하면 매우 쉽게 구현이 가능하다.<br>하지만 자료구조를 만드는 것은 알고리즘을 향상 시키기 위한 목적도 있기 때문에 최대한 이런 내장 API나 라이브러리들은 배제하고 만들어보았다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    Object[] objs;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>; <span class="comment">// 현재 스택이 몇 번째 인덱스를 가리키고 있는지(넣고 올린다, 올리고 넣는 게 아니라)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">// 기본적으로 10개를 만들어주자, 너무 작게 만들면 복사하는 처리 비용이 많이 들테니...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"스택의 크기는 자연수여야합니다!"</span>);</span><br><span class="line">        objs = <span class="keyword">new</span> Object[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = objs.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 꽉 차지 않았다면</span></span><br><span class="line">        <span class="keyword">if</span>(idx != len) objs[idx++] = obj;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 꽉 찼으면</span></span><br><span class="line">            Object[] tmpObjs = <span class="keyword">new</span> Object[len+<span class="number">10</span>]; <span class="comment">// 나중에 또 금방 복사하지 않게 적절하게 큰 배열을 만들자.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) tmpObjs[i] = objs[i];</span><br><span class="line">            tmpObjs[idx++] = obj;</span><br><span class="line">            objs = tmpObjs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"스택에 들어와있는 값이 없습니다!"</span>);</span><br><span class="line">        Object obj = objs[--idx];</span><br><span class="line">        objs[idx] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objs.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = objs.length;</span><br><span class="line">        <span class="keyword">int</span> copyLen = i &gt; len ? len : i; <span class="comment">// 몇 개를 복사해야할지</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"스택의 크기는 자연수여야합니다!"</span>);</span><br><span class="line">        <span class="keyword">if</span>(i == len) <span class="keyword">return</span>;</span><br><span class="line">        Object[] tmpObjs = <span class="keyword">new</span> Object[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;copyLen; j++) tmpObjs[j] = objs[j];</span><br><span class="line">        objs = tmpObjs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objs[<span class="number">0</span>] == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack s = <span class="keyword">new</span> Stack();</span><br><span class="line">        System.out.println(s.size()); <span class="comment">// 10</span></span><br><span class="line">        s = <span class="keyword">new</span> Stack(<span class="number">20</span>);</span><br><span class="line">        System.out.println(s.size()); <span class="comment">// 20</span></span><br><span class="line">        <span class="comment">// 자연수가 아니라 ArrayIndexOutOfBoundsException 예외를 뱉게 했는데 맞을라나 ㅠㅠ</span></span><br><span class="line">        <span class="comment">// s = new MyStack(0);</span></span><br><span class="line">        s.setSize(<span class="number">4</span>);</span><br><span class="line">        System.out.println(s.size()); <span class="comment">// 4</span></span><br><span class="line">        <span class="comment">// 자연수가 아니라 ArrayIndexOutOfBoundsException 예외를 뱉게 했는데 맞을라나 ㅠㅠ</span></span><br><span class="line">        <span class="comment">// s.setSize(-1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 들어와 있는 값이 없으므로 예외 던짐</span></span><br><span class="line">        <span class="comment">// s.pop();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123; <span class="comment">// 스택의 길이보다 긴 데이터를 넣어보자.</span></span><br><span class="line">            s.push(i%<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0 1 2 0 1 2 0 1 2</span></span><br><span class="line">        <span class="keyword">while</span>(!(s.empty())) System.out.print(s.pop() + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(s.empty()); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>심심하니까 자스로도 만들어보자 ㅎㅎ</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Stack = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(size=10) &#123;</span><br><span class="line">    <span class="keyword">if</span>(size &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="built_in">RangeError</span>(<span class="string">"스택의 크기는 자연수여야합니다!"</span>);</span><br><span class="line">    <span class="keyword">this</span>.objs = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</span><br><span class="line">    <span class="keyword">this</span>.idx = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(obj) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = <span class="keyword">this</span>.objs.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 꽉 차지 않았다면</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.idx !== len) <span class="keyword">this</span>.objs[<span class="keyword">this</span>.idx++] = obj;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// 꽉 찼다면</span></span><br><span class="line">      <span class="keyword">const</span> tmpObjs = <span class="keyword">new</span> <span class="built_in">Array</span>(len+<span class="number">10</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;len; i++) tmpObjs[i] = <span class="keyword">this</span>.objs[i];</span><br><span class="line">      tmpObjs[<span class="keyword">this</span>.idx++] = obj;</span><br><span class="line">      <span class="keyword">this</span>.objs = tmpObjs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.idx === <span class="number">0</span>) <span class="keyword">throw</span> <span class="built_in">RangeError</span>(<span class="string">"스택에 들어와있는 값이 없습니다!"</span>);</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="keyword">this</span>.objs[--<span class="keyword">this</span>.idx];</span><br><span class="line">    <span class="keyword">this</span>.objs[<span class="keyword">this</span>.idx] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.objs.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setSize(i) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = <span class="keyword">this</span>.objs.length;</span><br><span class="line">    <span class="keyword">const</span> copyLen = i &gt; len ? len : i; <span class="comment">// 몇 개를 복사해야할지</span></span><br><span class="line">    <span class="comment">// const copyLen = Math.min(i, len);</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="built_in">RangeError</span>(<span class="string">"스택의 크기는 자연수여야합니다!"</span>);</span><br><span class="line">    <span class="keyword">if</span>(i === len) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> tmpObjs = <span class="keyword">new</span> <span class="built_in">Array</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;copyLen; j++) tmpObjs[j] = <span class="keyword">this</span>.objs[j];</span><br><span class="line">    <span class="keyword">this</span>.objs = tmpObjs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  empty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.objs[<span class="number">0</span>] === <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Stack();</span><br><span class="line"><span class="built_in">console</span>.log(s.size()); <span class="comment">// 10</span></span><br><span class="line">s = <span class="keyword">new</span> Stack(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.size()); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">// s.setSize(0);</span></span><br><span class="line">s.setSize(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.size()); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) s.push(i%<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span>(!(s.empty())) <span class="built_in">console</span>.log(s.pop()); <span class="comment">// 2 1 0 2 1 0 2 1 0</span></span><br><span class="line"><span class="built_in">console</span>.log(s.empty()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 015일차 - 유용한 클래스, 날짜와 시간 &amp; 형식화, 컬렉션</title>
      <link href="/2017/08/05/Java-study-015day/"/>
      <url>/2017/08/05/Java-study-015day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-015day/thumb.png" alt="">  </p><h2 id="java-util-패키지"><a href="#java-util-패키지" class="headerlink" title="java.util 패키지"></a>java.util 패키지</h2><h3 id="Random-클래스"><a href="#Random-클래스" class="headerlink" title="Random 클래스"></a>Random 클래스</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 두 코드는 일치</span></span><br><span class="line">        <span class="keyword">double</span> r = Math.random();</span><br><span class="line">        <span class="keyword">double</span> r2 = <span class="keyword">new</span> Random().nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 두 코드는 일치</span></span><br><span class="line">        <span class="keyword">double</span> r3 = (Math.random() * <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">double</span> r4 = <span class="keyword">new</span> Random().nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Random 클래스도 내부적으로 Math.random() 메소드를 사용하고 있다.<br>또 Random 클래스는 seed를 지정해 동일한 난수를 반환받을 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 동일한 seed를 지정</span></span><br><span class="line">        <span class="keyword">double</span> r = <span class="keyword">new</span> Random(<span class="number">122</span>).nextInt(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">double</span> r2 = <span class="keyword">new</span> Random(<span class="number">122</span>).nextInt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Random 클래스를 썼지만 두 난수는 동일하고, 항상 같은 2.0이란 결과가 나온다.</span></span><br><span class="line">        System.out.println(r);</span><br><span class="line">        System.out.println(r2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적으로 seed를 지정해주지 않으면 다음과 같은 생성자를 호출한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>seed 값으로 현재 컴퓨터 시간을 밀리세컨드 단위로 넘겨주고 있다.  </p><h3 id="regex-패키지"><a href="#regex-패키지" class="headerlink" title="regex 패키지"></a>regex 패키지</h3><p>정규식(Regular Expression)을 위한 패키지이다.<br>정규식은 Unix에서 사용했었고, Perl의 강력한 기능이었는데 요즘엔 웬만한 언어에서는 지원하는 것 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] data = &#123;<span class="string">"bat"</span>, <span class="string">"baby"</span>, <span class="string">"bonus"</span>, <span class="string">"cA"</span>, <span class="string">"ca"</span>, <span class="string">"co"</span>, <span class="string">"c."</span>&#125;;</span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">"c[a-z]"</span>); <span class="comment">// c로 시작하고 그 뒤에 소문자가 오는 문자열 찾기.</span></span><br><span class="line">        <span class="keyword">for</span>(String dat : data) &#123;</span><br><span class="line">           Matcher m = p.matcher(dat);</span><br><span class="line">           <span class="keyword">if</span>(m.matches()) System.out.println(dat); <span class="comment">// ca co</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pattern은 정규식을 정의하는데 사용되고, Matcher는 정규식 패턴을 데이터와 비교하는 역할을 한다.<br>matcher의 매개변수로는 CharSequence 인터페이스의 구현체인 CharBuffer, String, StringBuffer가 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String source = <span class="string">"HP:011-1111-1111, HOME:02-999-9999"</span>;</span><br><span class="line">        String pattern = <span class="string">"(0\\d&#123;1,2&#125;)-(\\d&#123;3,4&#125;)-(\\d&#123;4&#125;)"</span>; <span class="comment">// ()로 그룹핑이 가능하다.</span></span><br><span class="line"></span><br><span class="line">        Pattern p = Pattern.compile(pattern);</span><br><span class="line">        Matcher m = p.matcher(source);</span><br><span class="line">        <span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">            <span class="comment">// group 메소드가 있어서 몇 번째 그룹에 속했는지도 출력이 가능하다.</span></span><br><span class="line">            System.out.println(m.group() + <span class="string">" -&gt; "</span> + m.group(<span class="number">1</span>) + <span class="string">", "</span> + m.group(<span class="number">2</span>) + <span class="string">", "</span> + m.group(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringTokenizer-클래스"><a href="#StringTokenizer-클래스" class="headerlink" title="StringTokenizer 클래스"></a>StringTokenizer 클래스</h3><p>문자열을 구분자(delimiter)를 기준으로 토큰이라는 여러 개의 문자열로 잘라내는 데 사용한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String source = <span class="string">"100,200 300"</span>;</span><br><span class="line">        StringTokenizer t = <span class="keyword">new</span> StringTokenizer(source, <span class="string">", "</span>); <span class="comment">// 쉼표와 공백 하나 하나가 구분자가 된다.</span></span><br><span class="line">        <span class="keyword">while</span>(t.hasMoreTokens()) &#123;</span><br><span class="line">            System.out.println(t.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java-math-패키지"><a href="#java-math-패키지" class="headerlink" title="java.math 패키지"></a>java.math 패키지</h2><p>아래 두 클래스는 String 클래스와 마찬가지로 immutable이다.</p><h3 id="BigInteger-클래스"><a href="#BigInteger-클래스" class="headerlink" title="BigInteger 클래스"></a>BigInteger 클래스</h3><p>int 배열을 통해 값을 다뤄서 long 보다 크지만 성능은 떨어진다.  </p><h3 id="BigDecimal-클래스"><a href="#BigDecimal-클래스" class="headerlink" title="BigDecimal 클래스"></a>BigDecimal 클래스</h3><p>부동소수점이 정밀도에 따른 오차를 가지고 있어서 실수 연산은 정수로 변환 후 계산하는 게 더 낫다.<br>이 BigDecimal 클래스도 정수를 이용해서 실수를 표현해 그 오차를 줄였다.    </p><h2 id="형식화"><a href="#형식화" class="headerlink" title="형식화"></a>형식화</h2><p>소수점 n 번째 자리에서 반올림 하려면 곱하고 나누고 뻘짓을 하고 쿵짝쿵짝 덩기덕 쿵더러러러를 해야했다.<br>매우 귀찮은데 이런 것들을 형식화해서 보여주는 클래스가 형식화 클래스이며 java.text 패키지 안에 존재한다.<br>엑셀에서 % 붙이고 원화 붙이고 1,000처럼 보여주기 등등의 경우에 해당한다.  </p><ul><li><p>DecimalFormat: 십진수 형식화 클래스, 실수 정수 다 가능하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">// 기존 방법</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1.235678</span>;</span><br><span class="line">        <span class="keyword">int</span> i = (<span class="keyword">int</span>)(d * <span class="number">1000</span>)+<span class="number">5</span>;</span><br><span class="line">        d = i / <span class="number">1000.0</span>;</span><br><span class="line">        System.out.println(d); <span class="comment">// 1.24</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 방법 1</span></span><br><span class="line">        DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##"</span>);</span><br><span class="line">        System.out.println(df.format(d)); <span class="comment">// 1.24</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 방법 2</span></span><br><span class="line">        Number n = df.parse(<span class="string">""</span>+d);</span><br><span class="line">        <span class="keyword">double</span> d2 = n.doubleValue();</span><br><span class="line">        System.out.println(d2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SimpleDateFormat: 날짜와 시간 관련 형식화 클래스.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Date today = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat sd = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        System.out.println(sd.format(today)); <span class="comment">// 2017-08-05</span></span><br><span class="line"></span><br><span class="line">        Date d = sd.parse(<span class="string">"2017-08-05"</span>);</span><br><span class="line">        System.out.println(d); <span class="comment">// Sat Aug 05 00:00:00 KST 2017</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ChoiceFormat: 특정 범위에 속하는 값을 문자열로 변환해준다.  </p></li><li><p>MessageFormat: 데이터를 정해진 양식에 맞게 출력할 수 있도록 도와준다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        String msg = <span class="string">"Name: &#123;0&#125;, Age: &#123;1&#125;"</span>;</span><br><span class="line">        Object[] arg = &#123;<span class="string">"양간장"</span>, <span class="number">25</span>&#125;;</span><br><span class="line">        String res = MessageFormat.format(msg, arg);</span><br><span class="line">        System.out.println(res); <span class="comment">// Name: 양간장, Age: 25</span></span><br><span class="line"></span><br><span class="line">        MessageFormat mf = <span class="keyword">new</span> MessageFormat(msg);</span><br><span class="line">        Object[] arg2 = mf.parse(res);</span><br><span class="line">        <span class="keyword">for</span>(Object arg3:arg2) &#123;</span><br><span class="line">            System.out.println(arg3); <span class="comment">// 양간장 25</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="날짜와-시간"><a href="#날짜와-시간" class="headerlink" title="날짜와 시간"></a>날짜와 시간</h2><p>JAVA8부터는 java.time 패키지의 등장으로 인해 Date와 Calendar 클래스를 배울 필요가 없다고 생각하지만…<br>이미 그 클래스를 쓴 레거시 코드들이 많아서 배워야한다 ㅠㅠ<br>Date는 JAVA1부터 나와서 굉장히 허접해서 Calendar 클래스가 나왔고 Date 클래스도 많이 발전했다고는 한다.<br>필요하면 찾아서 보자~</p><h3 id="java-time-패키지"><a href="#java-time-패키지" class="headerlink" title="java.time 패키지"></a>java.time 패키지</h3><p>Calendar 클래스는 immutable이 아니라 멀티 쓰레드 환경에서 안전하지 못했다.<br>또한 java.time이 나왔다 하더라도 레거시 코드 때문에 여전히 Date나 Calendar 클래스는 쓰일 것이다 ㅠㅠ  </p><p>핵심적인 클래스는 다음과 같다.<br>참고로 Calendar 클래스는 ZonedDateTime과 같이 다 들고 있다.    </p><ol><li>LocalDate(날짜)  </li><li>LocalTime(시간)  </li><li>LocalDateTime(날짜 + 시간)  </li><li>ZonedDateTime(날짜 + 시간 + Timezone)  </li><li>Instant<br>Date와 유사한 클래스인데 날짜와 시간을 (나노)초 단위로 표현한다.<br>이렇게 초단위로 표현한 걸 타임스탬프라고 부르고, 하나의 정수로 다룰 수 있어서 DB나 시간 차를 구할 때 많이 사용한다.</li><li>Period(날짜 - 날짜): 두 날짜 간의 차이를 표현  </li><li>Duration(시각 - 시각): 두 시각 간의 차이를 표현</li></ol><h4 id="객체-생성하기"><a href="#객체-생성하기" class="headerlink" title="객체 생성하기"></a>객체 생성하기</h4><p>now()와 of()라는 static 메소드를 사용하면 된다.<br>now는 인자 없이 그냥 호출해서 지금 시간의 정보를 구하고, of()는 매개변수를 지정해서 해당 날짜의 정보를 구한다.  </p><h4 id="Temporal-인터페이스와-TemporalAmount-인터페이스"><a href="#Temporal-인터페이스와-TemporalAmount-인터페이스" class="headerlink" title="Temporal 인터페이스와 TemporalAmount 인터페이스"></a>Temporal 인터페이스와 TemporalAmount 인터페이스</h4><p>LocalDate, LocalTime, LocalDateTime, ZonedDateTime 클래스 등은 Temporal, TemporalAccessor, TemporalAdjuster 인터페이스의 구현체이고,<br>Period, Duration 클래스는 TemporalAmount 인터페이스의 구현체이다.<br>매개변수의 다형성을 이용해 Temporal 인터페이스와 TemporalAmount 인터페이스를 매개변수의 타입으로 지정한 것들이 있는데 잘 보고 쓰면 될 것 같다.  </p><h4 id="Unix-Time"><a href="#Unix-Time" class="headerlink" title="Unix Time"></a>Unix Time</h4><p>1970-01-01 00:00:00 UTC로부터 현재 얼마나 시간이 흘렀는지를 초로 환산하여 정수로 표현한 것이다.<br>UTC는 국제 표준으로 시행되는 시간을 표현하는 기준인 것 같은데 1972년 1월 1일부터 시행되다 보니 1970년으로 퉁쳐버린 것 같다.<br>또한 UTC는 Coordinated Universal Time의 약자인데 CUT가 아니라 UTC가 된 이유는 영어와 프랑스어의 표기 방식 중 중립 형태를 취한 것 같다.<br>이는 32비트 메모리 상으로 표현했을 때 오버플로우 때문에 2,147,483,647((2<sup>31</sup> - 1) 지난 후인 2038년 1월 19일 03:14:08 UTC에 오류를 일으킨다고 한다.<br>64비트를 쓰면 죽기 전에는 뭐 문제 없을라나…</p><p>또한 한국은 UTC+09:00으로 9시간을 더해줘야한다는 단점이 있다. (LocalTime과 호환되지 않음)<br>이를 위해서는 OffsetDateTime 클래스를 이용하면 될 것 같다.<br>서로 다른 시간대의 지역(AWS와 한국의 클라 등등)에서 날짜 데이터를 주고 받을 때는 OffsetDateTime을 이용하면 된다.  </p><p>뭐 기타 파싱이나 데이터 얻어오는 건 정리하기 귀챠니즘… 나중에 책을 다시 보던가 하자.  </p><h2 id="컬렉션-Collection"><a href="#컬렉션-Collection" class="headerlink" title="컬렉션(Collection)"></a>컬렉션(Collection)</h2><p>다수의 데이터, 데이터 그룹을 컬렉션이라고 부른다.<br>프레임워크는 표준화된 프로그래밍 방식, 단일화된 구조(Architecture) 정도로 보면 될 것 같다.<br>자바에서는 이런 컬렉션 클래스들을 정리해서 프로그래머가 개발하기 편하게 만들어줬다.  </p><p>핵심 인터페이스는 아래 세 가지이다.<br>(Map 인터페이스는 독자적이며 List와 Set은 Collection 인터페이스를 상속받은 인터페이스들이다.)</p><ol><li>List: 순서가 있는 데이터의 집합이며 중복을 허용한다.<br>구현체로는 ArrayList, LinkedList, Stack, Vector 등  </li><li>Set: 순서를 유지하지 않는 데이터의 집합, 데이터의 중복을 허용하지 않는다.<br>구현체로는 HashSet, TreeSet  </li><li>Map: Key와 Value의 Pair(쌍)으로 이루어진 데이터의 집합니다.<br>순서는 유지되지 않으며, 키의 중복을 허용하지 않고 값의 중복은 허용한다.<br>구현체로는 HashMap, TreeMap, HashTable, Properties 등이 있다.</li></ol><p>Vector, Stack, HashTable, Properties는 이름만 봐서는 누구를 구현한 건지 알기 힘들다.<br>이는 컬렉션 인터페이스가 생기기 전인 JAVA1에 생긴 것이라서 레거시 코드들과의 호환을 위해 이름을 바꾸지 않았다.<br>이런 녀석들보다는 다소 최근에 생긴 ArrayList나 HashMap을 사용하도록 하자~  </p><p><img src="/images/Java-study-015day/list.png" alt="List 상속 계층도"><br><img src="/images/Java-study-015day/set.png" alt="Set 상속 계층도"><br><img src="/images/Java-study-015day/map.png" alt="Map 상속 계층도">  </p><p>컬렉션의 사이즈를 정할 때는 생각한 것보다 여유를 좀 줘서 생성해주는 게 좋다.<br>어차피 공간이 부족하면 자동적으로 늘리긴 하지만 성능 상 좋지는 않기 때문이다.<br>또한 ArrayList나 Vector는 배열로 값을 다스리기 때문에 공간이 부족하면<br>새로운 배열(더 큰 배열)을 만들고 기존의 값을 복사 후 기존의 값들과의 참조 관계를 끊어서 가비지 컬렉팅 대상이 되게 한 후 새로운 배열과 참조관계를 맺는다.<br>이렇게 계속해서 새로운 배열을 만들면 계속해서 메모리 공간 이곳 저곳을 차지해서 단편화가 발생하지 않을까…?  </p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="Vector-vs-ArrayList"><a href="#Vector-vs-ArrayList" class="headerlink" title="Vector vs ArrayList"></a>Vector vs ArrayList</h4><p>Vector를 개선한 게 ArrayList라니까 웬만하면 ArrayList를 쓰자.<br>ArrayList는 검색에는 빠르나 삽입/삭제에 불리하다.(복사하고 앞뒤로 땡겨야하는 처리가 필요하기 때문)  </p><h4 id="ArrayList-vs-LinkedList"><a href="#ArrayList-vs-LinkedList" class="headerlink" title="ArrayList vs LinkedList"></a>ArrayList vs LinkedList</h4><p>LinkedList는 다음 노드에 대한 참조만 바꿔주면 되므로 삽입/삭제에 용이하다.<br>하지만 다음 노드에 대한 참조로 순차적인 조회 밖에 불가능하므로 검색을 할 때 처음부터 순차적으로 접근해야해서 느리다.<br>ArrayList는 접근(읽기) 속도가 빠르고, 추가/삭제가 느리다.<br>순차적인 추가 삭제도 더 빠르다고 하는데 뭐 JVM이나 컴퓨터 환경에 많이 좌지우지 되는 것 같다.<br>LinkedList는 접근(읽기) 속도가 느리고 추가/삭제가 느리다.<br>그리고 데이터가 많아지면 처음부터 접근해야하는 갯수가 훨씬 늘어나므로 데이터가 많을 수록 접근성이 떨어진다.<br>데이터의 변경(삽입/삭제)가 잦다면 LinkedList를, 잦지 않다면 ArrayList를 쓰자.</p><h4 id="LinkedList-vs-Doubly-Linked-List"><a href="#LinkedList-vs-Doubly-Linked-List" class="headerlink" title="LinkedList vs Doubly Linked List"></a>LinkedList vs Doubly Linked List</h4><p>링크드 리스트는 다음 노드에 대한 참조는 가능한데 이전 노드에 대한 참조는 불가능하다.<br>그래서 나온 게 이중 링크드 리스트이다.<br>이중 링크드 리스트는 이전/다음 노드에 대한 참조와 값으로 이루어져있다.<br>이중 링크드 리스트를 더 많이 쓴다고 한다.  </p><h4 id="Doubly-Linked-List-vs-Doubly-Circular-Linked-Listed"><a href="#Doubly-Linked-List-vs-Doubly-Circular-Linked-Listed" class="headerlink" title="Doubly Linked List vs Doubly Circular Linked Listed"></a>Doubly Linked List vs Doubly Circular Linked Listed</h4><p>이중 링크드 리스트는 처음부터 끝까지 갔다가 다시 끝에서 처음부터 올 수 있다.<br>하지만 처음 노드에서 맨 끝 노드로 가려면 순차적으로 접근해야한다는 단점이 있다.(링크드 리스트도 마찬가지다.)<br>이러한 문제점을 해결하기 위해 이중 원형 링크트 리스트가 나왔다.<br>이중 원형 링크드 리스트는 단순히 이중 링크드 리스트에서 처음 노드와 마지막 노드의 참조를 연결한 것 뿐이다.</p><h4 id="Stack-vs-Queue"><a href="#Stack-vs-Queue" class="headerlink" title="Stack vs Queue"></a>Stack vs Queue</h4><p>Stack은 후입선출(LIFO, Last In First Out), 즉 배열이 스택을 이용한 구조이다.(push와 pop의 전형적인 사용 사례)<br>Queue는 선입선출(FIFO, First In First Out), 데이터가 입력된 시간 순서에 따라서 처리해야하는 경우(프로세스 스케쥴링?)에 사용한다고 한다.   </p><p>Stack은 전형적인 배열과 같은 자료구조를 띄므로 ArrayList와 같은 배열 리스트 기반의 클래스로 구현하기 쉽다.<br>하지만 Queue는 앞에 있는 놈부터 나가서 앞에 있는 놈을 땡기기 위해 새로운 배열 만들어서 복사하는 수 밖에 없다.<br>배열 관련 클래스로 Queue를 구현하면 이런 복사에 대한 처리 비용이 많이 들기 때문에 삽입/삭제가 잦을 때 쓰는 LinkedList를 이용하여 구현하면 된다.  </p><p>Java에서 Stack은 클래스로 제공해주고 있지만, Queue는 인터페이스로만 제공해주고 있어서 그 구현체를 가져다 쓰면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Deque</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 LinkedList는 Deque(데크, Double Ended Queue)를 구현한 구현체이고,<br>Deque 인터페이스는 Queue 인터페이스를 상속받은 인터페이스이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack s = <span class="keyword">new</span> Stack();</span><br><span class="line">        Queue q = <span class="keyword">new</span> LinkedList();</span><br><span class="line"></span><br><span class="line">        s.push(<span class="number">0</span>);</span><br><span class="line">        s.push(<span class="number">1</span>);</span><br><span class="line">        s.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        q.offer(<span class="number">0</span>);</span><br><span class="line">        q.offer(<span class="number">1</span>);</span><br><span class="line">        q.offer(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Stack"</span>);</span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) System.out.println(s.pop()); <span class="comment">// 2 1 0</span></span><br><span class="line">        System.out.println(<span class="string">"Queue"</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()) System.out.println(q.poll()); <span class="comment">// 0 1 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Queue는 Queue의 인터페이스의 구현체인 LinkedList를 통해 만들 수 있고, push 대신 offer, pop 대신에 poll을 쓴다.  </p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 내장 클래스 </tag>
            
            <tag> 날짜와 시간 </tag>
            
            <tag> 형식화 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 015일차 - 유용한 클래스, 날짜와 시간 &amp; 형식화, 컬렉션</title>
      <link href="/2017/08/04/Java-study-016day/"/>
      <url>/2017/08/04/Java-study-016day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-016day/thumb.png" alt="">  </p><p>흠… 한 3일을 탱자탱자 논 거 같다…<br>어찌보면 아까운 시간이지만 쉼이 있어야 또 달릴 수 있는 거 같다.<br>고고씽!</p><h2 id="스택과-큐의-사용-사례"><a href="#스택과-큐의-사용-사례" class="headerlink" title="스택과 큐의 사용 사례"></a>스택과 큐의 사용 사례</h2><ul><li>스택 - 수식 계산, 수식 괄호 검사, undo/redo, 뒤로/앞으로  </li><li>큐 - history, 인쇄작업 대기 목록, 버퍼 </li></ul><h3 id="pop-poll-vs-peek"><a href="#pop-poll-vs-peek" class="headerlink" title="pop(poll) vs peek"></a>pop(poll) vs peek</h3><a id="more"></a><p>전자는 마지막(처음) 녀석을 삭제하면서 반환<br>후자는 삭제는 하지 않고 반환만   </p><h2 id="Deque-데크-덱-디큐-Double-Ended-Queue"><a href="#Deque-데크-덱-디큐-Double-Ended-Queue" class="headerlink" title="Deque(데크, 덱, 디큐, Double Ended Queue)"></a>Deque(데크, 덱, 디큐, Double Ended Queue)</h2><p>Queue의 변형으로 Deque는 양쪽 끝에 추가/삭제가 가능하다.<br>스택으로 사용할 수도 있고 큐로도 사용이 가능하다.</p><table><thead><tr><th>Deque</th><th>Queue</th><th>Stack</th></tr></thead><tbody><tr><td>offerFirst()</td><td>-</td><td>-</td></tr><tr><td>offerLast()</td><td>offer()</td><td>push()</td></tr><tr><td>pollFirst()</td><td>poll()</td><td>-</td></tr><tr><td>pollLast()</td><td>-</td><td>pop()</td></tr><tr><td>peekFirst()</td><td>peek()</td><td>-</td></tr><tr><td>peekLast()</td><td>-</td><td>peek()</td></tr></tbody></table><h2 id="Iterator-ListIterator-Enumeration"><a href="#Iterator-ListIterator-Enumeration" class="headerlink" title="Iterator, ListIterator, Enumeration"></a>Iterator, ListIterator, Enumeration</h2><p>컬렉션에 저장된 요소를 접근하는데 사용되는 인터페이스<br>Enumeration은 Iterator의 구버전이며, ListIterator는 Iterator의 기능을 향상시킨 것이다.<br>Enumeration은 컬렉션 프레임워크가 나오기 전에 나온 애라서 레거시 코드를 위한 것이고, 웬만하면 쓰지 말자.   </p><ul><li>Iterator 인터페이스<br>컬렉션 프레임워크에서는 컬렉션에 저장된 요소들을 읽어오는 방법을 아래와 같이 표준화하였다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 아래 두 메소드는 default 메소드이므로 구현하지 않아도 됨.</span></span><br><span class="line">    <span class="comment">// next 해온 요소를 컬렉션에서 삭제할지를 뜻하는 것 같다.</span></span><br><span class="line">    <span class="comment">// next 이후에 호출해야함.</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Java8에 추가됨.  </span></span><br><span class="line">    <span class="comment">// 남은 요소들에게 추가적으로 수행할 작업</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>iterator() 메소드는 Collection 인터페이스 내에 정의된 메소드로, Collection 인터페이스의 자식인 List와 Set에도 포함되어 있다.<br>ArrayList에 저장된 요소를 읽어오는 방법은 다음과 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Iteraotr it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="위-예제는-왜-참조타입을-ArrayList-대신에-List를-썼을까"><a href="#위-예제는-왜-참조타입을-ArrayList-대신에-List를-썼을까" class="headerlink" title="위 예제는 왜 참조타입을 ArrayList 대신에 List를 썼을까?"></a>위 예제는 왜 참조타입을 ArrayList 대신에 List를 썼을까?</h3><p>ArrayList에만 존재하는 메소드를 쓸 게 아니고 List에만 존재하는 메소드를 쓸 때는 List로 참조 타입을 잡아두는 게 좋다고 한다.<br>아래와 같은 상황을 가정해보자.<br>만약에 자료구조를 ArrayList에서 LinkedList로 바꿀 일이 생겼다.  </p><ol><li>참조타입을 List로 선언한 경우<br>LinkedList는 List의 구현체이므로 선언문 부분만 바꿔주면 되고, 나머지 사용 부분에 있어서는 List의 메소드만 사용했을 것이므로 테스트 할 필요가 없다.  </li><li>참조타입을 ArrayList로 선언한 경우<br>ArrayList의 자식이 LinkedList가 아니므로 참조 타입을 List, 혹은 LinkedList로 바꿔줘야한다.<br>그리고 나머지 사용 부분에 있어서도 ArrayList의 메소드를 사용했을지 모르므로 그런 부분을 다 바꿔줘야 할지도 모른다.<br>따라서 List에만 존재하는 메소드를 쓴다면 다른 사람들에게 코드 변경에 대한 안정성도 심어줄 수 있고 굳이 ArrayList로 참조타입을 잡을 일이 없다.  </li></ol><h3 id="Map-인터페이스에서는-iterator를-어떻게-쓰나"><a href="#Map-인터페이스에서는-iterator를-어떻게-쓰나" class="headerlink" title="Map 인터페이스에서는 iterator를 어떻게 쓰나?"></a>Map 인터페이스에서는 iterator를 어떻게 쓰나?</h3><p>ES6에서도 다음의 경우에는 오류를 내뱉는다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'간장냥'</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> obj) <span class="built_in">console</span>.log(obj[key]);</span><br></pre></td></tr></table></figure><p>Object는 Iterable한 객체가 아니라서 for of Syntax를 쓸 수 없고 아래와 같이 해주거나<br><a href="https://github.com/tc39/proposal-object-rest-spread" rel="external nofollow noopener noreferrer" target="_blank">proposal-object-rest-spread</a>을 지원하는 바벨 플러그인을 깔거나 해야했다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'간장냥'</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) <span class="built_in">console</span>.log(obj[key]);</span><br></pre></td></tr></table></figure><p>아래와 같이 한 것이 지금 설명할 방법이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6와 달리 Java의 Map은 Iterable 하지 않다.</span></span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">Iterator it = map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">Set set = map.entrySet();</span><br><span class="line">Iterator it2 = set.iterator();</span><br></pre></td></tr></table></figure><p>java의 경우에는 Map은 Key와 Value의 쌍(pair)라서 iterator를 호출할 수 없다는데<br>ES6의 Map도 비슷한 맥락일텐데 왜 Iterable 한 걸까…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">myMap.set(<span class="number">0</span>, <span class="string">'zero'</span>);</span><br><span class="line">myMap.set(<span class="number">1</span>, <span class="string">'one'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key, value] <span class="keyword">of</span> myMap) <span class="built_in">console</span>.log(key + <span class="string">' = '</span> + value);</span><br></pre></td></tr></table></figure><h2 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h2><p>ListIterator는 Iterator를 상속받아서 기능을 추가한 것으로 컬렉션의 요소에 접근할 때<br>Iterator는 단방향으로만 접근이 가능했지만 ListIterator는 양방향으로 접근이 가능하다.<br>Iterator는 Set이나 Map에도 사용이 가능한 것에 비해 ListIterator는 List에만 사용이 가능하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List l = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        l.add(<span class="number">1</span>);</span><br><span class="line">        l.add(<span class="number">2</span>);</span><br><span class="line">        l.add(<span class="number">3</span>);</span><br><span class="line">        l.add(<span class="number">4</span>);</span><br><span class="line">        l.add(<span class="number">5</span>);</span><br><span class="line">        ListIterator it = l.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) System.out.println(it.next());</span><br><span class="line">        <span class="keyword">while</span>(it.hasPrevious()) System.out.println(it.previous());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator는 한 번 돌면 사용이 불가능해서 다시 얻어와야하지만, ListIterator는 역방향 순회가 가능해서 사용성이 더 높다.  </p><h2 id="default-method"><a href="#default-method" class="headerlink" title="default method"></a>default method</h2><p>Interface에 있는 default 메소드는 구현하는 구현체에서 굳이 구현해도 되지 않는 메소드이다.<br>구현자의 부담을 약간 덜어줬다고 보면 된다.<br>하지만 추상메소드라서 아래와 같이 몸통(body)는 반드시 명시해줘야한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 몸통 반드시 존재</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">t</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 저렇게 그냥 빈 몸통을 넣어줘도 오류는 안 나지만...</span></span><br><span class="line">    <span class="comment">// 이 메소드를 지원하지 않는 구현체의 경우에는 해당 메소드를 사용하면 오류가 난다는 예외를 던져줘야 좀 더 안전하다.</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator의-remove"><a href="#Iterator의-remove" class="headerlink" title="Iterator의 remove"></a>Iterator의 remove</h2><p>데이터를 가져만 온다면 next,<br>가져온 데이터를 삭제까지 한다면 remove!<br>즉 remove 하기 위해선 next를 해야함!</p><h2 id="Arrays-클래스"><a href="#Arrays-클래스" class="headerlink" title="Arrays 클래스"></a>Arrays 클래스</h2><p>이 클래스에는 배열을 다루는데 유용한 메소드가 정의돼있다.  </p><ul><li><p>copyOf(), copyOfRange()  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = Arrays.copyOf(arr, arr.length); <span class="comment">// 0, 1, 2, 3, 4</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = Arrays.copyOf(arr, <span class="number">3</span>); <span class="comment">// 0, 1, 2</span></span><br><span class="line"><span class="keyword">int</span>[] arr4 = Arrays.copyOf(arr, <span class="number">7</span>); <span class="comment">// 0, 1, 2, 3, 4, 0, 0</span></span><br><span class="line"><span class="keyword">int</span>[] arr5 = Arrays.copyOfRange(arr, <span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 2, 3</span></span><br><span class="line"><span class="keyword">int</span>[] arr6 = Arrays.copyOfRange(arr, <span class="number">0</span>, <span class="number">7</span>); <span class="comment">// 0, 1, 2, 3, 4, 0, 0</span></span><br></pre></td></tr></table></figure></li><li><p>fill(), setAll()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(arr, <span class="number">9</span>); <span class="comment">// 9, 9, 9, 9, 9</span></span><br><span class="line">Arrays.setAll(arr, () -&gt; (<span class="keyword">int</span>)(Math.random()*<span class="number">5</span>)+<span class="number">1</span>); <span class="comment">// 1, 5, 2, 1, 1</span></span><br></pre></td></tr></table></figure></li></ul><p>람다식을 보니 반갑다, 그냥 ES6의 Arrow Function을 보는 기분이고 익명 함수도 보니 더욱 JS를 보는 거 같아 반갑다.  </p><ul><li>sort(), binarySearch()<br>binarySearch는 요소를 검색할 때 사용하며 항상 정렬이 돼있어야한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">77</span>, <span class="number">105</span>, <span class="number">2</span>, <span class="number">33</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> idx = Arrays.binarySearch(arr, <span class="number">105</span>); <span class="comment">// 1, 잘못된 결과</span></span><br><span class="line">System.out.println(idx);</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">idx = Arrays.binarySearch(arr, <span class="number">105</span>); <span class="comment">// 3</span></span><br><span class="line">System.out.println(idx);</span><br></pre></td></tr></table></figure></li></ul><p>Linear Search(순차 검색)은 배열이 정렬돼있을 필요가 없으나 요소 하나하나 비교하기 때문에 느리고,<br>Binary Search(이진 검색)은 배열의 검색 범위를 반복적으로 절반씩 줄여나가기 때문에 빠르나 배열이 정렬돼있어야한다.  </p><ul><li><p>toString(), toDeepString(), equals(), deepEquals()<br>전자는 얕은 문자열화, 후자는 깊은 문자열화?라고 보면 될 거 같다.<br>즉 전자는 1차원 배열, 후자는 다차원 배열에 사용하면 된다.<br>equals의 경우에도 마찬가지…</p></li><li><p>asList(Object… a)<br>배열을 List에 담아서 반환한다.<br>매개변수가 가변인자라서 배열 생성 없이 그냥 요소만 넣어줘도 된다.<br>일반 List와 달리 추가/삭제는 안 되고 변경만 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List list = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">List list2 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">List list3 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List list4 = <span class="keyword">new</span> ArrayList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnsupportedOperationException 발생</span></span><br><span class="line"><span class="comment">// list2.add(2);</span></span><br><span class="line">list4.add(<span class="number">2</span>);</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>)); <span class="comment">// int를 넣으면 안된다.</span></span><br><span class="line">System.out.println(list2.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(list3.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(list4.get(<span class="number">5</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p>parallelXXX(), spliterator(), stream()<br>parallel로 시작하는 메소드는 보다 빠른 결과를 얻기 위해 여러 쓰레드가 작업을 나누어 처리하도록 한다.<br>spliterator는 여러 쓰레드가 처리할 수 있게 하나의 작업을 여러 작업으로 나누는 Spliterator를 반환한다.<br>stream은 컬렉션을 스트림으로 반환한다.  </p></li></ul><h2 id="Comparator와-Comparable"><a href="#Comparator와-Comparable" class="headerlink" title="Comparator와 Comparable"></a>Comparator와 Comparable</h2><p>Comparator는 sort하는 기준, 메소드이고 Comparable한 녀석들끼리만 비교해서 sort 할 수 있다.<br>둘 다 인터페이스이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str = &#123;<span class="string">"마나"</span>, <span class="string">"하마"</span>, <span class="string">"가나"</span>&#125;;</span><br><span class="line">        Arrays.sort(str);</span><br><span class="line">        System.out.println(Arrays.toString(str)); <span class="comment">// 가나, 마나, 하마</span></span><br><span class="line">        Arrays.sort(str, <span class="keyword">new</span> Desc());</span><br><span class="line">        System.out.println(Arrays.toString(str)); <span class="comment">// 하마, 마나, 가나</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desc</span> <span class="keyword">implements</span> <span class="title">Comparator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Comparable &amp;&amp; o2 <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">            Comparable c1 = (Comparable)o1;</span><br><span class="line">            Comparable c2 = (Comparable)o2;</span><br><span class="line">            <span class="keyword">return</span> c1.compareTo(c2) * -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// return c2.compareTo(c1);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>순서를 유지하지 않는 데이터의 집합, 데이터의 중복을 허용하지 않는다.<br>저장 순서를 유지하는 녀석으로 LinkedHashSet이 있다.</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>Set 인터페이스의 구현체<br>내부적으로는 HashMap을 이용해서 만들어졌다.</p><ul><li>load factor<br>컬렉션 클래스에 저장공간이 가득 차기 전에 미리 용량을 확보하기 위한 것.<br>이 값을 0.8로 지정하면 80%가 찼을 때 용량이 두 배로 늘어남. 기본값은 0.75(75%)<br><code>HashSet(int capacity, float loadFactor)</code>과 같은 곳에서 사용한다.  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 내장 클래스 </tag>
            
            <tag> 날짜와 시간 </tag>
            
            <tag> 형식화 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 014일차 - 오류(에러와 예외), 유용한 클래스</title>
      <link href="/2017/08/04/Java-study-014day/"/>
      <url>/2017/08/04/Java-study-014day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-014day/thumb.png" alt="">  </p><h2 id="프로그램-오류"><a href="#프로그램-오류" class="headerlink" title="프로그램 오류"></a>프로그램 오류</h2><ol><li>컴파일 에러 - 컴파일 시에 발생하는 에러(오타, 타입 불일치 등등)  </li><li>런타임 에러 - 실행 시에 발생되는 에러(파일을 열어야하는데 없는 파일을 인자로 넘겼을 때 등등)  </li><li>논리적 에러 - 의도와 다르게 동작하는 것(돈이 음수가 된다거나 적에게 부딪혀도 죽지않는 것 등등)  </li></ol><a id="more"></a><h2 id="오류의-두-가지-종류"><a href="#오류의-두-가지-종류" class="headerlink" title="오류의 두 가지 종류"></a>오류의 두 가지 종류</h2><ol><li>에러(Error) - 발생하면 복구할 수 없는 심각한 오류(StackOverflowError, OutOfMemoryError 등등)  </li><li>예외(Exception) - 발생하더라도 수습이 가능한 비교적 덜 심각한 오류(NullPointerException 등등)  </li></ol><h2 id="오류를-처리하는-클래스"><a href="#오류를-처리하는-클래스" class="headerlink" title="오류를 처리하는 클래스"></a>오류를 처리하는 클래스</h2><p>Error와 Exception 모두 클래스로 만들어져있고, 그 둘의 부모 클래스는 Throwable 클래스이다. (물론 최상위에는 Object 클래스가 자리잡고 있다.)  </p><h3 id="예외-클래스"><a href="#예외-클래스" class="headerlink" title="예외 클래스"></a>예외 클래스</h3><p>Exception 클래스는 다음 두 카테고리로 나눌 수 있다.  </p><ul><li>Exception의 자식 클래스<br>주로 외부의 영향(프로그램의 사용자)으로 발생한다.  </li></ul><ol><li>존재하지 않는 파일의 이름을 입력(FileNotFoundException)  </li><li>실수로 클래스 이름을 잘못 적은 경우(ClassNotFoundException)  </li><li>입력한 데이터 형식이 잘못된 경우(DataFormatException)  </li><li>기타 등등…</li></ol><ul><li>RuntimeException의 자식 클래스(물론 RuntimeException 클래스도 Exception 클래스의 자식 클래스이다.)<br>RuntimeException 클래스는 주로 개발자의 실수에 의해 발생한다.  </li></ul><ol><li>배열의 범위를 벗어난 경우(IndexOutOfBoundException)  </li><li>값이 null인 참조변수의 멤버를 호출한 경우(NullPointerException)  </li><li>정수를 0으로 나눈 경우(ArithmeticException)  </li><li>기타 등등…</li></ol><h3 id="예외-처리하기"><a href="#예외-처리하기" class="headerlink" title="예외 처리하기"></a>예외 처리하기</h3><p><strong>프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것</strong>이 그 목표이다.<br>이러한 예외 처리를 제대로 해놓지 않으면 프로그램이 뻗고, JVM의 예외처리기(UncaughtExceptionHandler)가 받아서 원인을 로그에 출력해준다.  </p><p>이러한 예외를 처리하기 위해서는 try-catch 문을 사용해야한다.<br>try-catch 문은 문이 하나 뿐이어도 {} 블록의 생략이 불가능하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 예외가 발생할 수 있는 구문</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(IndexOutOfBoundException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"배열의 길이를 벗어났습니다!"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ArithmeticException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"연산이 제대로 이루어지지 않았습니다!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 저기서 NullPointerException이 발생했으면 예외 처리를 제대로 하지 않았으므로 프로그램이 뻗는다.<br>매개변수의 다형성을 이용하면 아래와 같이 처리할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 예외가 발생할 수 있는 구문</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"어디선가 예외가 발생했습니다!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 예외가 발생하지 않았으면 try-catch 문 전체를 빠져나간다.  </p><p>또한 try나 catch문 안에 try-catch문이 또 들어갈 수 있다.<br>이렇게 중첩해서 try-catch문을 사용할 때는 중복된 변수(IndexOutOfBoundException와 ArithmeticException를 모두 e로 선언하는 경우 등등)를 사용하면 에러가 난다.<br>지역 변수는 상위 스코프의 변수를 덮어씌우는데 try-catch문은 안되나 보다.  </p><h4 id="멀티-catch"><a href="#멀티-catch" class="headerlink" title="멀티 catch"></a>멀티 catch</h4><p>Java7부터 추가되었다.<br>여기서 쓰이는 | 는 논리 연산자가 아니라 그냥 기호이고, 갯수에는 제한이 없다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(IndexOutOfBoundException | ArithmeticException e) &#123;&#125;</span><br><span class="line"><span class="comment">// catch(ParentException | ChildException e) &#123;&#125;</span></span><br><span class="line"><span class="comment">// 부모 자식 관계인 경우에는 위 코드는 오류를 유발하므로 아래와 같이 써주자.</span></span><br><span class="line"><span class="keyword">catch</span>(ParentException e) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="예외-처리-정보-얻기"><a href="#예외-처리-정보-얻기" class="headerlink" title="예외 처리 정보 얻기"></a>예외 처리 정보 얻기</h3><ul><li>printStackTrace(): 예외 발생 당시 콜스택에 있던 메서드의 정보와 예외 메시지를 화면에 출력한다.  </li><li>getMessage(): 발생한 예외 클래스의 인스턴스에 저장된 메시지를 얻는다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="number">2</span>/<span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="number">3</span>); <span class="comment">// 위에서 에러나서 출력 안 됨.</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            <span class="comment">// java.lang.ArithmeticException: / by zero</span></span><br><span class="line">            <span class="comment">// at ch08.Exception.main(Exception.java:7)</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"예외 메시지:"</span> + e.getMessage()); <span class="comment">// 예외 메시지:/ by zero</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"asdf"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>switch-case 문처럼 instanceof가 true에 걸리는 녀석을 순서적으로 찾아가고 마지막에 default 마냥 Exception에 걸리게 된다.<br>하지만 아래와 같이 하면 에러가 난다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="number">2</span>/<span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"asdf"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// java: exception java.lang.ArithmeticException has already been caught</span></span><br><span class="line">        <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            <span class="comment">// java.lang.ArithmeticException: / by zero</span></span><br><span class="line">            <span class="comment">// at ch08.Exception.main(Exception.java:7)</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"예외 메시지:"</span> + e.getMessage()); <span class="comment">// 예외 메시지:/ by zero</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이미 먼저 예외 처리를 하고 있다고 아래서는 할 필요가 없다고 에러를 내고 있다.  </p><h3 id="예외-발생시키기"><a href="#예외-발생시키기" class="headerlink" title="예외 발생시키기"></a>예외 발생시키기</h3><p>정확하게 왜 일부로 예외를 발생시켜야하는지는 모르겠지만, 그런 경우가 있는 것 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArithmeticException e = <span class="keyword">new</span> ArithmeticException(<span class="string">"이거시 예외 메시지!"</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">            <span class="comment">// throw new ArithmeticException("이거시 예외 메시지!");</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// java.lang.ArithmeticException: 이거시 예외 메시지!</span></span><br><span class="line">        <span class="comment">// at ch08.ThrowTest.main(ThrowTest.java:6)</span></span><br><span class="line">        <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage()); <span class="comment">// 이거시 예외 메시지!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// RuntimeException의 자식 클래스가 아니면 컴파일 에러가 난다.</span></span><br><span class="line">        <span class="comment">// throw new IOException();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// RuntimeException의 자식 클래스면 런타임 에러가 난다.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="메소드에-예외-선언하기"><a href="#메소드에-예외-선언하기" class="headerlink" title="메소드에 예외 선언하기"></a>메소드에 예외 선언하기</h3><p>다른 프로그래밍 언어에서는 메소드에 예외를 선언할 수 없었다.<br>따라서 해당 메소드가 어떤 예외를 발생할지 모르므로 노련한 프로그래머야 해당 메소드를 쓸 때 예외처리를 잘 하겠지만,<br>경험이 적은 개발자 입장에서는 다양한 테스트를 통해 어떤 상황에서 어떤 Exception이 발생하는지 순전히 노가다(?)로 알아볼 수 밖에 없었다.<br>하지만 자바에서는 메소드에서 발생할 수 있는 예외를 명시해서 사용하는 측에서 어떻게 대비해야하는지를 알려줄 수 있다.  </p><p><strong>주의해야할 것은 메소드에 예외를 선언한다고 해서 예외 처리까지 떠맡게 되는 것은 아니다.</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Exception in thread "main" java.lang.NullPointerException</span></span><br><span class="line">        <span class="comment">// at ch08.MethodException.method2(MethodException.java:8)</span></span><br><span class="line">        <span class="comment">// at ch08.MethodException.method(MethodException.java:5)</span></span><br><span class="line">        <span class="comment">//at ch08.MethodException.main(MethodException.java:12)</span></span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main이 method를 호출했고, method가 method2를 호출했고 method2에서 NullPointerException 예외가 발생했다고 알려주고 있다.<br>물론 다음과 같이 메소드 내에서도 예외를 처리할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage() + <span class="string">" 예외 처리"</span>); <span class="comment">// null 예외 처리</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예제는 main 메소드는 예외가 발생했다는 사실도 모른다는 것이다.<br>내 생각에는 메소드에서 처리할 바에는 저렇게 throws로 명시해줄 필요가 없을 것 같다.<br>throws 키워드로 던져주는 예외는 메소드 사용자가 처리해야할 예외인데,<br>미리 발생할 예외를 메소드 개발자가 미리 처리하는데 굳이 throws로 어떤 예외가 발생했는지 알려줄 필요가 있나 싶다.<br>따라서 메소드 사용자에게 예외 처리를 미뤄버리면 다음과 같이 구현하면 될 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage() + <span class="string">" 예외 처리"</span>); <span class="comment">// null 예외 처리</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예제는 main 메소드도 예외가 발생했다는 것을 알게 된다.</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"try"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"catch"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// try</span></span><br><span class="line">        <span class="comment">// finally</span></span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>타짜를 보면 손은 눈보다 빠르듯, finally는 함수를 종료시키는 return 보다 빠르다.  </p><h3 id="자동-자원-반환"><a href="#자동-자원-반환" class="headerlink" title="자동 자원 반환"></a>자동 자원 반환</h3><p>주로 I/O와 관련된 클래스를 처리할 때 유용하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"score.dat"</span>);</span><br><span class="line">    DataInputStream dis = <span class="keyword">new</span> DataInputStream(fis);</span><br><span class="line">    <span class="comment">// 코드..</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(dis != <span class="keyword">null</span>) dis.close();</span><br><span class="line">   &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예외가 나던 안 나던 자원은 close(), 반환해줘야한다.<br>하지만 이 close에서도 예외가 일어날 수도 있어서 또 예외 처리를 해줘야한다.<br>가독성은 물론이고 문제가 있는 코드란다. (자세히는 모르겠다.)</p><p>그래서 JDK7에서는 try-with-resources 문이 생겼다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"score.dat"</span>);</span><br><span class="line">    DataInputStream dis = <span class="keyword">new</span> DataInputStream(fis)) &#123;</span><br><span class="line">    <span class="comment">// 코드..</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>문장이 두 개인 경우 ;를 구분자로 사용하며 finally 없이도 자원이 자동으로 반환된다.<br>이렇게 자동으로 반환되는 자원이라면 클래스(DataInputStream 등등)가 AutoCloseable 인터페이스를 구현한 것이어야만 한다.<br>자세히 모르니 나중에 다시 보자.  </p><h2 id="java-lang-패키지"><a href="#java-lang-패키지" class="headerlink" title="java.lang 패키지"></a>java.lang 패키지</h2><h3 id="Object-클래스"><a href="#Object-클래스" class="headerlink" title="Object 클래스"></a>Object 클래스</h3><h4 id="equals-메소드"><a href="#equals-메소드" class="headerlink" title="equals 메소드"></a>equals 메소드</h4><p>최상위 클래스 Object에는 equals 메소드가 있고 다음과 같이 구현돼있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>둘이 같은 객체를 참조하고 있는지 비교하고 있는 것이다.<br>그렇다면 String 클래스에서 어떻게 문자열을 가지고 비교하는 것일까?<br>String도 클래스이고, 인스턴스 생성시 항상 메모리에 비어있는 공간에 할당될텐데 어떻게 equals 메소드로 두 문자열의 값을 비교하는 것일까?<br>바로 equals 메소드를 오버라이딩하는 것이다.  </p><p>String 클래스는 다음과 같이 구현돼있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 결국에 다뤄지는 것은 C언어와 마찬가지로 문자 배열로 다루게 된다.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123; <span class="comment">// 같은 객체를 참조 하고 있으면</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123; <span class="comment">// 인자가 String 클래스의 인스턴스인 경우</span></span><br><span class="line">            <span class="comment">// 기존에 넘어온 것은 Object 참조 타입이므로 Object 멤버 밖에 사용이 불가능하다.  </span></span><br><span class="line">            <span class="comment">// 따라서 String 클래스의 멤버들을 사용하려면 String 클래스로 형변환(다운 캐스팅) 해줘야 한다.</span></span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123; <span class="comment">// 둘의 길이가 같다면</span></span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123; <span class="comment">// 둘의 문자 하나 하나를 각각 비교</span></span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hashCode-메소드"><a href="#hashCode-메소드" class="headerlink" title="hashCode 메소드"></a>hashCode 메소드</h4><p>해싱은 데이터 관리 기법 중의 하나인데, 다량의 데이터를 저장하고 검색하는 데 유용하다.<br>해시 함수는 찾고자하는 값을 입력하면 그 값이저장된 위치를 알려주는 해시 코드를 반환한다.  </p><p>일반적으로 해시코드가 같은 두 객체가 같은 것지 존재하는 것이 가능하지만(String 클래스),<br>hashCode 메소드를 오버라이딩 하지 않는 한 Object 클래스의 hashCode 메소드를 사용할 것이고<br>이 메소드는 객체의 주소값을 이용해서 해시코드를 만들어 반환하기 때문에 서로 다른 두 객체는 절대 같은 해시코드를 가질 수 없다.  </p><p>해싱기법을 사용하는 HashMap이나 HashSet 같은 클래스에 저장할 객체라면 반드시 이 메소드를 오버라이딩 해주자!  </p><h4 id="toString-메소드"><a href="#toString-메소드" class="headerlink" title="toString 메소드"></a>toString 메소드</h4><p>기본적으로 println이나 print 메소드에서 인스턴스를 넣으면 자동적으로 toString 메소드가 호출된다.<br>그리고 toString 메소드를 오버라이딩 하다보면 항상 public 접근 지정자를 왜 써야하는지 의문이었다.<br>그에 대한 해답은 Object 클래스가 어떻게 toString 메소드를 구현했는지 보면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>바로 public 접근 지정자를 쓰고 있다.<br>메소드 오버라이딩을 하기 위해선 부모 클래스의 메소드보다 더 좁은 접근 지정자를 지정할 수 없는데,<br>public 보다 넓은 접근 지정자는 없으니 무조건 public으로 접근 지정자를 지정하고 오버라이딩을 해줘야하는 거였다.  </p><h4 id="clone-메소드"><a href="#clone-메소드" class="headerlink" title="clone 메소드"></a>clone 메소드</h4><p>Object 클래스의 clone 메소드를 보면 다음과 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>무조건 CloneNotSupportedException 예외를 던진다.<br>따라서 클래스에서 따로 이 예외를 처리해줘야한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// TV 클래스의 부모 클래스는 Object,</span></span><br><span class="line">            <span class="comment">// Object 클래스의 clone 메소드는 아래와 같은 예외를 유발하므로 예외 처리를 이렇게 해줘야함.</span></span><br><span class="line">            obj = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV t = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="comment">// 반환된 타입은 Object 객체니 TV 객체로 형변환 해줘야한다.</span></span><br><span class="line">        TV t2 = (TV)t.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 clone을 하기 위해서는 클래스를 Cloneable 인터페이스를 구현해야한다.<br>왜냐하면 코드의 안전성을 보장하기 위한 것인데 클래스 개발자가 명시적으로 <strong>클래스 복제를 허락</strong>했다고 알리는 것과 같다.  </p><h4 id="공변-반환-타입"><a href="#공변-반환-타입" class="headerlink" title="공변 반환 타입"></a>공변 반환 타입</h4><p>위 예제에서 clone을 하고 나서 Object로 반환했으니 TV 객체로 형변환해야하는 과정이 필요했다.<br>하지만 JDK5부터는 공변 반환 타입이란 게 나왔다.<br>뭔소린지 나도 모르겠으니까 코드로 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> (TV)obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 아래 코드는 에러를 유발한다.</span></span><br><span class="line">    <span class="comment">// public TV2 toString() &#123;</span></span><br><span class="line">    <span class="comment">//        return new TV2();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptionTV</span> <span class="keyword">extends</span> <span class="title">TV</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TVCR</span> <span class="keyword">extends</span> <span class="title">CaptionTV</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CaptionTV <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 부모 클래스의 메소드에서 이미 예외 처리를 하고 있기 때문에 얘는 예외 처리를 안 해줘도 된다.</span></span><br><span class="line">        Object obj = <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> (CaptionTV)obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV t = <span class="keyword">new</span> TV();</span><br><span class="line">        TV t2 = t.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>원래대로 라면 메소드 오버라이딩 조건에 의해 선언부는 완전히 일치해야하기 때문에 return 타입도 일치해야하기 때문에<br><code>public Object clone()</code>이 돼야하는데 TV instanceof Object가 true이기 때문에 <code>public TV clone()</code>도 가능해진 것이다.<br>TVCR의 clone 메소드도 마찬가지다.  </p><p>이런 clone 메소드는 배열, Vector, ArrayList, LinkedList, HashSet, TreeSet, HashMap, TreeMap, Calendar, Date와 같은 클래스에서도 사용이 가능하다.  </p><h4 id="얕은-복사와-깊은-복사"><a href="#얕은-복사와-깊은-복사" class="headerlink" title="얕은 복사와 깊은 복사"></a>얕은 복사와 깊은 복사</h4><p>clone 메소드는 객체의 값만 복사하므로 그 값이 참조하고 있는 객체를 또 복사하거나 하지 않는 Shallow Copy(얕은 복사)를 수행한다.<br>멤버 변수가 기본값이 아닌 참조타입(클래스)인 경우가 이에 해당한다.<br>기본적으로 deep copy는 해당 클래스의 인스턴스를 새로 반환하게 끔 해야하는 것 같다.<br>JS처럼 hierarchical(계층적) 구조여서 재귀함수로 얕은 복사를 계속해서 수행하는 방식과는 다르다.  </p><h4 id="Class-객체"><a href="#Class-객체" class="headerlink" title="Class 객체"></a>Class 객체</h4><p><strong>이름이 Class인 객체</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> <span class="keyword">implements</span> ... </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>클래스마다 getClass라는 메소드를 가지고 있고, 이 메소드는 자신의 Class 객체를 반환한다.<br>따라서 클래스마다 Class 객체는 단 하나만 가지고 있다.<br>이 Class 객체는 클래스 파일이 클래스 로더(ClassLoader)에 의해 메모리에 올라갈 때 자동으로 생성된다.<br>클래스 로더는 실행 시에 필요한 클래스를 동적으로 메모리에 로드하는 역할을 한다.<br>클래스 파일을 찾지 못하면 ClassNotFoundException을 발생시키고, 찾으면 클래스 파일을 읽어서 Class 객체로 변환한다.  </p><p>클래스 객체를 얻기 위해서는 세 가지 방법이 있다.  </p><ol><li><code>Class c = new Card().getClass();</code>, 생성된 객체(인스턴스)로부터 얻는 방법  </li><li><code>Class c = Card.class;</code>, 클래스 리터럴(*.class)로부터 얻는 방법  </li><li><code>Class c = Class.forName(&quot;Card&quot;);</code>, 클래스 이름으로부터 얻는 방법  </li></ol><p>또한 인스턴스를 만드는 방법도 두 가지 방법이 있다.  </p><ol><li><code>Card card = new Card();</code>, new 연산자를 이용해서 인스턴스 생성  </li><li><code>Card card = c.newInstance();</code>, 위에서 구한 Class 객체를 이용해서 인스턴스 생성</li></ol><h3 id="String-클래스"><a href="#String-클래스" class="headerlink" title="String 클래스"></a>String 클래스</h3><p>immutable(변경 불가능한) 클래스이다.<br>String 클래스에는 문자열을 저장하기 위해 문자형 배열 변수인 <code>char[] value</code>를 인스턴스 변수로 정의해놓고 있다.<br>인스턴스 생성 시 매개변수로 입력하는 문자열은 이 인스턴스 변수(문자형 배열 변수 value)로 저장된다.<br>따라서 + 연산자를 이용하여 문자열을 결합한다면 새로운 인스턴스를 생성한다고 보면 된다.<br>따라서 + 연산자를 이용하여 계속해서 새로운 인스턴스를 생성하면 아무리 GC(Garbage Collector)가 회수해간다 해도 메모리 공간 측면에서 좋지 않을 것이다.  </p><h4 id="“abc”-vs-new-String-“abc”"><a href="#“abc”-vs-new-String-“abc”" class="headerlink" title="“abc” vs new String(“abc”)"></a>“abc” vs new String(“abc”)</h4><p>문자열을 생성하는데도 위의 두 가지 방법이 있다.<br>나는 편의를 위해서 그냥 new String()의 생략이 가능한 줄 알았는데 그게 아니었다.  </p><ol><li><code>&quot;abc&quot;</code>, 이미 인스턴스가 존재하면 해당 인스턴스를 반환  </li><li><code>new String(&quot;abc&quot;)</code>, 매번 새로운 인스턴스를 반환  </li></ol><p>그러한 까닭에 <code>&quot;abc&quot; == &quot;abc&quot;</code>는 true이지만, <code>&quot;abc&quot; == new String(&quot;abc&quot;)</code>는 false인 것이다.<br>그래서 어떤 방식으로 문자열을 생성했을지 모르니 문자열의 비교는 무조건 equals() 메소드를 사용하자.  </p><h4 id="Constant-Pool"><a href="#Constant-Pool" class="headerlink" title="Constant Pool"></a>Constant Pool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"aa"</span>;</span><br><span class="line">String a2 = <span class="string">"aa"</span>;</span><br><span class="line">String a3 = <span class="string">"aa"</span>;</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">"bb"</span>);</span><br><span class="line">String b2 = <span class="keyword">new</span> String(<span class="string">"bb"</span>);</span><br><span class="line">String b3 = <span class="keyword">new</span> String(<span class="string">"bb"</span>);</span><br></pre></td></tr></table></figure><p>이 *.java 파일을 컴파일하고, 컴파일된 *.class 파일을 헥스 에디터로 열어보면<br>aa는 단 한 번만 저장되고, bb는 세 번 저장돼있는 걸 볼 수 있다.<br>Constant Pool이라는 상수 저장소에 바로 저 aa가 저장되게 되는 것이다.  </p><h4 id="문자형-배열에서-null의-부재"><a href="#문자형-배열에서-null의-부재" class="headerlink" title="문자형 배열에서 null의 부재?"></a>문자형 배열에서 null의 부재?</h4><p>기존에 C를 배웠을 때 문자 배열에서 맨 끝에 null 문자(\0)을 삽입해줬었다.<br>이 null 문자를 만나는 순간이 배열의 끝이라는 걸 알려주기 위함이었다.<br>하지만 Java에서는 따로 길이정보를 저장한다고 한다.  </p><h4 id="기본값"><a href="#기본값" class="headerlink" title="기본값"></a>기본값</h4><p>String도 클래스이다 보니 참조변수의 기본값인 null이 들어가는 줄 알았는데 빈 문자열인 “”으로 초기화 된다고 한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char는 빈 문자열이 들어갈 수 없으므로 공백(‘ ‘)이 들어간다고 한다.  </p><h4 id="join-vs-split"><a href="#join-vs-split" class="headerlink" title="join vs split"></a>join vs split</h4><p>둘이 반대되는 개념이라고 보면 된다.  </p><ol><li>join  </li></ol><p><strong>배열</strong>의 요소들 사이에 구분자를 <strong>넣어서 문자열</strong>로 반환한다.<br>2. split<br><strong>문자열</strong>을 구분자로 <strong>나누어서 배열</strong>로 반환한다.  </p><h4 id="int-vs-char"><a href="#int-vs-char" class="headerlink" title="int vs char"></a>int vs char</h4><p>메소드의 매개변수를 보면 int인 것이 있고 ch인 것이 있는데 차이는 다음과 같다.  </p><ol><li>int<br>UTF-16(2Byte, 65536개의 문자)로도 감당이 안 되다보니 int(4Byte, 4294967296개의 문자)를 매개변수로 받는 것이다.<br>뭐 이런 문자는 거의 안 쓴다고 보면 된다.  </li><li>char<br>UTF-16 내에 존재하는 문자로 커버가 된다고 생각하는 매개변수이다.  </li></ol><h4 id="“”-vs-valueOf"><a href="#“”-vs-valueOf" class="headerlink" title="“” vs valueOf"></a>“” vs valueOf</h4><p>자스에도 문자열로 변환하는 다양한 방법들이 있고, 자바에서도 마찬가지이다.<br>“” 이 더 간결한데, 성능이 중요시 된다면 valueOf를 쓰라고 한다.  </p><h4 id="parseInt-vs-valueOf"><a href="#parseInt-vs-valueOf" class="headerlink" title="parseInt vs valueOf"></a>parseInt vs valueOf</h4><p>둘 다 동일한 메소드이다.<br>valueOf 내부를 보면 아래와 같이 parseInt를 호출하고 있다.<br>아마 다른 클래스에서도 valueOf를 쓰기 때문에 통일성 때문에 추가된 게 아닐가 싶다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(String s)</span> Throws NumberFormatException</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.valueOf(parseInt(s, <span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="기본형-lt-gt-문자열"><a href="#기본형-lt-gt-문자열" class="headerlink" title="기본형 &lt;-&gt; 문자열"></a>기본형 &lt;-&gt; 문자열</h4><table><thead><tr><th>기본형 -&gt; 문자열</th><th>문자열 -&gt; 기본형</th></tr></thead><tbody><tr><td>String.valueOf(boolean b)</td><td>Boolean.parseBoolean(String s)</td></tr><tr><td>String.valueOf(char c)</td><td>문자를 문자로 바꿀 필요 없음.</td></tr><tr><td>btye b도 int i와 동일</td><td>Byte.parseByte(String s)</td></tr><tr><td>short s도 int i와 동일</td><td>Short.parseShort(String s)</td></tr><tr><td>String.valueOf(int i)</td><td>Integer.parseInt(String s)</td></tr><tr><td>String.valueOf(long l)</td><td>Long.parseLong(String s)</td></tr><tr><td>String.valueOf(float f)</td><td>Float.parseFloat(String s)</td></tr><tr><td>String.valueOf(double d)</td><td>Double.parseDouble(String s)</td></tr></tbody></table><p>문자열에 숫자로 인식 가능한 + - . f d L과 같은 접두어, 접미어를 붙일 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = Integer.parseInt(<span class="string">"+100"</span>);</span><br><span class="line">        <span class="keyword">float</span> b = Float.parseFloat(<span class="string">"+100d"</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuffer-클래스"><a href="#StringBuffer-클래스" class="headerlink" title="StringBuffer 클래스"></a>StringBuffer 클래스</h3><p>StringBuffer 클래스도 기본적으로 char[]로 문자열을 처리한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A cache of the last value returned by toString. Cleared</span></span><br><span class="line"><span class="comment">     * whenever the StringBuffer is modified.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">char</span>[] toStringCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 기본적으로 16자리 공간을 차지하며 문자열보다 + 16자리 큰 버퍼를 가진다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 기존 char[] 보다 더 긴 문자열을 추가하려면 기존의 문자열을 복사하고 더 긴 char[]을 만들고 기존의 것을 복사한 후 새로운 걸 붙여넣는 형태로 만들 것이다.<br>append 메소드가 있는데 요놈은 문자열을 뒤에 추가하고 + 자기 자신의 주소를 반환해서 메소드 체이닝이 가능하다.</p><p>String 클래스는 equals() 메소드를 오버라이딩하여 비교가 가능하지만, StringBuffer 클래스는 오버라이딩하지 않아 문자열로 비교할 방법이 없다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"asd"</span>);</span><br><span class="line">        StringBuffer d = <span class="keyword">new</span> StringBuffer(<span class="string">"asd"</span>);</span><br><span class="line">        <span class="comment">// StringBuffer를 String으로 변환 후 비교를 진행해야한다.</span></span><br><span class="line">        System.out.println(s.toString().equals(d.toString())); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="StringBuffer-vs-String"><a href="#StringBuffer-vs-String" class="headerlink" title="StringBuffer vs String"></a>StringBuffer vs String</h4><p>StringBuffer는 데이터의 변경이 가능한데 String은 데이터를 변경하는 게 아니라 새로운 인스턴스를 생성하는 것이다.  </p><h4 id="StringBuffer-vs-StringBuilder"><a href="#StringBuffer-vs-StringBuilder" class="headerlink" title="StringBuffer vs StringBuilder"></a>StringBuffer vs StringBuilder</h4><p>동기화는 StringBuffer의 성능을 떨어뜨린단다.<br>또한 멀티 쓰레드로 작성된 프로그램이 아닌 경우에는 StringBuffer의 동기화는 불필요하게 성능만 떨어뜨린다.<br>반면 StringBuilder는 멀티쓰레드에 안전(Thread Safe)하도록 동기화가 되어있단다.<br>StringBuffer에서 쓰레드의 동기화만 뺀 게 StringBuilder란다.<br>뭔 소린지 모르겠다.<br>싱글 스레드면 StringBuilder가 더 좋다는 말같다.<br>멀티 스레드면 StringBuffer를 쓰라는 건가…?<br>근데 뭐 StringBuffer도 충분히 성능이 좋아서 크게 StringBuilder를 쓸 일은 없는 것 같다.  </p><h3 id="Math-클래스"><a href="#Math-클래스" class="headerlink" title="Math 클래스"></a>Math 클래스</h3><p>Math 클래스는 PI, E 두개의 상수 외에는 전부 static 메소드이다.<br>자동으로 메모리에 로딩되는 애들이기 때문에 굳이 생성자로 인스턴스를 만들어도 메모리 차지만 할 뿐, 추가적으로 이용 가능한 인스턴스 멤버가 없다.<br>따라서 인스턴스를 생성할 필요가 없어서 클래스의 접근 지정자가 private이고 만들고 싶어도 만들 수 없다.  </p><h4 id="소수점-n째-자리까지-반올림하기"><a href="#소수점-n째-자리까지-반올림하기" class="headerlink" title="소수점 n째 자리까지 반올림하기"></a>소수점 n째 자리까지 반올림하기</h4><ul><li>Math.round()를 쓰면 <strong>정수(Long)</strong>로 반올림 한다.<br>소수점 n째 자리까지 반올림해서 구하고 싶다면 10<sup>n</sup>를 곱하고 Math.round로 정수로 반올림 후에 10<sup>n</sup>로 다시 나누면 된다.<br>이때 나눌 때는 정수로 곱하면 안되고 뒤에 .0이나 실수형의 접두어인 f나 d를 붙여주자.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">90.12345</span>;</span><br><span class="line">        Long i = Math.round(d * <span class="number">100</span>);</span><br><span class="line">        d = i / <span class="number">100.0</span>;</span><br><span class="line">        System.out.println(d); <span class="comment">// 90.12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="올림-내림-반올림"><a href="#올림-내림-반올림" class="headerlink" title="올림, 내림, 반올림"></a>올림, 내림, 반올림</h4><ul><li>Math.ceil(): 올림  </li><li>Math.floor(): 내림  </li><li>Math.round(): 반올림  </li><li>Math.rint(): 반올림  </li></ul><p>Math.round vs Math.rint를 비교해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.round(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line">        System.out.println(Math.round(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">1.1</span>)); <span class="comment">// -1</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">1.5</span>)); <span class="comment">// -1</span></span><br><span class="line">        System.out.println(Math.round(-<span class="number">1.6</span>)); <span class="comment">// -2</span></span><br><span class="line">        System.out.println(Math.rint(<span class="number">1.1</span>)); <span class="comment">// 1.0</span></span><br><span class="line">        System.out.println(Math.rint(<span class="number">1.5</span>)); <span class="comment">// 2.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">1.1</span>)); <span class="comment">// -1.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">1.5</span>)); <span class="comment">// -2.0</span></span><br><span class="line">        System.out.println(Math.rint(-<span class="number">1.6</span>)); <span class="comment">// -2.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="예외를-발생시키는-메소드"><a href="#예외를-발생시키는-메소드" class="headerlink" title="예외를 발생시키는 메소드"></a>예외를 발생시키는 메소드</h4><p>Java8에서 추가됐다.<br>add 메소드는 결과만 반환하고 오버플로우(범위를 초과)가 발생했는지 얘기해주지 않는다.<br>addExact 메소드는 오버플로우가 발생하면 ArithmeticException을 발생시킨다.<br>여기서 negateExact라는 메소드도 있는데 단순히 부호를 바꿔주는 연산자인데 부호를 바꾸는 과정에서 어떻게 오버플로우가 발생하는지 알아보니 참 재밌는 것 같다.<br>우선 a의 부호를 바꾸는 연산자는 -a이지만 내부적으로는 ~a+1로 돌아간다.<br>내 말을 못 믿겠다면 아래 코드를 보고 원리를 이해해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">2147483648</span>;</span><br><span class="line">        System.out.println(i); <span class="comment">// -2147483648</span></span><br><span class="line">        System.out.println(-i); <span class="comment">// -2147483648</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~a는 십진수를 이진수로 바꾸고 비트를 전부 역전시키므로 a의 2의 보수를 구하게 된다.<br>2의 보수 + 1은 음수이므로 ~a+1은 음수이다.<br>그래서 그게 어쨌다는 건가… 싶으면 다음 내용을 보자.  </p><p>int는 4byte로 범위는 -2<sup>32-1</sup> ~ 2<sup>32-1</sup>-1, 즉 -2147483648 ~ 2147483647이다.<br>-2147483648를 negate, 부호를 바꾼다고 생각해보자.<br><del>(-2147483648)+1을 구하면 되는 간단한 문제이다.<br>-2147483648을 2진수로 표현하자면 다음과 같다.<br>1000_0000_0000_0000_0000_0000_0000_000<sub>(2)</sub><br>이걸 2의 보수(</del>(-2147483648))를 구하면 다음과 같다.<br>0111_1111_1111_1111_1111_1111_1111_1111<sub>(2)</sub><br>이 수는 int의 최대값인 2147483647이다.<br>여기서 1을 더하면 다음과 같다.<br>1000_0000_0000_0000_0000_0000_0000_000<sub>(2)</sub><br>다시 자기 자신으로 돌아왔다.<br>최대값 + 1 == 최소값, 즉 오버플로우가 발생했다.<br>따라서 아래와 같이 처리해줘야한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">2147483648</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Math.negateExact(i));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"범위 초과!"</span>);</span><br><span class="line">            System.out.println(Math.negateExact((<span class="keyword">long</span>)i)); <span class="comment">// 2147483648</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>단순히 부호를 바꾸는 연산자인데도 오버플로우가 발생할 수 있다는 사실이 참 신기하고 재미있다.<br>따라서 negateExact라는 메소드가 필요한 것이다.  </p><h4 id="Math-vs-StrictMath"><a href="#Math-vs-StrictMath" class="headerlink" title="Math vs StrictMath"></a>Math vs StrictMath</h4><p>Math 클래스는 최대한의 성능을 얻기 위해 OS의 메서드를 호출해서 사용한다.<br>즉 OS에 의존적이라 결과가 달라질 수도 있다.<br>StrictMath는 성능을 좀 포기하더라도 어디서나 동일한 결과를 보장받기 위한 클래스이다.  </p><h4 id="기타-메소드"><a href="#기타-메소드" class="headerlink" title="기타 메소드"></a>기타 메소드</h4><ul><li>Math.random(): 0.0 &lt;= x &lt; 1.0  </li><li>Math.max(), Math.min(): 두 가지 인자를 받아서 둘 중에 누가 크고 작은지 알려줌.  </li><li>Math.abs(): 절대값 알려줌. </li></ul><h3 id="래퍼-클래스-Wrapper-Class"><a href="#래퍼-클래스-Wrapper-Class" class="headerlink" title="래퍼 클래스(Wrapper Class)"></a>래퍼 클래스(Wrapper Class)</h3><p>기본타입을 객체로 다루기 위한 클래스<br>Object 아래 Boolean, Character, Number 클래스가 있다.<br>Number 클래스의 자식으로 Byte, Short, Integer, Long, Float, Double이 있고,<br>추가적으로 BigInteger(Long 보다 큼), BigDecimal(Double보다 큼)도 존재한다.</p><h4 id="오토-박싱-amp-언박싱-autoboxing-amp-unboxing"><a href="#오토-박싱-amp-언박싱-autoboxing-amp-unboxing" class="headerlink" title="오토 박싱 &amp; 언박싱(autoboxing &amp; unboxing)"></a>오토 박싱 &amp; 언박싱(autoboxing &amp; unboxing)</h4><p>JDK5 이후에 등장했다.<br>오토박싱은 기본값을 래퍼 객체의 인스턴스로 바꿔주는 걸 말한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 제네릭에는 기본값이 못 들어간다.</span></span><br><span class="line">       Vector&lt;Integer&gt; v = <span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line">       v.add(<span class="number">10</span>); <span class="comment">// v.add(new Integer(10)) 이라고 컴파일러가 오토박싱 해줌.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>언박싱은 반대로 래퍼 객체의 인스턴스를 기본값으로 바꿔주는 걸 말한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="keyword">new</span> Integer(<span class="string">"1"</span>); <span class="comment">// new Integer(1); 과 동일</span></span><br><span class="line">        System.out.println(i + i2); <span class="comment">// i + i2.intValue()로 컴파일러가 자동 언박싱 해준다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java-util-Objects-클래스"><a href="#java-util-Objects-클래스" class="headerlink" title="java.util.Objects 클래스"></a>java.util.Objects 클래스</h2><p>Object 클래스의 보조 클래스이다.<br>Math처럼 모든 메소드가 static이다.  </p><ul><li>isNull(Object obj), nonNull(Object obj): 딱 보면 뭐하는 놈인지 알 것이다. 둘은 정반대  </li><li>requireNonNull(T obj)<br>기존에는 아래와 같이 했어야 했다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name must not be null"</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>하지만 위 메소드를 쓰면 좀 더 줄일 수가 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = Objects.requireNonNull(name, <span class="string">"name must note be null"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>compare(Object a, Object b, Comparator c)<br>Object 클래스에는 equals만 있고 비교를 할 수 있는 메소드가 없는데 Objects 클래스에서 추가되었다.<br>Comparator는 두 객체를 비교할 기준인 거 같다.<br>크면 양수, 작으면 음수, 같으면 0을 반환한다. (아마 a가 기준일라나..??)<br>String 클래스에서는 그냥 compareTo를 이용하거나 숫자는 부등호를 이용하면 될 것 같다.<br>여튼 나중에 다시 알아보자.  </p></li><li><p>equals<br>기존 Object 클래스에서 equals를 비교하기 전에 null인지 아닌지도 비교를 해줬어야 했다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a != <span class="keyword">null</span> &amp;&amp; a.equals(b)) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>하지만 Objects 클래스의 equals를 쓰면 한결 편해진다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Objects.equals(a, b)) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>deeqEquals(Object a, Object b)<br>위 equals는 shallow equals라고 보면 된다.<br>내부에 참조변수가 있으면 그녀석들은 비교하지 못한다.<br>다차원 배열인 경우가 아마 그럴 것이다. 그럴 때 이 deepEquals를 쓰면 된다.  </p></li><li><p>toString(Object o)<br>equals와 마찬가지로 내부적으로 null을 검사해주는 것 이외에는 큰 차이가 없다.    </p></li><li><p>toString(Object o, String nullDefault)<br>null이면 기본으로 넣을 값을 지정해줄 수 있다.  </p></li><li><p>hashCode(Object o)<br>이것도 내부적으로 null을 검사해주는 것 외에는 큰 차이가 없다.<br>null이면 0을 반환한다.  </p></li></ul><h3 id="import-static-java-util-Objects-을-한다면…"><a href="#import-static-java-util-Objects-을-한다면…" class="headerlink" title="import static java.util.Objects.*을 한다면…?"></a>import static java.util.Objects.*을 한다면…?</h3><p>Objects 클래스까지 생략 가능하고 바로 메소드의 사용이 가능해진다.<br>하지만 컴파일러는 자동적으로 java.lang.* 패키지도 넣어버리므로 Object 클래스까지 같이 import 된다.<br>Objects 클래스와 Object 클래스는 메소드명이 겹치는 경우가 많아서 어떤 걸 써야할지 구분을 못 하는 경우가 있어서 이럴 때는 클래스명을 다 붙여줘야한다.  </p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 내장 클래스 </tag>
            
            <tag> 오류 </tag>
            
            <tag> 에러 </tag>
            
            <tag> 예외 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring) 스타트 스프링 부트 003일차 - Spring Data JPA</title>
      <link href="/2017/08/04/Spring-boot-study-003day/"/>
      <url>/2017/08/04/Spring-boot-study-003day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Spring-boot-study-003day/thumb.png" alt="">  </p><p>드디어 유닛 테스트? 단위 테스트? JUnit을 써봤다~<br>그럼 시작!  </p><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>xBatis(MyBatis, iBatis) 같은 경우에는 DAO(Data Access Object)라는 개념이 있었다는데 나중에 공부해봐야겠다.<br>여튼 JPA에서는 Repository가 비슷한 거라고 DAO와 비슷하다고 보면 될 거 같다.<br>JPA에서는 EntityManager를 구성하고, 트랜잭션을 시작하고 종료하는 코드를 만들 수도 있지만…(트랜잭션은 나중에 또 공부하자 ㅠㅠ)<br>JPA를 쓰기 좋게 구성한 Spring Data JPA 라이브러리를 쓰면 복잡하지 않은 Repository는 간단하게 구성이 가능하다.  </p><a id="more"></a><p>Repository&lt;T,ID&gt; &lt;- CrudRepository&lt;T,ID&gt; &lt;- PagingAndSortingRepository&lt;T,ID&gt;<br>위는 Repository 인터페이스들의 상속 구조를 나타낸 것이다.<br>&lt;&gt;는 제네릭이고(공부하자 ㅠㅠ), T는 타입(엔티티 타입), ID는 PK를 의미한다.<br>CRUD(Create(insert), Read(Select), Update, Delete)는 CrudRepository로,<br>Paiging과 Sorting은 PagingAndSortingRepository로 해주면 된다.<br>페이징 로직(현재 몇 페이지인지, 데이터 몇 개씩 보여줄 건지, 페이지를 보여주는 블록에 관한 것 등등)을 안 짜도 된다니 혁명 같다 ㅠㅠ  </p><p>나머지는 다 코드 중심이고, CRUD 및 페이징, 정렬 코드 작성하고 테스트 하는 건데…<br>넘나 덥고 자바의 정석 공부를 해야해서 나중에 정리해야겠다 ~~</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Data JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 디버깅</title>
      <link href="/2017/08/04/js-012-debug/"/>
      <url>/2017/08/04/js-012-debug/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-012-debug/thumb.png" alt="">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 열 두 번째 시리즈는 번외편 격으로 디버깅 하는 방법을 주제로 진행하겠다.  </p><a id="more"></a><h2 id="디버깅이란…"><a href="#디버깅이란…" class="headerlink" title="디버깅이란…?"></a>디버깅이란…?</h2><p>우선 디버그란 De Bug, Bug를 제거하는 것이다.<br>그렇다면 버그란…? 우리가 생각하는 오류를 뜻한다.<br>그럼 왜 버그가 오류인가…?<br>과거에 벌레(버그)가 기계 속에 들어가서 프로그램이 오류가 난 적이 있다.<br>그래서 해당 벌레를 제거(디버그)했더니 프로그램이 정상적으로 실행됐다는 사례 때문에 붙여진 이름이라고 한다.<br>디버깅은 디버그 하는 것, 즉 버그를 제거하는 것, 오류를 고치는 행위를 말한다.</p><h2 id="디버깅을-해보자"><a href="#디버깅을-해보자" class="headerlink" title="디버깅을 해보자"></a>디버깅을 해보자</h2><p>아래와 같은 코드가 있다고 해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getMidChar = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> idxMid = ~~(str.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> str.charAt(idxMid);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">var</span> midStr = getMidChar(num);</span><br></pre></td></tr></table></figure><p>위 코드를 실행하면 <code>Uncaught TypeError: str.charAt is not a function</code>이라는 오류가 나게 된다.<br>매개변수 str에 도대체 어떤 값이 들어왔길래 charAt가 함수가 아니라는 건지 도저히 모르겠을 때 다음과 같은 방법으로 str의 값을 얻어낼 수 있다.  </p><h3 id="로그-찍어보기"><a href="#로그-찍어보기" class="headerlink" title="로그 찍어보기."></a>로그 찍어보기.</h3><p>가장 간단하면서 빠른 방법이다.<br>코드를 아래와 같이 고쳐보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getMidChar = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str); <span class="comment">// 1234</span></span><br><span class="line">  <span class="keyword">var</span> idxMid = ~~(str.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> str.charAt(idxMid);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">var</span> midStr = getMidChar(num);</span><br></pre></td></tr></table></figure><p>코드가 간단해서 굳이 로그를 안 찍어봐도 되지만 로직이 복잡한 경우에 이렇게 로그를 찍어보면 어떤 값이 넘어와서 에러를 유발하는지 쉽게 찾아낼 수 있다.  </p><h3 id="브레이크-포인트-지정하기-묵시적"><a href="#브레이크-포인트-지정하기-묵시적" class="headerlink" title="브레이크 포인트 지정하기(묵시적)"></a>브레이크 포인트 지정하기(묵시적)</h3><p>BP(Break Point), 말 그대로 코드를 끝까지 실행하는 게 아니라 어느 시점(Point)에서 멈추게(Break) 하는 것이다.<br>위 코드를 로그 찍어보는 대신에 브레이크 포인트를 지정해 str에 넘어온 값을 얻어보고자 한다.<br>로그를 찍어보는 것은 궁금한 내용을 찍어보기 위해서는 계속 소스를 수정해야하지만,<br>브레이크 포인트를 걸어두면 브레이크 걸린 시점에서 소스 수정 없이 이것 저것 테스트 해볼 수 있다는 장점이 존재한다.<br>이 포스트에서는 디버거의 사용 방법(다음 BP로 이동 등등)에 대해서는 설명하지 않으니 그건 알아서 공부하자.   </p><h4 id="브라우저"><a href="#브라우저" class="headerlink" title="브라우저"></a>브라우저</h4><p>설명은 <strong>크롬</strong> 기준으로 하지만 다른 브라우저에서도 모두 지원할 것이다.  </p><p>우선 아래와 같은 html 파일을 만들자.    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> getMidChar = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> idxMid = ~~(str.length / <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> str.charAt(idxMid);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> num = <span class="number">1234</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> midStr = getMidChar(num);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>브라우저에서 해당 html 파일을 열고 개발자 도구를 열어서 콘솔 탭을 보자.<br><img src="/images/js-012-debug/01.png" alt=""><br>11번 줄에서 에러가 난 상황이고, 11번을 call? 호출? 한 건 14번 라인에 의한 것이란다.<br>일단 11번 라인으로 가기 위해 파란 박스를 클릭해주자.  </p><p><img src="/images/js-012-debug/02.png" alt=""><br>해당 라인에서 오류가 나고 있다.<br>정확히 어떤 값이 넘어오는지 봐야하기 때문에 브레이크 포인트를 지정해주자.<br>파란 박스 친 11번 라인을 클릭해주자.  </p><p><img src="/images/js-012-debug/03.png" alt="11번 라인에 브레이크 포인트가 걸렸다."><br>이제 새로고침을 해주자.  </p><p><img src="/images/js-012-debug/04.png" alt="11번 라인에서 브레이크가 걸렸다."><br>11번 라인이 실행되기 <strong>직전</strong>에 딱 브레이크가 걸린다.<br>스코프들의 관계(누가 누구를 호출했는지) 콜스택을 통해 볼 수 있고, 어떤 브레이크 포인트에 의해 브레이크 된 건지 등등의 유용한 정보를 볼 수 있다.</p><p><img src="/images/js-012-debug/05.png" alt=""><br>또한 원래 콘솔에서는 전역 스코프만 접근이 가능했는데 브레이크 걸린 스코프는 로컬 스코프인데 마치 전역 스코프인 것 마냥 그 안으로 파고 들어와서 테스트를 할 수 있다.  </p><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>설명은 <strong>IntelliJ</strong>로 하지만 VSCode나 Atom에서도 Node.js를 디버깅 할 수 있는 것으로 알고 있다.<br>요즘에는 Javascript가 브라우저를 탈출해 Node.js 런타임 환경까지 생기다보니 IDE에서 Node 인터프리터를 제공해주기도 한다.<br>Node를 이용하면 브라우저에서 제공하는 DOM이나 BOM 객체의 사용은 불가능하지만, ES+Node API를 통해 데이터에 집중해서 테스트 할 수 있다는 장점이 존재한다.  </p><p>아래와 같은 js 파일을 만들자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getMidChar = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> idxMid = ~~(str.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> str.charAt(idxMid);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">var</span> midStr = getMidChar(num);</span><br></pre></td></tr></table></figure><p><img src="/images/js-012-debug/06.png" alt=""><br>우클릭 후 <strong>Run ‘test.js’</strong>를 클릭해주자.</p><p><img src="/images/js-012-debug/07.png" alt=""><br>동일한 코드이므로 동일한 부분에서 에러가 난다.<br>3번 라인 14번째 칸에서 오류가 났다고 하고, (3: 14)<br>6번 라인 14번째 칸에 의해 호출이 일어났다고 한다. (6: 14)  </p><p><img src="/images/js-012-debug/08.png" alt=""><br>3번 라인을 클릭해 BP를 걸어주자.  </p><p><img src="/images/js-012-debug/09.png" alt=""><br>그리고 이번엔 <strong>Debug ‘test.js’</strong>를 클릭해주자.</p><p><img src="/images/js-012-debug/10.png" alt=""><br>그럼 3번 라인에서 BP가 걸리고 소스코드 창에는 해당 스코프에 어떤 인자가 넘어왔는지 등등을 보여주고 있다.  </p><p><img src="/images/js-012-debug/11.png" alt=""><br>인터프리터 창의 Debugger 탭의 좌측에는 콜스택, 우측에는 스코프를 보여주고 있다.  </p><p><img src="/images/js-012-debug/12.png" alt=""><br>인터프리터 창의 Console 탭으로 와서 str을 찍어보려고 하면<br>마치 로컬 스코프(getMidChar())가 전역 스코프(Global)인 것마냥 자동완성을 해서 보여주고 있다.</p><p><img src="/images/js-012-debug/13.png" alt=""><br>별도의 소스코드 수정 없이 해당 스코프에서 하고싶은 테스트를 콘솔창에서 마음껏 해볼 수 있다.  </p><h3 id="브레이크-포인트-지정하기-명시적"><a href="#브레이크-포인트-지정하기-명시적" class="headerlink" title="브레이크 포인트 지정하기(명시적)"></a>브레이크 포인트 지정하기(명시적)</h3><p>명시적으로 소스코드 상에 브레이크 포인트를 지정해주는 걸 말한다.  </p><p>다음과 같은 js 파일을 만들어주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getMidChar = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> idxMid = ~~(str.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">  <span class="keyword">return</span> str.charAt(idxMid);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">var</span> midStr = getMidChar(num);</span><br></pre></td></tr></table></figure><p>4번 라인이 실행되기 전에 BP를 명시적으로 걸어준 것이다.<br>브라우저에서는 기본적으로 BP가 걸리고 IntelliJ에서는 <strong>Debug ‘test.js’</strong> 해줘야지만 BP가 걸리는 모습을 볼 수 있다.</p><h3 id="소스코드-주석-처리하기-로그-출력하기"><a href="#소스코드-주석-처리하기-로그-출력하기" class="headerlink" title="소스코드 주석 처리하기(+로그 출력하기)"></a>소스코드 주석 처리하기(+로그 출력하기)</h3><p>메소드의 어느 부분까지 제대로 실행되는지 확인하기 위해서는 확인하려는 부분 아래로 쭉 주석을 달고 오류가 나지 않는지 확인하면 된다.(혹은 그냥 제거해도 된다.)<br>혹은 확인하려는 부분에 로그(의미없는 로그보다는 눈으로 확인하기 쉬운 임의의 로그)를 출력해보면 메소드가 어디까지 제대로 실행됐는지 확인할 수 있다.</p><h2 id="BP-걸고-로그-찍어서-어떻게-디버깅을-하는데"><a href="#BP-걸고-로그-찍어서-어떻게-디버깅을-하는데" class="headerlink" title="BP 걸고 로그 찍어서 어떻게 디버깅을 하는데?"></a>BP 걸고 로그 찍어서 어떻게 디버깅을 하는데?</h2><p>어떤 값이 들어왔는지 모르는 상황에서 머릿 속으로 상상의 나래를 펼치는 것보다<br>그냥 로그 찍어보고 BP 걸어서 어떤 값들이 들어왔는지 확인하는 게 훨씬 빠를 경우가 많다.<br>그래서 어떤 값들이 들어왔는지 확인하고 인자를 수정하던, 메소드 등등을 수정하던지 하면 훨씬 디버깅 하는데 용이할 것이다.<br>따라서 로그 찍어보고 BP 거는 습관을 들이보다보면 훨씬 디버깅하는 데 용이할 것이다.   </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> 디버깅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) Number.EPSILON은 왜 2.220446049250313e-16인가?</title>
      <link href="/2017/08/04/ES6-EPSILON/"/>
      <url>/2017/08/04/ES6-EPSILON/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-EPSILON/thumb.png" alt="">  </p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><ol><li><a href="/2016/12/24/ES6-Number-object-and-function/#Number-EPSILON">Number.EPSILON</a>이 뭔지 모르는 사람은 해당 링크를 참조하고 오자.  </li><li><a href="http://thrillfighter.tistory.com/349" rel="external nofollow noopener noreferrer" target="_blank">부동소수점</a>이 뭔지 모르는 사람은 해당 링크를 참조하고 오자.  </li></ol><h2 id="자바스크립트에서-숫자의-자료형은"><a href="#자바스크립트에서-숫자의-자료형은" class="headerlink" title="자바스크립트에서 숫자의 자료형은?"></a>자바스크립트에서 숫자의 자료형은?</h2><p>C나 Java를 접해본 사람이라면 숫자의 자료형은 크게 두 가지로 나눌 수 있을 것이다.  </p><a id="more"></a><ol><li>정수  </li><li>실수</li></ol><p>하지만 자바스크립트에서는 실수 하나 밖에 존재하지 않는다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="number">0.0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="number">.0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">.0</span> === <span class="number">0.0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>또 이 실수는 크게 두 가지로 나눌 수 있을 것이다.  </p><ol><li>float  </li><li>double</li></ol><p>하지만 자바스크립트에서는 이 실수형 중에서도 double 형 하나 밖에 존재하지 않는다.  </p><p>실수를 나타내는 데도 고정 소수점과 부동 소수점이 존재하는데 고정소수점은 직관적인데 반해 표현할 수 있는 범위가 좁아서<br>거의 부동 소수점이 실수를 표현하는데 표준으로 자리잡고 있다.<br>물론 이 부동 소수점도 오차가 존재한다는 단점을 떠안고 있지만…</p><p>이 부동 소수점을 표현하는데도 여러가지 방법이 있는데(아마도…?) 현재 거의 표준으로 자리잡은 것은<br>전기 전자 기술자 협회(IEEE)에서 제정한 <a href="https://ko.wikipedia.org/wiki/IEEE_754" rel="external nofollow noopener noreferrer" target="_blank">IEEE754</a>라는 것이다.  </p><h2 id="double-형이란…"><a href="#double-형이란…" class="headerlink" title="double 형이란…?"></a>double 형이란…?</h2><p>자바스크립트도 이 IEE754를 따라서 숫자(실수, 부동소수점)을 표현하고 있고,<br><a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="external nofollow noopener noreferrer" target="_blank">Double-precision floating-point format</a>을 따르고 있다.<br><img src="/images/ES6-EPSILON/IEEE-754-Double-Floating-Point-Format.png" alt="">    </p><p>해당 부동소수점 표현 방식은 아래와 같이 세 가지 부분으로 나뉘어진다.  </p><ol><li>부호 비트(sign, 1bit)<br>MSB(most significant bit): 최상위 비트, 즉 제일 왼 쪽에 있는 비트를 뜻하며 0이면 양수, 1이면 음수를 나타낸다.  </li><li>지수부(exponent, 11bit)<br>이진 소수를 정규화 했을 때 나타낼 지수부.<br>지수부는 정수형과 달리 바이어스 표기법을 사용한다.<br>범위는 -2<sup>11-1</sup>-1 ~ 2<sup>11-1</sup>, 즉 -2<sup>1024</sup>-1 ~ 2<sup>1024</sup>이다.<br>해당 범위를 넘어가는 지수부에 한해서는 아마도 오버플로우가 발생해서 예기치 않은 결과를 뿜어내지 않을까 싶다.(NaN, ±Infinity)<br>또한 지수 표기법과 같이 1e1 같은 숫자를 봤을 때 나오는 저 e가 지수부의 exponent를 줄인 것이다.  </li><li>가수부(fraction, 52bit)<br>이진 소수를 정규화 했을 때 나타낼 가수부.<br>부호 없는 정수를 나타내는 방식과 동일하며 0<del>2<sup>52</sup>-1 = 0 ~ 4503599627370495이다.<br>4503599627370495는 십진수 16자리인데 0</del>15자리 수를 모두 커버하고 있으므로 double의 정밀도는 소수점 15자리가 되는 것이다.</li></ol><p>부동 소수점은 먼저 아래와 같은 절차를 거친다.  </p><ol><li>십진 소수를 이진 소수로 바꾼다. (십진 소수 8.25를 이진 소수로 바꾸면 1000.01<sub>(2)</sub>)  </li><li>이진 소수를 정규화한다. (이진 소수를 지수부와 가수부로 나누어서 표현한 방식을 뜻한다.)<br>예를 들어 이진 소수 1000.01<sub>(2)</sub>을 정규화를 거치면 1.000101<sub>(2)</sub> X 10<sup>3</sup><sub>(2)</sub>와 같이 나타나며 1.101e3<sub>(2)</sub>로도 표현이 가능하다.  </li></ol><p>물론 지수부의 범위를 넘어서는 숫자라면 오버플로우가 발생할 것이고 가수부의 범위를 넘어서는 경우에는 <strong>오차</strong>가 발생한다.<br>이 오차는 왜 발생할까?  </p><ol><li>가수부의 범위를 넘어서는(정규화 이후에 소수점 이하가 15자리를 넘어서는 경우) 경우  </li><li>십진수로는 유한 소수인데 이진수로는 무한 소수인 경우  </li><li>1만 해도 이진수로는 표현이 불가능하다. (구해보면 이진수로는 무한 소수)<br>따라서 끝자리가 5로 끝나는 소수가 아니면 유한소수라고 단정지을 수가 없고, 오차가 없다고 말할 수가 없다.  </li></ol><h2 id="왜-Number-EPSILON은-2-220446049250313e-16일까"><a href="#왜-Number-EPSILON은-2-220446049250313e-16일까" class="headerlink" title="왜 Number.EPSILON은 2.220446049250313e-16일까?"></a>왜 Number.EPSILON은 2.220446049250313e-16일까?</h2><p>double 형 부동 소수점 가수부에서 0을 제외하고 가장 작은 숫자는 무엇일까?<br>바로 2<sup>-52</sup>, 0.0000000000000002220446049250313(2.220446049250313e-16)이다.<br>(가수부는 소수점 이하를 표현하는 것이기 때문에 2<sup>52</sup>가 아니다.)<br>그 말은 0 &lt; x &lt; 0.0000000000000002220446049250313, 즉 x는 표현하지 못하는 숫자가 된다.<br>그래서 Number.EPSILON이 2<sup>-52</sup>, 즉 2.220446049250313e-16가 된 것이다.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> EPSILON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 013일차 - Constant Pool</title>
      <link href="/2017/08/03/Java-study-013day/"/>
      <url>/2017/08/03/Java-study-013day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-013day/thumb.png" alt="">  </p><p>어제 잠이 안 와서 늦잠을 잤더니 오늘은 어제꺼 복습이랑 연습문제 밖에 못 풀었다…<br>내일부터 또 다시 진짜 빡세게 이빠이 달려야겠다 ㅠㅠ</p><h2 id="연습문제-오답노트"><a href="#연습문제-오답노트" class="headerlink" title="연습문제 오답노트"></a>연습문제 오답노트</h2><h3 id="1-10-반복하기"><a href="#1-10-반복하기" class="headerlink" title="1~10 반복하기"></a>1~10 반복하기</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        System.out.println(i % <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>내가 생각한 것  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> lastNum = (i+<span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">        System.out.println(num == <span class="number">0</span> ? <span class="number">10</span> : num);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 10인 경우에 대해서 먼저 덧셈을 진행하고 나머지 연산자를 쓰다보니 그런 문제가 발생한 것 같다.<br>역시 나는 아직 멀었다, 알고리즘 ㅠㅠ  </p><h3 id="매개변수의-유효성-검사"><a href="#매개변수의-유효성-검사" class="headerlink" title="매개변수의 유효성 검사"></a>매개변수의 유효성 검사</h3><p>매일 까먹는데 매개변수가 들어오면 항상 유효성 검사를 하자!!<br>특히 setter 부분…  </p><p>내가 생각한 것</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SutdaCard <span class="title">pick</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> &amp;&amp; idx &gt;= CARD_NUM) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> cards[idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SutdaCard <span class="title">pick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cards[(<span class="keyword">int</span>)(Math.random() * CARD_NUM)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드보다 혹시 몰라서 유효성 검사까지 돌려주게 끔 하려고 기존에 작성된 메소드를 이용하는 것 같다.<br>pick() 안에서 유효성 검사를 또 돌리면 중복이기에…</p><p>답안</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SutdaCard <span class="title">pick</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &lt; <span class="number">0</span> &amp;&amp; idx &gt;= CARD_NUM) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> cards[idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SutdaCard <span class="title">pick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pick([(<span class="keyword">int</span>)(Math.random() * CARD_NUM)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="자식-클래스에서-부모-메소드-호출"><a href="#자식-클래스에서-부모-메소드-호출" class="headerlink" title="자식 클래스에서 부모 메소드 호출"></a>자식 클래스에서 부모 메소드 호출</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(y, + <span class="string">","</span> + <span class="keyword">this</span>.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child c = <span class="keyword">new</span> Child();</span><br><span class="line">        c.method(); <span class="comment">// 20,20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메소드를 오버라이딩 하지 않아 부모 클래스의 메소드를 호출할 때가 있다.<br>이때 메소드 내에 멤버들은 부모의 멤버를 가리킨다.<br>ES2015와는 약간 다르다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  method() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">30</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Child();</span><br><span class="line">c.method(); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>ES2015+에서는 메소드 오버라이딩을 하지 않았어도 자식 클래스에서 호출한 거면 자식 클래스의 멤버를 따른다.  </p><h2 id="이전-값-기억하기"><a href="#이전-값-기억하기" class="headerlink" title="이전 값 기억하기"></a>이전 값 기억하기</h2><p>setter로 값을 계속 지정하고, 그 이전값으로 돌아가는 메소드까지 구현해보는 거였다.<br>예제로 TV 클래스의 채널을 가지고 구현했는데 나는 아래와 같이 반복된 로직을 사용하였다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> prev;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChannel</span><span class="params">(<span class="keyword">int</span> channel)</span> </span>&#123;</span><br><span class="line">        prev = <span class="keyword">this</span>.channel;</span><br><span class="line">        <span class="keyword">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoPrevChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = prev;</span><br><span class="line">        prev = channel;</span><br><span class="line">        channel = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gotoPrevChannel 쪽에 저렇게 스와핑하는 로직을 쓸 필요가 없이 아래와 같이 하면 끝나는 거였다.<br>나는 바보같다 흑흑…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> prev;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChannel</span><span class="params">(<span class="keyword">int</span> channel)</span> </span>&#123;</span><br><span class="line">        prev = <span class="keyword">this</span>.channel;</span><br><span class="line">        <span class="keyword">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gotoPrevChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setChannel(prev);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Math-클래스의가-private-접근-지정자가-붙어있는-이유"><a href="#Math-클래스의가-private-접근-지정자가-붙어있는-이유" class="headerlink" title="Math 클래스의가 private 접근 지정자가 붙어있는 이유?"></a>Math 클래스의가 private 접근 지정자가 붙어있는 이유?</h2><p>Math 클래스는 인스턴스 멤버는 하나도 없고 죄다 static 멤버이다.<br>따라서 클래스가 자동으로 로딩되니(컴파일러가 import.lang.*을 자동으로 삽입해주니) 메모리에 static 멤버는 바로 적재되니 인스턴스 생성없이 사용이 가능하며<br>인스턴스를 생성할 필요가 없어서 private 접근 지정자로 호출이 불가능하게끔 하고 있다.</p><h2 id="참조타입-간의-형변환"><a href="#참조타입-간의-형변환" class="headerlink" title="참조타입 간의 형변환"></a>참조타입 간의 형변환</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirUnit</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroundUnit</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">GroundUnit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirCraft</span> <span class="keyword">extends</span> <span class="title">AirUnit</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnitTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Unit u = <span class="keyword">new</span> GroundUnit();</span><br><span class="line">        Unit u2 = <span class="keyword">new</span> Unit();</span><br><span class="line">        Tank t = <span class="keyword">new</span> Tank();</span><br><span class="line">        AirCraft ac = <span class="keyword">new</span> AirCraft();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 가능하다. 나는 참조타입이 Unit이라 더 넓은 타입인 GroundUnit으로 변환이 불가능한 줄 알았다.</span></span><br><span class="line">        <span class="comment">// 근데 인스턴스 타입이 GroundUnit이어서 가능한 것이다.  </span></span><br><span class="line">        <span class="comment">// u2처럼 만드는 것과 차이점이 무엇이 있냐면</span></span><br><span class="line">        <span class="comment">// 이렇게 형변환을 자유로이(멤버의 범위를 여의봉 마냥 자유자재로 늘렸다 줄였다) 할 수 있는 장점이 있다.</span></span><br><span class="line">        GroundUnit gu = (GroundUnit)u;</span><br><span class="line">        <span class="comment">// 컴파일 에러는 안 나는데 런타임 에러, </span></span><br><span class="line">        <span class="comment">// u2는 Unit 인스턴스 타입이라 참조 가능한 한계가 Unit 뿐임.</span></span><br><span class="line">        <span class="comment">// 하지만 위는 GroundUnit의 인스턴스라 참조타입에 따라서 여의봉 마냥 참조 가능한 멤버의 한계가 달라짐.</span></span><br><span class="line">        <span class="comment">// GroundUnit gu2 = (GroundUnit)u2; </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(u.y); 참조타입이 Unit이라 Unit꺼가 아니라 컴파일 에러</span></span><br><span class="line">        System.out.println(gu.y); <span class="comment">// GroundUnit의 멤버까지 접근이 가능하다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="확실히-구현해야하는-메소드들은-오버라이딩-보다는-추상메소드를-쓰자"><a href="#확실히-구현해야하는-메소드들은-오버라이딩-보다는-추상메소드를-쓰자" class="headerlink" title="확실히 구현해야하는 메소드들은 오버라이딩 보다는 추상메소드를 쓰자"></a>확실히 구현해야하는 메소드들은 오버라이딩 보다는 추상메소드를 쓰자</h2><p>추상 메소드로 쓰면 구현을 하지 않으면 컴파일 에러가 나서 무조건 구현해야하는구나 라고 개발자가 더 확실히 인식할 수 있다.<br>또한 오버라이딩은 해도 그만 안 해도 그만이라 잘못된 메소드를 만들어서 메소드 오버로딩이 될 수도 있는데 추상 메소드는 그럴 가능성이 없다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;&#125; <span class="comment">// 메소드 오버라이딩 대신에 추상 메소드를 써서 무조건 구현하게끔 했다.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Marine</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stimPack</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeMode</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dropship</span> <span class="keyword">extends</span> <span class="title">Unit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unload</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="고객이-물건-사는-거-구현하기"><a href="#고객이-물건-사는-거-구현하기" class="headerlink" title="고객이 물건 사는 거 구현하기"></a>고객이 물건 사는 거 구현하기</h2><p>생각할 게 많은 예제인 것 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> price = <span class="number">100</span>;</span><br><span class="line">    Product(<span class="keyword">int</span> price) &#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    TV() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TV"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    Computer() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Computer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audio</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    Audio() &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Audio"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">1000</span>;</span><br><span class="line">    Product[] cart = <span class="keyword">new</span> Product[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Product p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p.price &lt;= money) &#123;</span><br><span class="line">            money -= p.price;</span><br><span class="line">            add(p);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"잔액이 부족하여 "</span> + p + <span class="string">"을/를 살 수 없습니다."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Product p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = cart.length;</span><br><span class="line">        <span class="comment">// len - 1까지는 정상적으로 넣어도 되는 값이고 넣은 이후에 ++이 되기 때문에 len으로 조건을 걸어주면 된다.</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= len) &#123;</span><br><span class="line">            Product[] tmp = <span class="keyword">new</span> Product[len*<span class="number">2</span>];</span><br><span class="line">            System.arraycopy(cart, <span class="number">0</span>, tmp, <span class="number">0</span>, len);</span><br><span class="line">            cart = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        cart[i++] = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">summary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> spend = <span class="number">0</span>;</span><br><span class="line">        System.out.print(<span class="string">"구입한 물건: "</span>);</span><br><span class="line">        <span class="comment">// cart.length로 하면 null인 경우에 break를 걸어줘야하는데(아직 카트를 덜 채운 경우)</span></span><br><span class="line">        <span class="comment">// i를 맥스로 하면 i는 이제 넣어야할 차례의 인덱스이므로 끝까지 넣은 구간까지만 출력하니 null을 처리해주지 않아도 된다. </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            System.out.print(cart[j] + <span class="string">", "</span>);</span><br><span class="line">            <span class="comment">// spend를 구할 때 1000 - money로 구해도 되지만 1000원이라는 확신이 없기에 이렇게 해줘야함.</span></span><br><span class="line">            spend += cart[j].price;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"사용한 금액: "</span> + spend);</span><br><span class="line">        System.out.println(<span class="string">"남은 금액: "</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buyer b = <span class="keyword">new</span> Buyer(); b.buy(<span class="keyword">new</span> TV()); b.buy(<span class="keyword">new</span> Computer()); b.buy(<span class="keyword">new</span> TV()); b.buy(<span class="keyword">new</span> Audio()); b.buy(<span class="keyword">new</span> Computer()); b.buy(<span class="keyword">new</span> Computer()); b.buy(<span class="keyword">new</span> Computer());</span><br><span class="line">        b.summary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="매개변수가-인터페이스일-때"><a href="#매개변수가-인터페이스일-때" class="headerlink" title="매개변수가 인터페이스일 때"></a>매개변수가 인터페이스일 때</h2><p>매개변수의 다형성에 대해 묻는 얘기인 것 같다.<br>이렇게 다형성을 이용하면 메소드 오버로딩 해야할 경우의 수를 많이 줄일 수 있다.<br>하지만 특정 인스턴스에 특화된 게 아니라 공통된 멤버들만 사용이 가능하다는 제약이 있다.<br>진짜 클래스의 다형성, 매개변수의 다형성, 메소드의 다형성, 인터페이스의 다형성 등등 그지같이 많다.  </p><ol><li>null  </li><li>Interface  </li><li>Interface를 구현한 클래스(인스턴스)  </li><li>Interface를 구현한 클래스의 자식 클래스(인스턴스)</li></ol><h2 id="내부-클래스의-변수-사용하기"><a href="#내부-클래스의-변수-사용하기" class="headerlink" title="내부 클래스의 변수 사용하기"></a>내부 클래스의 변수 사용하기</h2><p>사용할 일이 있을라나…  </p><ul><li><p>인스턴스 변수</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123; <span class="comment">// 외부 클래스</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 내부 클래스(인스턴스 클래스)</span></span><br><span class="line">        <span class="keyword">int</span> iv=<span class="number">100</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer(); </span><br><span class="line">        Outer.Inner ii = o.new Inner();</span><br><span class="line">        System.out.println(ii.iv);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>클래스 변수</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123; <span class="comment">// 외부 클래스</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 내부 클래스(인스턴스 클래스)</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> iv=<span class="number">100</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner ii = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">        System.out.println(ii.iv);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="익명-클래스"><a href="#익명-클래스" class="headerlink" title="익명 클래스"></a>익명 클래스</h2><p>얘는 어딘가 써먹을 법하다. 1회성 클래스에… 캡슐화 시키고자  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame f = <span class="keyword">new</span> Frame();</span><br><span class="line">        f.addWindowListener(<span class="keyword">new</span> EventHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventHandler</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">        e.getWindow().setVisible(<span class="keyword">false</span>);</span><br><span class="line">        e.getWindow().dispose();</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventHandler를 익명클래스로 작성하면  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame f = <span class="keyword">new</span> Frame();</span><br><span class="line">        f.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                e.getWindow().setVisible(<span class="keyword">false</span>);</span><br><span class="line">                e.getWindow().dispose();</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상속받은 클래스의 인스턴스를 호출하고 {} 블록을 열어서 내용을 채워주면 된다.<br>Swing에서 1회성(하나의 버튼에서만 쓰인다거나) 이벤트 핸들러를 쓸 때 이걸 많이 썼던 것 같다.  </p><h2 id="Constant-Pool"><a href="#Constant-Pool" class="headerlink" title="Constant Pool"></a>Constant Pool</h2><p>DB의 Connection Pool 마냥 상수를 모아놓은 곳인 것 같다.  </p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring) 스타트 스프링 부트 002일차 - Hibernate와 MySQL 연결하기</title>
      <link href="/2017/08/03/Spring-boot-study-002day/"/>
      <url>/2017/08/03/Spring-boot-study-002day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Spring-boot-study-002day/thumb.png" alt="">  </p><p>Hibernate를 써보자! (feat. MySQL)</p><h2 id="의존성-추가-build-gradle"><a href="#의존성-추가-build-gradle" class="headerlink" title="의존성 추가(build.gradle)"></a>의존성 추가(build.gradle)</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-jdbc'</span>)</span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="DB-정보-입력-및-하이버네이트-설정"><a href="#DB-정보-입력-및-하이버네이트-설정" class="headerlink" title="DB 정보 입력(및 하이버네이트 설정)"></a>DB 정보 입력(및 하이버네이트 설정)</h2><p>/src/main/resources/application.properties에 정보를 입력해주자.<br>이 DB 정보 입력을 datasource 지정이라고 하는 것 같다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/db?useSSL=false</span><br><span class="line">spring.datasource.username=id</span><br><span class="line">spring.datasource.password=pw</span><br><span class="line"></span><br><span class="line"># 스키마 생성(create)</span><br><span class="line">spring.jpa.hibernate.ddl-auto=create</span><br><span class="line"># DDL 생성 시 데이터베이스 고유의 기능을 사용하는가?</span><br><span class="line">spring.jpa.generate-ddl=false</span><br><span class="line"># 실행되는 SQL문을 보여줄 것인가?</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line"># 데이터베이스는 무엇을 사용하는가?</span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line"># 로그 레벨</span><br><span class="line">logging.level.org.hibernate=info</span><br><span class="line"># MySQL 상세 지정</span><br><span class="line">spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure><p>필요한 정보들은 알아서 수정하자.  </p><h2 id="JPA로-엔티티-만들기"><a href="#JPA로-엔티티-만들기" class="headerlink" title="JPA로 엔티티 만들기"></a>JPA로 엔티티 만들기</h2><ol><li>SQL로 테이블 만들고 엔티티 클래스 만들기  </li><li>JPA를 통해 클래스만 설계하고 자동으로 테이블 생성하기  </li></ol><p>이 중에 후자를 택했다. (책에서)</p><ul><li><p>엔티티 클래스 설계(VO 만들기, model)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long bno;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String Writer;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Timestamp regdate;</span><br><span class="line">    <span class="keyword">private</span> Timestamp updatedate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JPA를 위한 어노테이션 추가  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.CreationTimestamp;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.UpdateTimestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tbl_boards"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long bno;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String Writer;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Timestamp regdate;</span><br><span class="line">    <span class="meta">@UpdateTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Timestamp updatedate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>@Table vs @Entity</strong><br>나는 엔티티 == 테이블이라고 알고 있어서 두 어노테이션의 차이점이 뭐가 있나 싶었는데<br>@Table은 테이블에 관한 정보를 기술한 어노테이션이고,<br>@Entity는 이 클래스의 인스턴스가 엔티티임을 명시해주는 거란다.  </p><h2 id="EntityScan"><a href="#EntityScan" class="headerlink" title="@EntityScan"></a>@EntityScan</h2><p>나는 다른 패키지에 엔티티 클래스를 만들고 ComponentScan을 했는데 안 되서 구글링 해보니 @EntityScan 어노테이션을 써야하는 거였다.<br>Controller와 Model을 import하는 어노테이션이 따로 있는 줄은 몰랐다.<br>사실 스프링이며 JPA며 다 어제 처음 접한 거니 모르는 거 투성이다.<br>근본 없이, 이해 없이 본다 하더라도 나중엔 피와 살이 되겠지 ㅠㅠ… </p><h2 id="Failed-to-start-connector-Connector-HTTP-1-1-8080"><a href="#Failed-to-start-connector-Connector-HTTP-1-1-8080" class="headerlink" title="Failed to start connector [Connector[HTTP/1.1-8080]]"></a>Failed to start connector [Connector[HTTP/1.1-8080]]</h2><p>해당 포트를 이미 사용 중이라는데 IDE 다 껐는데도 종종 살아있는 서버가 있는갑다 ㅠㅠ<br>아래 명령어로 pid를 확인하고 kill해주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :8080</span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure><h2 id="테이블의-수동-생성-VS-자동-생성"><a href="#테이블의-수동-생성-VS-자동-생성" class="headerlink" title="테이블의 수동 생성 VS 자동 생성"></a>테이블의 수동 생성 VS 자동 생성</h2><p>일단은 JPA에 익숙하지 않으니 자동으로 생성해보면서 익숙해지자!<br>큰 규모의 프로젝트라면 테이블을 별도로 생성하고 코드를 작성하는 것이 일반적이란다!</p><h2 id="엔티티와-엔티티-매니저"><a href="#엔티티와-엔티티-매니저" class="headerlink" title="엔티티와 엔티티 매니저"></a>엔티티와 엔티티 매니저</h2><ul><li>엔티티: DB 상에서 데이터로 관리하는 대상<br>‘상품’, ‘회사’, ‘직원’ 등과 같이 명사인 것들(아마 테이블로 뽑아낼 수 있는 걸 얘기하는 듯…?)<br>DB에서는 엔티티를 위해 테이블을 설계하고 데이터를 추가하는데 이렇게 추가된 <strong>데이터</strong>를 <strong>인스턴스 혹은 레코드</strong>라고 부란다.<br>상품, 회사 이것들 하나 하나가 엔티티 타입이 되며 이 <strong>엔티티 타입을 생성한다</strong>는 의미는 하나의 <strong>클래스를 작성한다</strong>는 의미가 된다.<br>또한 JPA에서의 <strong>엔티티</strong>는 하나의 <strong>클래스(엔티티 타입, 테이블)</strong>이 될 때도 있고 하나의 <strong>인스턴스(레코드)</strong>를 뜻할 때도 있다.  </li><li>엔티티 매니저: 여러 엔티티 객체(아마 인스턴스이지 않을까…)들을 관리하는 역할을 한다.<br>여기서 말하는 <strong>관리</strong>는 <strong>라이프 사이클</strong>이라고 할 수 있다.(고 한다.)<br>엔티티 매니저는 자기가 관리해야하는 엔티티 객체를 <strong>Persistence Context(영속 컨텍스트)</strong>라는 곳에 넣고 객체들의 생사(라이프 사이클)을 관리한다.  </li></ul><h2 id="엔티티-객체-생명주기"><a href="#엔티티-객체-생명주기" class="headerlink" title="엔티티 객체 생명주기"></a>엔티티 객체 생명주기</h2><p><img src="entity_lifecycle.jpg" alt="엔티티 인스턴스의 라이프 사이클">  </p><ul><li>New(비영속): Java 영역에 객체만 존재하고, DB와 연동된 적이 없는 상태.<br>엔티티 매니저의 관리 하에 있는 게 아니기 때문에 순수한 Java 객체  </li><li>Managed(영속): DB에 저장되고 <strong>메모리 상에서도 같은 상태</strong>로 존재하는 상태.<br>객체는 영속 컨텍스트 내에 들어가게 되고 PK를 통해 엔티티 객체를 꺼내 사용할 수 있다.  </li><li>Removed(삭제): DB에서 삭제된 상태, 객체는 더 이상 영속 컨텍스트에 존재하지 않는다.  </li><li>Detached(준영속): 영속 컨텍스트에서 엔티티 객체를 꺼내서 사용하는 상태.<br>고유한 PK는 있지만, 아직 DB와 동기화가 이루어지지 않은 상태.   </li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Hibernate </tag>
            
            <tag> MySQL </tag>
            
            <tag> Entity Lifecycle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자료구조) Vector vs ArrayList vs LinkedList</title>
      <link href="/2017/08/02/vector-array-list-linked-list/"/>
      <url>/2017/08/02/vector-array-list-linked-list/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/vector-array-list-linked-list/thumb.png" alt=""></p><p>위 개념들은 일단 자바에 존재한다. (다른 거에도 다 존재하려나…?)<br>비슷비슷해서 각각의 차이점이 궁금해서 정리해보았다.  </p><p>일단 이 포스트에서 소개하는 자료구조들은 Array의 다음과 같은 단점들을 극복하고자 나왔다.    </p><ol><li>길이가 한정적이라 길이를 넘어서게 되면 새로 배열을 만들고 복사를 한 후에 새로운 값을 넣어야한다는 굉장히 큰 비용을 지불해야한다.  </li><li>똑같은 타입의 요소들만 들어간다.</li></ol><a id="more"></a><h2 id="차이점"><a href="#차이점" class="headerlink" title="차이점"></a>차이점</h2><ol><li>Vector<br>Java1 버전 대에서 제일 먼저 등장해서 아무도 없을 때는 요놈만 썼다.<br>또한 동기화를 보장해주어 <strong>공유 자원</strong>이나 <strong>복수의 사용자</strong>가 존재할 때 좀 더 안전하게 프로그램을 작성할 수 있다.<br>하지만 <strong>하나의 스레드가 하나의 자원을 이용하는 경우</strong>에는 오히려 성능의 저하가 발생한다.<br>또한 공간이 모자를 때 <strong>모자른 공간x2</strong> 만큼의 공간을 확보하기 때문에 메모리를 많이 잡아먹는다는 단점도 존재한다.  </li><li>ArrayList<br>Array 라는 이름이 들어갔다싶이 <strong>인덱스를 가지고 있어서 검색에 용이</strong>하다.<br>하지만 삽입/삭제를 하려면 중간에 이빨 나간 곳을 전부 한칸씩 땡기거나 뒤로 밀어야하기 때문에  </li></ol><p><strong>삽입과 삭제가 빈번한 데이터인 경우에는 부적합</strong>하다.<br>Vector와 달리 동기화를 보장해주지 못하고, 공간이 모자를 때는 모자른 만큼만 공간을 확보한다.<br>3. LinkedList<br>노드(데이터와 다음 노드로 연결시킬 주소지)들이 줄줄이 연결된 녀석이다.<br>맨 마지막에 있는 녀석을 검색해야한다면 처음부터 끝까지 노드를 타고 줄줄이 이동해야해서 <strong>검색에는 적합하지 않다</strong>.<br>하지만 삭제/삽입을 할 때는 중간에 해당 노드의 주소지만 바꿔주면 되므로 <strong>삽입/삭제가 빈번한 데이터에 적합</strong>하다.</p><h2 id="ArrayList-vs-LinkdedList"><a href="#ArrayList-vs-LinkdedList" class="headerlink" title="ArrayList vs LinkdedList"></a>ArrayList vs LinkdedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayLinked</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">add</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) list.add(i + <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">add2</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) list.add(<span class="number">500</span>, <span class="string">"X"</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">remove</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = list.size()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) list.remove(i);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">remove2</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) list.remove(i);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">access</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) list.get(i);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList a = <span class="keyword">new</span> ArrayList(<span class="number">200000</span>);</span><br><span class="line">        LinkedList b = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        System.out.println(<span class="string">"순차적으로 추가하기"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ArrayList: "</span> + add(a) + <span class="string">"ms 소요"</span>); <span class="comment">// 44ms</span></span><br><span class="line">        System.out.println(<span class="string">"LinkedList: "</span> + add(b) + <span class="string">"ms 소요"</span>); <span class="comment">// 21ms</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"중간에 추가하기"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ArrayList: "</span> + add2(a) + <span class="string">"ms 소요"</span>); <span class="comment">// 272ms</span></span><br><span class="line">        System.out.println(<span class="string">"LinkedList: "</span> + add2(b) + <span class="string">"ms 소요"</span>); <span class="comment">// 18ms</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"중간에 제거하기"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ArrayList: "</span> + remove2(a) + <span class="string">"ms 소요"</span>); <span class="comment">// 259ms</span></span><br><span class="line">        System.out.println(<span class="string">"LinkedList: "</span> + remove2(b) + <span class="string">"ms 소요"</span>); <span class="comment">// 458ms</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"순차적으로 삭제하기"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ArrayList: "</span> + remove(a) + <span class="string">"ms 소요"</span>); <span class="comment">// 5ms</span></span><br><span class="line">        System.out.println(<span class="string">"LinkedList: "</span> + remove(b) + <span class="string">"ms 소요"</span>); <span class="comment">// 15ms</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        add(a);</span><br><span class="line">        add(b);</span><br><span class="line">        System.out.println(<span class="string">"접근 속도 테스트"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ArrayList: "</span> + access(a) + <span class="string">"ms 소요"</span>); <span class="comment">// 1ms</span></span><br><span class="line">        System.out.println(<span class="string">"LinkedList: "</span> + access(b) + <span class="string">"ms 소요"</span>); <span class="comment">// 283ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><ul><li><a href="http://seeit.kr/36" rel="external nofollow noopener noreferrer" target="_blank">Java 의 Vector 와 ArrayList , Linked List 의 차이점</a>  </li><li><a href="https://stackoverflow.com/questions/2986296/what-are-the-differences-between-arraylist-and-vector" rel="external nofollow noopener noreferrer" target="_blank">What are the differences between ArrayList and Vector?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> Vector </tag>
            
            <tag> ArrayList </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 012일차 - 다형성(클래스, 매개변수, 인터페이스), 참조타입의 형변환, 추상 클래스, 인터페이스, 단일 상속과 다중 상속</title>
      <link href="/2017/08/02/Java-study-012day/"/>
      <url>/2017/08/02/Java-study-012day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-012day/thumb.png" alt=""></p><h2 id="다형성-Polymorphism"><a href="#다형성-Polymorphism" class="headerlink" title="다형성(Polymorphism)"></a>다형성(Polymorphism)</h2><p>객체지향 개념에서 다형성이란 <strong>여러 가지 형태를 가질수 있는 능력</strong>을 의미함.<br>자바에서는 한 타입의 참조 변수로 여러 타입의 객체를 참조할 수 있도록 함으로써 다형성을 프로그램적으로 구현함.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> power;</span><br><span class="line">    <span class="keyword">int</span> channel;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelUp</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelDown</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptionTV</span> <span class="keyword">extends</span> <span class="title">TV2</span> </span>&#123;</span><br><span class="line">    String text;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">caption</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV2 t = <span class="keyword">new</span> TV2();</span><br><span class="line">        CaptionTV c = <span class="keyword">new</span> CaptionTV();</span><br><span class="line">        TV2 t2 = <span class="keyword">new</span> CaptionTV();</span><br><span class="line">        </span><br><span class="line">        System.out.println(c.text);</span><br><span class="line">        <span class="comment">// System.out.println(t2.text); TV2에 생성된 것만 참조 가능.</span></span><br><span class="line">        <span class="comment">// CaptionTV c2 = new TV2(); CaptionTV보다 TV2가 가진 멤버가 더 적어서 생성 불가능.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>다음과 같은 특성을 지닌다.<br><code>참조변수 a = new 인스턴스타입()</code> 을 기준으로 설명한다.</p><ol><li>기본적으로는 참조변수와 인스턴스의 타입이 일치하는 걸 많이 쓴다.  </li><li>참조 변수 보다 인스턴스 타입의 멤버가 더 범위가 넓어야한다.<br><code>TV2 t2 = new CaptionTV();</code><br>참조변수: 부모, 인스턴스 타입: 자식 -&gt; 가능, 부모의 멤버만 참조가 가능하다.<br><code>CaptionTV c2 = new TV2();</code><br>참조변수: 자식, 인스턴스 타입: 부모 -&gt; 불가능, 참조변수의 멤버를 모두 충족하지 못한다.  </li></ol><p>그럼 <code>TV2 t = new TV2();</code>와 <code>TV2 t = new CaptionTV();</code> 차이점이 궁금할텐데 차차 보도록 하자.  </p><h2 id="참조-변수의-형변환-Casting"><a href="#참조-변수의-형변환-Casting" class="headerlink" title="참조 변수의 형변환(Casting)"></a>참조 변수의 형변환(Casting)</h2><p>기본값과 마찬가지로 참조타입도 형변환이 가능하다.<br>하지만 제약이 있는데 상속 관계에 있는 녀석들끼리만 가능하다.<br>또한 부모의 부모로 형변환도 가능하므로 모든 클래스는 Object 클래스를 상속 받고 있으므로 Object 클래스로 형변환이 가능하다.<br>참조 변수의 캐스팅의 특징은 다음과 같다.  </p><ol><li>자식 -&gt; 부모(Up-casting): 형변환 생략 가능<br>자식이 부모의 모든 걸 상속 받았으므로 자식이 더 범위가 넓다고 판단하여 손실이 없다고 판단하는지 형변환의 생략이 가능하다.  </li><li>부모 -&gt; 자식(Down-casting): 형변환 생략 불가능  </li></ol><p>우리 눈으로 보기에는 형제 관계도 있을 것 같은데 자바에서는 형제 관계가 존재하지 않아 형제 사이에 형변환은 불가능하다.<br>그럼 <code>TV2 t = new TV2();</code>와 <code>TV2 t = new CaptionTV();</code> 차이점을 알아보자.<br>사실 <code>TV2 t = new CaptionTV();</code>는 다음을 줄인 것이다.<br><code>TV2 t = (TV2)new CaptionTV();</code> 업 캐스팅이므로 형변환이 생략돼있던 것이다.<br>이걸 또 풀어쓰면 다음과 같다.  </p><ol><li><code>CaptionTV c = new CaptionTV();</code></li><li><code>TV2 t = (TV2)c</code><br>역시 업캐스팅이므로 TV2는 생략이 가능하다.  </li></ol><p>그럼 위와 같은 차이점으로 인해 무엇이 달라진단 말인가?<br>아래의 예제를 살펴보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> power;</span><br><span class="line">    <span class="keyword">int</span> channel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelUp</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelDown</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptionTV</span> <span class="keyword">extends</span> <span class="title">TV2</span> </span>&#123;</span><br><span class="line">    String text;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">caption</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV2 t = <span class="keyword">new</span> TV2();</span><br><span class="line">        TV2 t2 = <span class="keyword">new</span> CaptionTV();</span><br><span class="line">        <span class="comment">// t는 TV2 인스턴스여서 TV2의 멤버만 가지고 있으므로 CaptionTV 타입을 커버할 수가 없다.</span></span><br><span class="line">        <span class="comment">// 컴파일 시에는 올바른 형변환으로 보지만 런타임에서 체크 해보면 부모가 자식을 커버할 수 없는 원리와 같다.</span></span><br><span class="line">        <span class="comment">// CaptionTV c = (CaptionTV)t;</span></span><br><span class="line">        <span class="comment">// System.out.println(c.text);</span></span><br><span class="line">        <span class="comment">// t2는 CaptionTV 인스턴스를 강제로 TV2로 업캐스팅 해서 일단 CaptionTV 멤버를 들고는 있는데</span></span><br><span class="line">        <span class="comment">// 접근만 못할 뿐이라 CaptionTV 타입을 커버할 수 있다.</span></span><br><span class="line">        CaptionTV c2 = (CaptionTV)t2;</span><br><span class="line">        System.out.println(c2.text); <span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇듯 부모 클래스에서 자식 클래스로 형변환이 가능하지만<br>부모 인스턴스 타입에서 자식 참조 타입으로 변환하지는 못한다.<br>이 말을 풀어 쓰면  </p><ol><li><code>TV2 t = new TV2();</code><br>부모 참조 타입에 부모 인스턴스면<br><code>CaptionTV c = (CaptionTV)t;</code><br>자식의 참조 타입으로 변환하지 못한다.  </li><li><code>TV2 t = new CaptionTV();</code><br>부모 참조 타입에 자식 인스턴스면<br><code>CaptionTV c = (CaptionTV)t;</code><br>자식의 참조 타입으로 변환 가능하단 소리다.  </li></ol><h2 id="instanceof-연산자"><a href="#instanceof-연산자" class="headerlink" title="instanceof 연산자"></a>instanceof 연산자</h2><p>자스와 비슷하다고 보면 되고, null인 참조 변수는 항상 false를 반환한다.<br>음… 말로 설명하기 까다로우니 다음 예제를 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> power;</span><br><span class="line">    <span class="keyword">int</span> channel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelUp</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelDown</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptionTV</span> <span class="keyword">extends</span> <span class="title">TV2</span> </span>&#123;</span><br><span class="line">    String text;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">caption</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CaptionTV c2 = <span class="keyword">new</span> CaptionTV();</span><br><span class="line">        System.out.println(c2 <span class="keyword">instanceof</span> CaptionTV); <span class="comment">// true</span></span><br><span class="line">        System.out.println(c2 <span class="keyword">instanceof</span> TV2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(c2 <span class="keyword">instanceof</span> Object); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참조변수와-인스턴스의-연결"><a href="#참조변수와-인스턴스의-연결" class="headerlink" title="참조변수와 인스턴스의 연결"></a>참조변수와 인스턴스의 연결</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"asdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"qwer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"x="</span>+x); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">"this.x="</span>+<span class="keyword">this</span>.x); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">"super.x="</span>+<span class="keyword">super</span>.x); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"zxcv"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parent p = <span class="keyword">new</span> Child(); <span class="comment">// (Parent)new Child();</span></span><br><span class="line">        <span class="comment">// 인스턴스 변수인 x는 참조타입인 Parent를 따른다.</span></span><br><span class="line">        System.out.println(p.x); <span class="comment">// 10</span></span><br><span class="line">        <span class="comment">// static 변수인 y는 참조타입인 Parent를 따른다.</span></span><br><span class="line">        System.out.println(p.y); <span class="comment">// 10</span></span><br><span class="line">        <span class="comment">// static 메소드인 method2는 참조타입인 Parent를 따른다.</span></span><br><span class="line">        p.method2();</span><br><span class="line">        <span class="comment">// 인스턴스 메소드인 method는 인스턴스 타입인 Child를 따른다.</span></span><br><span class="line">        p.method();</span><br><span class="line">        </span><br><span class="line">        Child c = <span class="keyword">new</span> Child();</span><br><span class="line">        <span class="comment">// 인스턴스 변수인 x는 참조타입인 Child를 따른다.</span></span><br><span class="line">        System.out.println(c.x); <span class="comment">// 20</span></span><br><span class="line">        <span class="comment">// static 변수인 y는 참조타입인 Child를 따른다.</span></span><br><span class="line">        System.out.println(c.y); <span class="comment">// 30</span></span><br><span class="line">        <span class="comment">// static 메소드인 method2는 참조타입인 Child를 따른다.</span></span><br><span class="line">        c.method2(); <span class="comment">// zxcv</span></span><br><span class="line">        <span class="comment">// 인스턴스 메소드인 method는 인스턴스 타입인 Child를 따른다.</span></span><br><span class="line">        c.method(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>참조타입에 좌지우지 되지 않고 뚝심있게 인스턴스 타입으로 밀고나가는 것은 인스턴스 메소드 밖에 없다.<br>static 타입도 참조타입에 좌지우지 되므로 인스턴스.멤버 말고 <code>클래스.멤버</code>로 적어주는 것이 좋다.</p><h2 id="매개변수의-다형성"><a href="#매개변수의-다형성" class="headerlink" title="매개변수의 다형성"></a>매개변수의 다형성</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> bonusPoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Radio</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> bonusPoint = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Computer c)</span> </span>&#123;</span><br><span class="line">        money -= c.price;</span><br><span class="line">        bonusPoint += c.bonusPoint;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Radio r)</span> </span>&#123;</span><br><span class="line">        money -= r.price;</span><br><span class="line">        bonusPoint += r.bonusPoint;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제품이 추가될 때 마다 계속해서 메소드를 오버로딩할 것인가…?<br>아래와 같이 다형성을 이용하면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> bonusPoint = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Product p)</span> </span>&#123;</span><br><span class="line">        money -= p.price;</span><br><span class="line">        bonusPoint += p.bonusPoint;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Radio r)</span> </span>&#123; <span class="comment">// 따로 처리하고 싶은 녀석만 따로 빼면 된다.</span></span><br><span class="line">        money -= r.price;</span><br><span class="line">        bonusPoint += r.bonusPoint;</span><br><span class="line">        System.out.println(<span class="string">"asdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buyer b = <span class="keyword">new</span> Buyer();</span><br><span class="line">        b.buy(<span class="keyword">new</span> Radio()); <span class="comment">// "asdf"까지 무사 출력된다.  </span></span><br><span class="line">        System.out.println(b.money); <span class="comment">// 900으로 까였다.</span></span><br><span class="line">        b.buy(<span class="keyword">new</span> Computer());</span><br><span class="line">        System.out.println(b.money); <span class="comment">// 800으로 까였다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Product의 instanceof로 자식 클래스들이 전부 걸리므로 저기서도 전부 매칭이 된다.<br>매개변수의 다형성이 저렇게 부모 클래스로 추상화시키는 것이라면 메소드의 다형성은 오버로딩이려나…??  </p><h2 id="여러-종류의-객체를-배열로-다루기"><a href="#여러-종류의-객체를-배열로-다루기" class="headerlink" title="여러 종류의 객체를 배열로 다루기"></a>여러 종류의 객체를 배열로 다루기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Product의 instanceof에 걸리므로 이렇게도 할 수 있다.</span></span><br><span class="line">        <span class="comment">// 물론 배열 내부에 있는 애들은 부모 타입으로 업캐스팅 된다. (형변환 연산자는 생략된 것임)</span></span><br><span class="line">        Product[] p = &#123;<span class="keyword">new</span> Computer(), <span class="keyword">new</span> Radio(), <span class="keyword">new</span> Radio()&#125;;</span><br><span class="line">        <span class="comment">// 배열은 길이가 고정적인데 반해 벡터는 10개는 기본이고, 그 이후에는 계속해서 추가된다.</span></span><br><span class="line">        <span class="comment">// 이러한 단점을 극복한 게 Vector이다. Vector는 객체 배열이다.</span></span><br><span class="line">        <span class="comment">// 따라서 클래스의 인스턴스 멤버들을 사용하려면 다운캐스팅 해줘야한다.  </span></span><br><span class="line">        <span class="comment">// System.out.println(((Audio)p[3]).volume);</span></span><br><span class="line">        Vector&lt;Product&gt; v = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        v.add(<span class="keyword">new</span> Computer());</span><br><span class="line">        v.add(<span class="keyword">new</span> Radio());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="추상-클래스-abstract-class"><a href="#추상-클래스-abstract-class" class="headerlink" title="추상 클래스(abstract class)"></a>추상 클래스(abstract class)</h2><p>미완성 클래스(설계도)이다.<br>틀만 그려놓고 자식이 상속받아서 구현하라는 뜻이다.<br>이 클래스를 가지고는 인스턴스를 생성하지 못한다.<br>백지에서 클래스를 설계하기 보다는 공통된 요소를 모아논 추상 클래스를 만들고 여기 저기서 상속 받아서 클래스를 작성하면 훨씬 수월할 것이다.<br>추상 메소드가 있으면 abstract 키워드를 붙여 상속 받아서 완성시켜야할 놈이 있다고 명시적으로 알려주는 게 좋다.<br>abstract에는 미완성인 녀석만 있는 게 아니라 생성자나 메소드 등등 다 가지고 있을 수 있다.<br>심지어 일반 클래스도 그냥 abstract 키워드를 붙여 추상 클래스로 만들 수 있는데 이렇게되면 직접 인스턴스 생성을 하지 못한다.<br>상속이 자식 클래스를 만드는데 부모 클래스(공통 부분)를 이용하는 것이라면,<br>추상화는 부모 클래스(공통 부분)을 만드는데 자식 클래스(여러 자식에서 공통되는 부분들을 추출)를 이용한다.<br>추상화는 클래스 간의 공통점을 찾아내서 공통의 조상을 만드는 작업이라고 할 수 있고,<br>구체화는 상속을 통해 클래스를 구현, 확장하는 작업이라고 할 수 있다.</p><h2 id="추상-메소드-abstract-method"><a href="#추상-메소드-abstract-method" class="headerlink" title="추상 메소드(abstract method)"></a>추상 메소드(abstract method)</h2><p>일반적인 클래스에는 존재할 수 없다.<br>몸통이 없으므로 <code>abstract void a();</code>와 같이 세미콜론을 찍어주고 {} 블록이 없다.<br>일반 메소드와 달리 추상 메소드는 무조건 오버라이딩 해줘야 오류가 발생하지 않는다.  </p><h2 id="인터페이스-Interface"><a href="#인터페이스-Interface" class="headerlink" title="인터페이스(Interface)"></a>인터페이스(Interface)</h2><p>추상 클래스보다 추상화 정도가 훨씬 높다.<br>인터페이스는 추상 메소드와 상수만 존재할 수 있다.  </p><p>그리고 인터페이스 멤버의 제약 사항은 다음과 같다.  </p><ol><li>모든 멤버변수는 public static final이어야 하면 생략 가능하다.  </li><li>모든 메소드는 public abstract이어야 하며 생략 가능하다</li><li>Java8부터 static 메소드와 default 메소드도 가능해졌다.</li></ol><p>인터페이스의 상속은 다른 인터페이스로부터만 가능하며 다중 상속이 가능하다.<br>인터페이스는 클래스의 Object와 같은 최고 조상이 없다.<br>인터페이스의 모든 메소드들을 구현해야하는데 일부만 구현하는 클래스는 abstract 키워드를 붙여 추상 클래스로 만들어주면된다.<br>인터페이스는 주로 ~able로 끝나는 것들이 많다.<br>그 이유는 어떤 기능 또는 행위를 하는데 필요한 메소드를 제공한다는 의미를 지니기 때문이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TT</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public abstract void a();</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">TT</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 구현부는 원본보다 접근 지정자가 넓어야한다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="다중-상속"><a href="#다중-상속" class="headerlink" title="다중 상속?"></a>다중 상속?</h2><p>다중 상속을 하면 멤버(변수, 메소드) 명의 충돌 위험이 존재한다는 단점이 존재해서 Java에서는 지원하지 않는다.<br>하지만 다른 객체 지향 언어인 C++에서는 지원하는데 반해 Java에서는 지원하지 않자 이게 단점처럼 지적을 받았다.<br>그러다보니 마케팅(?)을 위해서인지 Java에서도 인터페이스를 통해 다중 상속(구현)을 지원하기 시작했는데 실제로 인터페이스를 다중 상속하는 경우는 드물단다.  </p><h2 id="인터페이스의-다형성"><a href="#인터페이스의-다형성" class="headerlink" title="인터페이스의 다형성"></a>인터페이스의 다형성</h2><p>클래스에서 부모 타입으로 자식 인스턴스를 생성하듯,<br>인터페이스에서도 인터페이스 타입으로 인터페이스를 구현한 클래스의 인스턴스를 생성할 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fightable 인터페이스에 존재하는 멤버들만 사용이 가능한다.</span></span><br><span class="line">Fightable f = <span class="keyword">new</span> Fighter(); <span class="comment">// (Fightable)new Fighter();와 동일.</span></span><br></pre></td></tr></table></figure><p>그 진가는 아래 예제를 통해 발동한다.<br>instanceof 연산자는 자기 자신, 부모, 조상, 추상 클래스, 인터페이스에 모두 걸리는 모양이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMLParser</span> <span class="keyword">implements</span> <span class="title">Parseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(fileName + <span class="string">" - XML parsing completed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLParser</span> <span class="keyword">implements</span> <span class="title">Parseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        System.out.println(fileName + <span class="string">" - HTML parsing completed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Parseable <span class="title">getParser</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">"XML"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> XMLParser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HTMLParser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parseable parser = ParserManager.getParser(<span class="string">"XML"</span>);</span><br><span class="line">        parser.parse(<span class="string">"document.xml"</span>); <span class="comment">// document.xml - XML parsing completed.</span></span><br><span class="line">        parser = ParserManager.getParser(<span class="string">"HTML"</span>);</span><br><span class="line">        parser.parse(<span class="string">"document.html"</span>); <span class="comment">// document.html - HTML parsing completed.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>매개변수와 리턴타입으로 인터페이스가 올 수 있는데 이는 <strong>해당 인터페이스를 구현한 클래스의 인스턴스</strong>를 의미한다.<br>그래서 Parseable라는 인터페이스 타입에 XMLParser나 HTMLParser 인스턴스를 모두 저장할 수 있는 것이다.<br>이러한 장점은 분산환경 프로그래밍에서 그 위력을 발휘한다.<br>사용자가 컴퓨터에 설치된 프로그램을 변경하지 않고 서버측의 변경만으로도 사용자는 변경된 프로그램을 사용할 수 있게 된다라고 하는데 뭔 소린지 모르겠다.  </p><h2 id="기본-메소드와-static-메소드"><a href="#기본-메소드와-static-메소드" class="headerlink" title="기본 메소드와 static 메소드"></a>기본 메소드와 static 메소드</h2><p>Java8에 들어와서 기본 메소드가 등장했다.<br>인터페이스에 메소드가 하나 추가되면 모든 구현체 클래스에 해당 메소드를 구현해야한다는 부담이 생긴다.<br>따라서 아래와 같이 하면 기본적인 메소드가 생겨서 굳이 구현을 하지 않아도 오류가 생기지 않는다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">newMethod</span><span class="params">()</span></span>&#123;&#125; <span class="comment">// public default void newMethod()&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>static 메소드는 인스턴스와 관계가 없는 독립적인 메소드이기 때문에 인터페이스에 넣지 않을 이유가 없다는데 그게 무슨 상관인지 모르겠다.  </p><p>만약 여러 인터페이스에서 default 메소드가 중복된다면 구현하는 클래스에서 오버라이딩해야하고,<br>부모 클래스와 default 메소드 간에 충돌이 일어나면 디폴트 메소드는 무시되고 부모 클래스의 메소드를 상속받는다.  </p><h2 id="내부-클래스"><a href="#내부-클래스" class="headerlink" title="내부 클래스"></a>내부 클래스</h2><p>클래스에 다른 클래스를 선언하는 이유는 두 클래스가 서로 긴밀한 관계가 있기 때문이다.<br>내부 클래스를 선언하면 두 클래스 멤버 사이에 서로 쉽게 접근할 수 있고, 외부에 불필요한 데이터를 감춤으로써<br>코드의 복잡성을 줄일 수 있다. (캡슐화)  </p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Spring Boot) 스타트 스프링 부트 001일차 - 스프링(부트), 빌드툴, VO, Lombok, 어노테이션, Jackson, ORM, JPA, Hibernate</title>
      <link href="/2017/08/02/Spring-boot-study-001day/"/>
      <url>/2017/08/02/Spring-boot-study-001day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Spring-boot-study-001day/thumb.png" alt=""><br>자바에 대한 근본도 없고, MVC, Servelet/JSP에 대한 이해도 제대로 없는데 이런 걸 해도 될런지 모르겠지만… 일단은 시작!<br>나머지는 병행해가면서 해보자…  </p><h2 id="스프링-vs-스프링-부트"><a href="#스프링-vs-스프링-부트" class="headerlink" title="스프링 vs 스프링 부트"></a>스프링 vs 스프링 부트</h2><ul><li>스프링: 프론트로 치면 웹팩, 바벨, 걸프 설정 등등을 처음부터 내가 다 짜줘야함.  </li><li>스프링 부트: CRA(Create React App) or Vue-CLI와 같이 알아서 설정을 도와줌.<br>IntelliJ에서 프로젝트를 만들 때 Sprign Initializer를 선택하면 된다.<br>보이지 않는다면 최신버전으로 업뎃하고 플러그인에서 Spring Boot가 제대로 설치/활성화 됐는지 확인하자.  </li></ul><a id="more"></a><h2 id="스프링이란"><a href="#스프링이란" class="headerlink" title="스프링이란?"></a>스프링이란?</h2><p>1.0이 2004년에 나왔고 2011년에는 3.x가 나왔다.<br>처음에는 light-weight(경량)화됐으나 지금은 매우 무겁다…<br>Servlet/JSP에서 진보된 웹 개발 방식?이라고 해야하려나…<br>여튼 스프링은 프레임워크이다.<br>스프링 부트는 루비의 RoR(Ruby on Rails), 파이썬의 Flask, Django 등의 마이크로 프레임워크를 보고 영감을 얻은 것 같다.<br>이런 마이크로 프레임워크들은 프로젝트 생성과 동시에 필요한 라이브러리를 초기화 해주며, 템플릿 등을 제공해줘 개발의 생산성을 높였다.<br>스프링 부트는 기존 스프링의 복잡한 설정 과정이나 버전 충돌 등의 불편한 점을 제거하고 빠르고 쉬언 서버/테스트 환경을 제공해준다.<br>또한 내부에 WAS(Web Application Server)인 Tomcat을 내장하고 있어서 따로 Tomcat을 설치할 필요가 없는 것 같다.  </p><h2 id="Ant-Maven-Gradle"><a href="#Ant-Maven-Gradle" class="headerlink" title="Ant, Maven, Gradle"></a>Ant, Maven, Gradle</h2><p>나중에 더 자세히 조사해봐야겠지만 일단은 정리.<br>빌드 툴이란다.<br>빌드는 컴파일 내에 속하는 것(?) 같은데 그 중간에 해줘야하는 복잡한 과정들을 기술한 것 같다.<br>프론트로 치면 Task Runner인 Gulp와 Grunt, 그리고 npm scripts 정도…??<br>또한 이 안에는 의존성이 주입(?)된 라이브러리도 기술돼있으므로 npm도 포함하는 개념인 것 같다.<br>프론트도 d3 홈페이지가서 js 파일 받고, jQuery 홈페이지가서 js 파일 받고 수동으로 해서 이걸 편하게 하기 위해(?) npm이 나왔 듯<br>백엔드도 라이브러리 홈피가서 zip 파일 받아서 zip 파일 풀고 jar 파일 import 하는 게 귀찮아서인지 이런 툴들이 나온 것 같다.  </p><h2 id="Java-Bean-VS-VO-Variable-Object"><a href="#Java-Bean-VS-VO-Variable-Object" class="headerlink" title="Java Bean VS VO(Variable Object)"></a>Java Bean VS VO(Variable Object)</h2><p>Java Bean은 일종의 스펙이고 VO는 특정한 의도를 달성하기 위해 Java Bean을 준수한 것 같다.  </p><p>Java Bean은 다음과 같은 스펙을 준수한 클래스를 칭하는 것 같다.(내가 아는 수준만 적어보았다.)  </p><ol><li>모든 변수는 private 접근 지정자를 지정해줘야한다.  </li><li>해당 변수에 접근하기 위한 getter와 setter가 있어야한다.  </li></ol><p>이외에도 더 많은 것 같은데 나중에 다시 한 번 공부를 해보고 지금 내가 당장 이해한 수준은 위와 같다.  </p><p>VO는 Java Bean 스펙을 준수했는데 값 자체를 나타내며 불변(immutable)이란다.<br>또 아래 내용을 인용했는데 이쪽이 더 이해하기 쉬운 것 같다.<br>출처: <a href="https://okky.kr/article/271453" rel="external nofollow noopener noreferrer" target="_blank">vo하고 bean의 차이가 무엇인가요?</a></p><blockquote><blockquote><p>자바 빈은 특정 형태의 클래스를 가르키는 말이고 VO는 주로 계층형 구조에서 계층간 값을 전달하기 위해 자바 빈의 형태로 구현한 클래스입니다.<br>그래서 지금 시점에서는 그냥 퍼블릭 생성자와 속성(컨벤션에 맞는 getter/setter 조합)을 갖는 클래스를 가르키는 뜻으로 쓰이는 만큼, POJO(Plain Old Java Object)와도 거의 동일한 개념으로 이해해도 무방합니다.</p></blockquote></blockquote><h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>이것도 라이브러리? 플러그인? 같은데 Sass가 CSS 전처리기라면 Lombok은 어노테이션 전처리기란다.<br>프로젝트를 만들 때 Core에서 Lombok을 설정해줘야한다.<br>IntelliJ에서 플러그인에서 설치를 해줘야하고(그래야 IDE에서 오류로 처리하지 않는다. 아마…??),<br>또 실제로 작동하게 하려면 Setting으로 가서 … &gt; Compiler &gt; Annotation Processors로 가서 Enable 시켜주기.    </p><p>일반 IDE에서는 아래와 같이 getter와 setter를 자동으로 만들어주기도 해서 굳이 Lombok을 쓸 필요가 있냐고 주장하는 사람도 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleVO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String val1;</span><br><span class="line">    <span class="keyword">private</span> String val2;</span><br><span class="line">    <span class="keyword">private</span> String val3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal1</span><span class="params">(String val1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val1 = val1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal2</span><span class="params">(String val2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val2 = val2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal3</span><span class="params">(String val3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val3 = val3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVal1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVal2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVal3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lombok을 쓰면 아래와 같이 간단해진다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleVO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String val1;</span><br><span class="line">    <span class="keyword">private</span> String val2;</span><br><span class="line">    <span class="keyword">private</span> String val3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 Lombok을 쓰면 Setter에 로직을 심을 수 없다는 단점이 존재해서 간단한 getter/setter나 기타 어노테이션 정도만 써야겠다.<br>기타 어노테이션은 <a href="http://lahuman.jabsiri.co.kr/124" rel="external nofollow noopener noreferrer" target="_blank">(Lombok)사용 설명</a>을 참고하자.  </p><h2 id="스프링의-어노테이션"><a href="#스프링의-어노테이션" class="headerlink" title="스프링의 어노테이션"></a>스프링의 어노테이션</h2><p>ES.Next에도 어노테이션과 비슷한 데코레이터라는 게 있는데 아직도 어떻게 동작하는지 제대로 이해하지 못했다.<br>자바의 정석을 차근차근 진도 빼면서 익혀봐야겠다.<br>아 그리고 클래스나 메소드를 감싸(?)는 게 어노테이션이므로 클래스와 메소드를 먼저 작성하고 추후에 어노테이션을 뭘 쓸지 고민하고 사용하자.<br>여튼 스프링에서 REST API를 구현하기 위해 사용한 어노테이션을 조금 익혀보자.  </p><ul><li><p>@RestController<br>컨트롤러 클래스에 붙이는 어노테이션, REST API를 담당하는 Controller라는 뜻인 것 같다.<br>또한 이렇게 하면 스프링의 빈(Bean)으로 등록된단다.<br>기존 스프링에서는 어노테이션을 사용해도 &lt;component-scan&gt; 등과 같은 별도의 설정이 필요했지만 스프링 부트에서는 그런 귀찮은 작업이 필요없다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@ComponentScan<br>만약 스프링 앱(main 메소드가 있고 run 하는 *.java 파일)과 같은 패키지, 혹은 자식패키지에 존재하지 않고 다른 패키지에 존재한다면<br>해당 어노테이션을 사용해서 클래스들을 스프링에 인식시켜야한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.example.demo"</span>, <span class="string">"com.example.exo"</span>,&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>주의 사항으로 @ComponentScan 어노테이션을 쓰지 않으면 현재 패키지 내에 있는 모든 클래스를 스프링에 등록하지만<br>@ComponentScan을 사용해서 다른 패키지를 등록하는 순간 현재 패키지는 제외된다.<br>따라서 @ComponentScan 어노테이션을 사용한다고 하면 현재 패키지까지 추가를 무조건 해줘야한다.</p><ul><li>@GetMapping<br>REST API 중 http method인 get에 매핑되는 녀석에 해당하는 어노테이션이다.<br>@PostMapping, @PutMapping, @DeleteMapping도 물론 존재한다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exo.vo.SampleVO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h2><p>VO의 toString()한 일반 문자열을 JSON 형태로 뿌려주는 라이브러리인 것 같다.<br>Spring Boot에서 기본적으로 깔린다.  </p><h2 id="JPA와-Hibernate"><a href="#JPA와-Hibernate" class="headerlink" title="JPA와 Hibernate"></a>JPA와 Hibernate</h2><p>JPA는 Java Persistence API의 줄임말이고, 이 JPA를 스프링에서 쓰기 편하게 한 라이브러리가 Spring Data JPA이다.  </p><p>그럼 Hibernate는 무엇일까?<br>이 관계를 ECMAScript와 Javascript로 풀어보았다.<br>ECMAScript는 스펙이고 Javascript는 그 스펙을 준수해서 구현한 구현체(?)이다.<br>JPA는 스펙이고 Hibernate는 그 스펙을 준수해서 구현한 구현체(?)이다.<br>맞을라나 모르겠다.<br>Hibernate 말고 JPA의 구현체는 EclipseLink, DataNucleus 등등이 있다.  </p><p>그럼 이 JPA는 뭘까? ORM을 자바라는 언어로 구현(?)한 것이라고 나는 본다.<br>ORM(Object Relational Mapping)은 객체지향에서 말하는 객체와 DB에서 말하는 개체가 상당히 유사하다는 입장에서 시작했다.<br>회원정보를 객체(클래스)로 표현한 것과 개체(Entity, DB의 Table이라고 보면 될 것 같다)로 표현한 것이 매우 유사하다는 점이다.<br>이러한 ORM은 언어에 종속적인 게 아니라서 Java에서는 JPA가 있 듯이, Javascript 진영에는 <a href="http://docs.sequelizejs.com/" rel="external nofollow noopener noreferrer" target="_blank">Sequelize</a>라는 녀석이 존재한다.  </p><p>마지막으로 ORM의 장단점을 정리해보자.  </p><ul><li><p>장점  </p><ol><li>DB 관련 코드에 대해 유연함을 얻을 수 있다.<br>DB가 변경되면 우리가 사용하는 Java 코드도 다 고쳐야하는데 ORM을 이용하면 모델 부분?만 고쳐주면 된단다.  </li><li>DB와 독립적 관계이다.<br>RDB, NoSQL을 가리치 않는다는 소리 같다.  </li><li>Join 관계가 매우 복잡해지면 쌩 SQL보다 가독성이 좋다고 한다.  </li></ol></li><li><p>단점  </p><ol><li>학습 곡선(Learning curve)가 크다.  </li><li>객체 지향에 대한 이해가 제대로 돼야 제대로 된 설계가 가능하다.  </li><li>특정 DB의 특성을 이용할 수 없다.<br>장점의 2를 보면 특정 DB에 의존적이지 않다는 것은 특정 DB의 특성을 이용하지 않고 범용적인 부분만 사용한다는 것이다.<br>이러한 특성을 못 살리다 보니 튜닝이라던지 퍼포먼스 측면에서 Natvie SQL보다는 구리다는 단점이 존재한다.<br>따라서 ORM과 Native SQL을 케바케로 잘 섞어 써야하는 것 같다.  </li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Hibernate </tag>
            
            <tag> JPA </tag>
            
            <tag> ORM </tag>
            
            <tag> VO </tag>
            
            <tag> Bean </tag>
            
            <tag> Lombok </tag>
            
            <tag> Jackson </tag>
            
            <tag> Ant </tag>
            
            <tag> Maven </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 011일차 - 상속과 포함, 오버라이딩, super, 패키지와 클래스, 접근 지정자</title>
      <link href="/2017/08/01/Java-study-011day/"/>
      <url>/2017/08/01/Java-study-011day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-011day/thumb.png" alt=""></p><h2 id="연습문제-실수"><a href="#연습문제-실수" class="headerlink" title="연습문제 실수"></a>연습문제 실수</h2><ul><li><p>기존의 코드를 재사용할 수 있으면 하자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SutdaCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isKwang = <span class="keyword">false</span>;</span><br><span class="line">    SutdaCard() &#123;</span><br><span class="line">        <span class="comment">// 이 한줄로 커버 되고 이래야 유지보수 측면에서도 용이하다.</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// num = 1;</span></span><br><span class="line">        <span class="comment">// isKwang = true;</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    SutdaCard(<span class="keyword">int</span> num, <span class="keyword">boolean</span> isKwang) &#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">        <span class="keyword">this</span>.isKwang = isKwang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>형변환<br>10f와 10.0f는 동일하니 쓸 데 없는 .0을 안 찍도록 하자.</p></li><li><p>지역변수</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>args도 지역변수다.<br>또한 main은 <strong>변수</strong>가 아니라 <strong>(클래스) 메소드</strong>이다.<br>자바스크립트에서는 함수를 변수에 담을 수 있어서 함수도 변수의 범주 안에 속하고,<br>함수와 메소드가 유사한 측면을 갖고 있다보니 main 메소드도 static 키워드를 썼으므로 클래스 변수인 줄 알았는데 아니었다.  </p><ul><li>String vs StringBuffer<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str += <span class="string">"456"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        str.append(<span class="string">"456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"ABC123"</span>;</span><br><span class="line">        System.out.println(str); <span class="comment">// ABC123</span></span><br><span class="line">        change(str);</span><br><span class="line">        System.out.println(<span class="string">"After change:"</span>+str); <span class="comment">// ABC123</span></span><br><span class="line">        StringBuffer str2 = <span class="keyword">new</span> StringBuffer(<span class="string">"ABC123"</span>);</span><br><span class="line">        System.out.println(str2); <span class="comment">// ABC123</span></span><br><span class="line">        change(str2);</span><br><span class="line">        System.out.println(<span class="string">"After change:"</span>+str2); <span class="comment">// ABC123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>String 클래스는 참조타입임에도 불구하고 내용을 변경할 수 없기 때문에 ABC123456이라는 새로운 변수를 지역변수 str에 만들고<br>메소드 종료와 더불어 해당 지역변수도 날아가서 원하는 결과가 나오지 않는다.<br>따라서 원하는 결과를 얻어내려면 return으로 반환 값을 받아오거나 StringBuffer 클래스를 이용해야한다.  </p><h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><p>생성자와 초기화 블럭은 상속되지 않고, 멤버(변수, 메소드)만 상속된다.<br>접근 지정자가 private 또는 default는 상속은 받되, 자식 클래스에서 직접적인 접근이 불가능하다.  </p><h2 id="포함-Composite"><a href="#포함-Composite" class="headerlink" title="포함(Composite)"></a>포함(Composite)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int x, y, r;</span></span><br><span class="line">    Point p = <span class="keyword">new</span> Point();</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 단위별로 클래스를 여러 개로 쪼개면 조합해서 사용할 수도 있어서 유지보수(재사용성, 적은 변경사항) 측면에서 뛰어나다.  </p><h2 id="extends-vs-composite"><a href="#extends-vs-composite" class="headerlink" title="extends vs composite"></a>extends vs composite</h2><ul><li>원은 점이다. - Circle is a Point, 상속(extends)  </li><li><strong>원은 점을 가지고 있다. - Circle has a Point, 포함(composite)</strong></li></ul><h2 id="toString-메소드"><a href="#toString-메소드" class="headerlink" title="toString() 메소드"></a>toString() 메소드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"asdf"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Card c = <span class="keyword">new</span> Card();</span><br><span class="line">      System.out.println(c.toString()); <span class="comment">// "asdf"</span></span><br><span class="line">      System.out.println(c); <span class="comment">// "asdf"</span></span><br><span class="line">      System.out.println(<span class="string">"qwer"</span> + c); <span class="comment">// "qwerasdf"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.lang.Object 클래스에 있는 메소드를 오버라이딩한 것이다.<br>모든 객체(클래스, 인스턴스)는 Object 클래스를 상속 받는다.  </p><h2 id="단일-상속-single-inheritance"><a href="#단일-상속-single-inheritance" class="headerlink" title="단일 상속(single inheritance)"></a>단일 상속(single inheritance)</h2><p>또 다른 객체지향 언어인 C++에서는 다중 상속을 허용하지만, 자바는 그렇지 않다.<br>다중 상속을 하면 복합적인 기능을 가진 클래스를 쉽게 작성할 수 있다는 장점이 존재하지만,<br>클래스 간의 관계가 복잡해질 수 있고, 다른 클래스로부터 상속받은 멤버간의 이름이 같으면 구별할 수 있는 방법이 없다.<br>static 멤버야 클래스 이름을 붙여서 구분이 가능하지만 인스턴스 멤버는 그렇지 않다.<br>다중 상속의 장점을 포기했지만, 그럼으로 인해서 클래스 간의 관계가 명확해지고 코드의 신뢰도가 올라간다는 장점이 존재한다.  </p><p>물론 아래와 같이 다중 상속을 흉내낼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> power;</span><br><span class="line">    <span class="keyword">int</span> channel;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelUp</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channelDown90</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VCR</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> power;</span><br><span class="line">    <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rew</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ff</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TVCR</span> <span class="keyword">extends</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    VCR vcr = <span class="keyword">new</span> VCR();</span><br><span class="line">    <span class="keyword">int</span> counter = vcr.counter;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vcr.play();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vcr.stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vcr.rew();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vcr.ff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>TVCR은 TV이다. (상속)  </li><li>TVCR은 VCR을 가지고 있다. (포함)</li></ol><p>위 관계를 잘 활용하면 다중 상속과 같은 효과를 낼 수 있다.<br>TVCR.play는 사실 VCR 클래스의 play 메소드를 실행하고 있다.  </p><h2 id="오버라이딩-overriding"><a href="#오버라이딩-overriding" class="headerlink" title="오버라이딩(overriding)"></a>오버라이딩(overriding)</h2><p>발음상 overwrite(오버라이트)와 override(오버라이드)가 비슷하다.<br>따라서 override는 덮어쓴다고 생각하면 될 것 같다.<br><strong>부모 클래스의 메소드를 재정의</strong>하는 것이다.</p><p>조건은 아래와 같다.  </p><ol><li>이름이 같아야한다.  </li><li>매개변수가 같아야한다.  </li><li>반환타입이 같아야한다.<br>Java5부터는 자손 클래스의 타입으로 변경하는 것이 가능하게 되었다.<br>covariant return type이라고도 부른다.(공변, 함께 변하는 이라는 뜻)  </li></ol><p>즉 선언부는 아예 일치해야한다는 뜻이다.<br>하지만 접근 지정자와 예외 처리는 예외이다.</p><ul><li><p>부모 클래스 보다 접근 지정자가 넓어야한다. 보통은 같은 걸 쓴다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// private가 protected 보다 범위가 좁아서 오류가 난다.</span></span><br><span class="line">    <span class="comment">// private void a()&#123;&#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>부모 클래스보다 예외 처리할 수 있는 경우가 적어야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SQLException </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 단순 갯수의 문제가 적어야하는 게 아니라 경우의 수의 문제이다.</span></span><br><span class="line">    <span class="comment">// Exception은 모든 예외의 경우를 커버하므로 경우의 수가 부모보다 훨씬 많다.</span></span><br><span class="line">    <span class="comment">// protected void a() throws Exception &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>인스턴스 메소드 &lt;-&gt; static 메소드가 불가능하다.<br>또한 부모 클래스의 static 메소드를 자식 클래스에서 static 메소드로 선언하는 것은 각 클래스에 별개의 static 메소드를 선언하는 것이므로 오버라이딩은 아니다.  </p></li></ul><h2 id="오버로딩-vs-오버라이딩"><a href="#오버로딩-vs-오버라이딩" class="headerlink" title="오버로딩 vs 오버라이딩"></a>오버로딩 vs 오버라이딩</h2><ol><li>오버로딩(new): 기존에 없던 새로운 메소드(이름만 같은)를 선언하는 것  </li><li>오버라이딩(modify): 상속받은 메소드를 수정하는 것</li></ol><h2 id="super-vs-this"><a href="#super-vs-this" class="headerlink" title="super vs this"></a>super vs this</h2><p>this가 인스턴스 자기 자신을 가리키는 참조 변수이듯, super는 상속받은 부모 인스턴스를 가리키는 참조 변수이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"x="</span>+x); <span class="comment">// 10</span></span><br><span class="line">        System.out.println(<span class="string">"this.x="</span>+<span class="keyword">this</span>.x); <span class="comment">// 10</span></span><br><span class="line">        System.out.println(<span class="string">"super.x="</span>+<span class="keyword">super</span>.x); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child c = <span class="keyword">new</span> Child();</span><br><span class="line">        c.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>읭? 뭐지? 싶으면 아래를 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"x="</span>+x); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">"this.x="</span>+<span class="keyword">this</span>.x); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">"super.x="</span>+<span class="keyword">super</span>.x); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child c = <span class="keyword">new</span> Child();</span><br><span class="line">        c.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>매개변수와 인스턴스 변수를 구분할 때 this를 썼 듯이,<br>부모 인스턴스 변수와 자식 인스턴스 변수를 구분할 때 super를 사용하면 유용하다.<br>물론 변수 뿐만 아니라 메소드도 가능하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function">String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x: "</span> + x + <span class="string">", y: "</span> + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point3D</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    <span class="function">String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return "x: " + x + ", y: " + y + ", z: " + z;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getLocation() + <span class="string">", z: "</span> + z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this-vs-super"><a href="#this-vs-super" class="headerlink" title="this() vs super()"></a>this() vs super()</h2><p>this()는 같은 클래스 내의 생성자를 호출하기 위해 사용하는 데 비해,<br>super()는 부모 클래스의 생성자를 호출하기 위해 사용된다.<br>this와 마찬가지로 super도 제일 첫 줄에 호출해야하는데<br>자식 클래스가 부모 클래스의 멤버를 사용했을 수도 있으므로<br>먼저 부모 클래스의 생성자를 호출해서 멤버들을 초기화시켜야한다.<br>자식 생성자에서 다른 생성자(super()나 this())가 없는 경우에는 컴파일러가 자동으로 super()를 삽입한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Point3D p = <span class="keyword">new</span> Point3D(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(p.x + <span class="string">", "</span> + p.y + <span class="string">", "</span> + p.z); <span class="comment">// 1, 2, 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아무것도 상속받지 않으면 컴파일러가 자동적으로 extends Object를 붙여준다.</span></span><br><span class="line"><span class="comment">// 그래서 equals()나 toString() 같은 메소드는 모든 클래스에서 사용이 가능한 것이다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="comment">// super();</span></span><br><span class="line">        <span class="comment">// 여기에도 마찬가지로 다른 생성자(this()나 super())가 없으므로 자동으로 super()가 삽입된다.</span></span><br><span class="line">        <span class="comment">// 아마 최상위 부모인 Object까지 타고 가지 않을까 싶다.</span></span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point3D</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    Point3D(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z) &#123;</span><br><span class="line">        <span class="comment">// super()가 자동으로 삽입되지만 부모 클래스에는 Point() 생성자는 없고 Point(int x, int y) 생성자만 존재한다.</span></span><br><span class="line">        <span class="comment">// this.x = x;</span></span><br><span class="line">        <span class="comment">// this.y = y;</span></span><br><span class="line">        <span class="keyword">super</span>(x, y);</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>따라서 Point3D 클래스의 인스턴스의 생성 순서는 다음과 같다.  </p><ol><li>Point3D(int x, int y, int z)  </li><li>Point(int x, int y)  </li><li>Object()</li></ol><h2 id="패키지와-클래스"><a href="#패키지와-클래스" class="headerlink" title="패키지와 클래스"></a>패키지와 클래스</h2><p>클래스: 물리적으로 하나의 파일(*.class)<br>패키지: 물리적으로 하나의 디렉토리<br>java.lang.String -&gt; java 패키지(디렉토리) 안에 lang 패키지(디렉토리) 안에 String 클래스(파일)<br>패키지(디렉토리)가 다르면 클래스(파일)명은 같아도 된다.  </p><p>모든 클래스는 반드시 패키지 안에 속해야하며 패키지를 명시하지 않으면 default package로 같은 패키지 안에 속하게 된다.  </p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>import 문은 다른 패키지에 있는 클래스를 사용할 때 패키지 명을 붙이지 않고 사용할 수 있게 해준다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import 문을 많이 쓰거나 import java.util.* 처럼 *을 썼다고 해서 실행할 때 퍼포먼스 상 차이는 없다.<br>단지 컴파일 시간이 조금 더 오래 걸릴 뿐이다.<br>하지만 *을 쓰면 어떤 패키지의 클래스인지 구분하기 어려울 때가 있다.<br>또한 *은 클래스에만 매칭되지 하위 패키지까지 매칭되는 것은 아니다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 하면 java 패키지의 클래스만 매칭되지  </span></span><br><span class="line"><span class="comment">// java 패키지 내부에 있는 util 패키지까지 import 되는 것은 아니다.  </span></span><br><span class="line"><span class="keyword">import</span> java.*;</span><br></pre></td></tr></table></figure><p><strong>같은 패키지 내의 클래스들은 import 없이도 사용이 가능하다!</strong></p><p>또한 System이나 String 클래스는 어떻게 패키지를 import하지 않고도 사용이 가능했던 걸까?<br>같은 패키지 내의 클래스는 import 없이 사용 가능하다는데 그럼 모든 패키지에는 System이나 String 과 관련된 패키지가 삽입된 걸까?  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 컴파일러가 자동적으로 아래와 같은 import 문을 삽입해주기 때문이다.</span></span><br><span class="line"><span class="comment">// 해당 패키지의 클래스들은 매우 빈번하게 사용하기 때문이다.</span></span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br></pre></td></tr></table></figure><h2 id="static-import-문"><a href="#static-import-문" class="headerlink" title="static import 문"></a>static import 문</h2><p>import를 하면 패키지명을 생략할 수 있듯이<br>static 키워드를 사용하면 클래스명을 생략할 수 있다.<br>단 export 한 녀석은 public static이어야한다.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="comment">// 아래와 같이 하면 Math 클래스의 모든 public static 메소드(random, ceil, abs 등등)에서 Math 클래스를 생략 가능하다.  </span></span><br><span class="line"><span class="comment">// import static java.lang.Math.*;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System과 Math가 생략이 가능해졌다.</span></span><br><span class="line">        out.println(random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그냥 import는 package.*로 해서 모든 클래스들을 불러와서 패키지 명을 생략가능하게 했다면<br>static import는 package.class.*로 해서 클래스 내의 모든 멤버를 불러와서 클래스 명을 생략 가능하게 했다고 알아두면 될 것 같다.   </p><h2 id="클래스-멤버-vs-인스턴스-멤버"><a href="#클래스-멤버-vs-인스턴스-멤버" class="headerlink" title="클래스 멤버 vs 인스턴스 멤버"></a>클래스 멤버 vs 인스턴스 멤버</h2><p>멤버: 변수, 메소드<br>클래스 멤버는 static 멤버라고도 부른다.<br>인스턴스 멤버를 사용하지 않는 인스턴스 메서드는 static 메서드로 바꾸는 걸 고려해보자.  </p><p>다음과 같은 장점이 있다.  </p><ol><li>클래스가 메모리에 로드될 때 단 한번만 수행된다.  </li><li>인스턴스를 생성하지 않고 호출이 가능하다.  </li><li>더 편리하고 속도도 더 빠르다.  </li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>변수 -&gt; 상수로 만들어버림.  </li><li>메소드 -&gt; 오버라이딩이 불가능해짐.  </li><li>클래스 -&gt; 상속받지 못하는 클래스가 됨.  </li></ul><p>예외로 인스턴스 변수는 상수로 선언만 했을 때는 생성자 함수에서 초기화가 가능하다.<br>그 이유는 생성자 함수에서 초기화가 불가능하다면 모든 인스턴스마다 같은 인스턴스 상수를 갖게 될 것이기 때문이다.<br>인스턴스 상수도 일단은 인스턴스 변수이니 인스턴스마다 다른 값을 가져야 의미가 있는 것이지 다 같은 값을 가지면 static 변수와 큰 차이점이 없게 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">    Test2() &#123;</span><br><span class="line">        x = <span class="number">10</span>; <span class="comment">// 초기화 되지 않은 상수를 초기화 시켜주지 않고 방치하면 오류가 발생한다.</span></span><br><span class="line">        <span class="comment">// y = 20; 초기화만 가능하지 재할당은 불가능하다.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// x = 22; 생성자 함수 이외에는 불가능하다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="접근-지정자"><a href="#접근-지정자" class="headerlink" title="접근 지정자"></a>접근 지정자</h2><table><thead><tr><th>제어자</th><th>같은 클래스</th><th>같은 패키지</th><th>자식 클래스</th><th>전체</th></tr></thead><tbody><tr><td>public</td><td>O</td><td>O</td><td>O</td><td>O</td></tr><tr><td>protected</td><td>O</td><td>O</td><td>O</td><td>X</td></tr><tr><td>(default)</td><td>O</td><td>O</td><td>X</td><td>X</td></tr><tr><td>private</td><td>O</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><table><thead><tr><th>대상</th><th>사용 가능한 접근 지정자</th></tr></thead><tbody><tr><td>클래스</td><td>public, (default)</td></tr><tr><td>멤버</td><td>public, protected, (default), private</td></tr><tr><td>지역변수</td><td>없음</td></tr></tbody></table><p>접근 지정자를 사용하는 이유는 다음과 같다.  </p><ol><li>외부로부터 데이터를 보호하기 위해서  </li><li>외부에는 불필요하고 내부적으로만 사용하는 부분들을 감추기 위해서<br>이러한 것들을 캡슐화(encapsulation)이라고 부른다.<br>데이터가 유효한 값을 유지하고, 비밀번호 같은 데이터를 외부에서 함부로 변경하지 못하게 하기 위함.<br>이렇게 접근 범위를 축소해나가다 보면 테스트를 할 때도 다른 패키지들을 다 커버할 필요없이 해당 코드가 접근 가능한 부분들만 테스트하면 되니 유지보수 측면에서도 용이하다.<br>또한 getter와 setter를 써서 변수의 유효성 검사도 할 수 있다.  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hour;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHour</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hour &gt; <span class="number">0</span> &amp;&amp; hour &lt; <span class="number">24</span>) <span class="keyword">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Time t = <span class="keyword">new</span> Time();</span><br><span class="line">        <span class="comment">// t.hour = 25; 접근지정자가 없으면 유효한 시간 값인지 검사할 방법이 없다.</span></span><br><span class="line">        t.setHour(<span class="number">25</span>);</span><br><span class="line">        System.out.println(t.getHour()); <span class="comment">// 0</span></span><br><span class="line">        t.setHour(<span class="number">11</span>);</span><br><span class="line">        System.out.println(t.getHour()); <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 생성자에 접근 제어자를 사용하면 <a href="https://blog.seotory.com/post/2016/03/java-singleton-pattern" rel="external nofollow noopener noreferrer" target="_blank">싱글톤 패턴</a>을 구현할 수 있다.<br>싱글톤: 해당 클래스의 인스턴스가 하나만 만들어지고, 어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 싱글톤 객체는 상속이 불가능하다.</span></span><br><span class="line"><span class="comment">// 왜냐하면 자식 클래스에서 부모 클래스의 생성자 호출이 불가능하기 때문이다.</span></span><br><span class="line"><span class="comment">// 따라서 명시적으로 final 키워드를 붙여서 상속이 불가능한 클래스라는 것을 표기해주는 게 좋다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Singleton s = new Singleton(); private이므로 다른 클래스에서 생성자에 접근 불가</span></span><br><span class="line">        <span class="comment">// 클래스의 인스턴스를 얻으려면 이미 static 변수에 저장된 동일한 인스턴스만 불러오면 된다.</span></span><br><span class="line">        Singleton s = Singleton.getInstance();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 다음과 같은 주의사항이 있다.  </p><ol><li>메소드에 static과 abstract를 함께 사용할 수 없다.<br>abstract는 몸통이 없는 불완전한 애이고, static은 클래스가 로딩되자마자 메모리에 적재되므로<br>구현이 안 된 애를 메모리에 적재할 수는 없다.  </li><li>클래스에도 abstract와 final을 함께 사용할 수 없다.<br>abstract는 선언부만 던져주고 상속받아서 알아서 구현하라는 키워드인데<br>final 키워드를 붙여 상속이 불가능하게 만들면 모순되는 말이다.  </li><li>메소드에 abstract와 private를 함께 사용할 수 없다<br>abstract는 선언부만 던져주고 상속받아서 알아서 구현하라는 키워드인데<br>private 키워드는 그 상속받은 자식 클래스에서 조차 접근이 불가능하므로 모순되는 말이다.  </li><li>메소드에 private과 final을 같이 사용할 필요는 없다.<br>private인 메소드는 자식에서도 접근이 불가능하기 때문에 오버라이딩 될 수 없다. 이미 둘 다 같은 역할을 하기 때문에 하나만 사용하면 된다.  </li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자작) Hexo theme overdose starter</title>
      <link href="/2017/07/22/hexo-theme-overdose-starter/"/>
      <url>/2017/07/22/hexo-theme-overdose-starter/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/hexo-theme-overdose-starter/thumb.png" alt="이 테마에 중독될지도 모르니 주의 해야한다!"><br><a href="https://github.com/perfectacle/hexo-theme-overdose-starter" rel="external nofollow noopener noreferrer" target="_blank">깃헙 저장소로 바로가기</a></p><h2 id="만든-계기"><a href="#만든-계기" class="headerlink" title="만든 계기"></a>만든 계기</h2><p>기본적으로 헥소로 블로그 테마를 얹히는 것은 크게 어렵지 않다.<br>하지만 적용한 테마를 깃헙에 올리고 다른 컴퓨터에서 다운받으려고 하면 참담한 결과를 맞이하게 된다.<br><img src="/images/hexo-theme-overdose-starter/01.png" alt="내가 여태까지 커스터마이징 한 테마 어디갔어!?"><br>이유는 다음 스크린샷을 보면 알게 된다.<br><img src="/images/hexo-theme-overdose-starter/02.png" alt="우리가 관리하는 블로그 프로젝트 안에 테마 프로젝트가 또 git으로 관리되고 있기 때문이다."><br>이러한 문제점은 모든 테마에서 발생하고 있으며 .git 폴더를 삭제하면 해결되는 문제이다.<br>하지만 이미 컴퓨터를 포맷한 이후라면 여태까지 커스터마이징한 내역을 복구가 불가능할 것이다. (지못미 ㅠㅠ)<br>물론 .gitignore도 삭제해야 우리가 여태까지 테마를 커스터마이징한 설정 파일인 _config.yml까지 형상관리가 가능하게 된다.  </p><a id="more"></a><h3 id="overdose-테마의-문제점"><a href="#overdose-테마의-문제점" class="headerlink" title="overdose 테마의 문제점"></a>overdose 테마의 문제점</h3><p>일단 한국인이 만들었고, 테마도 깔끔하다는 점은 굉장히 높게 평가할만 하다.<br>하지만 다음과 같은 문제점이 존재한다.  </p><p><strong>overdose에서 사용하는 패키지 중에 Node 8을 지원하지 않는 패키지가 있는데 명시돼있지 않다! (Node 7 버전 이하만 사용 가능한 테마이다.)</strong></p><p>또한 테마를 설치하고 테마의 디렉토리로 이동해서 항상 아래 명령어를 입력해주어야한다.(<a href="https://github.com/HyunSeob/hexo-theme-overdose/blob/master/package.json" rel="external nofollow noopener noreferrer" target="_blank">packge.json</a> 참조)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">clone</span></span><br></pre></td></tr></table></figure><p>해당 명령어는 다음과 같은 역할을 한다.  </p><ol><li><a href="https://github.com/spoqa/spoqa-han-sans" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/spoqa/spoqa-han-sans</a> 저장소를 source/libs/spoqa-han-sans 폴더로 클론한다.<br>이 과정이 제일 문제가 많다. 해당 저장소를 가보면 Original과 VFB_FILES 디렉토리를 보면 폰트 개발자나 관심있을 법한 폰트 관련한 파일들이 존재한다.<br>우리에게 필요한 것은 웹폰트와 css 파일이 전부인데 쓸 데 없는 파일까지 클론을 받게 되는 것이다.<br>뭐 이게 무슨 대수냐고 볼 수도 있는데 두 디렉토리의 용량이 각각 238MiB와 195MiB에 달한다.<br>테마의 국제화를 겨냥한 것인지 일본어 폰트까지 제공해주는 테마에서 이렇게 큰 용량은 인터넷 속도가 빠른 한국에서도 부담이 될 수 밖에 없는 용량이다.  </li><li><a href="https://github.com/hyunseob/noto-sans-kr" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/hyunseob/noto-sans-kr</a> 저장소를 source/libs/noto-sans-kr 폴더로 클론한다.<br>이 과정에서는 2MiB 정도의 데이터만 다운받기 때문에 큰 시간은 소요되지 않는다.  </li></ol><p>하지만 위 과정에도 역시나 문제는 존재한다.<br><img src="/images/hexo-theme-overdose-starter/03.png" alt="내 폰트 어디갔어?!"><br>이유는 바로 클론을 받았기 때문에 해당 디렉토리 내에도 .git 디렉토리가 존재한다.<br>따라서 .git 디렉토리를 지워주고 다시 올려야 나중에 클론할 때도 폰트 파일까지 정상적으로 받아오게 된다.<br><del>물론 폰트파일만 400MiB가 넘을테지만…</del></p><p>아마 최신의 폰트를 제공하고자 해당 저장소의 내용을 내포하고 있는 게 아니라 클론시키게 하다보니 이런 문제점이 발생하는 것 같다.<br>하지만 해당 폰트는 CJK(중국, 일본, 한국) 계열에서나 쓸 법한 폰트지 그 이외의 국가에서는 사용하지 않을 법 하므로 필수적으로 설치하지 않게 한 것은 높은 점수를 줄만하다.</p><h2 id="그래서-어떻게-해결했나"><a href="#그래서-어떻게-해결했나" class="headerlink" title="그래서 어떻게 해결했나?"></a>그래서 어떻게 해결했나?</h2><ol><li>overdose 테마가 저장소에 올라가지 않던 문제<br>테마를 커스터마이징한 내역을 내포하게 끔 하다보니 내가 작업한 현 시점의 overdose 최신 테마를 stater 저장소에 추가하였다.<br>v0.2.8이 최신이지만, 내가 업데이트하지 않는 한 해당 테마의 최신버전을 따라서 업데이트가 되긴 힘들 것이다.  </li><li>spoqa-han-sans 폰트의 용량이 400MiB가 넘어가던 문제<br>이건 최소한으로 용량을 줄이고자 웹폰트(*.ttf 제외, 용량이 커서…)와 css 파일만 따로 뺀 저장소를 <a href="https://github.com/perfectacle/spoqa-han-sans-kr" rel="external nofollow noopener noreferrer" target="_blank">한국어</a>, <a href="https://github.com/perfectacle/spoqa-han-sans-jp" rel="external nofollow noopener noreferrer" target="_blank">일본어</a> 버전으로 만들었다.<br>이것도 내가 spoqa-han-sans의 업데이트에 발맞춰 갱신하지 않는 이상은 해당 버전과 발맞춰 따라가기가 힘들 것이다.  </li><li>설치한 폰트가 저장소에 올라가지 않던 문제<br>이 문제는 클론 받는 대신에 그냥 저장소 자체에 폰트 파일을 내장하면 되지만 그렇게 되면 두 가지 문제점이 존재한다.  <ol><li>폰트를 최신 버전이 아닌 내가 저장소에 추가한 시점의 폰트만 사용이 가능하다. (그렇다고 해서 내가 폰트 파일을 계속 업데이트 할 지는 모르겠지만…)  </li><li>CJK 계열이 아닌 다른 국가에서도 해당 폰트를 필수로 설치해야한다. (용량이 20MiB에 달한다. 일어만 16MiB…)</li></ol></li></ol><p>따라서 해당 문제는 클론을 받되 해당 디렉토리의 .git을 삭제하는 단계를 거치도록 하였다.<br>물론 명령어로 해결하면 되지만, 윈도우 유저와 Mac 폴더 삭제부터 명령어 차이가 나기 때문에(npm scripts에서 구분은 불가능한 걸로 알고 있다.)<br>node에서 지우도록 rm-git.js라는 파일을 만들었다. 클론이 끝난 이 후에 이 파일을 실행하게 된다.  </p><p>또한 폰트 설치 옵션을 다음과 같이 세분화하였다.<br>왜냐하면 noto-sans-kr이나 spoqa-han-sans-kr은 각각 2MiB 남짓이라 크게 부담되지 않을 수 있는데,<br>spoqa-han-sans-jp는 한자 때문인지 16MiB에 달해 부담이 될만한 용량이라 각각 나눠놨다.  </p><ol><li>noto-sans-kr</li><li>spoqa-han-sans-kr</li><li>spoqa-han-sans-jp</li><li>한국어 폰트(noto-sans-kr, spoqa-han-sans-kr),</li><li>Spoqa 폰트(spoqa-han-sans-kr, spoqa-han-sans-jp),</li><li>모든 폰트(noto-sans-kr, spoqa-han-sans-kr, spoqa-han-sans-jp)</li></ol><h2 id="추가된-사항"><a href="#추가된-사항" class="headerlink" title="추가된 사항"></a>추가된 사항</h2><ul><li>정적인 html 파일들만 버전관리가 되는 문제<br><img src="/images/hexo-theme-overdose-starter/04.png" alt="읭? 내가 md로 작성한 포스트 파일은 어디로...?"><br>기존 헥소 블로그에는 위와 같은 고질적인 문제가 존재한다.<br>따라서 나는 이러한 문제를 해결하고자 과거에는 md나 기타 파일들을 관리하는 저장소를 따로 팠었는데 그냥 브랜치를 하나 파서 하나의 저장소에서 관리하게끔 하였다.<br>그리고 새로 만든 브랜치를 default 브랜치로 정해놓으면 더 편하다.<br><img src="/images/hexo-theme-overdose-starter/05.png" alt="gh-pages라는 브랜치를 새로 파서 거기서 기타 파일들을 버전관리">  </li><li>포트폴리오를 블로그 위에 얹기<br>원래 깃헙 페이지는 블로그가 메인이 아니라 정적 페이지를 서비스하는 게 메인인 것으로 알고 있다. (아닌가…?)<br>그럼 블로그 위에 포트폴리오도 얹을 수 있다는 발상이 떠오르게 된다.<br><img src="/images/hexo-theme-overdose-starter/06.png" alt="/source/_static 디렉토리 안에 포트폴리오들을 얹으면 된다."><br>물론 포트폴리오는 웹서버나 DB를 사용하지 않는 동적인 페이지만 가능하다. (예를 들면 홈페이지나 웹 어플리케이션)<br>이 디렉토리에 있는 파일들은 아래와 같이 접근이 가능하다.<br><img src="/images/hexo-theme-overdose-starter/07.png" alt="물론 자신의 깃헙 페이지에서도 확인이 가능하다.">  </li><li>SEO 친화적으로 만들기(검색 엔진에 노출 잘 되게 만들기)  </li></ul><ol><li><a href="https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-seo-friendly-sitemap</a>을 이용하여 사이트맵 만들기.  </li><li><a href="https://github.com/hexojs/hexo-generator-feed" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-feed</a>을 이용하여 RSS Feed를 만들기.  </li><li><a href="https://github.com/liuzc/hexo-autonofollow" rel="external nofollow noopener noreferrer" target="_blank">hexo-autonofollow</a>를 이용하여 크롤러를 위해 외부 링크에는 nofollow 속성이 달리게 끔 하기.  </li><li>대표 URL(선호 URL)을 지정해주는 canonical 속성 추가하기.</li></ol><h2 id="남은-과제"><a href="#남은-과제" class="headerlink" title="남은 과제"></a>남은 과제</h2><p>overdose 테마의 컨트리뷰터가 되어 이렇게 스타터 저장소를 만들 게 아니라<br>근본적인 문제를 해결하고자 해당 저장소에 pull request를 몇 개 날려봐야겠다.  </p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 자작 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JS) 문자, 단어, 동음이의어 갯수 세기</title>
      <link href="/2017/07/18/js-count-char-word/"/>
      <url>/2017/07/18/js-count-char-word/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-count-char-word/thumb.png" alt=""><br><del>웰 컴 투 정규표현식</del></p><p>문자 &amp; 단어 세기</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str =</span><br><span class="line"><span class="string">`반응형웹, 반응형 웹, Responsive, responsive web 웹표준</span></span><br><span class="line"><span class="string">웹표준, 웹 표준, Web Standard, web Standard`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countChar = <span class="function">(<span class="params">char, str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> matchedChars = str.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(char, <span class="string">'gmi'</span>));</span><br><span class="line">  <span class="keyword">return</span> matchedChars ? matchedChars.length : <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countChar(<span class="string">'웹'</span>, str)); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(countChar(<span class="string">'웹표준'</span>, str)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>동음이의어 세기</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =</span><br><span class="line"><span class="string">`반응형웹, 반응형 웹, Responsive, responsive web 웹표준</span></span><br><span class="line"><span class="string">웹표준, 웹 표준, Web Standard, web Standard`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> homonym  = [<span class="string">'웹 표준'</span>, <span class="string">'웹표준'</span>, <span class="string">'Web Standard'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countHomonym = <span class="function">(<span class="params">homonym, str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> word <span class="keyword">of</span> homonym) &#123;</span><br><span class="line">    <span class="keyword">const</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(word, <span class="string">'gmi'</span>);</span><br><span class="line">    <span class="keyword">const</span> matchedWords = str.match(regExp);</span><br><span class="line">    <span class="keyword">if</span>(matchedWords) cnt += matchedWords.length;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countHomonym(homonym, str));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(후기) 키워드 크롤러를 만들고 나서...</title>
      <link href="/2017/07/18/keyword-crawler-review/"/>
      <url>/2017/07/18/keyword-crawler-review/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/keyword-crawler-review/thumb.png" alt=""><br><a href="/2017/07/18/keyword-crawler/">프로젝트로 바로가기</a>  </p><h1 id="왜-만들었나"><a href="#왜-만들었나" class="headerlink" title="왜 만들었나?"></a>왜 만들었나?</h1><h2 id="수작업을-줄여보자"><a href="#수작업을-줄여보자" class="headerlink" title="수작업을 줄여보자."></a>수작업을 줄여보자.</h2><p>과거 어떤 사람이 프론트 엔드 개발자 채용 공고에서 직접 수집한 키워드를 빈도수 별로 모은 자료를 보여준 적이 있다.<br>이후에 크롤러의 존재에 대해 알고 나서 물어보니 수작업으로 했다고 한다. (그렇기 때문에 신뢰도가 좀 더 높은 것 같다.)<br>이런 수작업(노가다성)을 어떻게 하면 줄일 수 있을까 고민을 하면서 만들어보고 싶다는 막연한 생각만 가지고 있었다.  </p><a id="more"></a><h2 id="백엔드-개발자가-되려면-뭘-공부해야하는지-알고-싶었다"><a href="#백엔드-개발자가-되려면-뭘-공부해야하는지-알고-싶었다" class="headerlink" title="백엔드 개발자가 되려면 뭘 공부해야하는지 알고 싶었다."></a>백엔드 개발자가 되려면 뭘 공부해야하는지 알고 싶었다.</h2><p>작년부터 같은 고민을 했지만 백엔드 개발자가 되고 싶었다. HTML/CSS를 만지는 시간은 행복하지 않았고,<br>오로지 자바스크립트 하나 때문에 프론트 엔드 개발 공부를 계속 했고, 쉽게 쉽게 취업하자는 생각에 프론트 엔드 개발자로 취업을 하였다.<br>(프론트 엔드 개발자로 취직하는 게 쉽다는 게 아니라 내 기준에서 프론트 엔드 개발 공부만 1년 가까이 했기 때문에 백엔드보다 더 쉽다는 뜻이다.)<br>하지만 작업하면서 역시나 행복하지 않았다. 그래서 그런지 작업 속도도 느리고, 내 코드 자체에 만족하지 못했다.<br>백엔드도 직접 경험해본 건 아니어서 재미없다고 생각할지 모르겠지만 후회하더라도 직접 경험 해보고 후회하고 싶었다.<br>다른 사람들은 목표로 정한 회사가 있느냐고 물었지만, 나는 그냥 개발이 중심이고, 대우받는 그러한 환경에서 작업을 한다면 다른 건 크게 신경쓰지 않는 타입이다.<br>어찌보면 어리석고 철이 덜 들은 건지 모르겠지만 개발 이외에는 하기가 싫다는 생각이 들었다. (물론 고쳐야할 생각이다.)<br>따라서 일단은 회사를 목표로 하기 보다는 여러 기업에서 <strong>백엔드 개발자</strong>라면 어떤 걸 알고 있어야하는지 알아내는 게 중요했다.<br>최대한 많은 회사에서 요구하는 것들부터 집중적으로 배워나가면 된다고 생각했기 때문이다.</p><h1 id="좋았던-점"><a href="#좋았던-점" class="headerlink" title="좋았던 점"></a>좋았던 점</h1><h2 id="배웠던-걸-써먹을-수-있었다"><a href="#배웠던-걸-써먹을-수-있었다" class="headerlink" title="배웠던 걸 써먹을 수 있었다."></a>배웠던 걸 써먹을 수 있었다.</h2><p><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=11481100" rel="external nofollow noopener noreferrer" target="_blank">자바스크립트와 Node.js를 이용한 웹 크롤링 테크닉</a>란 책으로 스터디를 한 적이 있었다.<br>책의 구성은 큰 덩어리 덩어리로 나눠져 있지만, 그 내부의 작은 덩어리로 봤을 때는 되게 비슷한 내용들끼리 묶여져있어서<br>스터디를 할 때도 계속 비슷한 예제 타이핑하고 실행해보고 하느라 다소 지루한 감이 없지 않았고, 후딱 끝내버리자는 의견도 나왔었다.<br>책 안의 내용 자체는 좋았지만 ‘이걸 일일이 타이핑하고 실행해봐야하나’라는 의문이 들 정도였다.<br>그래도 해당 주제로 스터디를 한 바람에 크롤러, 헤드리스 브라우저, 형태소 분석기 등등 어떤 키워드로 검색해야할지,<br>샘플 코드는 뭘 참조해야할지에 대해 힌트를 많이 알고 있었기 때문에 크롤러를 만들어보는데 훨씬 수월하였다.  </p><h2 id="비동기-작업을-동기식으로-작성해-볼-기회가-많았다"><a href="#비동기-작업을-동기식으로-작성해-볼-기회가-많았다" class="headerlink" title="비동기 작업을 동기식으로 작성해 볼 기회가 많았다."></a>비동기 작업을 동기식으로 작성해 볼 기회가 많았다.</h2><ol><li>무한 스크롤을 하기 위해서는 순차적으로 스크롤을 아래로 계속 내려야하는 점.  </li><li>채용 공고 하나 들어가서 수집하고 다시 다른 공고 들어가서 수집하고 순차적으로 이뤄져야한다는 점.  </li></ol><p>위 코드들을 작성하면서 async/await를 제대로 써본 것 같다.<br>그러면서 <a href="/2017/07/17/es8-async-fact/">Async/Await는 배열 표준 메소드에서 작동하지 않는다.</a>라는 점도 알게 되었다.  </p><h1 id="아쉬웠던-점"><a href="#아쉬웠던-점" class="headerlink" title="아쉬웠던 점"></a>아쉬웠던 점</h1><h2 id="타입스크립트-넘나-어려운-것"><a href="#타입스크립트-넘나-어려운-것" class="headerlink" title="타입스크립트 넘나 어려운 것"></a>타입스크립트 넘나 어려운 것</h2><p>맨 처음에는 타입스크립트를 도입하려고 했다.<br>하지만 팬텀 자체도 phantomjs에서 phantomjs-prebuilt라고 이름을 바꿀 만큼 변화가 많았는데<br>phantomjs에 대한 d.ts는 있었는데 phantomjs-prebuilt에 대한 d.ts는 없었다.<br>새로 만들자니 시간도 오래 걸릴 것 같고… 이거 때문에 너무 시간을 지체하는 느낌이 많이 들었다.<br>약 만 하루동안 타입스크립트를 가지고 뻘짓을 해보다 과감히 포기하였다.<br>나중에… 나중에는 기필코 타입스크립트를 다른 라이브러리들과 함께 써봐야겠다.  </p><h2 id="테스트-코드의-부재"><a href="#테스트-코드의-부재" class="headerlink" title="테스트 코드의 부재"></a>테스트 코드의 부재</h2><p>역시나 테스트 코드를 작성하는 건 감을 잡기 어렵다.<br>테스트 코드를 작성하는 것보다 <strong>무엇을</strong> 테스트 해야할지를 감을 못 잡겠다.<br>그러다보니 그냥 코드만 계속 작성하고 결국 테스트 코드는 작성하질 못했다…<br>하… 나 혼자 스스로 능동적인 공부를 해 본 경험이 적다보니 역시 이런 쪽은 쥐약이다 ㅠㅠ…  </p><h2 id="외국어-형태소-분석의-부재"><a href="#외국어-형태소-분석의-부재" class="headerlink" title="외국어 형태소 분석의 부재"></a>외국어 형태소 분석의 부재</h2><p>mecab-ko-dic에는 한국어 단어만 들어가있어서 외국어의 형태소 분석이 되질 않는다.<br>따라서 이 예제는 외국어로 작성된 채용 공고에는 부적합하다.<br>형태소 분석을 두 번 돌려야하는 것 같은데… 넘나 어려워보여서 시도도 하지 않았다 ㅜㅜ<br>하지만 역으로 국내 쪽 채용 공고는 기술 스택들만 영어로 기재하는 경우가 있어서 오히려 신뢰도가 높다는 장점도 존재한다.  </p><h2 id="이상한-키워드까지-분류된다"><a href="#이상한-키워드까지-분류된다" class="headerlink" title="이상한 키워드까지 분류된다"></a>이상한 키워드까지 분류된다</h2><p>형태소 별로 분석하다보니 구두점이나 쓸 데 없는 기호들, 을/를과 같은 조사 등등은 빠져서 참 좋다.<br>명사만 필터링해서 좋긴 좋은데… 아래와 같은 단점이 존재한다.</p><ol><li>웹 표준 이라는 키워드가 있으면 웹 따로 표준 따로 분류해버린다.  </li><li>프론트 엔드 개발 같은 경우에도 세 가지를 따로 따로 분류해버린다.  </li><li>기업이 채용 공고에 기술 스택만 올리는 게 아니다보니 관련 없는 단어들까지 분류돼서 나온다.</li></ol><p>아직 실력이 많이 모자라서 일일이 수작업으로 해야하는데 손이 너무 많이 가는 작업이라 엄두도 못 내고 있다.</p><h2 id="차트나-그래프로-표시하기에-부적합하다"><a href="#차트나-그래프로-표시하기에-부적합하다" class="headerlink" title="차트나 그래프로 표시하기에 부적합하다."></a>차트나 그래프로 표시하기에 부적합하다.</h2><p>이상한 키워드들이 너무 많이 뽑혀져 나오다보니… 차트나 그래프로 표시하면 알아보기 힘든 경우가 굉장히 많다.<br>화면은 한정적인데 키워드들이 너무 많아서 렉이 걸리거나 마우스를 올려도 원하는 곳으로 올리기 힘든 경우도 있고…<br>그렇다고 표로 표시하기에는 너무 길어지고 이쁘지도 않아서… 이 문제점은 확실히 이상한 키워드들을 전부 필터링해야 어느정도 해결이 될 것 같다.  </p><h2 id="특정-사이트에-한정적이다"><a href="#특정-사이트에-한정적이다" class="headerlink" title="특정 사이트에 한정적이다."></a>특정 사이트에 한정적이다.</h2><p>이 예제만 하더라도 페이지네이션 페이지에는 부적합하고 무한 스크론 페이지에만 적합하다.<br>또 내가 만든 원티드 크롤러만 하더라도 원티드의 마크업 구조가 달라지면 해당 내용을 제대로 크롤링하지 못할 수도 있다.<br>원래 크롤러가 그런 건지 모르겠지만… 이거는 도저히 내 머릿 속에서는 해결이 불가능한 난제로 남을 것 같다.  </p><h1 id="남은-숙제들"><a href="#남은-숙제들" class="headerlink" title="남은 숙제들"></a>남은 숙제들</h1><h2 id="서버-구현하기"><a href="#서버-구현하기" class="headerlink" title="서버 구현하기"></a>서버 구현하기</h2><p>매일 매일 정보를 크롤링해서 업데이트 하려면 24시간 켜져있는 서버 혹은 수동으로 매일 매일 해줘야한다.<br>하지만 수동으로 하는 것은 비효율적이고 서버를 한 대 구동해야하는데 집에 남아있는 컴퓨터가 없다.<br>이를 위해서 한 번 라즈베리 파이를 사서 리눅스도 올려보고, 웹 서버도 올려보고 이것저것 해보고 싶다.<br>좀 더 검토해보고 라즈베리 파이를 사서 직접 서버를 구현해보면서 백엔드의 이것 저것을 공부해봐야겠다.  </p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 잡동사니 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> review </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자작) 키워드 크롤러</title>
      <link href="/2017/07/18/keyword-crawler/"/>
      <url>/2017/07/18/keyword-crawler/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/keyword-crawler/thumb.png" alt="차트라던지 표라던지 표현 방법은 유저가 직접 구현해야한다.">  </p><p><a href="https://github.com/perfectacle/keyword-crawler" rel="external nofollow noopener noreferrer" target="_blank">소스 코드 보러가기</a><br>사이트에서 원하는 내용만 수집해오는 크롤러.<br>더 나아가 mecab-ko와 같은 형태소 분석기를 사용하면 키워드 별로 분류하고 빈도수도 알아낼 수 있다.<br>무한 스크롤 페이지에 적합하게 만들었고, 페이지네이션 사이트를 크롤링 하려면 직접 구현해야한다.<br><a href="https://perfectacle.github.io/crawl-temp/">원티드의 프론트 개발 지원 자격을 크롤링 하여 키워드 별로 분류 후 나타낸 그래프</a>  </p><a id="more"></a><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h3 id="형태소-분석기-한국어-버전"><a href="#형태소-분석기-한국어-버전" class="headerlink" title="형태소 분석기(한국어 버전)"></a>형태소 분석기(한국어 버전)</h3><ul><li><a href="https://bitbucket.org/eunjeon/mecab-ko/" rel="external nofollow noopener noreferrer" target="_blank">mecab-ko</a>  </li><li><a href="https://bitbucket.org/eunjeon/mecab-ko-dic" rel="external nofollow noopener noreferrer" target="_blank">mecab-ko-dic</a></li></ul><h2 id="개발하기"><a href="#개발하기" class="headerlink" title="개발하기"></a>개발하기</h2><h3 id="첫-번째로-태스크-러너를-실행해야한다-gulp"><a href="#첫-번째로-태스크-러너를-실행해야한다-gulp" class="headerlink" title="첫 번째로 태스크 러너를 실행해야한다. (gulp)"></a>첫 번째로 태스크 러너를 실행해야한다. (gulp)</h3><ol><li>eslint  </li><li>babel  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>두 가지 태스크를 먼저 수행한 후에 ES5로 트랜스파일 된 파일을 실행하면 된다.<br>혹시 다른 태스크를 실행하고 싶다면 gulpfile.js 를 수정한 후 package.json의 npm script를 수정하거나<br>npm v5.2.0 이상이라면 npx를 사용하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx gulp TASK_NAME</span><br></pre></td></tr></table></figure><h3 id="두-번째로-크롤러-코드를-작성해야한다"><a href="#두-번째로-크롤러-코드를-작성해야한다" class="headerlink" title="두 번째로 크롤러 코드를 작성해야한다."></a>두 번째로 크롤러 코드를 작성해야한다.</h3><ol><li>크롤러 코드 (/src/crawlContents.js)  </li><li>크롤링한 내용을 형태소로 분석하기 위한 코드(/src/morphemeParser.js)  </li><li>형태소로 분류한 단어들의 빈도수를 구하기 위한 코드(/src/countKeyword.js)</li></ol><p>이 프로젝트는 완성본이 아니기 때문에 위 코드들을 구현해줘야한다.<br>실제로 구현된 내용은 페이지의 무한 스크롤 컨텐츠를 모두 로딩하는 것 밖에 없다.<br>위 코드들을 어떻게 작성해야할지 감이 잡히지 않는 사람들은 demo 디렉토리에 있는 예제를 보자.<br>해당 예제는 구인구직 사이트인 원티드에서 프론트 엔드 개발자의 지원 자격을 키워드 별로 뽑아내는 예제이다.  </p><h3 id="세-번째로-크롤러를-구동하자"><a href="#세-번째로-크롤러를-구동하자" class="headerlink" title="세 번째로 크롤러를 구동하자."></a>세 번째로 크롤러를 구동하자.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>만약 다른 크롤러를 구동하고 싶다면 package.json의 npm script를 수정하거나<br>npm v5.2.0 이상이라면 npx를 사용하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx phantomjs ANOTHER_CRAWLER.js</span><br></pre></td></tr></table></figure><h3 id="데모-크롤러-구동해보기"><a href="#데모-크롤러-구동해보기" class="headerlink" title="데모 크롤러 구동해보기"></a>데모 크롤러 구동해보기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>무한 스크롤 콘텐츠를 모두 로딩하고 100 여 개가 넘는 채용 공고를 크롤링 하기 때문에 시간이 다소 걸린다.  </p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 자작 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> crawler </tag>
            
            <tag> phantomjs </tag>
            
            <tag> mecab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES2015+) Async/Await는 배열 표준 메소드에서 작동하지 않는다.</title>
      <link href="/2017/07/17/es8-async-fact/"/>
      <url>/2017/07/17/es8-async-fact/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/es8-async-fact/thumb.png" alt="">  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제대로 작동하질 않는다.</span></span><br><span class="line">nums.forEach(<span class="keyword">async</span> (num) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num);</span><br><span class="line">      res();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 역시 마찬가지로 제대로 작동하지 않는다.</span></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  nums.forEach(<span class="keyword">async</span> (num) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">        res();</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이터레이터에서는 잘 작동한다.</span></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">        res();</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 물론 일반 반복문에서도 잘 작동한다.</span></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=nums.length; i&lt;len; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(nums[i]);</span><br><span class="line">        res();</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>아마 실행 주도권이 배열 표준 메소드 내부의 콜백 함수가 가지게 되어서 그런 게 아닐까?  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> ES2015+ </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 변수</title>
      <link href="/2017/07/01/js-011-variable/"/>
      <url>/2017/07/01/js-011-variable/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-011-variable/thumb.png" alt="">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 열 한 번째 시리즈는 변수를 주제로 진행하겠다.  </p><a id="more"></a><h2 id="변수란"><a href="#변수란" class="headerlink" title="변수란?"></a>변수란?</h2><p>이번 주제는 <a href="https://www.facebook.com/gomugomm?fref=ts" rel="external nofollow noopener noreferrer" target="_blank">정재남</a> 님의 자바스크립트 세미나를 듣고 해당 자료를 토대로 내 맘대로 해석한 포스트이다.<br><img src="/images/js-011-variable/variable.png" alt="변수는 단순히 어떤 박스나 그릇 안에 데이터들을 담아놓는 게 다일까?"><br>책을 보다보면 변수는 그냥 <strong>값들을 담아놓는 상자</strong> 정도로 설명해놓는다.<br>과연 이게 변수의 끝일까? 정말 변수는 이렇게 작동할까?<br><img src="/images/js-011-variable/ram.jpg" alt="안녕, 나는 메인 메모리, RAM이야!"><br>뜬금없이 RAM이 왜 등장했냐 하면…<br>컴퓨터의 프로그램이 실행되려면 모두 RAM에 해당 소스가 존재해야한다.<br>그 말은 RAM에 우리가 짠 자바스크립트 소스, 변수가 어딘가에 존재한다는 것이다.<br>하지만 RAM은 Random Access Memory, 즉 랜덤하게 데이터가 들어가게 된다.<br>var a = 2; 라고 해서 어디에 우리의 데이터가 들어가있는지 알지 못한다.<br>var a = 2; 라고 하면 2라는 값이 저장된 메모리 주소가 어딘가 있을 거다.<br>그 때 그 주소가 0x1234라고 가정했을 때 변수가 많다보니 모든 변수의 메모리 주소를 외우는 것은 불가능하다.<br>따라서 해당 메모리 주소에 이름을 붙인 것이 바로 변수이다.<br>마치 네이버의 ip 주소(125.209.222.141)를 다 외우지 못해 <a href="http://www.naver.com으로" rel="external nofollow noopener noreferrer" target="_blank">www.naver.com으로</a> 치는 격이다.<br>ip 주소가 메모리 주소고, 도메인 네임이 바로 변수라고 보면 될 것 같다.  </p><h3 id="변수의-초기화-과정"><a href="#변수의-초기화-과정" class="headerlink" title="변수의 초기화 과정"></a>변수의 초기화 과정</h3><p>이는 <a href="/2017/04/26/js-002-hoisting/">호이스팅</a>과 묶어서 보면 좋을 것 같다.<br>아래와 같은 코드가 있다고 치자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError: c is not defined</span></span><br></pre></td></tr></table></figure><p>호이스팅 때문에 위 코드는 아래와 같이 바뀌게 될 것이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br></pre></td></tr></table></figure><p>그럼 위 과정과 메모리를 엮어서 한 번 봐보자.<br>a와 b는 메모리 주소에 이름을 붙인 것이고, 실제 데이터는 해당 메모리 주소에 저장이 된다.  </p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td></td><td></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>그리고 3번 라인에 의해 아래와 같이 바뀐다.  </p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td>2</td><td></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line">b = a;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError: c is not defined</span></span><br></pre></td></tr></table></figure><p>그리고 6번 라인에 의해 아래와 같이 바뀐다.</p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td>2</td><td>2</td></tr></tbody></table><p>원시값은 위와 같이 메모리의 새로운 영역에 값을 ‘복사’하는 형태로 가고 있다.<br>그럼 참조 타입인 객체들을 어떻게 만들어지는지 한번 살펴보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">'양권성'</span>,</span><br><span class="line">  friends: [<span class="string">'양간장'</span>, <span class="string">'간장냥'</span>],</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br></pre></td></tr></table></figure><p>그럼 이제 위 데이터들을 하나씩 까보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br></pre></td></tr></table></figure><p>먼저 호이스팅에 의해 아래와 같이 메모리를 잡을 것이다.  </p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td></td><td></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">a = &#123;</span><br><span class="line">  name: <span class="string">'양권성'</span>,</span><br><span class="line">  friends: [<span class="string">'양간장'</span>, <span class="string">'간장냥'</span>],</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그리고 3번에 의해 아래와 같이 바뀔 것이다.  </p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th><th>0x1236</th><th>0x1237</th><th>0x1238</th><th>0x1239</th><th>0x1240</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td>0x1236</td><td></td><td>{ name: 0x1237, friends: 0x1238, age: 0x1239 }</td><td>양권성</td><td>0x1240</td><td>25</td><td>[‘양간장’, ‘간장냥’]</td></tr><tr><td>0x1236의 객체를 보면 name, friends, age라는 키에 해당하는 값들도 어딘가 메모리에 적재가 돼있을 것이다.</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>그 메모리 주소에 대한 이름을 키라고 보면 될 것 같다.</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>그리고 friends는 원시값이 아니고 참조값이기 때문에 해당 메모리 주소로 이동하면 또 메모리 주소가 있고,</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>그 메모리 주소를 타고 가야 비로소 우리가 원하는 값이 있다.</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">a = &#123;</span><br><span class="line">  name: <span class="string">'양권성'</span>,</span><br><span class="line">  friends: [<span class="string">'양간장'</span>, <span class="string">'간장냥'</span>],</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>마지막 라인에 의해 아래와 같은 결과가 나오게 된다.  </p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th><th>0x1236</th><th>0x1237</th><th>0x1238</th><th>0x1239</th><th>0x1240</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td>0x1236</td><td>0x1236</td><td>{ name: 0x1237, friends: 0x1238, age: 0x1239 }</td><td>양권성</td><td>0x1240</td><td>25</td><td>[‘양간장’, ‘간장냥’]</td></tr></tbody></table><p>객체는 거의 무한한 데이터를 담을 수 있으므로 복사보다는 참조하는 것이 메모리를 더 절약하기 때문인지 객체를 참조 타입으로 지정한 것 같다.<br>역시 이런 기초 기반 지식들이 상당히 중요한 것 같다.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> 변수 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 자료형(객체)</title>
      <link href="/2017/07/01/js-010-data-type-object/"/>
      <url>/2017/07/01/js-010-data-type-object/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-010-data-type-object/thumb.png" alt="">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 열 번째 시리즈는 자료형 중에 객체를 주제로 진행하겠다.  </p><a id="more"></a><h2 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h2><p>0과 1로 이루어진 데이터를 메모리에서 꺼내서 써야하는데 어떻게 해석할지를 결정하는 유형.<br>나는 위와 같이 이해하고 있는데 잘 이해가 가지 않는다면 그냥 넘어가도 무방하다.<br>더 딥하게 알고 싶은 사람은 정적 타입의 언어(C, Java 등등)을 공부해보자.</p><p>자바스크립트에서 자료형은 크게 두 가지로 나뉜다.  </p><ol><li><a href="/2017/07/01/js-009-data-type-primitive-value">원시값</a>  </li><li><a href="#객체-Object">객체</a>  </li></ol><p>하나 하나 파헤쳐보자.  </p><h3 id="객체-Object"><a href="#객체-Object" class="headerlink" title="객체(Object)"></a>객체(Object)</h3><p>객체는 다음과 같은 유형이 있다.<br>이번 글에서는 해당 내용들은 다루지 않고, 객체의 특성에 대해서만 다루도록 하겠다.  </p><ul><li>객체  </li><li>배열  </li><li>함수  </li><li>정규 표현식  </li><li>날짜  </li><li>컬렉션(ES6에서 생김)  </li><li>기타 등등</li></ul><p>그리고 이 객체에는 다음과 같은 특징이 있다.  </p><ol><li>변하는(Mutable) 값이다.  </li><li>값으로써 비교하는 게 아니라 참조하는 주소로써 비교한다.  </li><li>typeof 연산자로 구분하기 어려운 경우가 많다.</li><li>프로퍼티의 추가가 가능하다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, 2], 건드리지도 않은 a가 왜...?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> d = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(c === d); <span class="comment">// false, 둘은 똑같은 값이 아닌가...??</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// 'function'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">// 'object'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []); <span class="comment">// 'object', 배열의 타입도 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> /a/); <span class="comment">// 'object', 정규 표현식의 타입도 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// 'object', 날짜의 타입도 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">WeakSet</span>()); <span class="comment">// 'object', 컬렉션의 타입도 object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">e.asdf = <span class="string">'qwer'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(e.asdf); <span class="comment">// 'qwer', 함수도 객체이므로 프로퍼티의 추가가 가능하다.</span></span><br></pre></td></tr></table></figure><h3 id="참조-타입-Reference-Type"><a href="#참조-타입-Reference-Type" class="headerlink" title="참조 타입(Reference Type)"></a>참조 타입(Reference Type)</h3><p>1번과 2번의 특징과 같이 작동하는 이유는 객체는 참조 타입이기 때문이다.<br>그럼 뭘 참조하느냐? 바로 메모리 주소를 말한다.<br><img src="/images/js-010-data-type-object/ram.jpg" alt="안녕? 나는 메인 메모리, 램이야!"><br>기본적으로 우리가 작성한 프로그램(그 안에 존재하는 모든 소스 코드 및 변수 등등)은 메모리에 있어야한다.<br>메모리는 8GB 등등 다양한 용량을 가지고 있고 그 안에 우리의 변수가 여기 저기 산재돼있는 구조이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> d = c;</span><br></pre></td></tr></table></figure><p>이렇게 코드를 짰다고 하면 사실은 아래와 같다고 보면 된다.<br><strong>0x1234 와 같은 메모리 주소는 내가 임의로 지정한 것이다.<br>절대로 저런 식으로 메모리가 생기지 않았고, 이해를 돕기 위해 쉽게 설명하고자 적은 거다.</strong></p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>d</th><th>0x1234</th></tr></thead><tbody><tr><td>2</td><td>2</td><td>0x1234</td><td>0x1234</td><td>[1]</td></tr></tbody></table><p>즉 변수 c와 d에 [1]이 직접 저장되는 게 아니라 배열은 객체이고, 객체는 참조 타입이므로 <strong>메모리의 주소</strong>가 각각 저장되는 것이다.<br><strong>메모리의 주소를 참조</strong>하는 형태가 바로 참조 타입니다.  </p><p>그럼 아래와 같은 경우에 한 번 어떻게 값이 변하는지 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.push(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>2번 라인까지 하면 아래와 같을 것이다.</p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1234</td><td>[1]</td></tr></tbody></table><p>3번 라인에 의해서 다음과 같이 바뀌게 되는 것이다.</p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1234</td><td>[1, 2]</td></tr></tbody></table><p>즉 b가 참조하고 있는 녀석과 a가 참조하고 있는 녀석이 같으니 b를 통해 바꿔도 a가 참조하는 녀석이 바뀌게 되는 격이다.<br>하지만 아래와 같이 <strong>재할당</strong>을 하면 얘기는 달라진다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>2번 라인까지 하면 아래와 같을 것이다.</p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1234</td><td>[1]</td></tr></tbody></table><p>3번 라인에 의해서 다음과 같이 바뀌게 되는 것이다.</p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td>[1]</td><td>[1, 2]</td></tr></tbody></table><p>새로 할당을 하게 되면 새로운 메모리 공간에 해당 값을 만들고, 해당 메모리 주소를 바라보게 만든다.  </p><h3 id="자료형-검출하기"><a href="#자료형-검출하기" class="headerlink" title="자료형 검출하기"></a>자료형 검출하기</h3><p>위 코드를 봤을 때 function을 제외하고 모든 객체가 object라는 문자열이 나왔다.<br>그럼 각기 다른 데이터 타입들을 어떻게 구분할까?<br>아래와 같이 하면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.toString() === <span class="string">'[object Object]'</span>); <span class="comment">// true, 객체 검출 성공</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray([])); <span class="comment">// true, 배열 검출 성공</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/a/</span>) === <span class="string">'[object RegExp]'</span>); <span class="comment">// true, 정규표현식 검출 성공</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) === <span class="string">'[object Date]'</span>); <span class="comment">// true, 날짜 검출 성공</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Map</span>().toString() === <span class="string">'[object Map]'</span>); <span class="comment">// true, 컬렉션 검출 성공</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.toString() === <span class="string">'[object Math]'</span>); <span class="comment">// true, 컬렉션 검출 성공</span></span><br></pre></td></tr></table></figure><h3 id="얕은-복사-깊은-복사"><a href="#얕은-복사-깊은-복사" class="headerlink" title="얕은 복사? 깊은 복사?"></a>얕은 복사? 깊은 복사?</h3><p>그렇담 참조 타입의 데이터를 동일한 메모리 주소를 참조하는 게 아니라 복사해서 새로운 메모리 공간에 할당하고 지지고 볶고 싶다면…?<br>이런 걸 위해 자바스크립트에서는 참조 데이터의 복사가 가능하다.<br>ES5는 아래 링크를 참조하자.<br><a href="http://cafe.naver.com/hacosa/184885" rel="external nofollow noopener noreferrer" target="_blank">직접 구현해본 JS 객체, 배열의 깊은 복사하는 방법</a></p><h4 id="얕은-복사-Shallow-Copy"><a href="#얕은-복사-Shallow-Copy" class="headerlink" title="얕은 복사(Shallow Copy)"></a>얕은 복사(Shallow Copy)</h4><p>배열의 복사를 진행해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> b = [...a];</span><br><span class="line">b.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>결과는 아래와 같다.</p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td>[1, 2]</td><td>[1, 2, 3]</td></tr></tbody></table><p>그럼 이번에는 객체를 복사해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">name</span>: <span class="string">'양권성'</span>&#125;;</span><br><span class="line"><span class="comment">// 객체에 spread 연산자를 쓸 수 있게 해주는 것은 Stage-3 단계이다.  </span></span><br><span class="line"><span class="comment">// https://github.com/tc39/proposal-object-rest-spread</span></span><br><span class="line"><span class="comment">// 따라서 바벨의 stage-3 preset이나 transform-object-rest-spread 플러그인을 사용하면 된다.</span></span><br><span class="line"><span class="keyword">const</span> b = &#123;...a&#125;;</span><br><span class="line">b.age = <span class="number">25</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;name: '양권성'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123;name: '양권성', age: 25&#125;</span></span><br></pre></td></tr></table></figure><p>결과는 아래와 같다.  </p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1235</td><td>{name: ‘양권성’}</td><td>{name: ‘양권성’, age: 25}</td></tr></tbody></table><p>위의 데이터들을 참조 단계가 1단계 밖에 없었다.<br>뎁스가 깊어진다면 어떻게 될까…?  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, [<span class="number">2</span>]];</span><br><span class="line"><span class="keyword">const</span> b = [...a];</span><br><span class="line">b.push(<span class="number">4</span>);</span><br><span class="line">b[<span class="number">1</span>].push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, [2, 3]]</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [1, [2, 3], 4]</span></span><br></pre></td></tr></table></figure><p>참조 데이터 안에 참조 데이터가 있는 격이다.<br>메모리를 까보면 아래와 같을 것이다.  </p><table><thead><tr><th>a</th><th>b</th><th>0x1234</th><th>0x1235</th><th>0x1236</th></tr></thead><tbody><tr><td>0x1234</td><td>0x1236</td><td>[1, 0x1235]</td><td>[2, 3]</td><td>[1, 0x1235, 4]</td></tr></tbody></table><p>즉 뎁스가 한 단계만 깊어져도 수박 겉핥기 식으로 껍데기만 복사가 되는 것이다.<br>그 속 알맹이는 재귀적으로 계속 타고 타고 들어가서 복사를 해줘야한다.<br>이는 객체도 마찬가지다.  </p><h4 id="깊은-복사-Deep-Copy"><a href="#깊은-복사-Deep-Copy" class="headerlink" title="깊은 복사(Deep Copy)"></a>깊은 복사(Deep Copy)</h4><p>위 방식대로 얕은 복사를 진행하면 참조 단계가 한 뎁스만 깊어져도 제대로 된 복사가 이루어지지 않는 것을 알았다.<br>그렇다면 그 안에 참조 데이터가 있는지 없는지 계속해서 얕은 복사를 재귀적으로 진행해나가는 걸 깊은 복사라고 한다.<br>그럼 직접 깊은 복사를 구현해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 혹시 추후에 Array나 Object의 표준 메소드로 clone이 생길지 모르니 심볼을 통해 유니크한 값을 만들어서 쓰자.</span></span><br><span class="line"><span class="keyword">const</span> symClone = <span class="built_in">Symbol</span>(<span class="string">'clone'</span>);</span><br><span class="line"><span class="built_in">Array</span>.prototype[symClone] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 배열의 얕은 복사(Shallow Copy)를 한 번 함.</span></span><br><span class="line">  <span class="keyword">let</span> copy = [...this];</span><br><span class="line">  <span class="comment">// map 메소드는 원본 배열을 훼손시키지 않으므로 반환된 값을 원본 배열에 할당.</span></span><br><span class="line">  copy = copy.map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 현재 배열의 요소가 배열 또는 객체라면</span></span><br><span class="line">    <span class="comment">// 그것들을 다시 얕은 복사하는 재귀함수를 호출.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(v) || v.toString() === <span class="string">'[object Object]'</span>) v = v[symClone]();</span><br><span class="line">    <span class="comment">// 리턴 값이 없다면 배열에 undefined가 들어가게 됨.</span></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype[symClone] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 객체의 얕은 복사(Shallow Copy)를 한 번 함.</span></span><br><span class="line">  <span class="keyword">let</span> copy = &#123;...this&#125;;</span><br><span class="line">  <span class="comment">// 객체의 키 값들을 순회</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(copy)) &#123;</span><br><span class="line">    <span class="comment">// 현재 배열의 요소가 배열 또는 객체라면</span></span><br><span class="line">    <span class="comment">// 그것들을 다시 얕은 복사하는 재귀함수를 호출.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(copy[key]) || copy[key].toString() === <span class="string">'[object Object]'</span>) copy[key] = copy[key][symClone]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 무지하게 참조 뎁스가 복잡한 객체.</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'asdf'</span>,</span><br><span class="line">  arr: [ <span class="comment">// 객체 안에 배열</span></span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [ <span class="comment">// 객체 안에 배열 안에 배열</span></span><br><span class="line">      <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, &#123; <span class="comment">// 객체 안에 배열 안에 배열 안에 객체</span></span><br><span class="line">        age: <span class="number">999</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objClone = obj[symClone]();</span><br><span class="line">objClone.arr[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">objClone.arr[<span class="number">3</span>].unshift(<span class="number">2</span>);</span><br><span class="line">objClone.arr[<span class="number">3</span>][<span class="number">4</span>].qwer = <span class="string">'qwer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name: 'asdf',</span></span><br><span class="line"><span class="comment">//   arr: [ // 객체 안에 배열</span></span><br><span class="line"><span class="comment">//     1, 2, 4, [ // 객체 안에 배열 안에 배열</span></span><br><span class="line"><span class="comment">//       2, 4, 5, 6, &#123; // 객체 안에 배열 안에 배열 안에 객체</span></span><br><span class="line"><span class="comment">//         age: 999,</span></span><br><span class="line"><span class="comment">//         qwer: 'qwer'</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//     ]</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="built_in">console</span>.log(objClone);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; 원본 값은 전혀 바뀌지 않았다.</span></span><br><span class="line"><span class="comment">//   name: 'asdf',</span></span><br><span class="line"><span class="comment">//   arr: [ // 객체 안에 배열</span></span><br><span class="line"><span class="comment">//     1, 2, 3, [ // 객체 안에 배열 안에 배열</span></span><br><span class="line"><span class="comment">//       4, 5, 6, &#123; // 객체 안에 배열 안에 배열 안에 객체</span></span><br><span class="line"><span class="comment">//         age: 999</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//     ]</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>symClone은 모든 참조 데이터를 순회하면서 재귀적으로 얕은 복사를 수행하는 함수이다.<br>결국엔 모든 참조 데이터를 얕은 복사하면서 그 깊숙한 곳까지 타고 들어가기 때문에 깊은 복사라고 부르는 것이다.<br>이것이야말로 진또배기 복사라고 할 수 있다.<br>하지만 이런 깊은 복사는 계속해서 함수를 호출하는 재귀함수이므로 콜스택을 많이 만들어내는 등등의 문제로 인해 값비싼 비용을 치르게 된다.<br>즉 느리다는 뜻이다. (체감 못하는 경우가 많을테지만)<br>이를 위해 Immutable.js가 나오고 여기서는 Immutable 자료형인 List와 Map을 권장하는 바이다.<br>좀 더 궁금한 사람은 <a href="https://facebook.github.io/immutable-js/" rel="external nofollow noopener noreferrer" target="_blank">Immutable.js 공식 사이트</a>를 참고하도록 하자.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> 자료형 </tag>
            
            <tag> 객체 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 자료형(원시값)</title>
      <link href="/2017/07/01/js-009-data-type-primitive-value/"/>
      <url>/2017/07/01/js-009-data-type-primitive-value/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-009-data-type-primitive-value/thumb.png" alt="">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 아홉 번째 시리즈는 자료형 중에 원시값을 주제로 진행하겠다.  </p><a id="more"></a><h2 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h2><p>0과 1로 이루어진 데이터를 메모리에서 꺼내서 써야하는데 어떻게 해석할지를 결정하는 유형.<br>나는 위와 같이 이해하고 있는데 잘 이해가 가지 않는다면 그냥 넘어가도 무방하다.<br>더 딥하게 알고 싶은 사람은 정적 타입의 언어(C, Java 등등)을 공부해보자.</p><p>자바스크립트에서 자료형은 크게 두 가지로 나뉜다.  </p><ol><li><a href="#원시값-Primitive-Value">원시값</a>  </li><li><a href="/2017/07/01/js-010-data-type-object/">객체</a>  </li></ol><p>하나 하나 파헤쳐보자.  </p><h3 id="원시값-Primitive-Value"><a href="#원시값-Primitive-Value" class="headerlink" title="원시값(Primitive Value)"></a>원시값(Primitive Value)</h3><p>원시값에는 6가지 유형이 있다.  </p><ol><li><a href="#부울-Boolean">boolean</a>  </li><li><a href="/2016/12/23/ES6-Number-type/">number</a>  </li><li><a href="#문자열-String">string</a>  </li><li><a href="#Null">null</a>  </li><li><a href="#Undefined">undefined</a>  </li><li><a href="/2017/04/16/ES6-Symbol/">Symbol</a>(ES2015에서 새로 생김)  </li></ol><p>그리고 이 원시값에는 다음과 같은 특징이 있다.  </p><ol><li>불변(Immutable)하는 값이다.  </li><li>값으로써 비교가 가능하다. (심볼을 제외하고)  </li><li>typeof 연산자를 쓰면 각자 고유한 타입을 내뱉는다. (<a href="https://github.com/FEDevelopers/tech.description/wiki/%E2%80%9Ctypeof-null%E2%80%9D%EC%9D%98-%EC%97%AD%EC%82%AC" rel="external nofollow noopener noreferrer" target="_blank">typeof null</a>을 제외하고)</li></ol><p>너무나 당연한 소리를 하고 있어서 이게 무슨 특징인가 싶을 수 있다.<br>하지만 다음 파트인 객체를 보고 나면 생각이 달라질 것이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 불변하는 값이다.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="string">'b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 'a', 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 값으로써 비교가 가능하다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> === !!<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 하지만 항상 유니크한 값을 가지는 심볼은 값으로써 비교가 불가능하다.</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Symbol</span>(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Symbol</span>(<span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c === d); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol.for는 심볼 레지스트리에 해당 키값의 심볼이 있다면 새로 만들지 않고 해당 값을 반환한다.</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="built_in">Symbol</span>.for(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">var</span> f = <span class="built_in">Symbol</span>.for(<span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(e === f); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 모두 고유한 타입을 내뱉어서 타입을 구분짓기가 쉽다.  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">false</span>); <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">123</span>); <span class="comment">// 'number'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">'123'</span>); <span class="comment">// 'string'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// 'object', 버그이다. 상단의 링크를 참조하자.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Symbol</span>()); <span class="comment">// 'symbol'</span></span><br></pre></td></tr></table></figure><h4 id="부울-Boolean"><a href="#부울-Boolean" class="headerlink" title="부울(Boolean)"></a>부울(Boolean)</h4><p>참/거짓을 나타내는 자료형이다.<br>주로 조건을 명시해야하는 경우에 많이 쓴다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123; <span class="comment">// 1. 조건문</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123; <span class="comment">// 2. 반복문의 조건부 부분</span></span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 0~9까지 출력하게 된다.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = (a%<span class="number">2</span> === <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">2</span>; <span class="comment">// 2. 삼항 연산자</span></span><br></pre></td></tr></table></figure><p>형변환을 위해서는 다음과 같은 방법이 존재한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">''</span>).valueOf()); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">''</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// ! 연산자는 참을 거짓으로, 거짓을 참으로 바꿔주는 Not 연산자이다.  </span></span><br><span class="line"><span class="comment">// !으로 한 번 뒤집고 !으로 한번 더 뒤집어주면 원래의 참/거짓 값이 나오게 되는 원리다.</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">''</span>); <span class="comment">// false, 가장 짧아서 쓰기 간편해서 자주 쓴다.</span></span><br></pre></td></tr></table></figure><h5 id="Falsy-Truthy-Value"><a href="#Falsy-Truthy-Value" class="headerlink" title="Falsy/Truthy Value"></a>Falsy/Truthy Value</h5><p>boolean으로 형변환 했을 때 거짓으로 판명되는 값이 Falsy Value, 참으로 판명되는 값이 Truthy Value이다.<br>아래의 경우를 제외하고 모두 Truthy Value이다.<br>자바스크립트의 유연한 동적 타입의 특성이 여기서 드러나는 것 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>); <span class="comment">// false, 숫자 0</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>); <span class="comment">// false, undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>); <span class="comment">// false, null</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">false</span>); <span class="comment">// false, boolean의 false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">''</span>); <span class="comment">// false, 빈 문자열(공백 아님, 쌍따옴표 아님)</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">NaN</span>); <span class="comment">// false, 숫자 NaN(Not a Number)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 경우를 제외하고 모두 Truthy Value</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">12341234</span>); <span class="comment">// true, 0을 제외한 숫자</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">' '</span>); <span class="comment">// true, 공백이라도 true로 인식</span></span><br><span class="line"><span class="built_in">console</span>.log(!!&#123;&#125;); <span class="comment">// true, 빈 개체라도 true로 인식</span></span><br><span class="line"><span class="built_in">console</span>.log(!![]); <span class="comment">// true 빈 배열이라도 true로 인식</span></span><br></pre></td></tr></table></figure><h4 id="문자열-String"><a href="#문자열-String" class="headerlink" title="문자열(String)"></a>문자열(String)</h4><p>다른 프로그래밍 언어에서 문자열은 기본 자료형에 속하지 않는다.<br>C에서는 문자의 배열로 문자열을 다루며, 자바에서는 클래스로 다루고 있는데 자바스크립트에서는 기본 자료형에 속해있다.<br>C에서 문자의 배열이라고 말하듯이 자바스크립트에서도 배열과 같이 사용이 가능하다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 쌍따옴표, 홑따옴표 개인의 기호에 맞게, 혹은 코딩 컨벤션에 맞게 사용하면 된다.</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'https://perfectacle.github.io/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 템플릿을 바인딩 할 때 HTML 템플릿은 쌍따옴표를 사용하므로 홑따옴표 사용을 주장하는 입장도 있다.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'&lt;a href="'</span> + url + <span class="string">'" target="_blank"&gt;짱짱맨의 블로그&lt;/a&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"&lt;a href=\""</span> + url + <span class="string">"\" target=\"_blank\"&gt;짱짱맨의 블로그&lt;/a&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 또한 ES6 들어선 템플릿 리터럴 ``이 등장했기 때문에 이와 구별을 위해 쌍따옴표 사용을 주장하는 입장도 있다.</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">`&lt;a href="<span class="subst">$&#123;url&#125;</span>" target="_blank"&gt;짱짱맨의 블로그&lt;/a&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열과 같이 인덱스로 접근이 가능하다.</span></span><br><span class="line"><span class="built_in">console</span>.log(url[<span class="number">11</span>], url[<span class="number">0</span>], url[<span class="number">20</span>]); <span class="comment">// f h g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 덧셈 연산자를 쓰면 문자열이 아닌 것을 문자열로 바꾼 후 문자열끼리 합쳐준다.  </span></span><br><span class="line"><span class="comment">// 연산 순서가 매우 중요하므로 먼저 계산해주고 싶은 내용을 앞에 배치하던가 괄호로 묶어 우선순위를 높여줘야한다.</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="string">'10'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(e + <span class="number">2</span> + <span class="number">1</span>); <span class="comment">// '1021', '10' + '2' + 1 = '102' + '1'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> + e + <span class="number">1</span>); <span class="comment">// '2101', '2' + '10' + 1 = '210' + '1'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> + <span class="number">1</span> + e); <span class="comment">// '310', 2 + 1 + '10' = '3' + '10'</span></span><br></pre></td></tr></table></figure><p>형변환은 다음과 같이 할 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">123</span>).valueOf()); <span class="comment">// '123'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">false</span>)); <span class="comment">// 'false'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span>+<span class="literal">false</span>); <span class="comment">// 'false', 가장 간결해서 자주 쓰는 방법이다.</span></span><br></pre></td></tr></table></figure><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p><strong>값이 없음</strong>을 나타내기 위한 자료형이다.<br>어떤 사람은 이 null을 할당해주는 작업이 해당 변수를 쓸 준비가 되었다는 것과 같다고 한다.<br>또한 null은 어떠한 프로퍼티나 메소드의 사용도 불가능하다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">a += <span class="string">''</span>; <span class="comment">// 'null'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>.valueOf()); <span class="comment">// Cannot read property 'valueOf' of null</span></span><br></pre></td></tr></table></figure><h4 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h4><p><strong>값이 정의되지 않음</strong>을 나타내기 위한 자료형이다.<br>null은 값이 정의 됐다, 변수에 할당된 상태이나 undefined는 값이 할당되지 않은 상태이다.<br>undefined도 null과 마찬가지로 어떠한 프로퍼티나 메소드의 사용도 불가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'asd'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 자바스크립트는 요상하게도 초기화되지 않은 변수에 연산자를 써도 오류가 나질 않는다.</span></span><br><span class="line"><span class="comment">// 최대한 프로그램이 죽지 않도록 설계한 것 같다.</span></span><br><span class="line">a += <span class="string">''</span>; <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="built_in">console</span>.log(b[<span class="number">4</span>].valueOf()); <span class="comment">// Cannot read property 'valueOf' of undefined</span></span><br></pre></td></tr></table></figure><p>분량이 길어졌으니 한 번 끊고 그 다음 자료형인 <a href="/2017/07/01/js-010-data-type-object/">객체</a>에 대해서 공부해보자.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> 자료형 </tag>
            
            <tag> 원시값 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) 함수형 프로그래밍(JS)이란...?</title>
      <link href="/2017/06/30/js-func-00-what/"/>
      <url>/2017/06/30/js-func-00-what/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-00-what/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><p>포스트와는 무관하며 내가 정리한 함수형 JS의 포스트 목록이다.  </p><ol><li><a href="/2017/06/26/js-func-01-why-make/">왜 쓸까?</a>  </li><li><a href="/2017/06/26/js-func-02-filter/">filter</a>  </li><li><a href="/2017/06/26/js-func-03-map/">map</a>  </li><li><a href="/2017/06/26/js-func-04-each/">each</a>  </li><li><a href="/2017/06/26/js-func-05-reduce/">reduce</a>  </li><li><a href="/2017/06/28/js-func-06-find/">find</a>  </li><li><a href="/2017/06/30/js-func-07-curry/">curry</a>  </li><li><a href="/2017/06/30/js-func-08-pipe/">pipe</a>  </li></ol><h2 id="함수형-JS"><a href="#함수형-JS" class="headerlink" title="함수형 JS?"></a>함수형 JS?</h2><p>간단하게 생긴 모습을 보면 다음과 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 지향형</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].filter(<span class="function"><span class="params">v</span> =&gt;</span> v%<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수형</span></span><br><span class="line"><span class="keyword">const</span> filter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;; <span class="comment">// 구현했다고 가정.</span></span><br><span class="line">filter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], v =&gt; v%<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>모두 다 그런 건 아니지만 대체적으로<br>뭔가 .을 찍고 찍고 들어간다고 하면 그건 객체 지향형(객체에 존재하는 메소드나 프로퍼티 등등을 사용)<br>그냥 함수로 시작해서 그 안에서 함수 쓰고 쓰고 뭐시기 지지고 볶고 하다가 함수로 끝나면 함수형이라고 보면 될 것 같다.  </p><h2 id="순수-함수"><a href="#순수-함수" class="headerlink" title="순수 함수?"></a>순수 함수?</h2><p>함수형 프로그래밍을 접하다 보면 순수 함수란 것을 많이 보게 된다.<br>이는 객체 지향형에서 쓰이던 메소드와는 매우 다르다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 지향형</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수형</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> push = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;; <span class="comment">// 구현했다고 가정.</span></span><br><span class="line"><span class="keyword">const</span> newArr = push(arr2, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3];</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 2, 3, 4];</span></span><br></pre></td></tr></table></figure><p>객체 지향형(arr.push(4))이 어떻게 동작을 했는지 보면 다음과 같다.  </p><ol><li>arr에 4라는 데이터를 제일 끝에 넣었다.  </li><li>arr은 push 메소드의 입력값이 아닌데 메소드 내부에서 사용을 하였다.  </li><li>push 메소드가 메소드 외부의 데이터를 손 댄 것이다.  </li><li>사이드 이펙트(부수 효과)를 발생 시켰다.</li></ol><p>물론 위와 같은 코드는 너무 간단해서 개발자가 당연히 사이드 이펙트를 기대하고 짠 코드이다.<br>객체 지향형은 기본적으로 사이드 이펙트를 기대하고 개발하게 된다.<br>따라서 실행 시점에 따라 출력값이 다르다.<br>즉 평가 시점을 어느 한 시점으로 한정 지을 수 밖에 없다.  </p><p>그럼 함수형 코드(push(arr2, 4))를 한 번 보자.  </p><ol><li>arr2를 <strong>복사</strong>하여 그 뒤에 4를 넣었다.  </li><li>push 함수의 입력값에 arr2가 있고, 그 입력값을 가지고만 함수가 실행되었다.  </li><li>push 메소드가 메소드 외부의 데이터에 손을 대지 않았다.  </li><li>사이드 이펙트가 발생하지 않았다.  </li></ol><p>타입스크립트에서 any가 적폐 세력이라면, 함수형 프로그래밍에서는 사이드 이펙트가 적폐 세력인 것 같다.<br>사이드 이펙트가 없기 때문에 동일한 입력값을 넣으면 언제나 동일한 출력값이 나온다.<br>따라서 언제 실행하던 동일한 출력값이 나오기 때문에 평가 시점으로부터 자유롭다.<br>바로 이런 게 순수 함수다. (사이드 이펙트가 없다는 게 핵심)<br><del>그렇다고 사이드 이펙트가 있는 함수를 불순 함수라고는 부르지 않는다.</del></p><p>수학 시간에 배웠던 바로 그 함수다.<br>f(x)는 언제나 y이다.<br>10년 후에 실행하던 100년 후에 실행하던 f(x)는 언제나 y이다.<br>하지만 객체 지향 개념의 함수(메소드)는 너무나 많은 사이드 이펙트로 둘러쌓여 있어서 실행할 때 마다 동일한 결과를 보장할 수 없다.  </p><h2 id="일급-함수-일급-객체-일급-시민"><a href="#일급-함수-일급-객체-일급-시민" class="headerlink" title="일급 함수? 일급 객체? 일급 시민?"></a>일급 함수? 일급 객체? 일급 시민?</h2><p>아래 링크를 <del>베꼈다.</del>참고하였다.<br><a href="http://bestalign.github.io/2015/10/18/first-class-object/" rel="external nofollow noopener noreferrer" target="_blank">JavaScript의 함수는 1급 객체(first class object)이다</a></p><h3 id="일급-시민-first-class-citizen"><a href="#일급-시민-first-class-citizen" class="headerlink" title="일급 시민(first class citizen)"></a>일급 시민(first class citizen)</h3><ol><li>변수(variable)에 담을 수 있다.</li><li>매개변수(parameter)로 전달할 수 있다.</li><li>반환값(return value)으로 전달할 수 있다.</li></ol><p>즉, 우리가 생각하는 값으로써 역할을 하는 것을 일급 시민이라고 말하는 것 같다.  </p><h3 id="일급-객체-first-class-object"><a href="#일급-객체-first-class-object" class="headerlink" title="일급 객체(first class object)"></a>일급 객체(first class object)</h3><p>특정 언어에서 <strong>객체를 일급 시민으로써 다룰 수 있느냐</strong>를 뜻한다.<br>자바스크립트에서 객체는 위 조건을 만족하는 일급 시민이므로 일급 객체이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">'양권성'</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;; <span class="comment">// 1. 변수(variable)에 담을 수 있다.</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">obj</span> =&gt;</span> &#123; <span class="comment">// 2. 매개변수(parameter)로 전달할 수 있다.</span></span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 3. 반환값(return value)으로 전달할 수 있다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="일급-함수-first-class-function"><a href="#일급-함수-first-class-function" class="headerlink" title="일급 함수(first class function)"></a>일급 함수(first class function)</h3><p>특정 언어에서 <strong>함수를 일급 시민으로써 다룰 수 있느냐</strong>를 뜻한다.<br>자바스크립트에서 함수는 위 조건을 만족하는 일급 시민이므로 일급 함수이다.<br>또 일급 시민에 더해서 일급 함수는 다음과 같은 조건까지 있어야한다고 주장하기도 한다.  </p><ol><li>런타임(runtime) 생성이 가능하다.  </li><li>익명(anonymous)으로 생성이 가능하다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;; <span class="comment">// 1. 변수(variable)에 담을 수 있다.</span></span><br><span class="line"><span class="keyword">const</span> _fn = <span class="function"><span class="params">fn</span> =&gt;</span> &#123; <span class="comment">// 2. 매개변수(parameter)로 전달할 수 있다.</span></span><br><span class="line">  <span class="keyword">return</span> fn; <span class="comment">// 3. 반환값(return value)으로 전달할 수 있다.</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 함수 선언식은 스크립트 로딩 시점에 VO(Variable Object)에 저장됨.</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;; <span class="comment">// 4. 함수 표현식은 런타임 시에 해석 및 실행이 된다.  </span></span><br><span class="line"><span class="keyword">const</span> c = <span class="function"><span class="params">()</span> =&gt;</span> () =&gt; &#123;&#125;; <span class="comment">// 5. 익명으로 생성이 가능하다.</span></span><br></pre></td></tr></table></figure><p>VO와 함수 표현식 및 선언식에 대한 내용은 아래 사이트를 참고하자.  </p><ul><li><a href="http://mohwa.github.io/blog/javascript/2015/10/14/vo-inJS/" rel="external nofollow noopener noreferrer" target="_blank">Variable Object in JS</a>  </li><li><a href="http://www.nextree.co.kr/p4150/" rel="external nofollow noopener noreferrer" target="_blank">Javascript : 함수(function) 다시 보기</a></li></ul><p>하지만 자바스크립트에서 함수는 객체이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">a.b = <span class="number">123</span>; <span class="comment">// 객체와 같이 프로퍼티 추가가 가능하다.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.b); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>따라서 자바스크립트에서 함수는 일급 객체라고 주장도 하지만 나는 일급 함수가 좀 더 정확한 것 같다. (더 많은 조건을 충족하므로)<br>뭐 자바스크립트에서 함수가 일급 시민이건 객체건 함수건 뭐가 중요한 지는 다음 고차 함수를 통해 알 수 있다.</p><h2 id="고차-함수"><a href="#고차-함수" class="headerlink" title="고차 함수?"></a>고차 함수?</h2><p>함수형 프로그래밍을 접하다 보면 고차 함수란 것을 많이 보게 된다.<br>뭔가 고차원적인 함수일 것 같은데 전혀 아니다.<br>바로 다음과 같은 걸 고차 함수라고 말한다.  </p><ol><li>함수의 인자로 함수를 받는 경우  </li><li>함수의 출력값이 함수인 경우  </li><li>함수의 인자로 함수를 받으면서 출력값이 함수인 경우 (1+2번의 경우)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">fn</span> =&gt;</span> fn(); <span class="comment">// 1. 함수의 인자로 함수를 받는 경우</span></span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; b; <span class="comment">// 2. 함수의 출력값이 함수인 경우</span></span><br><span class="line"><span class="keyword">const</span> fn3 = <span class="function"><span class="params">fn</span> =&gt;</span> fn; <span class="comment">// 함수의 인자로 함수를 받으면서 출력값이 함수인 경우</span></span><br></pre></td></tr></table></figure><p>함수형 프로그래밍의 장점은 여러가지 로직들을 추상화할 수 있는데,<br>매개변수로 함수를 넘기기 때문이다.<br>또 그 출력값으로 얻어낸 함수를 실행해서 여러 코드와 조합을 할 수 있다.  </p><p>내가 아는 한도 내에서 틀렸을지 모르겠지만 함수형 자바스크립트에 대한 것은 다 적은 것 같으니 이제 <a href="#목차">목차</a>를 보고 하나씩 터득해보자.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) pipe</title>
      <link href="/2017/06/30/js-func-08-pipe/"/>
      <url>/2017/06/30/js-func-08-pipe/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-08-pipe/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h2><p>다음과 같은 함수를 작성해보자.  </p><ol><li>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]이란 배열을 만든다.  </li><li>이 배열의 각 요소들을 x3한 배열을 구한다.  </li><li>x3한 배열에서 2의 배수만 추려내서 새로 배열을 구한다.  </li><li>2의 배수들만 모아놓은 각 요소들을 합한 결과를 구하자.  </li></ol><p>함수형에 충실한 우리는 아래와 같이 짜게될 것이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _each = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) iteratee(item)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> _filter = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  _each(list, item =&gt; predicate(item) &amp;&amp; newList.push(item));</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> _map = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  _each(list, item =&gt; newList.push(iteratee(item)));</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _head = <span class="function"><span class="params">list</span> =&gt;</span> list.toString() === <span class="string">'[object Object]'</span> ? <span class="built_in">Object</span>.keys(list)[<span class="number">0</span>] : list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _tail = <span class="function"><span class="params">list</span> =&gt;</span> (</span><br><span class="line">  list.toString() === <span class="string">'[object Object]'</span> ? <span class="built_in">Object</span>.keys(list).slice(<span class="number">1</span>) :</span><br><span class="line">    list.slice ? list.slice(<span class="number">1</span>) : <span class="built_in">Array</span>.from(list).slice(<span class="number">1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _reduce = <span class="function">(<span class="params">list, iteratee, memo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(memo === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    memo = _head(list);</span><br><span class="line">    list = _tail(list);</span><br><span class="line">  &#125;</span><br><span class="line">  _each(list, item =&gt; memo = iteratee(item, memo));</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1번, 배열 만들기</span></span><br><span class="line"><span class="keyword">const</span> nums = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) nums.push(i);</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번, x3한 배열 구하기.</span></span><br><span class="line"><span class="keyword">const</span> mul3Nums = _map(nums, num =&gt; num*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mul3Nums); <span class="comment">// [ 3, 6, 9, 12, 15, 18, 21, 24, 27, 30 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3번, 2의 배수 구하기.</span></span><br><span class="line"><span class="keyword">const</span> getEven = _filter(mul3Nums, num =&gt; !(num%<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getEven); <span class="comment">// [ 6, 12, 18, 24, 30 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4번, 2의 배수들만 구한 배열의 합을 구하기.</span></span><br><span class="line"><span class="keyword">const</span> sumEven = _reduce(getEven, (num, memo) =&gt; memo+num);</span><br><span class="line"><span class="built_in">console</span>.log(sumEven); <span class="comment">// 90</span></span><br></pre></td></tr></table></figure><p>함수형에 더 충실한 사람은 아래와 같이 시도를 해봤을 것이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1번, 배열 만들기</span></span><br><span class="line"><span class="keyword">const</span> nums = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) nums.push(i);</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _reduce( <span class="comment">// 4번, 2의 배수들만 구한 배열의 합을 구하기.</span></span><br><span class="line">    _filter( <span class="comment">// 3번, 2의 배수 구하기.</span></span><br><span class="line">      _map(nums, num =&gt; num*<span class="number">3</span>), num =&gt; !(num%<span class="number">2</span>) <span class="comment">// 2번, x3한 배열 구하기.</span></span><br><span class="line">    )</span><br><span class="line">  , (num, memo) =&gt; memo+num)</span><br><span class="line">); <span class="comment">// 90</span></span><br></pre></td></tr></table></figure><p>소스를 거꾸로 읽어나가야하고, 마치 콜백 함수 지옥에 빠진 듯한 기분이 든다.<br>이러한 콜백 함수 지옥을 헤쳐나가기 위해 나온 것이 pipe이다.<br>마치 비동기 함수에서 콜백 함수 지옥을 탈출하기 위해 프로미스가 나온 것과 비슷해보인다.<br><del>역시 콜백 함수가 문제다.</del></p><p><img src="/images/js-func-08-pipe/pipe.gif" alt="이러한 파이프를 타고 요리조리 이동하며 함수를 하나씩 실행하는 원리이다."><br>우리가 인자로 넘긴 함수를 하나 하나 순차적으로 실행할 수 있게 해주는 pipe 함수를 만들어보자.<br>머리를 굴려도 생각이 나지 않아 아래 링크를 <del>베껴</del>참조 하였다.<br><a href="http://blog.jeonghwan.net/js/2017/05/11/pipeline.html" rel="external nofollow noopener noreferrer" target="_blank">(함수형JS) 흐름 기반 프로그래밍</a><br>최종 결과는 아래와 같을 것이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) nums.push(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 목록들을 리듀스 돌려버린다.</span></span><br><span class="line"><span class="keyword">const</span> _pipe = <span class="function">(<span class="params">...fn</span>) =&gt;</span> _reduce(fn, (fn, memo) =&gt; fn(memo));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_pipe(</span><br><span class="line">  _map(nums, num =&gt; num*<span class="number">3</span>), <span class="comment">// 첫 번째 memo에 결과값이 담겨서 mul3Nums로 다음 함수에게 넘겨지고 있다.</span></span><br><span class="line">  mul3Nums =&gt; _filter(mul3Nums, num =&gt; !(num%<span class="number">2</span>)), <span class="comment">// 두 번째 memo에 결과값이 담겨서 getEven으로 다음 함수에게 넘겨지고 있다.</span></span><br><span class="line">  getEven =&gt; _reduce(getEven, (num, memo) =&gt; memo+num))); <span class="comment">// 세 번째 memo에 결과값이 담겨서 로그 창에 찍힌다.</span></span><br><span class="line">  <span class="comment">// 이렇게 괄호를 쫙쫙쫙 닫아주는 게 함수형 프로그래밍 언어의 컨벤션이며 간지다.</span></span><br></pre></td></tr></table></figure><p>역시 얕게 공부하다보니 간단하게 함수 만들고 예제 만들고 끝나는 것 같다.<br>이제는 세미나 때 들었던 기억이 고갈되는 기분이라 좀 더 공부를 해야할 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) curry</title>
      <link href="/2017/06/30/js-func-07-curry/"/>
      <url>/2017/06/30/js-func-07-curry/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-07-curry/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h2><p><del>카레와 컬링과는 아무런 관련이 없다.</del><br>백문이 불여일견, 간단한 예제를 하나 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 방식</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">20</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">30</span>)); <span class="comment">// 40</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">40</span>)); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub(<span class="number">10</span>, <span class="number">1</span>)); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(sub(<span class="number">10</span>, <span class="number">2</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(sub(<span class="number">10</span>, <span class="number">3</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(sub(<span class="number">10</span>, <span class="number">4</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 기존 방식의 함수를 커링을 이용하여 구성.</span></span><br><span class="line"><span class="keyword">const</span> _add = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; a+b;</span><br><span class="line"><span class="keyword">const</span> _sub = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; a-b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add10 = _add(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> sub10 = _sub(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">20</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">30</span>)); <span class="comment">// 40</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">40</span>)); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">1</span>)); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">2</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">3</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">4</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>기존에 n개의 인자를 받던 방식 대신 함수를 n번 호출하는 함수가 curry 함수, 그러한 기법을 currying이라 부른다.<br><code>b =&gt; a+b</code> 이 부분은 클로저이다.<br><strong>클로저</strong>는 <strong>이미 생명 주기가 끝난 외부 함수의 변수를 참조하는 함수, 생성 당시의 스코프에 대한 연결을 갖는 블록</strong>이라고 정리하고 있다.<br>ES6는 블록 단위의 스코프라 <code>b =&gt; a+b</code> 에서 a는 모르지만 생명 주기가 끝난 외부 함수 <code>a =&gt; b =&gt; a+b</code>에서 a를 참조하고 있으므로 클로저이다.<br>이런 걸 어디다 써먹느냐고 생각할 수 있는데 나중에 go나 pipe, 또한 우리가 작성했던 함수와도 엮어서 사용이 가능하다.<br>위 _add와 _sub는 로직이 비슷해서 추상화가 가능하다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _curry = <span class="function">(<span class="params">a, fn</span>) =&gt;</span> b =&gt; fn(a, b);</span><br><span class="line"><span class="keyword">const</span> add10 = _curry(<span class="number">10</span>, (a, b) =&gt; a+b);</span><br><span class="line"><span class="keyword">const</span> sub10 = _curry(<span class="number">10</span>, (a, b) =&gt; a-b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">20</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">30</span>)); <span class="comment">// 40</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">40</span>)); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">1</span>)); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">2</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">3</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">4</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>뭔가 추상화가 잘 된 것 같다, 인자가 <strong>두 개</strong>인 경우만…<br>그럼 인자가 세 개인 경우에는 인자가 세 개인 커리 함수를 만들 것인가…?<br>n개의 인자에 대해 대비할 수 있는 커리 함수를 다시 만들어보자.<br><del>아래 링크를 보고 완전히 베낀 수준이며 ES6로 작성했을 뿐이다.</del><br>아래 링크를 참고하면 좀 더 자세하고 ES5로 작성된 예제를 볼 수 있다.<br><a href="http://www.haruair.com/blog/2993" rel="external nofollow noopener noreferrer" target="_blank">JavaScript에서 커링 currying 함수 작성하기</a></p><p>클로저는 <strong>함수가 아무리 호출되어도 다시 초기화 하지 않고, 유지되어야하는 값을 위해 쓴다</strong>고 나는 알고 있다.(혹시 틀렸다면 태클을…)<br>기존 함수를 커리 함수로 호출할 때 유지해야할 값이 두 가지가 있다.  </p><ol><li>내가 호출하려는 원래 함수가 몇 개의 인자를 요구하는가  </li><li>내가 지금까지 몇 개의 인자를 넘겼는가</li></ol><p>이 두 가지 값은 함수를 아무리 호출해도 유지를 하고 있어야한다.<br>그럼 커리 함수를 본격적으로 작성해보자.  </p><ul><li>내가 호출하려는 원래 함수가 몇 개의 인자를 요구하는가  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _curry = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fnArgLen은 함수를 호출할 때 마다 유지돼야하고, 값이 변하지 않는다.</span></span><br><span class="line">  <span class="keyword">const</span> fnArgLen = fn.length; <span class="comment">// 인자로 받은 함수(fn)에서 요구하는 인자의 갯수.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(fnArgLen); <span class="comment">// 외부 스코프의 변수인 fnArgLen을 사용하고 있다.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>간단하게 테스트를 위해 함수의 인자를 유지하고 있는지 테스트하기 위한 함수를 만들어보았다.<br>아래와 같이 테스트 해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_curry(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;&#125;)(); <span class="comment">// 3</span></span><br><span class="line">_curry(<span class="function">(<span class="params">a, b, c, d, e</span>) =&gt;</span> &#123;&#125;)(); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>_curry 함수는 함수를 반환하는 고차함수다.<br>따라서 ()()와 같이 함수를 호출해서 반환한 값을 또 호출할 수 있는 것이다.<br>그 결과 우리가 두 번째 함수에는 딱히 인자를 넘기지 않았음에도 불구하고 그 값을 기억하고 있는<br>클로저를 만들어냈다. (클로저가 뭐 그렇게 별 게 아니다.)  </p><ul><li>내가 지금까지 몇 개의 인자를 넘겼는가<br>이 값은 함수를 호출할 때마다 값이 변해야한다.<br>그렇다고 해서 처음부터 초기화를 하는 게 아니라 기존의 값을 <strong>기억</strong>하고 그 뒤에 현재 넘긴 인자를 추가하면 된다.<br>값이 계속해서 동일하지 않더라도 값을 기억하고 있어야하기 때문에 클로저를 써야한다.<br>위 함수에서 좀 더 작성해보자.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _curry = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fnArgLen은 함수를 호출할 때 마다 유지돼야하고, 값이 변하지 않는다.</span></span><br><span class="line">  <span class="keyword">const</span> fnArgLen = fn.length; <span class="comment">// 인자로 받은 함수(fn)에서 요구하는 인자의 갯수.</span></span><br><span class="line">  <span class="built_in">console</span>.log(fnArgLen);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; <span class="comment">// 함수의 인자의 갯수를 기억하는 클로저</span></span><br><span class="line">    <span class="comment">// 인자를 넘겼을 때 그 인자들의 목록은 매번 함수를 호출할 때마다 기억해야함.</span></span><br><span class="line">    <span class="keyword">let</span> memo = [...args]; <span class="comment">// 처음 인자를 넘기고 호출했을 때 그 인자를 담을 배열.</span></span><br><span class="line">    <span class="built_in">console</span>.log(fnArgLen, memo);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">res</span>(<span class="params">...args</span>) </span>&#123; <span class="comment">// 여태까지 넘긴 인자들을 기억하는 클로저, 재호출을 위해 이름을 붙여줌.</span></span><br><span class="line">      memo = [...memo, ...args];</span><br><span class="line">      <span class="built_in">console</span>.log(fnArgLen, memo);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> abcdef = <span class="function">(<span class="params">a, b, c, d, e, f</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = _curry(abcdef); <span class="comment">// 6</span></span><br><span class="line"><span class="keyword">let</span> b = a(<span class="number">1</span>); <span class="comment">// 6, [1]</span></span><br><span class="line"><span class="keyword">let</span> c = b(<span class="number">2</span>); <span class="comment">// 6, [1, 2]</span></span><br><span class="line"><span class="keyword">let</span> d = c(<span class="number">3</span>); <span class="comment">// 6, [1, 2, 3]</span></span><br><span class="line"><span class="keyword">let</span> e = d(<span class="number">4</span>); <span class="comment">// 6, [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">let</span> f = e(<span class="number">5</span>); <span class="comment">// 6, [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="keyword">let</span> g = f(<span class="number">6</span>); <span class="comment">// 6, [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="keyword">let</span> h = g(<span class="number">7</span>); <span class="comment">// 6, [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line">h(<span class="number">8</span>); <span class="comment">// 6, [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></li></ul><p>함수를 계속 호출해도 원래 함수 인자의 갯수와 내가 여태까지 넘겼던 인자를 계속해서 들고있다.<br>여기서 한가지 문제점이 존재한다.<br>내가 원래 넘기려는 인자와 갯수가 일치하면 해당 함수를 실행해야하는데 여전히 계속해서 res 함수를 반환한다는 단점이 존재한다.<br>적절히 조건문을 섞어주면 될 것 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _curry = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fnArgLen은 함수를 호출할 때 마다 유지돼야하고, 값이 변하지 않는다.</span></span><br><span class="line">  <span class="keyword">const</span> fnArgLen = fn.length; <span class="comment">// 인자로 받은 함수(fn)에서 요구하는 인자의 갯수.</span></span><br><span class="line">  <span class="built_in">console</span>.log(fnArgLen);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; <span class="comment">// 함수의 인자의 갯수를 기억하는 클로저</span></span><br><span class="line">    <span class="comment">// 인자를 넘겼을 때 그 인자들의 목록은 매번 함수를 호출할 때마다 기억해야함.</span></span><br><span class="line">    <span class="keyword">let</span> memo = [...args]; <span class="comment">// 처음 인자를 넘기고 호출했을 때 그 인자를 담을 배열.</span></span><br><span class="line">    <span class="built_in">console</span>.log(fnArgLen, memo);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">res</span>(<span class="params">...args</span>) </span>&#123; <span class="comment">// 여태까지 넘긴 인자들을 기억하는 클로저, 재호출을 위해 이름을 붙여줌.</span></span><br><span class="line">      memo = [...memo, ...args];</span><br><span class="line">      <span class="built_in">console</span>.log(fnArgLen, memo);</span><br><span class="line">      <span class="comment">// 인자의 갯수를 충분히 받았다면 원래 실행하려고 했던 함수를 실행한 결과를 반환, 그게 아니면 계속해서 인자를 누적시키는 res 함수를 반환.</span></span><br><span class="line">      <span class="comment">// fnArgLen과 같은 스코프에 공존하는 fn이라는 매개변수도 클로저 때문에 살아있기 때문에 사용이 가능하다.</span></span><br><span class="line">      <span class="keyword">return</span> memo.length &gt;= fnArgLen ? fn.apply(<span class="literal">null</span>, memo) : res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b, c, d, e, f</span>) =&gt;</span> a + b + c + d + e + f;</span><br><span class="line"><span class="keyword">let</span> a = _curry(add); <span class="comment">// 6</span></span><br><span class="line"><span class="keyword">let</span> b = a(<span class="number">1</span>); <span class="comment">// 6, [1]</span></span><br><span class="line"><span class="keyword">let</span> c = b(<span class="number">2</span>); <span class="comment">// 6, [1, 2]</span></span><br><span class="line"><span class="keyword">let</span> d = c(<span class="number">3</span>); <span class="comment">// 6, [1, 2, 3]</span></span><br><span class="line"><span class="keyword">let</span> e = d(<span class="number">4</span>); <span class="comment">// 6, [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">let</span> f = e(<span class="number">5</span>); <span class="comment">// 6, [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="keyword">let</span> g = f(<span class="number">6</span>); <span class="comment">// 6, [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)); <span class="comment">// 21</span></span><br><span class="line"><span class="keyword">let</span> h = g(<span class="number">7</span>); <span class="comment">// TypeError: g is not a function</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" rel="external nofollow noopener noreferrer" target="_blank">Function.prototype.apply</a>은 첫 번째 인자로 this로 바인딩할 값, 두 번째 인자로 매개변수들을 배열로 받는다.<br>여태까지 입력받은 인자를 (1, 2, 3, 4)의 형태로 넘기는 게 가능한지는 모르겠으나(<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call" rel="external nofollow noopener noreferrer" target="_blank">Function.prototype.call이</a> 이런 식으로 동작)<br>그것보다 매개변수를 배열로 ([1, 2, 3, 4])와 같이 넘기는 게 훨씬 편하다.<br>우리가 원하는 형태로 n개의 매개변수를 넘기면 n번 호출해야 함수가 비로소 실행(지연해서 실행이라고 해야하려나)되는 커리 함수를 만들었다.  </p><h2 id="curryr"><a href="#curryr" class="headerlink" title="curryr"></a>curryr</h2><p>하지만 이것도 쓰다보면 어딘가 모르게 어색한 부분이 존재한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"><span class="keyword">const</span> _add = _curry(add);</span><br><span class="line"><span class="keyword">const</span> _sub = _curry(sub);</span><br><span class="line"><span class="keyword">const</span> add10 = _add(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> sub10 = _sub(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">3</span>)); <span class="comment">// 13</span></span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">3</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>add를 할 때는 3에 10을 더해서 13이 나오는 듯한 느낌인데<br>sub를 할 때는 3에 10을 빼서 -7이 나와야할 것 같은데 반대로 10에 3을 빼서 7이 나왔다.<br>덧셈이야 순서가 상관이 없다지만 뺄셈의 경우에는 이야기가 달라진다.<br>따라서 아래와 같이 하면 문제가 해결된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a;</span><br><span class="line"><span class="keyword">const</span> _sub = _curry(sub);</span><br><span class="line"><span class="keyword">const</span> sub10 = _sub(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">3</span>)); <span class="comment">// -7</span></span><br></pre></td></tr></table></figure><p>음… 함수를 커리에게 넘겨줄 때 반대로 쓰면 되는 문제인데…<br>어쨌든 curryr(curry reverse)이라는 녀석이 존재한다.<br>어떤 이유에서 생기긴 했을 거다. 그냥 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _curryr = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fnArgLen은 함수를 호출할 때 마다 유지돼야하고, 값이 변하지 않는다.</span></span><br><span class="line">  <span class="keyword">const</span> fnArgLen = fn.length; <span class="comment">// 인자로 받은 함수(fn)에서 요구하는 인자의 갯수.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; <span class="comment">// 함수의 인자의 갯수를 기억하는 클로저</span></span><br><span class="line">    <span class="comment">// 인자를 넘겼을 때 그 인자들의 목록은 매번 함수를 호출할 때마다 기억해야함.</span></span><br><span class="line">    <span class="keyword">let</span> memo = [...args]; <span class="comment">// 처음 인자를 넘기고 호출했을 때 그 인자를 담을 배열.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">res</span>(<span class="params">...args</span>) </span>&#123; <span class="comment">// 여태까지 넘긴 인자들을 기억하는 클로저, 재호출을 위해 이름을 붙여줌.</span></span><br><span class="line">      memo = [...memo, ...args];</span><br><span class="line">      <span class="comment">// curry reverse이기 때문에 매개변수도 뒤집어서 실행해주면 된다.</span></span><br><span class="line">      <span class="keyword">return</span> memo.length &gt;= fnArgLen ? fn.apply(<span class="literal">null</span>, memo.reverse()) : res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"><span class="keyword">const</span> _sub = _curryr(sub);</span><br><span class="line"><span class="keyword">const</span> sub10 = _sub(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sub10(<span class="number">3</span>)); <span class="comment">// -7</span></span><br></pre></td></tr></table></figure><p>짱구를 굴려봤지만 _curry를 이용해서 추상화 할 수가 없었다 ㅠㅠ…<br>아마 이 curryr의 진가는 <a href="/2017/06/30/js-func-08-pipe/">pipe</a>와 go를 익히면 알게 될 것이다.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) find</title>
      <link href="/2017/06/28/js-func-06-find/"/>
      <url>/2017/06/28/js-func-06-find/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-06-find/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find는 두 말 하면 입 아프겠지만, <strong>기존 데이터 사이에서 원하는 것을 찾을 때</strong> 사용한다.<br>아래 예제를 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>];</span><br><span class="line"><span class="keyword">let</span> no = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!(num % <span class="number">2</span>)) &#123; <span class="comment">// 짝수인지</span></span><br><span class="line">    no = num;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'asdf'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'qwer'</span>, <span class="attr">age</span>: <span class="number">33</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">''</span>; </span><br><span class="line"><span class="keyword">let</span> over30 = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> user <span class="keyword">of</span> users) <span class="keyword">if</span>(user.age &gt; <span class="number">30</span>) <span class="keyword">return</span> over30 = user;</span><br><span class="line"><span class="built_in">console</span>.log(no); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(over30.age ); <span class="comment">// 33</span></span><br></pre></td></tr></table></figure><p>위 코드를 보면 일단 반복문이 반복해서 쓰이고 있고, 뭘 구할지도 반복되고 있다.<br>이 부분들을 추상화해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _find = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) <span class="keyword">if</span>(predicate(item)) <span class="keyword">return</span> item;</span><br><span class="line">  <span class="comment">// 새로운 변수를 만들어서 거기다 값을 담고 리턴하려니 추상화를 해도 오히려 코드가 길어져서 복잡해보인다.</span></span><br><span class="line">  <span class="comment">//let match;</span></span><br><span class="line">  <span class="comment">//_each(list, item =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//  if(predicate(item)) match = item;</span></span><br><span class="line">  <span class="comment">//&#125;);</span></span><br><span class="line">  <span class="comment">//return match</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>];</span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'asdf'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'qwer'</span>, <span class="attr">age</span>: <span class="number">33</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(_find(nums, num =&gt; !(num % <span class="number">2</span>))); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(_find(users, user =&gt; user.age &gt;= <span class="number">30</span>).age); <span class="comment">// 33</span></span><br></pre></td></tr></table></figure><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p>이렇게 배열(과 ArrayLike)을 넘겨서 그 요소 중에서 내가 원하는 조건을 추상화시킨 _find를 써서 원하는 값을 얻어낼 수 있다.<br>그럼 이 요소들이 몇 번째에 있는지 구하는 _findIndex도 만들어보자.<br>기본적으로 순서가 없는, 인덱스로 접근이 불가능한 객체는 무시하고 만들도록 하겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> idx = <span class="number">-1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=nums.length; i&lt;len; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(nums[i] &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">    idx = i;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(idx); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>새 리스트를 만들어서 그 리스트에 할당하는 부분은 없으니 반복문은 추상화시키지 못할 것 같다.<br>또한 인덱스를 반환해야하니 for of 구문은 쓰지 못할 것 같다.<br>추상화시킬 건덕지는 조건문 밖에 없어보인다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _findIndex = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=list.length; i&lt;len; i++) <span class="keyword">if</span>(predicate(list[i])) <span class="keyword">return</span> i;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// 새로운 변수를 만들어서 거기다 값을 담고 리턴하려니 추상화를 해도 오히려 코드가 길어져서 복잡해보인다.</span></span><br><span class="line">  <span class="comment">//let idx = -1;</span></span><br><span class="line">  <span class="comment">//_each(list, item =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//  _each는 인덱스를 리턴하는 게 아니라 매칭된 값을 리턴하기 때문에 추상화 불가.</span></span><br><span class="line">  <span class="comment">//  if(predicate(item)) idx = item;</span></span><br><span class="line">  <span class="comment">//&#125;);</span></span><br><span class="line">  <span class="comment">//return idx;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_findIndex(nums, num =&gt; num &gt;= <span class="number">100</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>왜 -1을 리턴하는지 모르겠는 사람은 <a href="/2017/02/13/es-tilt-operator/">~(Tilde) 연산자</a>를 참고하자. </p><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>some은 하나라도 조건을 만족하면 true를 반환하는 함수다.<br>||(or)의 특성을 지닌다고 보면 될 것 같다.<br>바로 어떤 녀석이 some인지 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> no3 = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) <span class="keyword">if</span>(!(num % <span class="number">3</span>)) &#123; <span class="comment">// 3의 배수라면</span></span><br><span class="line">  no3 = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(no3); <span class="comment">// true</span></span><br><span class="line">nums = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">9</span>];</span><br><span class="line">no3 = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) <span class="keyword">if</span>(!(num % <span class="number">3</span>)) &#123; <span class="comment">// 3의 배수라면</span></span><br><span class="line">  no3 = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(no3); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>조건문 부분만 추상화가 가능해보인다.<br>바로 구현해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _some = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) <span class="keyword">if</span>(predicate(item)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_some(nums, num =&gt; !(num % <span class="number">3</span>))); <span class="comment">// true</span></span><br><span class="line">nums = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_some(nums, num =&gt; !(num % <span class="number">3</span>))); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>위 함수를 보면 find에서 return 구문만 바뀐 걸 볼 수 있다.<br>find 함수와 조합을 해보면 더 추상화 할 수 있을 것 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _some = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> (</span><br><span class="line">  !!_find(list, item =&gt; predicate(item))</span><br><span class="line">);</span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_some(nums, num =&gt; !(num % <span class="number">3</span>))); <span class="comment">// true</span></span><br><span class="line">nums = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_some(nums, num =&gt; !(num % <span class="number">3</span>))); <span class="comment">// flase</span></span><br></pre></td></tr></table></figure><p>0은 3으로 나눴을 때 0이므로 조건식을 만족해서 find 함수로 0을 땡겨온다.<br>하지만 0은 falsy value이므로 거짓이 나온다.<br>따라서 find의 반환값으로 falsy value를 의도적으로 검출해낼 수도 있으므로 위와 같이 _find로는 추상화하지 못한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _findIndex = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=list.length; i&lt;len; i++) <span class="keyword">if</span>(predicate(list[i])) <span class="keyword">return</span> i;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _some = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> _findIndex(list, item =&gt; predicate(item)) !== <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 비트단위의 논리 연산자(Not)인 ~(Tilde)를 쓰면 다음과 같이 할 수 있다.</span></span><br><span class="line"><span class="comment">// const _some = (list, predicate) =&gt; !!~_findIndex(list, item =&gt; predicate(item));</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_some(nums, num =&gt; !(num % <span class="number">3</span>))); <span class="comment">// true</span></span><br><span class="line">nums = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_some(nums, num =&gt; !(num % <span class="number">3</span>))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>_find는 조건을 만족하는 값이면 어떤 값이든 땡겨올 수 있고 falsy value는 물론,<br>심지어 undefined도 땡겨올 수 있으므로 boolean으로 캐스팅해도 올바른 결과를 얻어낼 수 없다.<br>_findIndex는 -1만 아니면 참인 것이기 때문에 -1에 대해서만 대비하면 되므로 추상화하기에 적당하다.</p><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>every는 하나라도 조건을 만족하지 않으면 false를 반환하는 함수다.<br>&amp;&amp;(and)의 특성을 지닌다고 보면 될 것 같다.<br>바로 어떤 녀석이 every인지 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> no3 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) <span class="keyword">if</span>(!(num % <span class="number">3</span> === <span class="number">0</span>)) &#123; <span class="comment">// 3의 배수가 아니라면</span></span><br><span class="line">  no3 = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(no3); <span class="comment">// false</span></span><br><span class="line">nums = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>];</span><br><span class="line">no3 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) <span class="keyword">if</span>(!(num % <span class="number">2</span> === <span class="number">0</span>)) &#123; <span class="comment">// 2의 배수가 아니라면</span></span><br><span class="line">  no3 = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(no3); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>위 코드는 모두 3의 배수인지, 모두 2의 배수인지를 구한 반복문이다.<br>그럼 한 번 추상화해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _every = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) <span class="keyword">if</span>(!(predicate(item))) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_every(nums, num =&gt; num % <span class="number">3</span> === <span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line">nums = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_every(nums, num =&gt; num % <span class="number">2</span> === <span class="number">0</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>위에 반복문 부분도 _find로 추상화해보고 싶지만 위의 _some과 같이 falsy value 이슈가 있을 것 같다.<br>그럼 falsy value로 부터 자유로운 _findIndex를 가지고 추상화해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _findIndex = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=list.length; i&lt;len; i++) <span class="keyword">if</span>(predicate(list[i])) <span class="keyword">return</span> i;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> _every = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> _findIndex(list, item =&gt; !predicate(item)) === <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 비트단위의 논리 연산자(Not)인 ~(Tilde)를 쓰면 다음과 같이 할 수 있다.</span></span><br><span class="line"><span class="comment">//const _every = (list, predicate) =&gt; !~_findIndex(list, item =&gt; !predicate(item));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_every(nums, num =&gt; num % <span class="number">3</span> === <span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line">nums = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_every(nums, num =&gt; num % <span class="number">2</span> === <span class="number">0</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>오늘은 여기까지만 알아보도록 하자.<br>다음 시간에는 함수형의 꽃이라 할 수 있는 <a href="/2017/06/30/js-func-07-curry/">curry</a>에 대해 알아보도록 하자.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) reduce</title>
      <link href="/2017/06/26/js-func-05-reduce/"/>
      <url>/2017/06/26/js-func-05-reduce/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-05-reduce/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>기본적으로 reduce는 <strong>기존 데이터들을 가공해 아예 새로운 데이터</strong>를 얻고자 할 때 쓰인다.<br>1~6까지의 배열이 존재할 때 해당 수들을 가지고 새로운 수를 얻고자 할 때 쓰인다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) sum += num*<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 42</span></span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) <span class="keyword">if</span>(num%<span class="number">2</span>) sum+= num;</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 1 + 3 + 5 = 9</span></span><br></pre></td></tr></table></figure><p>뭐 딱히 추상화할 건 별로 없어보이지만 이런 반복스런 냄새들을 잘 맡고 캐치하는 것이 중요하다.<br>반복문 부분, 그리고 arrayLike와 객체를 위해 일단 추상화를 진행해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _each = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) iteratee(item)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// memo는 디자인 패턴 중 하나인 메모제이션 패턴을 이용한다는 것을 뜻하는 것 같다.</span></span><br><span class="line"><span class="comment">// 또한 데이터들을 어떻게 가공할지는 반복된 함수(iteratee)에게 위임, 추상화 하였다.</span></span><br><span class="line"><span class="keyword">const</span> _reduce = <span class="function">(<span class="params">list, iteratee, memo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// for(const item of list) memo = iteratee(item, memo);</span></span><br><span class="line">  <span class="comment">// 위 코드는 리스트의 반복문을 돌기 때문에 아래와 같이 추상화가 가능하다.</span></span><br><span class="line">  _each(list, item =&gt; memo = iteratee(item, memo));</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_reduce(nums, (num, memo) =&gt; memo + num*<span class="number">2</span>, <span class="number">0</span>)); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><h2 id="head-tail"><a href="#head-tail" class="headerlink" title="head, tail"></a>head, tail</h2><p>하지만 초기값인 메모제이션 인자가 제공되지 않으면 위 함수는 죽고 만다.<br>좀 더 사용하기 쉽게 함수를 만드려면 초기값은 생략이 가능해야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _each = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) iteratee(item)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 리듀스에 초기값이 제공되지 않는 경우 그 초기 값을 얻어내기 위한 함수</span></span><br><span class="line"><span class="comment">// 인덱스로 접근할 수 없는 객체에 대해서 처리를 해줘야 함.</span></span><br><span class="line"><span class="keyword">const</span> _head = <span class="function"><span class="params">list</span> =&gt;</span> list.toString() === <span class="string">'[object Object]'</span> ? <span class="built_in">Object</span>.keys(list)[<span class="number">0</span>] : list[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 초기값을 제외한 값들</span></span><br><span class="line"><span class="keyword">const</span> _tail = <span class="function"><span class="params">list</span> =&gt;</span> (</span><br><span class="line">  <span class="comment">// slice 메소드가 없는 객체의 경우에는 키값들을 퉁친 배열로 반환</span></span><br><span class="line">  list.toString() === <span class="string">'[object Object]'</span> ? <span class="built_in">Object</span>.keys(list).slice(<span class="number">1</span>) :</span><br><span class="line">    <span class="comment">// slice 메소드(프로토타입 등등)가 있으면 고대로 쓰면 되고 ArrayLike 같은 경우에는 Array로 바꿔준 후에 호출하면 됨.</span></span><br><span class="line">    list.slice ? list.slice(<span class="number">1</span>) : <span class="built_in">Array</span>.from(list).slice(<span class="number">1</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> _reduce = <span class="function">(<span class="params">list, iteratee, memo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(memo === <span class="literal">undefined</span>) &#123; <span class="comment">// 초기 값이 없다면</span></span><br><span class="line">    <span class="comment">// 해당 리스트의 첫 번째 값을 초기값으로 삼으면 된다.</span></span><br><span class="line">    memo = _head(list);</span><br><span class="line">    <span class="comment">// 해당 리스트의 첫 번째 값을 제외한 녀석을 리스트로 삼으면 된다.</span></span><br><span class="line">    list = _tail(list);</span><br><span class="line">  &#125;</span><br><span class="line">  _each(list, item =&gt; memo = iteratee(item, memo));</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> doms = <span class="built_in">document</span>.querySelectorAll(<span class="string">'*'</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">'ㅁㄴㅇㄹ'</span>, <span class="attr">age</span>: <span class="number">9999</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_reduce(nums, (item, memo) =&gt; memo + item*<span class="number">2</span>)); <span class="comment">// 41</span></span><br><span class="line"><span class="built_in">console</span>.log(_reduce(doms, (node, memo) =&gt; <span class="string">`<span class="subst">$&#123;memo&#125;</span>노드 이름은 <span class="subst">$&#123;node.nodeName&#125;</span>\n`</span>, <span class="string">''</span>));</span><br><span class="line"><span class="built_in">console</span>.log(_reduce(obj, (key, memo) =&gt; <span class="string">`<span class="subst">$&#123;memo&#125;</span><span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;obj[key]&#125;</span>\n`</span>, <span class="string">''</span>));</span><br></pre></td></tr></table></figure><p>세미나 들은 걸 토대로 머리를 굴려봐서 짜봤는데 틀린 부분은 없는지 확신은 못 하겠다.<br><del>여튼 뭐 돌아는 가니…</del></p><p><a href="/2017/06/30/js-func-07-curry/">curry와 curryr</a>, 그리고 <a href="/2017/06/30/js-func-08-pipe/">pipe</a>와 go가 정말 함수형의 꽃인 것 같은데…<br>일단 다음 포스트인 <a href="/2017/06/28/js-func-06-find/">find</a>를 보도록 하자!  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) each</title>
      <link href="/2017/06/26/js-func-04-each/"/>
      <url>/2017/06/26/js-func-04-each/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-04-each/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="each"><a href="#each" class="headerlink" title="each"></a>each</h2><p>기본적으로 each는 <strong>반복문을 추상화 할 때</strong> 쓰인다.<br>완벽할 것 같은 이 _filter와 _map도 다시 보면 중복이 존재한다.<br>이런 중복을 제거하고 추상화 하는 것들이 함수형의 묘미가 아닐까 싶다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _filter = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) predicate(item) &amp;&amp; newList.push(item);</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _map = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) newList.push(iteratee(item))</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>바로 for 반복문 부분과 객체를 배열화 시키는 부분이 굉장히 반복스런(?) 냄새를 풍긴다.<br>저 부분까지 추상화 해낼 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _each = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) iteratee(item)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> _filter = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  _each(list, item =&gt; predicate(item) &amp;&amp; newList.push(item));</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> _map = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  _each(list, item =&gt; newList.push(iteratee(item)));</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'양간장'</span>, <span class="attr">age</span>: <span class="number">55</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'간장냥'</span>, <span class="attr">age</span>: <span class="number">45</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'장냥이'</span>, <span class="attr">age</span>: <span class="number">35</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'양권성'</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> over40 = _filter(users, user =&gt; user.age &gt;= <span class="number">40</span>);</span><br><span class="line"><span class="keyword">const</span> over40Name = _map(over40, person =&gt; person.name);</span><br><span class="line"><span class="built_in">console</span>.log(over40);</span><br><span class="line"><span class="built_in">console</span>.log(over40Name);</span><br></pre></td></tr></table></figure><p>사실 추상화 해놓고 보면 약간 함수 외부에 있는 리스트에 요소를 넣는다거나 사이트 이펙트를 발생시키긴 하지만…<br>최소한의 사이드 이펙트 정도는 눈감아줘도 되지 않을까… 싶다.<br>음… 그리고 코드가 크게 줄어들지 않아서 와닿지 않을 수도 있는데…<br>ES5 식 코드로 보면 정말 크게 와닿는다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> __filter = <span class="function"><span class="keyword">function</span>(<span class="params">list, predicate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newList = [];</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, len=<span class="built_in">Object</span>.keys(list).length; i&lt;len; i++) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>, len=list.length; i&lt;len; i++) predicate(item) &amp;&amp; newList.push(item);</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> _each = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) iteratee(item)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> _filter = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  _each(list, item =&gt; predicate(item) &amp;&amp; newList.push(item));</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ES5 식으로 작성한 반복문은 굉장히 실수를 하기 좋다.(물론 ES6도 아주 가끔…)<br>조건문을 잘못 쓴다거나 등등…<br>하지만 잘 작성해 놓은 반복문 하나(each)를 추상화해서 배열의 갯수만큼 순서대로 반복문을 돌릴 때<br>반복문 로직을 직접 짜지 않고, 저 추상화한 each 메소드를 쓰면 실수를 할 여지가 많이 줄어드는 것 같다.  </p><p>그럼 이제 바로 다음 포스트인 <a href="/2017/06/26/js-func-05-reduce/">reduce</a>를 공부해보자!  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) map</title>
      <link href="/2017/06/26/js-func-03-map/"/>
      <url>/2017/06/26/js-func-03-map/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-03-map/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>기본적으로 map은 수집, <strong>원본 데이터들을 어떠한 형태로 가공해서 수집할까</strong>의 기능을 한다.  </p><h3 id="기존-프로그래밍"><a href="#기존-프로그래밍" class="headerlink" title="기존 프로그래밍"></a>기존 프로그래밍</h3><p>우선 얻어온 데이터들을 우리가 만든 _filter 함수를 써서 필터링된 결과를 얻은 이후부터 생각해보자.<br>이제 그 데이터(객체)에서 우리가 원하는 나이나 이름(가공)만 뽑아내보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _filter = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) predicate(item) &amp;&amp; newList.push(item);</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'양간장'</span>, <span class="attr">age</span>: <span class="number">55</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'간장냥'</span>, <span class="attr">age</span>: <span class="number">45</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'장냥이'</span>, <span class="attr">age</span>: <span class="number">35</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'양권성'</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;  </span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> over40 = _filter(users, user =&gt; user.age &gt;= <span class="number">40</span>);</span><br><span class="line"><span class="keyword">const</span> over40Age = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> person <span class="keyword">of</span> over40) &#123;</span><br><span class="line">  over40Age.push(person.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> over40Name = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> person <span class="keyword">of</span> over40) &#123;</span><br><span class="line">  over40Name.push(person.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 로직을 보니 역시 반복문 부분과 배열에 넣는 부분, 그리고 객체에서 어떤 걸 뽑아서 넣을지<br>요 부분들이 추상화가 가능할 것 같다.<br>그래서 아래와 같이 함수로 추상화가 가능할 것 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> __map = <span class="function">(<span class="params">list, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">    newList.push(item[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> over40Age = __map(over40, <span class="string">'age'</span>);</span><br><span class="line"><span class="keyword">const</span> over40Name = __map(over40, <span class="string">'name'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(over40Age); <span class="comment">// [ 55, 45 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(over40Name); <span class="comment">// [ '양간장', '간장냥' ]</span></span><br></pre></td></tr></table></figure><p>잘 추상화 한 것 같다.<br>객체의 다른 프로퍼티를 구한다고 할 때도 두 번째 키 인자만 바꿔주면 된다.<br>읭? 객체 말고 다른 녀석인 경우에는? 배열의 요소에다가 모두 1을 더한 배열을 얻고 싶을 때는?<br>이런… 추상화의 포커스가 <strong>객체의 키 값들을 얻어내는 데</strong>만 맞춰져있었다.<br>다시 함수형 본연의 모습을 되찾을 때가 됐다.</p><h3 id="함수형"><a href="#함수형" class="headerlink" title="함수형"></a>함수형</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리스트의 아이템을 어떠한 형태로 수집할지를 iteratee 함수로 추상화하였다.</span></span><br><span class="line"><span class="comment">// 이제 _map 함수는 데이터를 어떻게 수집할지에 대한 책임을 iteratee에게 위임하였다.  </span></span><br><span class="line"><span class="comment">// iteratee는 반복하는 행위를 하는 함수를 뜻하는 것 같다.</span></span><br><span class="line"><span class="comment">// 그 함수는 요소를 인자로 받아서 그 요소를 가지고 지지고 볶고 하는 건 사용할 때 결정하면 될 일이다.  </span></span><br><span class="line"><span class="comment">// 위처럼 '어떻게 지지고 볶을지'를 추상화 해놓지 않고 직접 정의해놓으면 다르게 지지고 볶을 때마다 함수를 계속 만들어줘야한다.</span></span><br><span class="line"><span class="keyword">const</span> _map = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) newList.push(iteratee(item))</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 두 번째 함수에서는 데이터들을 어떻게 지지고 볶아서 가져올지에 대해 정의를 해주면 된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(_map(over40, person =&gt; person.age+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(_map(over40, person =&gt; person.name));</span><br></pre></td></tr></table></figure><p>하지만 아직 우리에게는 숙제가 하나 남아있다.<br>filter에서는 딱히 필요성을 느끼지 못해 돌림직한 객체를 건너뛰었지만 이번 map 예제는 객체에서도 나름 쓸모가 있어 보인다.<br>아래와 같이 객체의 값들을 얻어오고 싶다고 가정을 해보자.<br>조금 복잡하게 설명했지만 객체는 배열과 같이 for of 구문으로 반복문을 돌릴 수 있는 녀석이 아니다.<br>왜냐하면 객체는 순서가 없기 때문이다. (사실은 Symbol.Symbol(iterator) 프로퍼티가 없기 때문)<br>원리가 궁금한 사람은 아래 포스트들을 참고하자.<br>간단하게 Iterator 포스트 정도만 참고해도 될 것 같다.  </p><ul><li><a href="/2016/12/25/es6-interface/">Interface</a>  </li><li><a href="/2017/04/16/ES6-Symbol/">Symbol</a>  </li><li><a href="/2017/04/22/ES6-Iterator/">Iterator</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">'간장이'</span>, <span class="attr">age</span>: <span class="number">255</span>&#125;;</span><br><span class="line"><span class="comment">// Object는 이터러블(반복을 돌릴 수 있는 애)이 아니기 때문에 이터레이터(반복해서 돌릴 수 있는 녀석)가 아니다.  </span></span><br><span class="line"><span class="comment">// 따라서 for of와 같은 구문을 만나면 오류가 나게 되는 것이다.</span></span><br><span class="line"><span class="built_in">console</span>.log(_map(obj, v =&gt; v));</span><br><span class="line"><span class="comment">// 물론 아래와 같이 에러를 회피할 수 있지만 위와 같이 쓰는 게 더 간결하지 않은가?</span></span><br><span class="line"><span class="built_in">console</span>.log(_map(<span class="built_in">Object</span>.keys(obj), key =&gt; obj[key])); <span class="comment">// ['간장이', 255]</span></span><br></pre></td></tr></table></figure></li></ul><p>key와 value의 쌍으로 이루어져있는 돌림직한 객체도 map으로 돌려버릴 수 있게 코드를 좀 손보자.<br>간단하게 한 줄만 추가해주면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _map = <span class="function">(<span class="params">list, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  <span class="keyword">if</span>(list.toString() === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> objValList = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(list)) key !== <span class="string">'length'</span> &amp;&amp; objValList.push(list[key]);</span><br><span class="line">    list = objValList; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) newList.push(iteratee(item))</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_map(obj, v =&gt; v)); <span class="comment">// ['간장이', 255]</span></span><br></pre></td></tr></table></figure><p>그럼 이제 바로 다음 포스트인 <a href="/2017/06/26/js-func-04-each/">each</a>를 공부해보자!  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) filter</title>
      <link href="/2017/06/26/js-func-02-filter/"/>
      <url>/2017/06/26/js-func-02-filter/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-02-filter/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>기본적으로 filter는 필터링, <strong>조건에 맞는 녀석들만 걸러내서 새로운 데이터를 얻는 역할</strong>을 한다.  </p><h3 id="기존-프로그래밍"><a href="#기존-프로그래밍" class="headerlink" title="기존 프로그래밍"></a>기존 프로그래밍</h3><p>우선 서버와 ajax로 통신해서 db에서 다음과 같은 json 데이터를 얻어왔다고 가정해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'양간장'</span>, <span class="attr">age</span>: <span class="number">55</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'간장냥'</span>, <span class="attr">age</span>: <span class="number">45</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'장냥이'</span>, <span class="attr">age</span>: <span class="number">35</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'양권성'</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;  </span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>이 유저들 중에 40대 이상인 사람과 40대 미만인 사람을 구분하는 필터링을 구현해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> over40 = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> user <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="keyword">if</span>(user.age &gt;=<span class="number">40</span>) &#123;</span><br><span class="line">    over40.push(user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> under40 = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> user <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="keyword">if</span>(user.age &lt; <span class="number">40</span>) &#123;</span><br><span class="line">    under40.push(user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(over40);</span><br><span class="line"><span class="built_in">console</span>.log(under40);</span><br></pre></td></tr></table></figure><p>위 코드를 보니 반복문 구문과 새로운 배열에 만족하는 녀석들을 삽입하는 부분이 반복된다.<br>요것들을 어떻게 추상화 시켜서 재사용이 가능하게 끔 한번 해보고 싶어졌다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> __filter = <span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tmp = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> user <span class="keyword">of</span> users) &#123;</span><br><span class="line">    <span class="keyword">if</span>(?????) &#123;</span><br><span class="line">      tmp.push(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우리가 기존에 객체 지향으로 프로그래밍을 했을 때는 조건문 부분은 추상화하기가 힘들다.<br>이런 간지러운 부분을 함수형으로 바꾸면 바로 해결이 가능하다.  </p><h3 id="함수형-프로그래밍"><a href="#함수형-프로그래밍" class="headerlink" title="함수형 프로그래밍"></a>함수형 프로그래밍</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// predicate는 참인지 거짓인지를 판별하는 함수?를 뜻하는 것 같다.</span></span><br><span class="line"><span class="comment">// 또한 사용자만 받는 users라는 인자 보다는 좀 더 범용적인 이름인 list를 쓰는 게 좋다.</span></span><br><span class="line"><span class="keyword">const</span> _filter = <span class="function">(<span class="params">list, predicate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 나는 그냥 임시로 쓰고 말 녀석이기 때문에 별 생각 없이 tmp 등등으로 쉽게 네이밍을 했다.  </span></span><br><span class="line">  <span class="comment">// 하지만 순수 함수는 사이드 이펙트를 발생시키지 않고,</span></span><br><span class="line">  <span class="comment">// 입력값을 토대로 새로운 값을 출력하는 불변성을 가지니 new라는 키워드를 붙여주는 게 좋다. </span></span><br><span class="line">  <span class="keyword">const</span> newList = [];</span><br><span class="line">  <span class="comment">// 필터링의 조건을 predicate 함수로 추상화시켰다.  </span></span><br><span class="line">  <span class="comment">// 구현부에서는 조건문을 신경쓰지 않고 해당 함수에게 위임하면 된다.</span></span><br><span class="line">  <span class="comment">// 또한 함수형 프로그래밍에서는 뭔가 한 줄로 적는 게 간지 같아서 조건문을 논리 연산자로 함축시키고, 중괄호도 다 생략했다.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> list) predicate(item) &amp;&amp; newList.push(item);</span><br><span class="line">  <span class="keyword">return</span> newList;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 이 유저들 중에 40대 이상인 사람과 40대 미만인 사람을 구분하는 필터링을 구현해보자.  </span></span><br><span class="line"><span class="keyword">const</span> over40 = _filter(users, user =&gt; user.age &gt;= <span class="number">40</span>);</span><br><span class="line"><span class="keyword">const</span> under40 = _filter(users, user =&gt; user.age &lt; <span class="number">40</span>);</span><br><span class="line"><span class="built_in">console</span>.log(over40);</span><br><span class="line"><span class="built_in">console</span>.log(under40);</span><br></pre></td></tr></table></figure><p>위에 _filter 함수를 보면 조건(predicate)를 함수의 인자로 받아서<br>그 내부가 어떻게 구현됐건 신경쓰지 않고 predicate 함수에게 배열의 요소만 넘겨서 조건이 참이면 새 배열에 넣게 끔 구현했다.<br>이렇게 _filter는 조건을 추상화, predicate 함수에게 위임했기 때문에 좀 더 사용성이 높아졌다.<br>위와 같이 짜게 되면 ArrayLike의 대표적인 케이스인 NodeList도 필터링이 가능하다.  </p><p>그리고<br>predicate(item) &amp;&amp; newList.push(item);<br>위 구문이 이해 안 가는 사람은 <a href="/2017/02/13/es-logical-operator/">똑똑한 논리 연산자</a>와 <a href="/2017/06/02/js-007-value-expression-statement/">값 vs 식 vs 문</a>을 참고해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'*'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(_filter(nodeList, node =&gt; node.nodeName === <span class="string">'HTML'</span>));</span><br><span class="line"><span class="comment">// Uncaught TypeError: nodeList.filter is not a function</span></span><br><span class="line"><span class="built_in">console</span>.log(nodeList.filter(<span class="function"><span class="params">node</span> =&gt;</span> node.nodeName === <span class="string">'HTML'</span>));</span><br></pre></td></tr></table></figure><p><del>key와 value의 쌍으로 이루어져있는 돌림직한 객체를 필터링하는 것은 세미나에서 다루지 않았기 때문에 정리하지 않겠다.</del><br>key와 value의 쌍으로 이루어져있는 돌림직한 객체를 필터링하는 것은 예제가 잘 떠오르지 않고,<br>필요성을 잘 느끼지 못했기 때문에 정리하지 않도록 하겠다.<br>혹시 관련된 예제나 필요성 등등을 아신다면 댓글을… ^^</p><p>그럼 이제 바로 다음 포스트인 <a href="/2017/06/26/js-func-03-map/">map</a>을 공부해보자!  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(함수형 JS) 왜 쓸까?</title>
      <link href="/2017/06/26/js-func-01-why-make/"/>
      <url>/2017/06/26/js-func-01-why-make/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-func-01-why-make/thumb.png" alt=""></p><p>이 포스트는 <a href="https://www.inflearn.com/" rel="external nofollow noopener noreferrer" target="_blank">인프런</a>에서 진행한 <a href="https://www.facebook.com/profile.php?id=100011413063178" rel="external nofollow noopener noreferrer" target="_blank">유인동</a> 님의 <a href="https://www.inflearn.com/course/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="external nofollow noopener noreferrer" target="_blank">함수형 자바스크립트</a>를 듣고 감명 받아서 쓴 글이다.<br>사실 <a href="http://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a>, <a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">lodash</a> 등 함수형 패러타임으로 코드를 짤 수 있게 끔<br>미리 이런 함수들을 제공하는 라이브러리들을 쓰고, 이 포스트는 그닥 볼 필요가 없다.<br>하지만 이런 원리를 알고 접근을 하다보면 위 라이브러리를 쓴다고 하더라도 추가로 필요한 나의 코드를 함수형으로 더 짜기 유용하지 않을까?  </p><a id="more"></a><h2 id="왜-쓸까"><a href="#왜-쓸까" class="headerlink" title="왜 쓸까?"></a>왜 쓸까?</h2><p>우선 함수형 프로그래밍의 핵심을 꼽아보라고 하면</p><ol><li>Filter  </li><li>Map  </li><li>Reduce  </li><li>Find</li></ol><p>등등을 꼽아볼 수가 있다.</p><p>기본적으로 ES5부터는</p><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="external nofollow noopener noreferrer" target="_blank">Array.prototype.map</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="external nofollow noopener noreferrer" target="_blank">Array.prototype.filter</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" rel="external nofollow noopener noreferrer" target="_blank">Array.prototype.reduce</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="external nofollow noopener noreferrer" target="_blank">Array.prototype.find</a></li></ol><p>등등의 메소드가 이미 존재한다.<br>단순히 메소드이기 때문에 함수로 만들고자 이 행위를 하는 것일까?<br><strong>아니다.</strong><br>이 메소드들은 ArrayLike나 돌림직한(?), 돌릴 수 있는 데이터(key와 value의 쌍으로 이루어져있는 object 등등)들에게는 적용되지 못한다.  </p><p><strong>ArrayLike…?</strong><br><img src="/images/js-func-01-why-make/array-like.png" alt="대표적인 ArrayLike인 NodeList"><br>ArrayLike는 배열 같지만 배열이 아니다.<br>다음과 같은 특징을 갖는다.  </p><ol><li>length 프로퍼티가 존재한다.  </li><li>index로 접근이 가능하다.  </li><li>Symbol(Symbol.iterator) 프로퍼티가 있기 때문에 이터러블하다.  </li><li>하지만 Array의 프로토타입을 상속받지 않는다.</li></ol><p>1~3번 때문에 배열 같지만, 정작 4번 때문에 배열의 메소드들은 사용하지 못한다는 점이 특징이다.<br>여하튼, 위 메소드들은 <strong>순수 배열</strong>만 사용 가능하지만 이제부터 우리가 만들어 볼 애들은 돌림직한 녀석들이면 모두 가능하다!<br>즉 언어가 특정 기능을 추가해줄 때까지 기다릴 필요 없이 내 입맛대로 원하는 녀석들을 구현할 수가 있다.<br>이게 바로 함수형이 가지는 장점이다!  </p><p>또한 함수형으로 프로그래밍을 하다보면 기존에 객체 지향 프로그래밍을 할 때보다 더 추상화할 수 있는 요소가 많아진다.<br>기존에 코딩을 하다보면 분명 반복된 것 같은데… 라는 생각은 들지만 마땅히 어떻게 추상화를 해야할지 찾아내기가 힘들었던 경험이 많다.<br>하지만 함수형에서는 단순 변수에 값을 변화시키는 것을 뛰어넘어서 조건문, 반복문 등등 다양한 것들이 추상화가 가능하다.<br>그래서 비슷한 일을 하는 녀석을 하나로 퉁쳐서 사용하기 때문에 비슷한 코드를 짤 필요가 없어진다.  </p><p>그리고 함수형 프로그래밍을 할 때 장점이 이것 저것 조합해서 만들 수 있는 일이 많아진다.<br>따라서 추상화 할 수 없을 것 같았던 부분도 여러 함수들로 조합을 하다보면 전부 추상화가 가능해 생산성이 올라간다.<br>추상화가 가능하다는 것은 이 코드를 여기 저기서 쓸 수 있다는 것이고, 그렇게 된다면 당연히 코드를 짜는 시간이 줄어들기 때문이다.<br>따라서 정말 보다보면 아무런 의미 없는 undefined를 리턴하는 함수, 값을 입력받아서 그대로 리턴하는 함수 등등<br>뭐 이런 거까지 함수로 뽑아내나? 싶은 녀석들까지 있다고 한다. (아직 그런 걸 배워본 경지는 아니라서…)</p><p>이렇게 작은 단위로 쪼개서 함수를 만들다보면 테스트하기도 쉬워지고 오류가 날 가능성도 적어진다.<br>또한 기존 객체 지향 프로그래밍에서는 사이드 이펙트 때문에 함수의 평가 시점에 따라서 결과가 다르게 나왔다.<br>하지만 함수형 프로그래밍에서는 기본적으로 사이드 이펙트가 없는 순수 함수를 지향하기 때문에 어느 시점에 평가가 이루어져도 된다.<br>따라서 기존 객체 지향 프로그래밍에서는 싱크를 맞추거나 락을 걸어놓거나 쓰레드 풀을 만들어 놓고<br>기타 뻘짓을 했어야 했다는데(자바를 잘 몰라서 죄송합니다 ㅠㅠ) 함수형 프로그래밍으로 작성을 하면 언제 실행되던 간에 상관이 없는 것이다.  </p><p>따라서 이러한 진가를 발휘하는 게 또 Node.js이다.<br>기본적으로 자바와 같은 프로그램에서는 하나의 요청이 들어오면 하나의 쓰레드를 만들고,<br>그 쓰레드는 그 유저의 요청이 끝날 때까지 해당 유저만 점령할 수 있는 것으로 알고 있다.<br>하지만 Node는 하나의 요청이 들어오면 요청에 대한 처리를 돌리고, 그 처리가 끝나는 동안 다른 유저의 요청들을 받는다.<br>그 이후에 기존 유저의 처리가 끝나면 콜백함수가 실행되는 싱글 스레드 형태이다.<br>이렇게 비동기 I/O로 서버를 구성하다보니 동접에 있어서 훨씬 적은 자원으로 효율성이 올라간다고 한다.<br>이 비동기에서 중요한 것은 언제 실행하던 동일한 결과를 보장받아야 한다는 것이다.<br>유저의 요청이 언제 끝나는지에 따라 실행 결과가 달라진다면 기존 자바와 같이 락을 걸어놓아야 할 것이다.<br>하지만 순수 함수로 하다보면 이런 요청에 대한 평가가 언제 이루어지던 동일한 결과를 보장받으므로<br>비동기 I/O의 동시성, 병렬성 뭐시기 이런 것들을 더욱 쓸 수 있다는데… 요런 놈도 더 공부를 해야겠다.</p><p>이런 것들을 알고 보니 lodash나 underscore는 단순히 유틸성 라이브러리가 아니라<br>함수형 프로그램 패러다임을 준수하여 코딩하는 걸 도와주는 차원의 라이브러리였다는 걸 깨닫게 되었다.</p><p>그럼 이제 바로 다음 포스트인 <a href="/2017/06/26/js-func-02-filter/">filter</a>를 공부해보자!  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 함수형 JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 함수형 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js란...?</title>
      <link href="/2017/06/18/what-is-node-js/"/>
      <url>/2017/06/18/what-is-node-js/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/what-is-node-js/thumb.png" alt=""><br>이 글을 쓰게 된 계기는 다음과 같다.  </p><blockquote><p>Q: Node.js는 서버인가요?<br>A: 네, 백엔드 개발자들이 Node.js를 씁니다.  </p></blockquote><p>‘백엔드 개발자<strong>도</strong> 쓸 뿐, 프론트 엔드 개발자도 쓸 수 있다’가 내가 내린 결론이고,<br>오늘은 그에 대해 하나 하나 검증해보는 시간을 가져보고, 다른 사람들에게 잘못된 지식이 전파되는 걸 막고자 한다.<br>혹시 내가 내린 결론이 잘못된 부분은 무한 태클을 환영한다.  </p><a id="more"></a><h1 id="Node-js란…"><a href="#Node-js란…" class="headerlink" title="Node.js란…?"></a>Node.js란…?</h1><p><img src="/images/what-is-node-js/01.png" alt="Node.js 공식 사이트에서 내린 Node.js의 정의"><br>Node.js는 Chrome V8 Javascript 엔진으로 빌드된 Javascript <strong>런타임</strong>이다.<br>V8 자바스크립트 엔진은 여기서 중요한 포인트가 아니므로 직접 찾아보길 바란다.    </p><p><a href="http://asfirstalways.tistory.com/99" rel="external nofollow noopener noreferrer" target="_blank">런타임에 대해 정리한 다른 블로그의 포스트</a>를 빌려보자면 다음과 같다.</p><blockquote><p>런타임이란 프로그래밍 언어가 구동되는 환경</p></blockquote><p>예전에는 자바스크립트 런타임이 <strong>브라우저</strong> 밖에 존재하질 않았다.<br>하지만 그러한 한계를 극복하고 Node.js가 나왔다.  </p><h2 id="Javascript-실행-환경"><a href="#Javascript-실행-환경" class="headerlink" title="Javascript 실행 환경?"></a>Javascript 실행 환경?</h2><p>첫 번째로 Node.js는 REPL(Read, Eval, Print, Loop)을 통해서 런타임을 제공한다.  </p><ol><li>Read: 유저의 입력 값을 받아서 메모리에 저장  </li><li>Eval: 입력 값의 평가, 실행  </li><li>Print: Eval로 인해 반환된 값을 출력  </li><li>Loop: 1~3을 반복.  </li></ol><p>이러한 REPL은 <a href="https://babeljs.io/repl/" rel="external nofollow noopener noreferrer" target="_blank">Babel REPL</a>과 같이 웹에서 제공해주기도 하고,<br>Node.js에서 제공하는 REPL은 윈도우의 CMD, 맥의 터미널 등등에서 제공을 해준다.<br><img src="/images/what-is-node-js/02.png" alt="터미널에서 node라고 입력을 하면 node repl이 실행된다.">  </p><p>두 번째로 따로 자바스크립트 파일을 Node.js에서 제공하는 자바스크립트 런타임을 통해 실행이 가능하다.<br>위와 같이 REPL에서 개발을 하면 간단한 테스트 정도면 몰라도 어플리케이션을 개발하는 데 적합하지 않다.<br>따라서 repl 보다는 따로 스크립트 파일을 만들어서 그 스크립트 파일을 node.js, V8이 해석 후 실행하는 형태로 작업을 많이 하게 된다.<br>아래 소스 코드를 node.js에서 돌리는 것은 위의 REPL에서 실행한 것과 동일하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line">a;</span><br><span class="line">a + <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><img src="/images/what-is-node-js/03.png" alt=""></p><h2 id="그럼-왜-Node-js는-백엔드-영역이라는-오해가-생겼을까"><a href="#그럼-왜-Node-js는-백엔드-영역이라는-오해가-생겼을까" class="headerlink" title="그럼 왜 Node.js는 백엔드 영역이라는 오해가 생겼을까?"></a>그럼 왜 Node.js는 백엔드 영역이라는 오해가 생겼을까?</h2><p>Node.js를 통해서 서버<strong>도</strong> 만들 수 있기 때문이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.end(<span class="string">"Hello World\n"</span>);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/what-is-node-js/04.png" alt="node.js를 통해 실행한 server.js"><br><img src="/images/what-is-node-js/05.png" alt="node.js를 통해 구현한 서버">  </p><h2 id="그럼-프론트-엔드-개발자는-언제-Node-js를-쓰는가"><a href="#그럼-프론트-엔드-개발자는-언제-Node-js를-쓰는가" class="headerlink" title="그럼 프론트 엔드 개발자는 언제 Node.js를 쓰는가?"></a>그럼 프론트 엔드 개발자는 언제 Node.js를 쓰는가?</h2><p>매우 빈번하게 쓰이는데 그 중에서 대표적으로 ES2015+ 문법을 ES5 문법으로 트랜스파일 해주는 <a href="/2016/11/11/Babel-ES6-with-IE8/">Babel</a>을 예로 들어보겠다.<br>먼저 babel의 기본적인 요소들을 설치하겠다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S babel-cli babel-preset-env</span><br></pre></td></tr></table></figure><p>babel-cli, CLI이기 때문에 터미널 위에서 돌아간다는 점을 염두해두자.  </p><p>그리고 간단한 바벨 설정 파일(.babelrc)을 만들어주자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 다음에 package.json의 npm script 부분을 다음과 같이 추가해주면 된다.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel"</span>: <span class="string">"babel"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 ES2015+의 간단한 파일을 하나 만들어보겠다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>터미널에서 babel-cli를 통해 해당 파일을 ES5로 트랜스파일 된 결과를 보자.<br><img src="/images/what-is-node-js/06.png" alt="&quot;use strict&quot; 구문 부터가 실제로 트랜스파일 된 결과">  </p><p>이게 뭐가 Node.js를 통해 실행한 내용인지 확인해보자.<br>기본적으로 npm script는 node_modules 디렉토리 안의 .bin 디렉토리에 있는 디렉토리를 인식한다.<br><img src="/images/what-is-node-js/07.png" alt="node_modules/.bin 디렉토리 안에 babel 파일이 존재한다.">  </p><p>그리고 그 내용은 다음과 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../lib/babel"</span>);</span><br></pre></td></tr></table></figure><p><code>#!/usr/bin/env node</code> 요 구문으로 인해 node.js에서 cli를 만들 수 있게 해주는 것이라고 생각하면 된다.<br>그럼 직접 <code>../lib/babel</code>을 찾아가보자.  </p><p><img src="/images/what-is-node-js/08.png" alt="node_modules/babel-cli/lib/babel 디렉토리가 존재한다."><br>Node.js에서 기본적으로 디렉토리 뒤에 따로 파일이 명시되지 않으면 index.js 파일을 찾아가는 규칙이 있다.<br>index.js 파일의 상단 부분을 보면 다음과 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _keys = <span class="built_in">require</span>(<span class="string">"babel-runtime/core-js/object/keys"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _keys2 = _interopRequireDefault(_keys);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> commander = <span class="built_in">require</span>(<span class="string">"commander"</span>);</span><br><span class="line"><span class="keyword">var</span> kebabCase = <span class="built_in">require</span>(<span class="string">"lodash/kebabCase"</span>);</span><br><span class="line"><span class="keyword">var</span> options = <span class="built_in">require</span>(<span class="string">"babel-core"</span>).options;</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"babel-core"</span>).util;</span><br><span class="line"><span class="keyword">var</span> uniq = <span class="built_in">require</span>(<span class="string">"lodash/uniq"</span>);</span><br><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">"glob"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이하 생략</span></span><br></pre></td></tr></table></figure><p>소스 코드 첫 라인에 <code>#!/usr/bin/env node</code>을 보면 CLI임을 짐작할 수 있다.<br>그럼 다음과 같이도 실행을 해볼 수도 있다는 말이 된다.  </p><p><img src="/images/what-is-node-js/09.png" alt="npm script가 아닌 직접 파일로 접근해서 CLI를 실행">  </p><p>하지만 우리가 접근한 파일은 우리가 흔히 보고 있는 js 파일이다.<br>Node.js는 자바스크립트를 실행해줄 수 있는 환경인 런타임을 제공해주기 때문에 다음과 같이도 할 수 있다.<br><img src="/images/what-is-node-js/10.png" alt="Node.js에서 바벨을 실행시킨 결과">  </p><p>즉, 바벨을 쓴다면, 프론트 엔드 개발자도 Node.js를 쓴다는 결론을 내릴 수가 있다.<br>바벨 뿐만 아니라 웹팩, 걸프, CRA, Vue-CLI 등등 npm으로 설치하는 모든 CLI는 Node.js를 이용한다고 보면 된다.<br>그리고 npm(Node Package Manger)을 쓴다는 것 자체가 Node.js를 이용한다고 보면 된다.  </p><h2 id="웹을-벗어난-Node-js"><a href="#웹을-벗어난-Node-js" class="headerlink" title="웹을 벗어난 Node.js"></a>웹을 벗어난 Node.js</h2><p><img src="/images/what-is-node-js/11.png" alt="Node.js 공홈 about 페이지"><br>Node.js는 확장성 있는 <strong>네트워크 애플리케이션</strong>을 위해 설계했다고 나온다.<br>네트워크 어플리케이션, 즉 서버, 서버를 위해서 설계된 플랫폼이다.<br>따라서 Node.js로 실제 구현하는 내용도 서버가 많다는 것에는 동의한다.<br>또한 많은 프론트 엔드 개발자들이 주로 노드를 이용하는 사례인<br>npm으로 의존성 모듈 관리, 바벨, 웹팩과 같은 CLI를 Node.js 위에서 구동하는 경우<br>이 경우에 </p><blockquote><p>나 노드 할 줄 안다</p></blockquote><p>라고 누군가에게 어필하기에는 다소 무리가 있을 수가 있다.<br>왜냐면 노드로 서버를 구축하는 사례가 너무 많고, 이미 그런 오해가 정석처럼 받아들여지는 상황이라<br>필드에 나가서 노드 할 줄 안다고 했을 때  </p><ul><li>나 노드로 서버 만들 줄 안다.  </li><li>나 노드로 의존성 모듈 관리하고 CLI를 Node.js 위에서 돌릴 줄 알아.<br>둘 중에 누구의 말로 받아들이는 경우가 더 많을까…<br>이런 고민을 하다보니 그럼 웹이 아닌 경우에는 무엇이 있을까 고민하게 됐다.  </li></ul><h3 id="데스크탑-어플리케이션을-제작해주는-일렉트론-Electron"><a href="#데스크탑-어플리케이션을-제작해주는-일렉트론-Electron" class="headerlink" title="데스크탑 어플리케이션을 제작해주는 일렉트론(Electron)"></a>데스크탑 어플리케이션을 제작해주는 일렉트론(Electron)</h3><p><img src="/images/what-is-node-js/12.png" alt="Electron의 정의"><br>맥, 윈도우 등등의 크로스 플랫폼 데스크탑 어플리케이션을 HTML, CSS, JS를 통해 만들 수 있다.<br>자세히 몰라서 아래의 사진으로 대체하겠다.<br><img src="/images/what-is-node-js/13.png" alt="출처: http://blog.dramancompany.com/2015/12/electron%EC%9C%BC%EB%A1%9C-%EC%9B%B9-%EC%95%B1-%EB%A7%8C%EB%93%A4%EB%93%AF-%EB%8D%B0%EC%8A%A4%ED%81%AC%ED%86%B1-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0/"><br>슬랙과 atom, vs code가 일렉트론으로 만들어졌다 하니 믿을만 하다고 할 수 있을 것 같다.  </p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>Node.js를 할 줄 안다고 하면 <strong>Node.js로 서버를 구성할 줄 안다</strong>라고 인식되는 것은 어느 정도 이해할 수 있다.<br>하지만 Node.js 그 자체를 백엔드 자체만의 기술, 웹 서버 자체만으로 받아들이고<br>프론트 엔드 개발자들은 Node.js를 쓸 줄 모른다는 그런 잘못된 지식으로 남들에게 더 이상 인식되지 않는 환경이 조성되길 바란다.<br>명심하자.<br><strong>Node.js는 백엔드, 웹 서버가 아니라 자바스크립트 실행 환경에 불과하다</strong></p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="http://asfirstalways.tistory.com/99" rel="external nofollow noopener noreferrer" target="_blank">런타임이란?</a>  </li><li><a href="https://velopert.com/235" rel="external nofollow noopener noreferrer" target="_blank">REPL 터미널</a>  </li><li><a href="http://blog.dramancompany.com/2015/12/electron%EC%9C%BC%EB%A1%9C-%EC%9B%B9-%EC%95%B1-%EB%A7%8C%EB%93%A4%EB%93%AF-%EB%8D%B0%EC%8A%A4%ED%81%AC%ED%86%B1-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0/" rel="external nofollow noopener noreferrer" target="_blank">Electron으로 웹 앱 만들듯 데스크톱 앱 만들기</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 연산자</title>
      <link href="/2017/06/02/js-008-operator/"/>
      <url>/2017/06/02/js-008-operator/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-008-operator/thumb.png" alt="">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 여덟 번째 시리즈는 연산자를 주제로 진행하겠다.  </p><a id="more"></a><h2 id="캐스팅-Casting-연산자"><a href="#캐스팅-Casting-연산자" class="headerlink" title="캐스팅(Casting) 연산자"></a>캐스팅(Casting) 연산자</h2><p>캐스팅이라 하면 형변환이랑 동일하다고 보면 된다.  </p><h3 id="Any-gt-String"><a href="#Any-gt-String" class="headerlink" title="Any -&gt; String"></a>Any -&gt; String</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>.toString()); <span class="comment">// 'false'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="literal">true</span>).toString()); <span class="comment">// 'true'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>)); <span class="comment">// 'null'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 제일 간결해서 추천한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span> + <span class="literal">undefined</span>); <span class="comment">// 'undefined'</span></span><br></pre></td></tr></table></figure><h3 id="Any-gt-Number"><a href="#Any-gt-Number" class="headerlink" title="Any -&gt; Number"></a>Any -&gt; Number</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">null</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">'11a'</span>).valueOf()); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">'123'</span>)); <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> * <span class="string">'334'</span>); <span class="comment">// 334</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'123.4'</span> / <span class="number">1</span>); <span class="comment">// 123.4</span></span><br><span class="line"><span class="built_in">console</span>.log(-(-<span class="string">'445.2'</span>)); <span class="comment">// 445.2</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="string">'112.2'</span>); <span class="comment">// 112</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// + 연산자가 제일 간결하고, 소수점 이하 보존도 되고, ES6+에서 생긴 이진수, 십진수 리터럴도 지원한다.  </span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'0b1111'</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'1233.3'</span>); <span class="comment">// 1233.3</span></span><br></pre></td></tr></table></figure><h3 id="Any-gt-Boolean"><a href="#Any-gt-Boolean" class="headerlink" title="Any -&gt; Boolean"></a>Any -&gt; Boolean</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">undefined</span>).valueOf()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래가 제일 간결해서 아래를 추천한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">2</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="연산자의-비밀"><a href="#연산자의-비밀" class="headerlink" title="= 연산자의 비밀"></a>= 연산자의 비밀</h2><p>= 은 우항의 값을 좌항의 변수에 할당할 때 쓰는 할당 <code>연산자</code>이다.<br>하지만 모든 <code>연산자</code>에는 반환 <code>값</code>이 존재한다. 반환값 없는 연산자는 존재하지 않는다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line"><span class="built_in">console</span>.log(c = b = a = <span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ol><li>a = 3에 의해 3이 a에 할당된다.  </li><li>b = a에 의해 a의 값인 3이 b에 할당된다.  </li><li>c = b에 의해 b의 값인 3이 c에 할당된다.  </li><li>= 연산자는 우항의 값을 반환하는 연산자이므로 3이 반환된다.  </li></ol><p>이렇게 = 연산자는 변수 할당문으로 쓸 수 있지만 그 자체가 연산자이기 때문에 표현식으로써의 기능도 충실히 수행할 수 있다.<br>표현식이기 때문에 변수에 할당할 수 있다는 것은 당연한 소리다.<br><del>위를 보고 변수 할당 체이닝이라 부르려나..</del></p><h2 id="쉼표-연산자의-비밀"><a href="#쉼표-연산자의-비밀" class="headerlink" title="쉼표(,) 연산자의 비밀"></a>쉼표(,) 연산자의 비밀</h2><p>, 또한 연산자이다. 그 말은 반환값이 있다는 것이다.<br>우선 ,의 사용 사례를 보도록 하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 변수 선언문</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> k;</span><br><span class="line"><span class="comment">// 아래와 같이 할 수도 있다.</span></span><br><span class="line"><span class="comment">// var i = 2, j = 3, k;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 함수 선언문(표현식)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b, c</span>) </span>&#123; <span class="keyword">return</span> b*c; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 함수 호출문</span></span><br><span class="line">a(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 그렇다면 , 연산자의 반환 결과는 무엇일까?</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log((a += <span class="number">2</span>, b += <span class="number">3</span>, a*b)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>쉼표 또한 연산자이고 가장 우측에 있는 녀석의 값을 반환한다는 사실을 알았다.<br>신기하다.  </p><h2 id="n제곱-연산자-ES2016"><a href="#n제곱-연산자-ES2016" class="headerlink" title="n제곱 연산자(ES2016+)"></a>n제곱 연산자(ES2016+)</h2><p>ES2016+이기 때문에 웬만해서는 바벨을 돌려야할 것이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** <span class="number">3</span>); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="기타-유용한-연산자"><a href="#기타-유용한-연산자" class="headerlink" title="기타 유용한 연산자"></a>기타 유용한 연산자</h2><p>&amp;&amp;, ||와 같은 <a href="/2017/02/13/es-logical-operator/">똑똑한 논리 연산자</a>, <a href="/2017/02/13/es-tilt-operator/">~(Tilde) 연산자</a>도 참고해보자.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Value </tag>
            
            <tag> Expression </tag>
            
            <tag> Statement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 값 vs 식 vs 문</title>
      <link href="/2017/06/02/js-007-value-expression-statement/"/>
      <url>/2017/06/02/js-007-value-expression-statement/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-007-value-expression-statement/thumb.png" alt="">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 일곱 번째 시리즈는 값 vs 식 vs 문을 주제로 진행하겠다.  </p><a id="more"></a><h2 id="값-Value"><a href="#값-Value" class="headerlink" title="값(Value)"></a>값(Value)</h2><p>값은 고정적이다. 변하지 않는다. 너무 쉬워서 뭐라 달리 설명할 게 없다.<br>아래와 같은 것을 값이라고 부른다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-2.1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">Infinity</span>);</span><br><span class="line"><span class="built_in">console</span>.log(-<span class="literal">Infinity</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. String</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'aa qq'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Symbol (ES2015+)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">'aa'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.for(<span class="string">'qqq'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. Object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log([]);</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a/</span>);</span><br></pre></td></tr></table></figure><h3 id="Falsy-Value-amp-amp-Truthy-value"><a href="#Falsy-Value-amp-amp-Truthy-value" class="headerlink" title="Falsy Value &amp;&amp; Truthy value"></a>Falsy Value &amp;&amp; Truthy value</h3><p>Falsy Value는 조건식에서 false로 취급되는 모든 경우를 뜻한다.<br>다음과 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">NaN</span>);</span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>Truthy Value는 조건식에서 true로 취급되는 값이고 위의 경우를 제외하고 전부이다.</p><h2 id="식-Expression"><a href="#식-Expression" class="headerlink" title="식(Expression)"></a>식(Expression)</h2><p>표현식이라고도 부른다.<br>평가(실행)했을 때 값을 반환하는 녀석은 전부 식이라고 한다.<br>다음과 같이 말도 안 되는 것 같이 보이는 것들도 식이라고 할 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">c</span>) </span>&#123; <span class="keyword">return</span> c*c; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대부분은 아래와 같이 변수 할당'문'(?)의 형태로만 써봤을 것이다.</span></span><br><span class="line"><span class="comment">// a = 3;</span></span><br><span class="line"><span class="built_in">console</span>.log(a = <span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b(<span class="number">2</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log((a=<span class="number">3</span>, <span class="literal">false</span>, <span class="number">3</span>+<span class="number">7</span>)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래 코드를 다음과 같이 쓸 수 있다. 물론 권장하지 않는다.</span></span><br><span class="line"><span class="comment">// a = 1 &gt; a ? 3 : 2;</span></span><br><span class="line"><span class="number">1</span> &gt; a ? a = <span class="number">3</span> : a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>제일 기괴한 것은 <code>a = 3</code>을 문이 아닌 식으로써 쓸 수 있다는 것이다.<br>대부분 a = 3; 과 같이 문으로써는 써봤어도 식으로써는 써본 적이 적거나 없을 것이다.<br>여기서는 일단 위 구문을 식으로써 써서 값을 반환한다는 정도만 알아두자.<br>다음에 연재할 <a href="/2017/06/02/js-008-operator/">연산자</a> 파트에서 자세히 알아보도록 하자.<br>여기서 알아둘 점은 식은 값을 반환하고 그 값을 변수에 할당이 가능, 즉 <code>변수 할당문 우변에 사용이 가능</code>하다는 뜻이다.<br>혹은 반복문이나 조건문의 조건식, 반복문의 증감식 등등에도 쓰일 수 있고 삼항 연산자,<br>함수의 반환값 등등에서도 충분히 사용이 가능하니 꼭 알아둬야할 부분이다.  </p><h2 id="문-Statement"><a href="#문-Statement" class="headerlink" title="문(Statement)"></a>문(Statement)</h2><p>세미콜론을 만나면 문이라고 생각하면 된다.<br>단 조건문, 반복문, 함수 선언문, 예외 처리 구문 등등과 같이 블록(<code>{}</code>)이 들어간 구문은<br>문 끝에 세미콜론이 포함되면 문법 상 옳지 않다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span> &gt; <span class="number">10</span>) &#123; alert(<span class="number">1</span>); &#125; <span class="comment">// 조건문</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">false</span>) &#123; alert(<span class="number">2</span>); &#125; <span class="comment">// 반복문</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 함수 선언문</span></span><br><span class="line"><span class="comment">// 예외 처리 구문</span></span><br><span class="line"><span class="keyword">try</span> &#123;&#125;</span><br><span class="line"><span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> z; <span class="comment">// 변수 선언문</span></span><br><span class="line">z = <span class="number">2</span>; <span class="comment">// 변수 할당문</span></span><br><span class="line">x(); <span class="comment">// 함수 호출문</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123; <span class="comment">// 변수 초기화 구문</span></span><br><span class="line">  <span class="keyword">return</span> a; <span class="comment">// 값 반환 구문</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>문 중에는 변수 할당문과 함수 호출문 같이 식으로써 쓰일 수 있는 것도 있다.<br>하지만 다른 문들은 값, 식과는 달리 할 수 없는 게 있다.<br>바로 <code>문은 변수에 할당이 불가능</code>하다.<br>상식적으로 if 문을 변수에 할당한다고 생각하면 말이 안 된다고 볼 수 있다.<br>예외로 함수 선언문은 함수 표현식으로 변환이 되어 변수에 할당이 가능하다.</p><p>막상 적고 보니 별로 생각나는 게 없으니 이만 마무리하고 <a href="/2017/06/02/js-008-operator/">연산자</a> 파트까지 보도록 하자.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Value </tag>
            
            <tag> Expression </tag>
            
            <tag> Statement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 반복문의 진실 (번외편)</title>
      <link href="/2017/06/02/js-loop-truth/"/>
      <url>/2017/06/02/js-loop-truth/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-loop-truth/thumb.png" alt="쳇바퀴 돌 듯 반복되는 우리네들의 인생">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>이번에도 번외편 격으로 반복문의 진실에 대해 알아보도록 하자.  </p><a id="more"></a><h2 id="반복문의-진실"><a href="#반복문의-진실" class="headerlink" title="반복문의 진실?"></a>반복문의 진실?</h2><p><del>사실 리덕스의 하나의 진실의 근원(Single Source of Truth)에서 영향을 받았다.</del><br>우선 가장 간단한 1~10까지 더해서 출력하는 for 문을 살펴보도록 하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">11</span>; i++) &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p>for 문은 아래와 같이 나눌 수 있다.<br><img src="/images/js-loop-truth/01.png" alt="선언 및 초기화, 조건 표현식, 증감 표현식"><br>다른 곳에서는 선언 및 초기화, 조건식, 증감식으로 했는데<br>나는 거기다 <code>표현식</code>까지 붙였다.  </p><p>위 구문은 아래와 같이 줄일 수 있다.<br>for, while, if 문 등등은 실행 구문이 한 줄이면 대괄호가 생략 가능하다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">11</span>;) sum += i++;</span><br></pre></td></tr></table></figure><p>증감 표현식은 필수가 아니다.<br>또한 초기화 및 선언 구문도 필수가 아니기 때문에<br>아래와 같이 줄일 수 있지만 전역 스코프를 더럽힐 가능성이 있기 때문에<br>해당 변수를 스코프 외부에서도 쓰려는 특수한 경우가 아닌 이상은 권장하지 않는다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; i&lt;<span class="number">11</span>;) sum += i++;</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p><del>이제부터 나오는 걸 실무에서 사용했다간 협업자나 사수에게 등짝 스매싱을 당할 수도 있다.</del><br>하지만 증감 표현식을 달리 생각해보면 그냥 <code>표현식</code>으로 볼 수도 있다.<br>반복문의 실행 구문, {} 안의 내용(여기선 생략했지만),이 끝난 이후에 한 번 실행되는 표현식에 불과하다고 볼 수 있다.<br>아래와 같이 말이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; i&lt;<span class="number">11</span>; sum += i++);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p><code>sum += i++</code> 이게 문이 아니라 <code>표현식</code>으로써 쓰일 수가 있다.<br>표현식이라 하면 평가(실행)를 하여 <code>값</code>을 <code>반환</code>할 수 있으면 표현식이라 부를 수 있다.<br>sum += i++에 의해 우선 sum에 sum + i++의 값이 할당되게 된다.<br>그리고 그 반환값은 sum + i++이 된다.<br>하지만 우리에게 중요한 것은 sum에 sum + i++의 값이 담겼다는 게 중요하지 그것의 반환값은 중요하지 않다.<br>또한 그 자체만으로 표현식이기 때문에 조건과 관련이 있는 i에 i++과 같은 증감의 내용을 담고 있다면<br>증감 표현식 자리에 반복문의 실행 구문이 들어갈 수 있게 되는 것이다.  </p><p><del>하지만 여기서 멈춘다면 진실의 근원으로부터 멀어질 수가 있다.</del><br>이 증감 표현식 부분 마저도 줄여버릴 수가 있다.<br>아래와 같이 말이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; i&lt;<span class="number">11</span> &amp;&amp; (sum += i++););</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p>&amp;&amp; 뒷부분을 괄호로 묶어주지 않으면 &amp;&amp; 연산자가 우선순위가 더 높아<br>11 &amp;&amp; sum을 먼저 평가하고 거기다가 += 연산을 수행하므로 괄호로 묶어줘야한다.<br>&amp;&amp; 연산자의 동작 원리가 궁금한 사람은 <img src="" alt="">을 참고하자.  </p><p>물론 해당 내용은 while에게도 적용이 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">11</span>) &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 55</span></span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">i= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 위 while문을 줄이고 줄여보자.</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">11</span> &amp;&amp; (sum += i++));</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p><del>do-while은 귀찮으니 그만 알아보자.</del></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 훼이크 연산자 (번외편)</title>
      <link href="/2017/05/30/js-fake-operator/"/>
      <url>/2017/05/30/js-fake-operator/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-fake-operator/thumb.png" alt="함정카드 발동">  </p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>이번에는 번외편 격으로 훼이크 연산자를 배워보도록 하자.<br>아이디어를 제공해주신 <a href="https://www.facebook.com/profile.php?id=100005410202751" rel="external nofollow noopener noreferrer" target="_blank">백성훈</a> 님께 감사를 전한다.</p><a id="more"></a><h2 id="훼이크-연산자"><a href="#훼이크-연산자" class="headerlink" title="훼이크 연산자?"></a>훼이크 연산자?</h2><p>말 그대로 훼이크 연산자이다. 공식 명칭은 아니다.<br>의도한 대로 동작하지 않는 연산자를 뜻한다.<br>어찌보면 왜 이렇게 스펙에 구현됐는지 이해하기 힘든 내용이라서 굳이 몰라도 될 것 같기도 하다.  </p><p>기본적으로 함수 선언<code>문</code>은 함수의 이름이 필수적이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// Uncaught SyntaxError: Unexpected token (</span></span><br></pre></td></tr></table></figure><p>그에 반해 함수 표현<code>식</code>은 함수의 이름이 옵션이다.<br>디버깅을 위해서 권장을 한다지만 크롬에서는 이마저도 기본으로 제공해주는 것 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>에러가 전혀 나질 않는다.<br>하지만 여기서 공통된 부분이 보인다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 선언문에서 이름을 뺀 부분, 비록 에러가 나지만...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 표현식에서 이름을 뺀 부분</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>위 두 구문에서 변수 선언을 제외하고는 완전히 일치한다.<br>이 내용들이 아래 (훼이크)연산자들을 만나면 시너지(?)를 발휘한다.<br>모두 단항(Unary) 연산자들이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - ! ~</span><br></pre></td></tr></table></figure><p>단항 연산자가 뭐라고 훼이크 연산자라고 말하는지 모르겠다면<br>최신 스펙 문서인 ES2017 스펙의 Unary Operator 부분에서 대표적으로 <a href="https://www.ecma-international.org/ecma-262/7.0/#sec-unary-plus-operator" rel="external nofollow noopener noreferrer" target="_blank">Unary + Operator</a>만 살펴보자.  </p><p><img src="/images/js-fake-operator/01.png" alt="영어라고 겁먹지 말자"><br>맨 위에 보이듯이 우선 우리가 예측하는, + 연산자의 기능은 뒤에 있는 표현<code>식</code>의 평가 결과로써 얻어지는 <code>값</code>을 숫자형으로 변환해주는 기능을 한다.<br>그렇다. + 뒤에있는 녀석은 무조건 표현<code>식</code>으로 취급한다.<br>그 뒤에 있는 녀석이 표현<code>식</code>으로서의 문법만 지켰다면 선언<code>문</code>이어도 표현<code>식</code>인 것처럼 강제로 문변환? 식변환?이 일어나게 되는 것이다.<br>그렇다면 우리가 살펴볼 훼이크 오퍼레이터 부분은 아래 부분에 나온다.<br><code>evaluating UnaryExpression</code>. + 뒤에 나오는 단항 표현<code>식</code>을 <code>평가</code>한다고 하는 것 같다.<br>그렇다면 여기서 한 번 짱구를 굴려봐서</p><blockquote><p>선언<code>문</code>을 표현<code>식</code>으로서 강제시켜서 써먹을 수 있는 방법이 있을까?</p></blockquote><p>라는 생각까지 미치게 된다. (사실 나도 다른 글을 보고 유추한 거지만…)<br>그렇다면 선언<code>문</code>과 표현<code>식</code>이 같은 문법으로 쓰이는 경우를 찾아보니 위에 적어논 익명(?) 함수 선언문과 익명 함수 표현식이었다.<br>익명 함수 선언문은 오류를 뿜지만 이를 표현식으로써 사용한다면 문법상 오류를 뿜어내질 않는다.<br>확인해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 표현식을 평가해서 나오는 것은 함수 그 자체이다.</span></span><br><span class="line"><span class="comment">// 왜냐하면 함수를 호출해서 true를 반환한 게 아니기 때문이다.</span></span><br><span class="line"><span class="comment">// 이 함수 그 자체를 숫자형으로 바꾸니 Not a Number(NaN)이 나오는 것이다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(+<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 내 말이 안 믿긴다면 아래의 결과로 확인해보자.</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(+a); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>이렇게만 쓰면 의미가 없으니 대부분 IIFE(Immediately Invoked Function Expressions, 즉시 실행 함수)와 엮어서 많이 쓴다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 쓰는 이유는 두 가지가 있는 것 같다.</span></span><br><span class="line"><span class="comment">// 즉시 실행 함수의 가독성이 떨어지거나 보기 흉해서 보기 좋게 표현하려고,</span></span><br><span class="line"><span class="comment">// 혹은 반환값을 가지고 다른 연산을 해야하는 경우인 것 같다.</span></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;() === <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>그런데 나는 딱히 즉시 실행 함수의 가독성이 나쁘다고 생각해본 적이 없고,<br>즉시 실행 함수의 반환값을 가지고 뭘 해본 적이 없어서 딱히 필요성은 잘 모르겠다.<br>다만 선언문 형태를 표현식으로서 취급한다는 게 신기했다.</p><h2 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h2><ul><li><a href="https://stackoverflow.com/questions/13341698/javascript-plus-sign-in-front-of-function-name" rel="external nofollow noopener noreferrer" target="_blank">JavaScript plus sign in front of function name</a>  </li><li><a href="http://2ality.com/2011/12/fake-operator-overloading.html" rel="external nofollow noopener noreferrer" target="_blank">Fake operator overloading in JavaScript</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Operator </tag>
            
            <tag> Unary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>성공(?)한 겜덕이 되다</title>
      <link href="/2017/05/26/become-successful-gamtaku/"/>
      <url>/2017/05/26/become-successful-gamtaku/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/become-successful-gamtaku/thumb.png" alt="16비트 게임기 슈퍼 패미콤"></p><h2 id="나의-유년시절을-함께한-슈퍼-패미콤"><a href="#나의-유년시절을-함께한-슈퍼-패미콤" class="headerlink" title="나의 유년시절을 함께한 슈퍼 패미콤"></a>나의 유년시절을 함께한 슈퍼 패미콤</h2><p>6세 경에 명절이 되면 할머니 집에 친척들이 다 같이 모여 슈퍼 패미콤으로 게임을 하였다.<br>당시 미국에 살았던 친척 형네서 사온 것으로 알고 있는데, 그 형이 게임을 잘해서 덕분에 명절 때마다 항상 즐거웠다.<br>슈퍼 스트리트 파이터 2, 슈퍼 동키콩 2, 슈퍼 마리오 월드, 요시 아일랜드 등등 정말 재미있게 했다.<br>지금도 그 때 그 시절을 회상하면 참 그립다.  </p><a id="more"></a><p><img src="/images/become-successful-gamtaku/super-buttoden-3.jpg" alt="일요일 아침이 되면 디즈니 만화동산을 보고 나서 했던 초무투전 3"></p><p>따라서 나는 아직도 <code>슈퍼 패미콤</code>이란 단어만 들어도 가슴이 뛰고 항상 그립다.<br>초등학생 때 슈퍼 마리오 RPG의 한글패치를 접하면서 게임을 한글로 바꿀 수 있다는 사실을 알게 되었다.<br>하지만 당시 나는 프로그래밍의 ‘프’자도 모르던 상황이라 미완성 패치를 즐기는 것으로 만족할 수 밖에 없었다.</p><p><img src="/images/become-successful-gamtaku/01.png" alt="미완성 됐던 슈퍼마리오 RPG 한글패치">  </p><p>그렇게 기억 속에 묻어뒀던 한글패치였는데 대학을 컴공으로 진학하게 되고,<br>강좌를 보고 롬파일들을 분석하면서 어느 정도 할 수 있게 되면서 여러 게임들을 한글로 패치하게 되었다.<br><img src="/images/become-successful-gamtaku/02.png" alt="바이너리 파일들 노가다로 분석하기"><br><img src="/images/become-successful-gamtaku/03.png" alt="한자를 하나씩 문자 인코딩 패턴을 파악해야한다">  </p><p>분석부터 번역가를 구하고 최종 검수까지 험난한 여정이 진행되지만,<br>내 대학 생활은 그런 취미 생활로 인해 활력이 부여된 것 같다.<br>지금은 생업과 다른 취미가 생겨 한글화를 접었지만, 후일에 또 할지도 모르겠다.<br>내가 한 한글화는 다음과 같다.  </p><ul><li><a href="http://perfectacle.blog.me/40174638159" rel="external nofollow noopener noreferrer" target="_blank">초오공전 돌격편</a>  </li><li><a href="http://perfectacle.blog.me/220587556160" rel="external nofollow noopener noreferrer" target="_blank">초오공전 각성편</a>  </li><li><a href="http://perfectacle.blog.me/220297115483" rel="external nofollow noopener noreferrer" target="_blank">슈퍼마리오 RPG</a>  </li><li><a href="http://perfectacle.blog.me/220525483533" rel="external nofollow noopener noreferrer" target="_blank">고스트 트릭</a>  </li><li><a href="http://perfectacle.blog.me/220824102818" rel="external nofollow noopener noreferrer" target="_blank">제절초</a>  </li></ul><h2 id="생전-처음으로-팬-이-생기다"><a href="#생전-처음으로-팬-이-생기다" class="headerlink" title="생전 처음으로 팬(?)이 생기다"></a>생전 처음으로 팬(?)이 생기다</h2><p>위에서 한 게임 중에 가장 네임드 있는 작품은 슈퍼마리오 RPG와 고스트 트릭이다.<br>그 중에서도 슈퍼마리오 RPG는 발매된 지 20년이 넘은 작품이라 그런지<br>요즘 콘솔 게임을 즐기는 사람들보다 더 추억에 젖어있고 연배가 있는 매니아 층이 형성된 것 같다.<br>그래서인지 2월 경에 직접 팩에다가 납땜을 해서 한글패치 된 팩을 제작해서 보내주신 분도 계신다.  </p><p><img src="/images/become-successful-gamtaku/04.png" alt="이렇게 직접 팩을 뜯어서 납땜을 해주셨다"><br><img src="/images/become-successful-gamtaku/05.jpeg" alt="직접 곽까지 제작해서 포장해주셨다">  </p><p>정말 정말 뿌듯했다.<br>한글화 하면서 가장 뿌듯했던 적이 아닐까 싶다.<br>나름 유명(?)해졌다는 착각에 빠지기도 하면서 마냥 기분이 좋았다 ㅎㅎ</p><h2 id="실기로-한글-패치-구동하기"><a href="#실기로-한글-패치-구동하기" class="headerlink" title="실기로 한글 패치 구동하기"></a>실기로 한글 패치 구동하기</h2><p>슈퍼 패미콤을 약 9세 경에 친척에게 떠나보내고, 실물을 보지 못한 지 어언 16년이 되었다.<br>아직도 슈패하면 가슴이 뛴다. <del>하지만 막상 사라고 하면 사고 싶진 않은 걸 왜일까…</del><br>요 근래 생일을 맞아 고스트 트릭을 번역해줬던 지인이 슈퍼 패미콤을 선물해주었다.<br>하지만 110v 전원이라 바로 구동하진 못하고 변압기를 다시 구매하고 오늘에서야 도착을 했다.<br>부푼 마음으로 연결하고 구동을 해봤는데, 레트로 TV가 아니라 화면이 많이 뭉개지지만 너무 가슴이 벅차 올랐다.  </p><p><img src="/images/become-successful-gamtaku/06.jpeg" alt="생일 선물로 받은 슈퍼 패미콤"><br><img src="/images/become-successful-gamtaku/07.jpeg" alt="슈퍼마리오 RPG 타이틀 화면"><br><img src="/images/become-successful-gamtaku/08.jpeg" alt="감동적인 한글 자막 출력 화면"></p><p>정말 인복이 타고난 것 같다.<br><del>내심 내가 한글 패치 제작했으니 누군가 나에게 선물해 줬으면… 하는 마음도 가졌지만</del><br>정말 뜻 깊고 내 유년시절로 돌아간 것 같은 시간이었다.<br>잠깐 추억팔이 하고 말 줄 알았는데 게임을 하다보니 한글에다가 옛 추억들이 새록새록 피어나서 은근히 재미있다.<br>역시 게임은 실기로 해야 제맛인 것 같다.<br>언젠가 다시 한글화를 재개할 지는 모르겠지만… 이 맛에 한글화 하는 게 아닌가 싶다 ㅎㅎ<br>행복한 밤이다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 잡동사니 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 잡동사니 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 모듈화 Part. 2</title>
      <link href="/2017/05/20/js-006-module/"/>
      <url>/2017/05/20/js-006-module/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-006-module/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 여섯 번째 시리즈는 ES2015+의 Module(모듈)을 주제로 진행하겠다.<br>일단 <a href="/2017/05/20/js-005-module/">ES5 이하에서 모듈화</a>를 읽고 오길 바란다.  </p><a id="more"></a><h2 id="import-export"><a href="#import-export" class="headerlink" title="import/export"></a>import/export</h2><p>ES5 이하에서는 네임스페이스 패턴을 이용해 모듈화를 진행했지만 전역 스코프를 더럽힌다는 단점,<br>전역 스코프를 더럽히지 않으려면 즉시 실행함수 패턴을 이용해야하지만 외부에서 접근이 불가능하다는 단점이 존재했다.<br>진정한 모듈이라고 하면 외부에서 참조가 가능하면서 전역 스코프를 더럽히면 안 된다.<br>그를 해결한 게 ES2015의 import/export 문법인데 <code>지원 가능한 브라우저/노드</code>가 없다.<br><a href="/2016/11/11/Babel-ES6-with-IE8/">바벨</a>이라는 트랜스파일러를 사용해서 ES5로 변환해도 Node.js에서 밖에 안 되고,<br>브라우저에서는 모듈들을 하나로 합쳐주는 <a href="/2016/11/18/Module-bundling-with-Webpck/">웹팩</a>과 같은 모듈 번들러를 이용하는 수 밖에 없다.<br>일단 스펙에는 표준으로 등록됐으니 한 번 알아보도록 하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export 키워드로 모듈(변수라고 보이지만 이 변수가 하나의 일을 수행하는 모듈이 될 수도 있다.)을 내보내고 있다.</span></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">const</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 비동기 통신을 하는 함수.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 그걸 외부에서 사용할 수 있게 끔 모듈로 만듦.</span></span><br><span class="line"><span class="comment">// default로 만들 수 있는 모듈은 파일 당 한 개 뿐이다. </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">33</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">44</span>;</span><br><span class="line"><span class="keyword">const</span> getLastIndex = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 배열의 마지막 인덱스를 구하는 함수.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 그걸 외부에서 사용할 수 있게 끔 모듈로 만듦. </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a파일에 존재하는 모듈과 b파일에 존재하는 모듈들을 써서 실제로 앱을 만들어보자 </span></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// default 키워드로 export 한 모듈은 &#123;&#125; 안에 안 써줘도 된다.</span></span><br><span class="line"><span class="comment">// 그냥 export 한 모듈은 &#123;&#125; 요 안에 모듈 이름을 적어줘야한다.</span></span><br><span class="line"><span class="comment">// export 한 모듈을 한 번에 다 import 하려면 * as A 하면 A 객체의 프로퍼티로 모듈이 전부 바인딩 된다.</span></span><br><span class="line"><span class="keyword">import</span> ajax, * <span class="keyword">as</span> A <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default 키워드로 export 한 모듈은 이름을 어떻게 불러와도 사용이 가능하다.</span></span><br><span class="line"><span class="comment">// b.js에 a란 모듈을 불러오려고 했는데 이미 a란 모듈이 불러와졌거나 a라는 이름이 마음에 안 들면</span></span><br><span class="line"><span class="comment">// as 라는 별칭 키워드를 써서 _a로 이름을 바꿔서 불러오고 있다.</span></span><br><span class="line"><span class="comment">// b는 export 했지만 안 쓴다면 export하지 않아도 된다.</span></span><br><span class="line"><span class="keyword">import</span> getLastIdx, &#123;a <span class="keyword">as</span> _a&#125; <span class="keyword">from</span> <span class="string">'./b.js'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.a); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(A.b); <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(_a); <span class="comment">// 33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 모듈을 마음대로 불러다 쓸 수 있다.</span></span><br><span class="line">ajax(<span class="string">'http://www.naver.com'</span>);</span><br><span class="line">getLastIdx([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="number">7</span>]);</span><br></pre></td></tr></table></figure><p>전역 스코프를 더럽히지도 않으면서 네이밍도 자유로워지고 불러올 때도 입맛에 맞춰 불러올 수 있다.<br>사실 여기서 설명한 모듈화는 빙산의 일각이고(내가 일각만 알고 있기도 하고…),<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/import" rel="external nofollow noopener noreferrer" target="_blank">import</a> / <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/export" rel="external nofollow noopener noreferrer" target="_blank">export</a>에서 좀 더 자세한 설명을 참고하고,<br>추가적으로 Node.js 진영에서 모듈화를 위해 사용하는 CommonJS 스펙과 브라우저 진영에서 사용했던 AMD 스펙을 비교/정리 해주는<br><a href="http://d2.naver.com/helloworld/12864" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a> 포스팅을 참고하길 바란다.<br>다음으로는 자료형과 변수에 대해서 정리를 해 볼 예정이다.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Module </tag>
            
            <tag> import </tag>
            
            <tag> export </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) 모듈화 Part. 1</title>
      <link href="/2017/05/20/js-005-module/"/>
      <url>/2017/05/20/js-005-module/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-005-module/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 다섯 번째 시리즈는 모듈화를 주제로 진행하겠다.</p><a id="more"></a><h2 id="모듈화란"><a href="#모듈화란" class="headerlink" title="모듈화란?"></a>모듈화란?</h2><p>저번 시간에 아래와 같은 문제점이 존재한다는 것을 발견했다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 요 사이에 내 부사수가 작성한 c.js를 로딩시켰다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 내가 작성한 a.js</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내 부사수가 작성한 c.js</span></span><br><span class="line"><span class="comment">// 블라블라</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 블라블라</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 작성한 b.js</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">var</span> btnA = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">var</span> btnB = <span class="built_in">document</span>.getElementById(<span class="string">'b'</span>);</span><br><span class="line">  btnA.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">  btnB.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>a와 b 버튼을 누르면 내가 작성한 a.js의 num이 아닌 부사수가 작성한 c.js의 num값인 2가 출력된다.<br>a보다 c.js를 더 늦게 불러왔고 js의 스코프는 모듈(이해하기 쉽게 설명하면 파일) 단위가 아니기 때문이다.  </p><p>이런 문제점을 극복하고자 아래와 같은 패턴이 존재한다.  </p><h3 id="네임스페이스-패턴"><a href="#네임스페이스-패턴" class="headerlink" title="네임스페이스 패턴"></a>네임스페이스 패턴</h3><p>C++에서 처음 이 단어를 접했는데 일단 뭐 그 부분은 알아서들 찾아보고,<br>그럼 어떻게 활용하는지 알아보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 내가 작성할 a.js</span></span><br><span class="line"><span class="keyword">var</span> util = util || &#123;&#125;;</span><br><span class="line">util.num = util.num || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 부사수가 작성할 c.js</span></span><br><span class="line"><span class="keyword">var</span> util2 = util2 || &#123;&#125;;</span><br><span class="line">util2.num = util2.num || <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 작성할 b.js</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">var</span> btnA = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">var</span> btnB = <span class="built_in">document</span>.getElementById(<span class="string">'b'</span>);</span><br><span class="line">  btnA.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(util.num);</span><br><span class="line">  &#125;;</span><br><span class="line">  btnB.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(util.num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이제 부사수가 지지고 볶고 자신의 스크립트를 어디서 불러오든간에<br>부사수가 util 객체만 건드리지 않는다면 내 코드는 안전을 보장받는 것이다.  </p><p>그럼 저 || or 연산자는 왜 썼는지 알아보자.<br>||의 원리가 궁금한 사람은 <a href="/2017/02/13/es-logical-operator/">(ES) 똑똑한 논리 연산자</a>를 참고하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 내가 작성한 util 모듈</span></span><br><span class="line"><span class="comment">// util 이라는 1차 네임 스페이스</span></span><br><span class="line"><span class="keyword">var</span> util = util || &#123;&#125;;</span><br><span class="line"><span class="comment">// array라는 2차 네임 스페이스</span></span><br><span class="line">util.array = util.array || &#123;&#125;;</span><br><span class="line">util.array.getIdx = util.array.getIdx || <span class="function"><span class="keyword">function</span>(<span class="params">val, array</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 블라블라</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 자바스크립트 파일이 너무 많아서 util이란 모듈이 존재하는지 모르고</span></span><br><span class="line"><span class="comment">// || 연산자(기본값 지정)을 사용하지 않고 util 모듈을 재정의할 경우</span></span><br><span class="line"><span class="keyword">var</span> util = &#123;</span><br><span class="line">  string: &#123;</span><br><span class="line">    getLastChar: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 블라블라</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 작성한 util 모듈을 쓴 다른 코드</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 부사수가 정의한 util 모듈에 의해 array 네임스페이스는 날아간 상태임.</span></span><br><span class="line"><span class="comment">// 따라서 오류가 발생함.</span></span><br><span class="line"><span class="keyword">var</span> midIdx = util.array.getIdx(<span class="number">7</span>, arr);</span><br></pre></td></tr></table></figure><p>위와 같은 상황이 발생할까봐 좀 귀찮더라도 || 연산자를 써서 모듈을 정의할 것을 추천한다.<br>아래와 같이 작성해야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 내가 작성한 util 모듈</span></span><br><span class="line"><span class="comment">// util 이라는 1차 네임 스페이스</span></span><br><span class="line"><span class="keyword">var</span> util = util || &#123;&#125;;</span><br><span class="line"><span class="comment">// array라는 2차 네임 스페이스</span></span><br><span class="line">util.array = util.array || &#123;&#125;;</span><br><span class="line">util.array.getIdx = util.array.getIdx || <span class="function"><span class="keyword">function</span>(<span class="params">val, array</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 블라블라</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 자바스크립트 파일이 너무 많아서 util이란 모듈이 존재할까봐 기본값 패턴을 써서 util 모듈을 정의한 경우</span></span><br><span class="line"><span class="keyword">var</span> util = util || &#123;&#125;;</span><br><span class="line">util.string = util.string || &#123;&#125;;</span><br><span class="line">util.string.getLastChar = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 블라블라</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 따라서 util 모듈은 아래와 같은 형태를 띈다.</span></span><br><span class="line"><span class="comment">// 내가 작성한 util 모듈을 전혀 훼손시키지 않고 부사수의 모듈과 결합이 되었다.</span></span><br><span class="line"><span class="comment">// 뭐 사실 모듈 간에 이름은 최대한 겹치지 않고 작하는 게 맞는 것 같다.</span></span><br><span class="line">util = &#123;</span><br><span class="line">  array: &#123;</span><br><span class="line">    getIdx: <span class="function"><span class="keyword">function</span>(<span class="params">val, array</span>) </span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  string: &#123;</span><br><span class="line">    getLastChar: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 작성한 util 모듈을 쓴 다른 코드</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 작성한 util 모듈의 array 네임스페이스는 살아있음.</span></span><br><span class="line"><span class="keyword">var</span> midIdx = util.array.getIdx(<span class="number">7</span>, arr);</span><br></pre></td></tr></table></figure><p>하지만 매번 있는지 없는지 기본 연산자로 체크하고 귀찮기도 하고,<br>만약에 그 값이 존재한다면 내가 쓰려고 하는 값이 아닌 기존의 값으로 대체가 돼버리니<br>재정의가 불가능해질 수도 있다.<br>이를 위해서 ES2015에 대한 모듈화 포스팅을 참고하자.  </p><h2 id="스코프-강제-형성"><a href="#스코프-강제-형성" class="headerlink" title="스코프 강제 형성"></a>스코프 강제 형성</h2><p>ES2015+는 블록 단위의 스코프라 {}만 써도 강제로 스코프가 형성이 됐었다.<br>그럼 함수 단위의 스코프인 ES5에서는 어떻게 할 수 있을까?  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수를 임의로 만들면 된다.</span></span><br><span class="line"><span class="comment">// 근데 함수는 만든다고 실행하는 게 아니니 함수를 만들자마자 실행해야한다.</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 즉시 실행할 것이기 때문에 재호출할 일이 없으니 이름이 필요 없으니 익명함수로 작</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)(); <span class="comment">// 그 함수를 실행</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이를 즉시 실행함수(IIFE: Immediately Invoked Function Expressions)라고 부른다.  </span></span><br><span class="line"><span class="comment">// 대개 1회성 함수, 한번만 쓰는 코드, 클로저 등등에 쓰는데</span></span><br><span class="line"><span class="comment">// 전역 스코프를 더럽히지 않는다는 장점 때문에 나는 무조건 쓴다.  </span></span><br><span class="line"><span class="comment">// 하지만 외부에서 참조해야하는 경우에는 네임스페이스 패턴을 이용해 모듈화를 진행해서 쓰는 편이다.</span></span><br><span class="line"><span class="comment">// 사실 ES2015+ 들어가면 이렇게 절대 안 쓰니 딥하게 파고들 필요는 없는 것 같다.</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>위와 같은 즉시 실행함수 패턴은 단순 1회성 코드, 즉 다시는 참조할 일이 없는 코드들만 넣을 때 썼다.<br>전역의 스코프를 더럽히지 않아 변수 네이밍이 자유롭다는 장점이 있다.<br>다음 포스트에서는 <a href="/2017/05/20/js-006-module/">ES2015+에서 모듈화</a>를 어떻게 진행하는지 알아보자.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Module </tag>
            
            <tag> Namespace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) Scope Part. 2</title>
      <link href="/2017/05/19/js-004-scope/"/>
      <url>/2017/05/19/js-004-scope/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-004-scope/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 네 번째 시리즈는 ES2015+의 Scope(스코프)를 주제로 진행하겠다.<br>일단 <a href="/2017/04/27/js-003-scope/">ES5 이하에서 스코프</a>를 읽고 오길 바란다.</p><a id="more"></a><h2 id="ES5와의-차이점"><a href="#ES5와의-차이점" class="headerlink" title="ES5와의 차이점"></a>ES5와의 차이점</h2><p>ES2015+ 들어서 변수를 선언할 때 const와 let이 추가되었다.<br>이에 대한 설명은 추후 포스트에서 정리할 예정이다.<br>ES2015+를 쓴다 하더라도 var를 쓰면 큰 차이점이 없다.<br>var와 const, let을 비교해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// const와 let은 window 객체의 프로퍼티에 할당되지 않는다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a, <span class="built_in">window</span>.b); <span class="comment">// undefined 2</span></span><br></pre></td></tr></table></figure><h3 id="블록-단위의-스코프"><a href="#블록-단위의-스코프" class="headerlink" title="블록 단위의 스코프"></a>블록 단위의 스코프</h3><p>ES5의 var는 <code>함수 단위의 스코프</code>라고 얘기했다.<br>블록은 {} 요 구문을 뜻 하고 요 안에서만 변수가 살아 숨쉰다고 보면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for문 - ()와 &#123;&#125;을 포함 - 에서 선언한 변수 i가</span></span><br><span class="line"><span class="comment">// for 문 밖에서도 살아 숨쉬고 있다.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var와는 달리 let은 for문 안에서 선언했으면</span></span><br><span class="line"><span class="comment">// for 문 외부에서는 참조가 불가능하다.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j); <span class="comment">// j is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for 문 외부에서 선언해야 for 문 외부에서도 사용이 가능하다.</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k++ <span class="xml"><span class="tag">&lt; <span class="attr">10</span>) &#123;&#125;</span></span></span><br><span class="line"><span class="xml">console.log(k); // 11</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// &#123;&#125;으로 명시적으로 스코프를 만들 수도 있다.</span></span><br><span class="line"><span class="xml">// 이 다음 모듈화 포스트에 얘기할 즉시 실행함수 패턴과 유사하다고 보면 된다.</span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">  const a = 1;</span></span><br><span class="line"><span class="xml">  console.log(a); // 1</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">  const a = 2;</span></span><br><span class="line"><span class="xml">  console.log(a); // 2</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES5와-공통점"><a href="#ES5와-공통점" class="headerlink" title="ES5와 공통점"></a>ES5와 공통점</h2><p>이 역시 파일 별로 스코프를 가지는 게 아니라 역시 전역 스코프를 더럽힌다는 단점이 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>; <span class="comment">// Identifier 'a' has already been declared</span></span><br></pre></td></tr></table></figure><p>이를 극복하기 위해 import/export 문법이 있지만 다음 <a href="/2017/05/20/js-005-module/">모듈화 포스트</a>에서 다룰 예정이다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Scope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(JS) 숫자가 증가하는 애니메이션 구현하기</title>
      <link href="/2017/05/03/js-async-number-animation/"/>
      <url>/2017/05/03/js-async-number-animation/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-async-number-animation/thumb.png" alt=""></p><p>숫자가 0~100까지 순서대로 변하는 예제를 만들어볼 것이다.<br>일단 예제 파일에 쓰일 index.html을 하나 만들어보자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>이제 index.js 파일을 만들자.<br>1<del>10까지 출력이니 반복문을 쓰면 될 것 같다.<br>아래와 같이 콘솔창에 찍어보면 1</del>10까지 아주 잘 나온다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">11</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 실제 DOM에다 렌더링 시켜보자.<br><a href="https://codesandbox.io/s/qj5lKYMvr" rel="external nofollow noopener noreferrer" target="_blank">예제 보기</a></p><p>숫자를 보여줄 때 그냥 보여주기만 하면 재미 없죠?<br>한 번 쯤은 0~100까지 숫자가 순차적으로 올라가면서 보여주면<br>더 역동적일 것 같다고 생각해보신 적들 있을 겁니다.<br>저도 같은 생각을 해보며 글을 작성해보았습니다.<br>콜백 함수, Promise, Async</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domRoot = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">domRoot.innerText = <span class="number">0</span>; <span class="comment">// 0으로 초기값 설정.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">11</span>; i++) &#123;</span><br><span class="line">  domRoot.innerText = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과를 확인하면 너무 한 순간에 값이 바뀌어서 눈으로 확인이 불가능할 정도다.<br>그렇다면 setTimeout으로 딜레이를 걸어보자!<br><a href="https://codesandbox.io/s/LgV53Wo5w" rel="external nofollow noopener noreferrer" target="_blank">예제 보기</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domRoot = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">domRoot.innerText = <span class="number">0</span>; <span class="comment">// 0으로 초기값 설정.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">11</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ES5까지는 함수 단위의 스코프여서 아래와 같이 하면 함수를 실행하는 시점은</span></span><br><span class="line">  <span class="comment">// 반복문이 끝난 시점이라 i에는 10이 10번 들어가게 된다.</span></span><br><span class="line">  <span class="comment">//setTimeout(function() &#123;</span></span><br><span class="line">  <span class="comment">//  domRoot.innerText = i;</span></span><br><span class="line">  <span class="comment">//&#125;);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ES5까지는 함수 단위의 스코프라 즉시 실행함수를 통해 변수의 스코프를 가두었다.  </span></span><br><span class="line">  <span class="comment">// 즉시 실행 함수의 내부에 있는 함수를 실행하는 시점은 역시 반복문이 끝난 시점이다.  </span></span><br><span class="line">  <span class="comment">// 하지만 즉시 실행 함수를 통해 변수를 가둬두었으므로 클로저를 통해 해당 변수에 들어간 값을 렌더링한다.</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      domRoot.innerText = i;</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 위의 결과도 우리가 원하던 결과가 아니다.<br>100ms 동안은 가만히 있지만 그 이후에 함수가 물밀듯 실행한다.<br>setTimeout 함수는 동기식으로 동작하는 게 아니라 비동기 식으로 동작하기 때문이다.<br>이를 위해서 우리에겐 콜백 함수란 게 존재한다!<br><a href="https://codesandbox.io/s/oQvLXL26K" rel="external nofollow noopener noreferrer" target="_blank">예제 보기</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 콜백 함수를 익명 함수로 일일이 작성하기 귀찮으니 따로 빼주자.</span></span><br><span class="line"><span class="comment">// 돔에 숫자를 렌더링하는 함수이다.</span></span><br><span class="line"><span class="keyword">var</span> changeNum = <span class="function"><span class="keyword">function</span>(<span class="params">dom, num</span>) </span>&#123;</span><br><span class="line">  dom.innerText = num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MS = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> domRoot = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">domRoot.innerText = <span class="number">0</span>; <span class="comment">// 0으로 초기값 설정.</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  changeNum(domRoot, <span class="number">1</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    changeNum(domRoot, <span class="number">2</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeNum(domRoot, <span class="number">3</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        changeNum(domRoot, <span class="number">4</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          changeNum(domRoot, <span class="number">5</span>);</span><br><span class="line">          setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            changeNum(domRoot, <span class="number">6</span>);</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              changeNum(domRoot, <span class="number">7</span>);</span><br><span class="line">              setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                changeNum(domRoot, <span class="number">8</span>);</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                  changeNum(domRoot, <span class="number">9</span>);</span><br><span class="line">                  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    changeNum(domRoot, <span class="number">10</span>);</span><br><span class="line">                  &#125;, MS)</span><br><span class="line">                &#125;, MS)</span><br><span class="line">              &#125;, MS)</span><br><span class="line">            &#125;, MS)</span><br><span class="line">          &#125;, MS)</span><br><span class="line">        &#125;, MS)</span><br><span class="line">      &#125;, MS)</span><br><span class="line">    &#125;, MS)</span><br><span class="line">  &#125;, MS)</span><br><span class="line">&#125;, MS);</span><br></pre></td></tr></table></figure><p>코드가 보기 좋은가?<br>이를 위한 대안으로 ES2015에 나온 Promise를 써보자.<br><a href="https://codesandbox.io/s/KZ8QP37Zn" rel="external nofollow noopener noreferrer" target="_blank">예제 보기</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise 함수는 콜백 함수를 매개변수로 받아서 Promise 객체를 반환한다.  </span></span><br><span class="line"><span class="comment">// 그 Promise 객체는 매개변수로 받은 콜백 함수를 실행한다.</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="function"><span class="params">cb</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 요 res 위치에 앞으로 실행할 콜백 함수가 들어온다고 생각하면 된다.</span></span><br><span class="line">  cb(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백 함수를 익명 함수로 일일이 작성하기 귀찮으니 따로 빼주자.</span></span><br><span class="line"><span class="comment">// 돔에 숫자를 렌더링하는 함수이다.</span></span><br><span class="line"><span class="keyword">const</span> changeNum = <span class="function">(<span class="params">dom, num</span>) =&gt;</span> dom.innerText = num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 함수에 전달할 콜백 함수.</span></span><br><span class="line"><span class="comment">// 비동기 함수인 setTimeout을 동기식으로 실행시켜주게 바꾼 코드이다.</span></span><br><span class="line"><span class="keyword">const</span> syncSetTimeout = <span class="function">(<span class="params">cb, ms, promiseCb</span>) =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cb();</span><br><span class="line">  <span class="comment">// 함수 마지막에 이 콜백 함수는 위에 promise 함수의 cb(res) 요 부분이 실행되는 거라고 보면 된다.</span></span><br><span class="line">  promiseCb();</span><br><span class="line">&#125;, ms);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MS = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> domRoot = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">domRoot.innerText = <span class="number">0</span>; <span class="comment">// 0으로 초기값 설정.</span></span><br><span class="line"></span><br><span class="line">promise( <span class="comment">// promise 함수의 콜백으로 (동기식으로 바꾼) 비동기 함수가 들어가게 된다.</span></span><br><span class="line">  syncSetTimeout.bind(<span class="literal">null</span>, <span class="comment">// 매개변수로 콜백 함수를 넘겨줘야하기에 bind 함수 사용.</span></span><br><span class="line">    <span class="comment">// 콜백함수로 dom에 숫자를 렌더링하는 changeNum 함수 실행</span></span><br><span class="line">    changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">1</span>),</span><br><span class="line">  MS)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 요 then을 타고 cb(res) 요 안으로 계속해서 함수를 침투시킨다고 생각하면 된다.</span></span><br><span class="line"><span class="comment">// 그렇게 침투시켜서 콜백 함수 피라미드와 같은 효과를 내는 거다.</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">2</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">3</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">4</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">5</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">6</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">7</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">8</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">9</span>), MS)))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(syncSetTimeout.bind(<span class="literal">null</span>, changeNum.bind(<span class="literal">null</span>, domRoot, <span class="number">10</span>), MS)));</span><br></pre></td></tr></table></figure><p>뭐 썩 보기 좋은 건 아니지만 콜백 함수 지옥에 비하면 훨씬 봐주기가 좋아졌다.<br>하지만 숫자를 1~10이 아닌 100까지 표현해야한다면…?<br>저걸 100줄을 쓰고 있어야한다.<br>그럼 이제 남은 방안은 ES2017의 async/await가 있다!<br><a href="https://codesandbox.io/s/jLy5BDqR" rel="external nofollow noopener noreferrer" target="_blank">예제 보기</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise 함수는 콜백 함수를 매개변수로 받아서 Promise 객체를 반환한다.  </span></span><br><span class="line"><span class="comment">// 그 Promise 객체는 매개변수로 받은 콜백 함수를 실행한다.</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="function"><span class="params">cb</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 요 res 위치에 앞으로 실행할 콜백 함수가 들어온다고 생각하면 된다.</span></span><br><span class="line">  cb(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백 함수를 익명 함수로 일일이 작성하기 귀찮으니 따로 빼주자.</span></span><br><span class="line"><span class="comment">// 돔에 숫자를 렌더링하는 함수이다.</span></span><br><span class="line"><span class="keyword">const</span> changeNum = <span class="function">(<span class="params">dom, num</span>) =&gt;</span> dom.innerText = num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 함수에 전달할 콜백 함수.</span></span><br><span class="line"><span class="comment">// 비동기 함수인 setTimeout을 동기식으로 실행시켜주게 바꾼 코드이다.</span></span><br><span class="line"><span class="comment">// promiseCb는 promise 함수로부터 전달받은 콜백함수이다.</span></span><br><span class="line"><span class="keyword">const</span> syncSetTimeout = <span class="function">(<span class="params">cb, ms, promiseCb</span>) =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cb();</span><br><span class="line">  <span class="comment">// 함수 마지막에 이 콜백 함수는 위에 promise 함수의 cb(res) 요 부분이 실행되는 거라고 보면 된다.</span></span><br><span class="line">  promiseCb();</span><br><span class="line">&#125;, ms);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MS = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> domRoot = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">domRoot.innerText = <span class="number">0</span>; <span class="comment">// 0으로 초기값 설정.</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123; <span class="comment">// async는 함수이기 때문에 실행하려면 즉시 실행 함수를 써야한다.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">101</span>;) &#123; <span class="comment">// 반복문을 통해 1~100까지 반복하고 있다.</span></span><br><span class="line">    <span class="comment">// await 함수는 비동기 함수를 동기식으로 실행시키는 데 쓰이는 함수이다.</span></span><br><span class="line">    <span class="comment">// 내가 알기로는 Promise 없이는 죽도 밥도 안되는 것으로 알고 있다.</span></span><br><span class="line">    <span class="keyword">await</span>(</span><br><span class="line">      promise( <span class="comment">// promise 함수의 콜백으로 (동기식으로 바꾼) 비동기 함수가 들어가게 된다.</span></span><br><span class="line">        syncSetTimeout.bind(<span class="literal">null</span>, <span class="comment">// 매개변수로 콜백 함수를 넘겨줘야하기에 bind 함수 사용.</span></span><br><span class="line">          changeNum.bind(<span class="literal">null</span>, domRoot, i++), <span class="comment">// 콜백함수로 dom에 숫자를 렌더링하는 changeNum 함수 실행</span></span><br><span class="line">        MS)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>하지만 async/await와 Promise를 학습하는 것은 어느 정도 러닝 커브가 있다.<br>한번 내가 만들어본 async-to-sync 라이브러리를 이용하여 바꿔보자.<br><a href="https://codesandbox.io/s/2RM10B3PJ" rel="external nofollow noopener noreferrer" target="_blank">예제 보기</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 비동기 함수를 동기식으로 실행해주는 async-to-sync 모듈을 로드하자.</span></span><br><span class="line"><span class="keyword">import</span> ats <span class="keyword">from</span> <span class="string">'async-to-sync'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백 함수를 익명 함수로 일일이 작성하기 귀찮으니 따로 빼주자.</span></span><br><span class="line"><span class="comment">// 돔에 숫자를 렌더링하는 함수이다.</span></span><br><span class="line"><span class="keyword">const</span> changeNum = <span class="function">(<span class="params">dom, num</span>) =&gt;</span> dom.innerText = num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본적으로 async-to-sync 모듈은 위 async/await + Promise를 짬뽕한 라이브러리다.</span></span><br><span class="line"><span class="comment">// 비동기 함수를 동기 함수로 바꾸는 방법은 위의 예제와 같다.</span></span><br><span class="line"><span class="comment">// 함수 매개변수에 promise 함수에서 전달받은 promiseCb를 추가하고, 함수 마지막 부분에 그 콜백 함수를 실행시키면 된다.</span></span><br><span class="line"><span class="comment">// promise 함수에 전달할 콜백 함수.</span></span><br><span class="line"><span class="comment">// 비동기 함수인 setTimeout을 동기식으로 실행시켜주게 바꾼 코드이다.</span></span><br><span class="line"><span class="keyword">const</span> syncSetTimeout = <span class="function">(<span class="params">cb, ms, promiseCb</span>) =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cb();</span><br><span class="line">  <span class="comment">// 함수 마지막에 이 콜백 함수는 위에 promise 함수의 cb(res) 요 부분이 실행되는 거라고 보면 된다.</span></span><br><span class="line">  promiseCb();</span><br><span class="line">&#125;, ms);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrAsync = []; <span class="comment">// async-to-sync는 비동기 함수들이 담겨있는 배열을 매개변수로 받아서 실행시킨다.</span></span><br><span class="line"><span class="keyword">const</span> MS = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> domRoot = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">domRoot.innerText = <span class="number">0</span>; <span class="comment">// 0으로 초기값 설정.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">101</span>;) &#123; <span class="comment">// 반복문을 통해 1~100까지 반복하고 있다.</span></span><br><span class="line">  arrAsync.push( <span class="comment">// 배열에 비동기 함수들을 하나씩 담고 있다.</span></span><br><span class="line">    syncSetTimeout.bind(<span class="literal">null</span>, <span class="comment">// 매개변수로 콜백 함수를 넘겨줘야하기에 bind 함수 사용.</span></span><br><span class="line">      changeNum.bind(<span class="literal">null</span>, domRoot, i++), <span class="comment">// 콜백함수로 dom에 숫자를 렌더링하는 changeNum 함수 실행</span></span><br><span class="line">    MS)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ats(arrAsync); <span class="comment">// 배열에 담은 비동기 함수들을 한 번에 실행시키고 있다.</span></span><br></pre></td></tr></table></figure><h2 id="더-쉬운-방법"><a href="#더-쉬운-방법" class="headerlink" title="더 쉬운 방법"></a>더 쉬운 방법</h2><p>역시 구글링을 해보니 더 쉬운 방법이 존재하였다.<br>왜 이런 뻘짓을 했는지…  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> current = <span class="number">0</span>; <span class="comment">// 현재 숫자</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백 함수를 익명 함수로 일일이 작성하기 귀찮으니 따로 빼주자.</span></span><br><span class="line"><span class="comment">// 돔에 숫자를 렌더링하는 함수이다.</span></span><br><span class="line"><span class="comment">// 외부에 있는 변수를 건드리므로 좋지는 않지만 어쩔 수 없다.</span></span><br><span class="line"><span class="keyword">const</span> changeNum = <span class="function">(<span class="params">dom</span>) =&gt;</span> dom.innerText = ++current;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout 말고 setInterval이 더 간결하다.</span></span><br><span class="line"><span class="keyword">const</span> SetInterval = <span class="function">(<span class="params">cb, ms</span>) =&gt;</span> setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(current &gt;= <span class="number">100</span>) <span class="keyword">return</span> clearInterval(SetInterval);</span><br><span class="line">  cb();</span><br><span class="line">&#125;, ms);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MS = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> domRoot = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">domRoot.innerText = <span class="number">0</span>; <span class="comment">// 0으로 초기값 설정.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 함수를 실행할 때는 current가 1이 되므로 계속해서 1로 고정하게 된다.  </span></span><br><span class="line"><span class="comment">// 그래서 부득이하게 콜백 함수 안에서 외부 변수를 불러오게 했다.</span></span><br><span class="line">SetInterval(changeNum.bind(<span class="literal">null</span>, domRoot), MS);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> promise </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
            <tag> ES6+ </tag>
            
            <tag> callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자작) async-to-sync (자바스크립트 비동기 함수 헬퍼)</title>
      <link href="/2017/05/01/async-to-sync/"/>
      <url>/2017/05/01/async-to-sync/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/async-to-sync/thumb.png" alt=""></p><h1 id="async-to-sync"><a href="#async-to-sync" class="headerlink" title="async-to-sync"></a>async-to-sync</h1><p>async-to-sync는 자바스크립트 비동기 함수를 동기 함수로 바꿔주는 헬퍼 함수이다.<br>async/await는 물론 Promise를 몰라도 된다!!  </p><ul><li><a href="https://www.npmjs.com/package/async-to-sync" rel="external nofollow noopener noreferrer" target="_blank">npm</a>  </li><li><a href="https://github.com/perfectacle/async-to-sync" rel="external nofollow noopener noreferrer" target="_blank">github</a>  </li></ul><h2 id="왜-async-to-sync를-만들었는가"><a href="#왜-async-to-sync를-만들었는가" class="headerlink" title="왜 async-to-sync를 만들었는가?"></a>왜 async-to-sync를 만들었는가?</h2><p>드디어 <a href="https://github.com/tc39/ecmascript-asyncawait" rel="external nofollow noopener noreferrer" target="_blank">async/await</a>가 ES2017에 추가 되었다(아직 최종 스펙이 나온 건 아니지만).<br>async/await는 자바스크립트 비동기 함수를 동기 함수로 바꿔주는 기능을 한다.<br>하지만 여전히 사용하기가 어렵고, 또한 ES2015의 Promise를 알고 있다는 전제 하에 사용이 가능하다.<br>그래서 비동기 함수를 동기 함수로 만들 때 사용하기 편하려고 만들었다.</p><a id="more"></a><h2 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S async-to-sync</span><br></pre></td></tr></table></figure><h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add async-to-sync</span><br></pre></td></tr></table></figure><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h3><p>만약 타겟 브라우저/노드의 async/await 및 Promise 지원 여부를 모른다면 아래 링크를 확인하자.<br><a href="https://kangax.github.io/compat-table/es6/#test-Promise" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript 6 compatibility table | Promise</a><br><a href="http://node.green/#ES2015-built-ins-Promise" rel="external nofollow noopener noreferrer" target="_blank">Node.js ES2015/ES6 | Promise</a><br><a href="http://kangax.github.io/compat-table/es2016plus/#test-async_functions" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript 2016+ compatibility table | async</a><br><a href="hhttp://node.green/#ES2017-features-async-functions" rel="external nofollow noopener noreferrer" target="_blank">Node.js ES2017 support | async</a><br><code>주의!</code><br>async-to-sync는 babel-polyfill을 포함하지 않았다.<br>따라서 babel-polyfill을 사용해야한다면 설치를 하자.<br><code>npm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S babel-polyfill</span><br></pre></td></tr></table></figure><p><code>yarn</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-polyfill</span><br></pre></td></tr></table></figure><p>혹은 CDN을 이용하면 된다.<br>아래 구구절절한 사용 방법 대신 빠르게 사용 방법을 익히고 싶다면 <a href="https://github.com/perfectacle/async-to-sync/tree/master/examples" rel="external nofollow noopener noreferrer" target="_blank">examples</a>를 참조하자.</p><h4 id="async-to-sync-모듈을-불러오는-방법"><a href="#async-to-sync-모듈을-불러오는-방법" class="headerlink" title="async-to-sync 모듈을 불러오는 방법"></a>async-to-sync 모듈을 불러오는 방법</h4><h5 id="웹팩"><a href="#웹팩" class="headerlink" title="웹팩"></a>웹팩</h5><h6 id="async-await-amp-Promise-지원-브라우저인-경우"><a href="#async-await-amp-Promise-지원-브라우저인-경우" class="headerlink" title="async/await &amp; Promise 지원 브라우저인 경우"></a>async/await &amp; Promise 지원 브라우저인 경우</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ats <span class="keyword">from</span> <span class="string">'async-to-sync'</span>;</span><br></pre></td></tr></table></figure><h6 id="async-await-amp-Promise-or-ES2015-미지원-브라우저인-경우"><a href="#async-await-amp-Promise-or-ES2015-미지원-브라우저인-경우" class="headerlink" title="async/await &amp; Promise or ES2015 미지원 브라우저인 경우"></a>async/await &amp; Promise or ES2015 미지원 브라우저인 경우</h6><p><a href="https://babeljs.io/docs/usage/polyfill/" rel="external nofollow noopener noreferrer" target="_blank">babel-polyfill</a> 사용이 필수이다.<br>또한 async-to-sync 모듈을 불러오기 전에 babel-polyfill을 불러와야만 한다.<br>만약 바벨과 같은 트랜스파일러를 쓰지 않는다면, ES2015 문법 사용은 지양하자. (MS 진영은 암담하기에…)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span>;</span><br><span class="line"><span class="keyword">import</span> ats <span class="keyword">from</span> <span class="string">'async-to-sync/module/no-es2017'</span>;</span><br></pre></td></tr></table></figure><h5 id="브라우저-CDN은-지원-예정이니-잠시만-기다리자"><a href="#브라우저-CDN은-지원-예정이니-잠시만-기다리자" class="headerlink" title="브라우저 (CDN은 지원 예정이니 잠시만 기다리자!)"></a>브라우저 (CDN은 지원 예정이니 잠시만 기다리자!)</h5><h6 id="async-await-amp-Promise-지원-브라우저"><a href="#async-await-amp-Promise-지원-브라우저" class="headerlink" title="async/await &amp; Promise 지원 브라우저"></a>async/await &amp; Promise 지원 브라우저</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/async-to-sync/browser/es2017/index.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="async-await-amp-Promise-or-ES2015-미지원-브라우저"><a href="#async-await-amp-Promise-or-ES2015-미지원-브라우저" class="headerlink" title="async/await &amp; Promise or ES2015 미지원 브라우저"></a>async/await &amp; Promise or ES2015 미지원 브라우저</h6><p>babel-polyfill 사용이 필수이다.<br>또한 async-to-sync 모듈을 불러오기 전에 babel-polyfill을 불러와야만 한다.<br>만약 바벨과 같은 트랜스파일러를 쓰지 않는다면, ES2015 문법 사용은 지양하자. (MS 진영은 암담하기에…)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.23.0/polyfill.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/async-to-sync/browser/no-es2017/index.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h5><h6 id="async-await-amp-Promise를-지원할-때"><a href="#async-await-amp-Promise를-지원할-때" class="headerlink" title="async/await &amp; Promise를 지원할 때"></a>async/await &amp; Promise를 지원할 때</h6><p>만약 import 문법을 쓰고 싶다면 바벨과 같은 트랜스파일러를 이용하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ats = <span class="built_in">require</span>(<span class="string">'async-to-sync'</span>);</span><br></pre></td></tr></table></figure><h6 id="In-async-await-amp-Promise-or-ES2015-not-support-Node"><a href="#In-async-await-amp-Promise-or-ES2015-not-support-Node" class="headerlink" title="In async/await &amp; Promise or ES2015 not support Node"></a>In async/await &amp; Promise or ES2015 not support Node</h6><p>babel-polyfill 사용이 필수이다.<br>또한 async-to-sync 모듈을 불러오기 전에 babel-polyfill을 불러와야만 한다.<br>만약 import 문법을 쓰고 싶다면 바벨과 같은 트랜스파일러를 이용하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-polyfill'</span>);</span><br><span class="line"><span class="keyword">const</span> ats = <span class="built_in">require</span>(<span class="string">'async-to-sync/module/no-es2017'</span>);</span><br></pre></td></tr></table></figure><h4 id="어떻게-쓰는가"><a href="#어떻게-쓰는가" class="headerlink" title="어떻게 쓰는가"></a>어떻게 쓰는가</h4><p>비동기 함수에는 몇 가지 종류가 있다.  </p><ul><li><p>setTimeout(or setInterval)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>AJAX(Asynchronous Javascript And XML)<br>bluebird, axios, jQuery slim과 같은 써드 파티들을 사용해도 된다.<br>XHR(XMLHttpRequest)이나 fetch를 쓸 때는 Promise를 써야한다.<br>then 메소드는 성공 콜백 함수와 같고, catch 메소드는 실패 콜백 함수와 같다.<br><code>주의!</code><br>몇몇 AJAX 요청은 IE9에서 문제가 되지만 이것은 async-to-sync의 문제가 아니다.<br>아래 링크를 참조하자.  </p><ul><li><a href="http://caniuse.com/#feat=cors" rel="external nofollow noopener noreferrer" target="_blank">Can I Use Cross-Origin Resource Sharing?</a>  </li><li><a href="http://stackoverflow.com/questions/10232017/ie9-jquery-ajax-with-cors-returns-access-is-denied" rel="external nofollow noopener noreferrer" target="_blank">IE9 jQuery AJAX with CORS returns “Access is denied”</a>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fallback = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Error: '</span> + e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="function"><span class="keyword">function</span>(<span class="params">url, method</span>) </span>&#123;</span><br><span class="line">  method = method || <span class="string">'get'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res, rej</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123; <span class="comment">// 4 means request is done.</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status === <span class="number">200</span>) &#123; <span class="comment">// 200 means status is successful</span></span><br><span class="line">          res(xhr.response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rej(xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _fetch = <span class="function"><span class="keyword">function</span>(<span class="params">url, method, headers, body</span>) </span>&#123;</span><br><span class="line">  method = method || <span class="string">'get'</span>;</span><br><span class="line">  headers = headers || <span class="literal">null</span>;</span><br><span class="line">  body = body || <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> fetch(url, &#123;</span><br><span class="line">    method, headers, body</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123;&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  xhr(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fallback(e)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  _fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fallback(e)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><code>주의!</code><br>다음의 규칙들을 따라서 함수를 재작성하자.  </p><ul><li>함수의 파라미터에 콜백 함수를 추가해주자.  </li><li>비동기 함수 맨 마지막에 콜백 함수를 실행해주자.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 모든 비동기 함수마다 콜백 함수를 파라미터로 추가해줘야한다.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">    <span class="comment">// 비동기 함수의 맨 마지막에는 콜백 함수를 반드시 실행해줘야한다.</span></span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백 함수는 파라미터 제일 끝 부분에 추가해주자.</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params">b, cb</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params">url, cb</span>) </span>&#123;</span><br><span class="line">  xhr(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    cb();</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        fallback(e)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params">url, cb</span>) </span>&#123;</span><br><span class="line">  _fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    cb();</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fallback(e)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h5 id="진짜-사용-방법"><a href="#진짜-사용-방법" class="headerlink" title="진짜 사용 방법"></a>진짜 사용 방법</h5><h6 id="ats-Array-arrAsync-Function-fallback"><a href="#ats-Array-arrAsync-Function-fallback" class="headerlink" title="ats(Array arrAsync[, Function fallback])"></a>ats(Array arrAsync[, Function fallback])</h6><ol><li>arrAsync의 타입은 배열이다.<br>이 배열은 비동기 함수들을 포함하고 있다.<br>이 함수들은 동기적으로 실행될 것이다.  </li><li>fallback의 타입은 함수이며, 필수 사항이 아니다.<br>이 함수는 에러 발생시 실행되며, 그 이후에 실행될 함수들의 실행을 모두 멈춰버린다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrUrl = [</span><br><span class="line">  <span class="string">'https://perfectacle.github.io/mock/test.json'</span>,</span><br><span class="line">  <span class="string">'https://perfectacle.github.io/mock/test2.json'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrAsync = [</span><br><span class="line">  a,</span><br><span class="line">  <span class="comment">// 인자를 넘겨주거나 this 값을 바인딩해야할 경우 bind 메소드를 사용하면 된다.</span></span><br><span class="line">  c.bind(<span class="literal">null</span>, arrUrl[<span class="number">0</span>]),</span><br><span class="line">  <span class="comment">// 물론 인자를 넘길 때 ES2015의 arrow function을 사용해도 된다.</span></span><br><span class="line">  <span class="comment">// 하지만 이 때는 콜백 함수까지 같이 매개변수 및 인자로 넘겨줘야한다.</span></span><br><span class="line">  cb =&gt; b(<span class="number">2</span>, cb),</span><br><span class="line">  a,</span><br><span class="line">  cb =&gt; d(arrUrl[<span class="number">1</span>], cb),</span><br><span class="line">  b.bind(<span class="literal">null</span>, <span class="number">33</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ats(arrAsync, fallback);</span><br></pre></td></tr></table></figure></li></ol><h4 id="지원하는-플랫폼"><a href="#지원하는-플랫폼" class="headerlink" title="지원하는 플랫폼"></a>지원하는 플랫폼</h4><table><thead><tr><th><img src="chrome.png" alt="Chrome"></th><th><img src="firefox.jpg" alt="Firefox"></th><th><img src="IE.png" alt="IE"></th><th><img src="node.png" alt="Node.js"></th></tr></thead><tbody><tr><td>Latest ✔</td><td>Latest ✔</td><td>9+ ✔</td><td>6+ ✔</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 자작 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) Scope Part. 1</title>
      <link href="/2017/04/27/js-003-scope/"/>
      <url>/2017/04/27/js-003-scope/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-003-scope/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 세 번째 시리즈는 Scope(스코프)를 주제로 진행하겠다.  </p><a id="more"></a><h2 id="Scope-스코프"><a href="#Scope-스코프" class="headerlink" title="Scope? 스코프?"></a>Scope? 스코프?</h2><p>흔히 변수의 Scope라고 부른다.  </p><blockquote><p>Scope<br>(무엇을 하거나 이룰 수 있는) 기회; (주제・조직・활동 등이 다루는) 범위</p></blockquote><p>후자의 <code>범위</code>라고 보면 될 것 같다.<br>즉 변수의 Scope는 <code>변수를 사용할 수 있는 범위</code>가 된다.<br>ES5까지는 <code>함수 단위의 스코프</code>를 가진다.<br>백문이 불여일견, 일단 코드로 보고 이해하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전역 공간은 스코프를 공유한다.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 사실 전역에 있는 변수는 공유되기 때문에 여기서는 var를 생략해도 된다.</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 함수 단위의 스코프가 시작됐다.</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">6</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 5, 현재 스코프에 a가 있기 때문에 현재 스코프에 있는 a를 출력한다.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 3, 함수 단위의 스코프이기 때문에 같은 전역 공간에 있다고 간주해서 변수를 공유하기 때문에 사용 가능하다.</span></span><br><span class="line">c();</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// Uncaught ReferenceError: d is not defined, 함수 단위의 스코프이기 때문에 함수에서 쓰인 변수는 함수에서만 사용할 수 있다.</span></span><br></pre></td></tr></table></figure><p>이것 또한 전통 방식의 자바, C와 큰 차이점 중 하나이다.<br>기존 프로그래밍 언어들은 블록 단위의 스코프라고 해서 if 문도 별도의 스코프를 가졌는데<br>자바스크립트에는 쌩뚱맞은 함수 단위의 스코프라는 게 존재한다.<br>왜 이렇게 만들었는지 나도 모르겠다.  </p><h2 id="Scope-Chaining-스코프-체이닝"><a href="#Scope-Chaining-스코프-체이닝" class="headerlink" title="Scope Chaining(스코프 체이닝)"></a>Scope Chaining(스코프 체이닝)</h2><blockquote><p>Chaining<br>체이닝, 연쇄(적 처리)</p></blockquote><p>뭔가를 연쇄적으로 처리하는 내용이다.<br>이번에도 코드를 봄으로써 이해해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 외부 함수 스코프(b)의 시작</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 내부 함수 스코프(d)의 시작</span></span><br><span class="line">    <span class="comment">// 1. 현재 스코프(d)에는 a란 변수가 없다.  </span></span><br><span class="line">    <span class="comment">// 2. 스코프 체인을 타고 스코프 b로 올라간다.</span></span><br><span class="line">    <span class="comment">// 3. 스코프 b에도 a란 변수가 없다.  </span></span><br><span class="line">    <span class="comment">// 4. 스코프 체인을 타고 전역 스코프로 올라간다.  </span></span><br><span class="line">    <span class="comment">// 5. 전역 스코프에는 a란 변수가 있으므로 그 a를 출력한다.</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 현재 스코프(d)에는 c란 변수가 없다.  </span></span><br><span class="line">    <span class="comment">// 2. 스코프 체인을 타고 스코프 b로 올라간다.</span></span><br><span class="line">    <span class="comment">// 3. 스코프 b에도 c란 변수가 있으므로 그 c를 출력한다.  </span></span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">  d(); <span class="comment">// 내부 함수 d를 호출</span></span><br><span class="line">&#125;</span><br><span class="line">b(); <span class="comment">// 함수 b를 호출</span></span><br></pre></td></tr></table></figure><p>하지만 이 스코프 체이닝은 변수 사용에서만 존재하는 게 아니다.<br>변수 선언에 있어서도 스코프 체이닝이 발생할 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 외부 함수 스코프(c)의 시작</span></span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 내부 함수 스코프(e)의 시작</span></span><br><span class="line">    <span class="comment">// 변수의 선언을 var 없이 하면 스코프 체이닝이 발생한다.  </span></span><br><span class="line">    <span class="comment">// 1. 현재 스코프(e)에는 d라는 변수가 없다.</span></span><br><span class="line">    <span class="comment">// 2. 스코프 체인을 타고 상위 스코프인 c로 이동한다.  </span></span><br><span class="line">    <span class="comment">// 3. 스코프 c에는 변수 d가 있으므로 그 변수에 3을 할당한다.</span></span><br><span class="line">    d = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 현재 스코프(e)에는 d라는 변수가 없다.</span></span><br><span class="line">    <span class="comment">// 2. 스코프 체인을 타고 상위 스코프인 c로 이동한다.  </span></span><br><span class="line">    <span class="comment">// 3. 스코프 c에는 변수 b가 없다.</span></span><br><span class="line">    <span class="comment">// 4. 스코프 체인을 타고 상위 스코프인 전역 스코프로 이동한다.</span></span><br><span class="line">    <span class="comment">// 5. 전역 스코프에는 변수 b가 있으므로 그 변수에 4를 할당한다.</span></span><br><span class="line">    b = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 현재 스코프(e)에는 d라는 변수가 없다.</span></span><br><span class="line">    <span class="comment">// 2. 스코프 체인을 타고 상위 스코프인 c로 이동한다.  </span></span><br><span class="line">    <span class="comment">// 3. 스코프 c에는 변수 b가 없다.</span></span><br><span class="line">    <span class="comment">// 4. 스코프 체인을 타고 상위 스코프인 전역 스코프로 이동한다.</span></span><br><span class="line">    <span class="comment">// 5. 전역 스코프에는 변수 f가 없으니 새로 만들고 5를 할당한다.</span></span><br><span class="line">    f = <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 똥 싸기 전에는 2를 가지고 있다가</span></span><br><span class="line">  <span class="built_in">console</span>.log(d); <span class="comment">// 2</span></span><br><span class="line">  </span><br><span class="line">  e(); <span class="comment">// 내부 함수 e를 호출</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 똥싸고 나니 3으로 변하였다.</span></span><br><span class="line">  <span class="built_in">console</span>.log(d); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 똥 싸기 전에는 1을 가지고 있고 f는 벌써 호이스팅 처리가 전부 끝난 건지 5가 할당되어있다.</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">c(); <span class="comment">// 함수 c를 호출</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 똥싸고 나니 3과 5라는 변수로 바뀌었다.</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>이렇게 var를 쓰지 않고 변수를 선언하면 상위 스코프로 체인을 타고 해당 변수를 찾아 여정을 떠난다.<br>전역 스코프에도 해당 변수가 없다면 새로 만들게 된다.<br>이렇게 var를 쓰지 않고 변수를 선언하다보면 변수의 스코프가 뒤죽박죽이 되어버린다.<br>따라서 이렇게 코딩하는 걸 사전에 방지하고 오류를 뿜어주는 게 존재한다.  </p><h2 id="strict-mode"><a href="#strict-mode" class="headerlink" title="strict mode"></a>strict mode</h2><p>ES5에서 새로 생긴 모드다.<br>이 포스트에서는 변수 선언에 대해서만 다룰테니 자세한 내용은 아래 링크를 확인하자.<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode" rel="external nofollow noopener noreferrer" target="_blank">Strict mode - JavaScript | MDN</a><br>코드의 문법을 좀 더 깐깐하게 검사해서 오류를 내뿜어 개발자로 하여금 의도한 바대로 실행 결과를 도출하게끔 하는 모드이다.<br>나는 사용을 권장한다.<br>혹시 IE8 같은 경우에는 지원하지 않아서 오류를 뿜지 않을까 걱정이라면 붙들어 메도 된다.<br>일단 코드로 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 이렇게 전역 스코프 상단에 저 구문을 넣어주거나 </span></span><br><span class="line"><span class="comment">// 사용하려는 함수 바디 상단에만 넣어주면 된다.  </span></span><br><span class="line"><span class="comment">// 미지원 브라우저는 그냥 문자열로 인식하고 오류를 뿜지 않는다.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 얘는 전역 스코프에 존재하는 녀석이어서 그 변수를 덮어씌우면 되니 오류를 뿜지 않는다.</span></span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 스코프 체인 상에 존재하지 않는 변수를 var 없이 선언하면 오류를 뿜게 된다. </span></span><br><span class="line">  d = <span class="number">2</span>; <span class="comment">// Uncaught ReferenceError: d is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 스코프 체인 상에 존재하지 않는 변수를 var 없이 선언하면 오류를 뿜게 된다. </span></span><br><span class="line">c =  <span class="number">3</span>; <span class="comment">// Uncaught ReferenceError: c is not defined</span></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><h2 id="아주그냥-난장판인-스코프"><a href="#아주그냥-난장판인-스코프" class="headerlink" title="아주그냥 난장판인 스코프"></a>아주그냥 난장판인 스코프</h2><p>하나의 html 파일에는 여러가지 자바스크립트 파일이 들어가게 된다.<br>그럼 2개의 자바스크립트 파일을 썼다고 가정해보고 코드를 보자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.js를 작성해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>b.js를 작성해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">var</span> btnA = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">var</span> btnB = <span class="built_in">document</span>.getElementById(<span class="string">'b'</span>);</span><br><span class="line">  btnA.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">  btnB.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>버튼을 누르면 1이 출력된다.<br>그러다가 내 부사수 마니똘이 추가 작업을 하다가 아래와 같이 c.js를 만들고 html에 추가하였다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 코드 블라블라</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 코드 블라블라</span></span><br></pre></td></tr></table></figure><p>그리고 b.js 보다 먼저 처리해야할 로직이 있어서 스크립트를 아래와 같은 순서로 로딩하게 하였다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 요 사이에 내 부사수가 작성한 c.js를 로딩시켰다. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 나서 다시 버튼들을 클릭해보자.<br>그럼 내가 기대했던 1이 아닌 부사수가 작성한 2가 찍히게 된다.<br>사실 위 3가지 js 파일을 아래와 같이 바꿀 수도 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 내가 작성한 a.js</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내 부사수가 작성한 c.js</span></span><br><span class="line"><span class="comment">// 블라블라</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 블라블라</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 작성한 b.js</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">var</span> btnA = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">var</span> btnB = <span class="built_in">document</span>.getElementById(<span class="string">'b'</span>);</span><br><span class="line">  btnA.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">  btnB.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>num이 더 뒤에 할당된 2가 찍히게 되는 것이다.<br>자바의 경우에는 파일(클래스) 별로 별도의 스코프가 존재했는데, js는 그렇지 못하다.<br>이 또한 기존에 다른 언어 개발자들을 미치게 하는 요인 중에 하나다.  </p><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>글이 길어져서 일단 한 템포 끊어서 가야할 것 같다.<br>다음 포스트에서는 <a href="/2017/05/19/js-004-scope/">ES2015+의 스코프</a>를 다루고,<br>그 다음에는 스코프의 한계를 극복한 <a href="/2017/05/20/js-005-module/">모듈화</a>에 대해 다뤄야할 것 같다.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Scope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) Hoisting</title>
      <link href="/2017/04/26/js-002-hoisting/"/>
      <url>/2017/04/26/js-002-hoisting/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-002-hoisting/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 두 번째 시리즈는 Hoisting(호이스팅)을 주제로 진행하겠다.  </p><a id="more"></a><h2 id="Hoisting-호이스팅"><a href="#Hoisting-호이스팅" class="headerlink" title="Hoisting? 호이스팅?"></a>Hoisting? 호이스팅?</h2><p>이 처음보는 단어는 뭐지 싶을 수도 있다.  </p><blockquote><p>Hoisting<br>끌어 올리기; 들어올려 나르기.</p></blockquote><p>말 그대로 끌어올리는 것이다. 무엇을? 코드를!  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(qwer); <span class="comment">// Uncaught ReferenceError: qwer is not defined</span></span><br></pre></td></tr></table></figure><p>누구나 예상한 결과일 것이다.<br>qwer이란 녀석은 선언된 적이 없으니 사용도 불가능한 것이다.<br>하지만 아래 예제를 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(asdf); <span class="comment">// undefined, 오류가 나질 않는다. 즉 프로그램이 뻗질 않는다.</span></span><br><span class="line"><span class="built_in">console</span>.log(qwer); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(zxcv); <span class="comment">// function zxcv() &#123; console.log(456); &#125;</span></span><br><span class="line"><span class="keyword">var</span> asdf = <span class="string">'asdf'</span>;</span><br><span class="line"><span class="keyword">var</span> qwer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zxcv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">456</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전통적인 C언어나 자바와 같은 프로그래밍 언어로 개발하던 사람들이 이해하지 못하는 부분 중 하나가 바로 이거다.<br>내가 선언하기 전에 사용된 변수, 즉 없는 변수인데 왜 갑자기 툭 튀어나와서<br>undefined를 내뱉고 프로그램이 죽지 않는 거지?<br>바로 호이스팅이 일어났기 때문이다.<br>위의 코드는 아래와 같이 변환된다고 보면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> asdf;</span><br><span class="line"><span class="keyword">var</span> qwer;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zxcv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">456</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(asdf);</span><br><span class="line"><span class="built_in">console</span>.log(qwer);</span><br><span class="line"><span class="built_in">console</span>.log(zxcv);</span><br><span class="line">asdf = <span class="string">'asdf'</span>;</span><br><span class="line">qwer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>함수 선언문에서는 변수 없이 함수를 선언한 것이므로 전체 코드가 호이스팅 된다.<br>하지만 함수 표현식은 변수 선언과 할당을 구분할 수 있으므로 선언 부분만 호이스팅이 일어났다.<br>따라서 오류가 날 것으로 예상했던 코드가 예측한 대로 작동하질 않는다.<br>오류를 최소화하려는 전략이었는지 모르겠지만 의도대로 코드가 작동하지 않는 것은 옳지 않다.<br>소스 코드를 분석하다가도 본 적 없는 변수나 함수가 갑자기 튀어나오면 요 놈이 어디서 나온 녀석인지 혼란스럽게 하기 마련이다.<br>그래서 나는 차라리 오류를 안 나게 호이스팅을 하는 것보다 오히려 오류를 내는 쪽이 더 안전하게 코드를 설계하는 건 아닐까 싶다.<br>따라서 사용할 변수와 함수는 최소한 사용하기 전에 미리 선언해야 의도한대로 코드가 동작한다고 확신을 가질 수 있다.  </p><h2 id="ES2015-에서는"><a href="#ES2015-에서는" class="headerlink" title="ES2015+에서는?"></a>ES2015+에서는?</h2><p>이렇게 짧게 끝내기 아쉬우니 ES2015+에서는 호이스팅이 어떻게 처리되는지 알아보자.<br>일단 ES2015+에서는 변수를 선언할 때 const와 let으로 대신해서 쓴다.<br>이에 대해서는 다른 포스트에서 자세히 다룰테니 일단은 그런 놈들이 있다고만 알자.<br>그럼 똑같은 코드를 ES2015+ 식으로 작성해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(asdf); <span class="comment">// Uncaught ReferenceError: asdf is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(qwer);</span><br><span class="line"><span class="keyword">const</span> asdf = <span class="string">'asdf'</span>;</span><br><span class="line"><span class="keyword">let</span> qwer = <span class="string">'qwer'</span>;</span><br></pre></td></tr></table></figure><p>1번 라인에서 오류가 나서 2번 라인은 실행도 못하고 바로 뻗어버린다.<br>우리의 바람대로 호이스팅이 사라진 것 같다.<br>과연 정말일까…?</p><h3 id="TDZ-Temporal-Dead-Zone"><a href="#TDZ-Temporal-Dead-Zone" class="headerlink" title="TDZ(Temporal Dead Zone)"></a>TDZ(Temporal Dead Zone)</h3><p>임시적 사각 지대, <code>변수가 임시로 죽어있는 공간</code>이라고 이해하면 될 것 같다.<br>뭔소린지 글로만 봐서는 모르니 코드를 통해서 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asdf = <span class="string">'asdf'</span>;</span><br><span class="line"><span class="keyword">const</span> qwer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(asdf); <span class="comment">// Uncaught ReferenceError: asdf is not defined</span></span><br><span class="line">  <span class="keyword">let</span> asdf = <span class="string">'qwer'</span>;</span><br><span class="line">&#125;</span><br><span class="line">qwer();</span><br></pre></td></tr></table></figure><p>호이스팅이 일어나지 않았다면 3번 라인에서는 ‘asdf’가 찍혀야 정상일 것이다.<br>혹은 호이스팅이 일어났다면 undefined라도 찍혀야하는데 오히려 에러를 내뱉었다.<br>이건 무슨 경우일까? 답은 바로 TDZ!<br>위 코드를 다시 TDZ라는 것과 연관 지어서 풀어보겠다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asdf = <span class="string">'asdf'</span>;</span><br><span class="line"><span class="keyword">const</span> qwer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> asdf; <span class="comment">// 사실 이렇게 변수 선언부가 호이스팅에 의해 스코프 상단으로 끌어올려진다.</span></span><br><span class="line">  <span class="comment">// 변수의 초기화 구문을 만나기 전까지 TDZ가 형성됨.</span></span><br><span class="line">  <span class="built_in">console</span>.log(asdf); <span class="comment">// TDZ에서 해당 변수가 쓰였다면 에러를 발생!</span></span><br><span class="line">  <span class="comment">// 여기까지 TDZ.</span></span><br><span class="line">  asdf = <span class="string">'qwer'</span>;</span><br><span class="line">&#125;</span><br><span class="line">qwer();</span><br></pre></td></tr></table></figure><p>TDZ는 변수 선언(호이스팅에 의해 스코프 상단으로 끌어올려진 부분)부터 변수의 할당을 만나기 전 부분까지 형성이 되는 구간인데<br>이 TDZ에서는 해당 변수가 임시적으로 죽어있는 구역인데 이 구역에 해당 변수가 끼어들면서 오류가 발생하게 되는 것이다.  </p><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>오늘 올린 호이스팅은 사실 스코프와 연관지어 생각해봐야 이해하기가 쉬운 부분이다.<br>따라서 다음에 포스팅 할 예정인 <a href="/2017/04/27/js-003-scope/">스코프</a> 포스트까지 꼭 보길 바란다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
            <tag> Hoisting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자알쓰) ECMASCript? ES?</title>
      <link href="/2017/04/26/js-001-es/"/>
      <url>/2017/04/26/js-001-es/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-001-es/thumb.png" alt=""></p><h2 id="자알쓰란"><a href="#자알쓰란" class="headerlink" title="자알쓰란?"></a>자알쓰란?</h2><p><code>자</code>바스크립트 <code>알</code>고 <code>쓰</code>자. (잘 쓰자는 의미도 담겨있다.)<br>자바스크립트라는 언어 자체는 내 기준에서는 설계 상 미스가 참 많다.<br>함수 단위의 스코프, 호이스팅, 동적 타입 등등<br>자바와 같은 깐깐(?)한 언어를 배우고 바라본 자스는 허점 투성이처럼 보였다.<br>애초에 자바스크립트는 어떠한 프로그램을 만들기 위해서 탄생했다기 보다는<br>웹 페이지에 입력값에 대한 유효성 검사(데이터가 공란인지 아닌지 등등)와 같은<br>페이지의 동적 제어가 주된 목적 + 짧은 개발 기간(넷 스케이프 사의 새로운 브라우저에 탑재 예정) 때문에<br>설계 상에 미스가 있을 수 밖에 없다고 나는 생각된다.<br>일종의 안전 장치가 없어서 개발자가 일일이 구현해주고, 신경써야 하는 느낌이었다.<br>그렇다고 해서 자바스크립트를 극혐하거나 그런 것은 아니고 매우 사랑한다.<br>또한 그 허점을 아는 사람은 허점을 보완해서 요리조리 피해서 잘 쓰겠지만…<br>잘 모르는 부분들은 잘못 써도 동작이 잘 되기 마련이다.<br>이는 지금 당장에는 큰 문제가 안 될지 모르겠지만, 추후에 대규모 웹 어플리케이션을 만들거나<br>직면할 문제로부터 미리 해방시키기 위해 처음부터 좋은 습관을 들여가는 것이 좋다고 생각한다.<br>그 첫 번째 시리즈는 ECMAScript(이하 ES)를 주제로 진행하겠다.  </p><a id="more"></a><h2 id="ES의-탄생-배경"><a href="#ES의-탄생-배경" class="headerlink" title="ES의 탄생 배경"></a>ES의 탄생 배경</h2><p><a href="https://ko.wikipedia.org/wiki/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EC%A0%84%EC%9F%81" rel="external nofollow noopener noreferrer" target="_blank">브라우저 전쟁</a> 시절 개발자들은 몸살을 앓았다.<br>넷 스케이프 사의 자바스크립트가 부러웠는지 사용자 층을 더 끌어내기 위해 MS의 IE 3에도 JScript라는 이름으로 자바스크립트를 탑재하였다.<br>하지만 둘의 내용이 매우 달랐는지, 같은 기능을 구현하기 위해 개발자가 해야하는 일들이 더 많아졌다.<br>날이 가면 갈 수록 사용자를 끌어내기 위해 서로 기능을 넣다보니 Javascript와 JScript는 날이 가면 갈 수록 달라지는 경향을 보였다.<br>이에 대한 심각성을 파악하고, <a href="https://ko.wikipedia.org/wiki/Ecma_%EC%9D%B8%ED%84%B0%EB%82%B4%EC%85%94%EB%84%90" rel="external nofollow noopener noreferrer" target="_blank">European Computer Manufacturers Association(ECMA, 현 ECMA International)</a>에서는<br>이러한 자바스크립트에 대한 표준을 내리게 된다.<br>또한 ECMA에서는 자바스크립트의 표준만 내리는 게 아니라 다른 표준안도 정하기 때문에 그와 구분하기 위해 숫자를 붙였는데 262다.<br>ECMA262라고 보인다면 <code>아, 자바스크립트 표준 규격이구나</code>라고 생각하면 될 것 같다.  </p><h2 id="JS-ES"><a href="#JS-ES" class="headerlink" title="JS? ES?"></a>JS? ES?</h2><p>자바스크립트는 <strong>언어</strong>이고, ES는 <strong>스펙</strong>이다.<br>IE8에서는 <strong>ES3 스펙을 준수</strong>한 거고, IE9에서는 <strong>ES5 스펙을 준수</strong>한 거다.<br>그럼 우리가 여태까지 알고 있던 자바스크립트를 ES라고 불러야할까?<br>나도 이 문제에 대해서는 아직도 잘 모르겠다.<br>지금 내가 말할 뉘앙스대로라면 ES는 <code>자바스크립트의 표준을 세운 언어</code>라는 느낌이고,<br>그냥 자바스크립트하면 <code>비표준 언어</code>라는 느낌이 많이 드는데 나는 아래와 같이 구분해서 부른다.  </p><ul><li>자바스크립트<br>ES5까지의 내용을 나는 그냥 자바스크립트라고 부른다.<br>ES3나 5의 특징을 설명해야할 때는 콕 찝어서 ES3다 뭐다 하고 부르지만,<br>그렇지 않은 경우에는 그냥 자바스크립트라고 퉁쳐서 부른다.<br>또한 많은 사람들이 생각하는 웹 브라우저에서 돌아가는 자바스크립트의 기준은 아래의 범주도 포함하는 것 같다.<br>ES + DOM(Document Object Model) + BOM(Browser Object Model)<br>DOM은 document.뭐시기~ 요런 애들이고 BOM은 window.머시기~(window를 생략하기도 한다.) 이런 애들이라고 알아두면 될 것 같다.  </li><li>ES<br>ES2015(a.k.a ES6)+나 ES3, 5의 특징과 같은 걸 콕 찝어 말할 때 ES라고 부른다.<br>왜 ES2015 이상의 내용을 얘기할 때 ES를 쓰냐면 ES5와 ES2015 사이에 너무나 큰 변화가 있었기 때문이다.<br>그래서 일반적으로 자바스크립트라고 알고 있는 ES5의 내용으로 사람들이 이해하지 않길 바라는 마음에 ES2015라고 구분해서 부르고 있다.<br>또한 위에 자바스크립트에서도 언급 했 듯이 ES에는 DOM과 BOM을 포함하지 않는다는 점을 유념해둬야한다.<br>즉 ES2015가 되건 2020이 되건 BOM과 DOM의 내용하고는 전혀 관련이 없다는 점을 알아둬야한다.</li></ul><h2 id="ES3-1999"><a href="#ES3-1999" class="headerlink" title="ES3 (1999)"></a>ES3 (1999)</h2><p>대중적으로 많이 아는 그냥 자바스크립트라고 생각하면 될 것 같다.<br><a href="/2016/11/10/ES6-Scope/#ES5의-함수-단위의-스코프">함수 단위의 스코프</a>, 호이스팅, <a href="/2016/11/10/ES6-Scope/#함수-단위-스코프의-극복-모듈화">모듈화 미지원</a>, <a href="http://cafe.naver.com/hacosa/185157" rel="external nofollow noopener noreferrer" target="_blank">프로토타입</a>, 클로저 등등 자바스크립트의 기본적인 특징들이 들어있다.<br>대부분의 브라우저에서 지원한다.<br>IE8까지 크로스브라우징하는 환경이면 ES3를 쓰고 있다고 생각하면 된다.  </p><h2 id="ES5-2009"><a href="#ES5-2009" class="headerlink" title="ES5 (2009)"></a>ES5 (2009)</h2><p>4는 너무 급변하는 내용이 있었던지 거절되고, 그 후에 점진적인 개선을 하고자 5가 나온 것으로 알고있다.<br>기본적으로 IE9부터 본격적인 지원을 하지만 <a href="https://github.com/es-shims/es5-shim" rel="external nofollow noopener noreferrer" target="_blank">es5-shim</a>을 사용하면 하위 버전에서도 특정 기능들을 지원해준다.<br>5부터는 아래와 같은 내용들이 추가되었다.  </p><ul><li>배열<br>배열과 관련해서 새로운 메소드들이 많이 생겼는데 대표적으로<br>forEach, map, filter, reduce, some, every와 같은 순환 메소드들이 생겼다.<br>이 메소드들은 개발자가 반복 횟수나 조건을 잘못 입력하는 등의 실수를 줄여주는 효과가 있다.  </li><li>객체<br>일단 눈에 띄는 점은 객체의 프로퍼티에 대한 설정을 할 수 있다는 것이다.<br>객체를 생성/수정/복사하는 표준 메소드들(Object.create(), Object.defineProperty(), Object.freeze(), Object.assign() 등등)과 getter/setter 등등<br>또한 Object.keys 메소드를 쓰면 for in 메소드도 대체할 수 있게 된다.  </li><li>strict 모드<br>문법을 좀 더 깐깐하게 체크하는 모드이다.<br>물론 이유없이 그러는 게 아니라 좀 더 코드를 안전하게(에러가 안 나게, 미연에 방지하고자) 등장했다.<br>특징은 아래 링크를 통해 확인해보자.<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode" rel="external nofollow noopener noreferrer" target="_blank">Strict mode - JavaScript | MDN</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="external nofollow noopener noreferrer" target="_blank">bind() 메소드</a><br>this를 강제로 bind 시켜주는 메소드이다.  </li><li><a href="http://huns.me/development/1407" rel="external nofollow noopener noreferrer" target="_blank">실행 컨텍스트 내에 존재하는 Lexical Environment</a>  </li><li>JSON(JavaScript Object Notation)<br>과거 통신을 할 때 데이터를 XML 형태로 많이 주고 받았다.<br>하지만 JSON이 좀 더 경량화 돼있는지 요새는 JSON이 대세다.<br>JSON은 자바스크립트의 객체 리터럴과 생긴 건 유사한데 다음과 같은 차이점이 존재한다.  </li></ul><ol><li>키는 무조건 쌍따옴표(“”)로 감싼 문자열이어야한다.  </li><li>주석은 사용할 수 없다.  </li><li>프로퍼티로 메소드는 불가능하다.</li><li>프로퍼티에서도 메소드의 사용이 불가능하다.<br>통신을 위해 Object를 JSON으로 바꾸는 방법은 <code>JSON.stringify(obj)</code>이고, 자바스크립트 코드에서 사용하기 위해 JSON은 Object로 바꾸는 방법은 <code>JSON.parse(json)</code>이다.       </li></ol><h2 id="ES2015-ES6"><a href="#ES2015-ES6" class="headerlink" title="ES2015(ES6)"></a>ES2015(ES6)</h2><p>원래는 ES6였는데 사람들이 끝자리인 6과 2016년을 연관짓는 습성 때문에 2016년에 나온 걸로 착각을 해서인지 ES2015로 바꾼 것 같다.<br>그냥 갤럭시 노트 6가 7으로 바로 건너뛴 것처럼 ES도 그냥 건너뛰면 어떨까… 싶은 생각이 든다. (개인적으로 연도 다 붙이기 너무 귀찮다.)<br>ES6 Harmony라고도 불리우는 것 같다.<br>ES2015 들어서면서 다음과 같은 문제점들이 해결되었다.  </p><ul><li><a href="/2016/11/10/ES6-Scope/#TDZ">호이스팅이 사라진 것 같은 효과</a>  </li><li><a href="/2016/11/10/ES6-Scope/#ES6의-블록-단위의-스코프">함수 단위 스코프에서 블록 단위 스코프로 변경</a>  </li><li><a href="/2017/02/15/es-this/#애로우-펑션으로서-호출할-때">this를 동적으로 바인딩하지 않는 애로우 펑션</a>  </li><li>모듈화 지원  </li><li>콜백 지옥의 구원자, Promise  <ul><li><a href="/2017/01/21/ES6-Promise-with-ajax/">(ES6) ajax 위주의 promise 실습</a>  </li><li><a href="/2017/04/04/js-promise-param/">(ES6) Promise에 파라미터를 넘겨서 사용해보자</a></li></ul></li><li>Default, <a href="http://cafe.naver.com/hacosa/187244" rel="external nofollow noopener noreferrer" target="_blank">Rest 파라미터</a>  </li><li>해체 할당, <a href="http://cafe.naver.com/hacosa/187244" rel="external nofollow noopener noreferrer" target="_blank">Spread 연산자</a>  </li><li>템플릿 리터럴  </li><li>클래스<br>이 외에도 특징은 엄청나게 많아서 사람들이 이 부분에서 많은 장벽을 느끼는 것 같다.<br>일단 브라우저(특히 MS 계역)에서 지원해주지 않는 경우가 많아<br><a href="/2016/11/11/Babel-ES6-with-IE8/">바벨</a>이라는 트랜스파일러를 써야하는데 <a href="https://babeljs.io/repl/" rel="external nofollow noopener noreferrer" target="_blank">바벨 웹 사이트 REPL</a>에서도 즉시 변환이 가능하다.<br>하지만 매번 번거롭게 하기 귀찮으니 바벨을 설치해야하는데…  </li><li>바벨은 웹 브라우저가 아닌 노드 JS 위에서 돌아가고…  </li><li>노드 JS에서 바벨을 설치하려면 NPM을 알아야하고…  </li><li>또 모듈화를 사용하려면 <a href="/2016/11/18/Module-bundling-with-Webpck/">웹팩</a>과 같은 모듈 번들러를 사용해야하고…  </li></ul><p>이런 다양한 장벽 때문에 사람들이 ES2015를 겁내고 쉽사리 접근하지 못하는 경향도 있는 것 같다.<br>하지만 공부를 위해서라면 바벨 없이도 크롬에서 돌리면 원활한 공부가 가능하고,<br>모듈화 부분은 지원하는 브라우저가 없기 때문에 건너 뛰고 공부해야할 것 같다.</p><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015+"></a>ES2015+</h2><p>현재 ES2016이 작년 6월 경에 발표됐다.<br>ES2017은 조만간 발표될 예정이다.<br>ES2015에서 너무 내용이 많이 바뀌어 겁을 먹었다면 여기서부터는 크게 겁 낼 필요 없는 게 그렇게 큰 내용이 변하지 않았다는 점이다.<br>3에서 5까지 10년, 5에서 6까지 7년이라는 공백 때문에 엄청난 변화들이 있거나 했는데<br>이제는 매년 표준을 제정하면서 그런 혼란을 줄일 예정인 것 같다.<br>또한 이후에 나올 ES를 통칭해서 ES.Next라고도 부르는 것 같다.  </p><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>ES3 ~ ES.Next까지 많은 내용을 다룬 것 같은데 너무 ES2015+를 어려워하지 않았으면 좋겠다.<br>막상 공부해보면 새로운 특성도 있지만, 기존에 사용하던 패턴들을 조금씩 변경하는 내용들이 많고,<br>오히려 복잡하게 구현하던 것을 간편하게 구현할 수 있게 만들어줘서 더 편한 것 같다.<br>다음 시간에는 <a href="/2017/04/26/js-002-hoisting/">호이스팅(Hoisting)</a>과 함수 단위의 <a href="/2017/04/27/js-003-scope/">스코프</a>에 대해서 알아보도록 하자.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> 자알쓰 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> 자알쓰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Generator</title>
      <link href="/2017/04/22/ES6-Generator/"/>
      <url>/2017/04/22/ES6-Generator/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-Generator/thumb.png" alt="">  </p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>이 포스트는 <a href="https://festi.kr/festi/gdg-korea-2016-devfest-seoul/" rel="external nofollow noopener noreferrer" target="_blank">GDG 2016</a>에서 발표하신 <a href="https://www.facebook.com/hika00" rel="external nofollow noopener noreferrer" target="_blank">맹기완</a> 님의 <a href="http://www.bsidesoft.com/?p=2913" rel="external nofollow noopener noreferrer" target="_blank">발표</a>를 듣고 감명을 받아 정리해본 글이다.<br><a href="/2016/12/25/es6-interface/">(ES6) Interface</a>와 <a href="/2017/04/16/ES6-Symbol/">(ES6) Symbol</a>, <a href="/2017/04/22/ES6-Iterator/">(ES6) Iterator</a>에 대한 내용은 링크를 참조하도록 하자.  </p><h2 id="사용-사례"><a href="#사용-사례" class="headerlink" title="사용 사례"></a>사용 사례</h2><p>이 사용 사례가 전부는 아니겠지만, 제너레이터는 이터레이터를 구현할 때 좀 더 쉽게 만들어준다.<br>우리는 지난 포스트에서 다음과 같이 배열의 요소를 거꾸로 사용하는 이터레이터를 구현해보았다.  </p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorResultObject = <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">    value: <span class="keyword">this</span>.slice(-idx)[<span class="number">0</span>], <span class="comment">// value 값이 반환됨.</span></span><br><span class="line">    done: --idx === <span class="keyword">this</span>.length</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 이 next 함수 안에 있는 내용은 매번 실행됨.</span></span><br><span class="line">      <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">      <span class="keyword">return</span> makeIteratorResultObject.call(<span class="keyword">this</span>, ++idx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr은 Iterable 인터페이스를 준수한 객체가 됨.</span></span><br><span class="line">arr[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 요 함수에 있는 내용은 한 번만 실행됨.</span></span><br><span class="line">  <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">  <span class="keyword">return</span> makeIteratorObject.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr]; <span class="comment">// [0, undefined, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>IteratorResult 객체, Iterator 객체, Iterable 객체, 이 3개를 다 구현하기란 매우 귀찮고 어렵다.<br>따라서 제너레이터를 사용하면 아래와 같이 바꿀 수 있게 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr은 Iterable 인터페이스를 준수한 객체가 됨.</span></span><br><span class="line">arr[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, length=<span class="keyword">this</span>.length; i&lt;length; i++) <span class="keyword">yield</span> <span class="keyword">this</span>.slice(-i)[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 반복문의 횟수를 오타낼 염려가 있으니 아래와 같이도 할 수 있다.</span></span><br><span class="line"><span class="comment">// arr[Symbol.iterator] = function*() &#123;</span></span><br><span class="line"><span class="comment">//   yield* this.map(function(v, idx)&#123;</span></span><br><span class="line"><span class="comment">//     return this.slice(-(++idx))[0];</span></span><br><span class="line"><span class="comment">//   &#125;, this);</span></span><br><span class="line"><span class="comment">// &#125;; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(gen); <span class="comment">// 제너레이터 함수의 실행 결과는 Iterator 객체를 반환한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: undefined, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> a <span class="keyword">of</span> arr) <span class="built_in">console</span>.log(a); <span class="comment">// 0 undefined 3 2 1</span></span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Generator/00.png" alt="console.dir로 제너레이터 함수의 실행 결과를 찍어본 결과">  </p><p>마법과도 같은 일이 일어났다.<br>그럼 이 마법같은 일을 낱낱이 파헤쳐보자.  </p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>일단 두 가지 케이스가 눈에 띄었다.<br><code>function 키워드 뒤의 *</code>와 <code>yield</code>.<br>funcion 키워드 뒤의 *는 이 함수가 제너레이터 함수라는 것을 명시해주는 기능을 한다.<br>그리고 그 일반 함수가 아닌 제너레이터 함수에서는 yield 키워드를 쓸 수 있다.<br>이 yield는 return과 마찬가지로 값을 반환하는 기능을 하는데, 함수는 종료시키지 않는다.<br>next를 호출할 때마다 yield 구문까지의 코드를 실행하고 yield 값을 반환하게 되는 것이다.<br>그리고 실행 컨텍스트를 어디선가 물고 있어서 코드의 흐름과 상관없이 next를 호출할 때마다 그 실행 결과를 보장받게 되는 것이다.<br>몇 가지 예제들을 통해 그 특성들을 알아보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'내가 실행됐니?'</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">const</span> c = <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = gen(); <span class="comment">// 이터레이터 객체를 반환</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 내가 실행됐니?가 출력되고, 1을 반환</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// b에 yield 3이 할당되고, 3이 반환됨.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 하지만 yield 3 자체는 undefined를 반환해서 b에는 undefined가 찍힘.</span></span><br><span class="line"><span class="comment">// 그리고 c에 yield 4가 할당되고, 4가 반환됨.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 원래 c에는 yield 4가 할당돼 undefined가 찍혀야하지만, next에 매개변수를 주면 c에 새로운 값을 할당하게 됨.</span></span><br><span class="line"><span class="comment">// 따라서 9를 출력.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// return 이후로는 닿질 못한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'-----------------'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이터레이터 내부의 요소(yield)들을 모두 소모했으므로 재충전(?)</span></span><br><span class="line">a = gen();</span><br><span class="line"><span class="comment">// 이터레이터이므로 for of 구문을 사용할 수 있다.  </span></span><br><span class="line"><span class="comment">// 반환 값으로는 yield에 지정한 값들이 반환된다.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> a) <span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure><p>yield는 모든 타입을 반환할 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = &#123;<span class="attr">obj</span>: <span class="number">2</span>&#125;;</span><br><span class="line">  <span class="keyword">yield</span> a;</span><br><span class="line">  <span class="keyword">yield</span> () =&gt; <span class="built_in">console</span>.log(<span class="number">7777777</span>);</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span>* (<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;<span class="keyword">yield</span> <span class="number">5</span>; <span class="keyword">yield</span> <span class="number">6</span>;&#125;)();</span><br><span class="line">  <span class="keyword">yield</span> <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;<span class="keyword">yield</span> <span class="number">7</span>; <span class="keyword">yield</span> <span class="number">8</span>;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 제너레이터 함수의 실행 결과로 이터레이터 객체가 a에 담기게 된다.</span></span><br><span class="line"><span class="keyword">const</span> a = gen();</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.next()까지 하게 되면 IterableResult 객체인 &#123; value: &#123; obj: 2 &#125;, done: false &#125;가 반환된다.</span></span><br><span class="line"><span class="comment">// 실제 for of와 같은 문법에서도 value 값을 반환하게 되는 것이다.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 반환값이 함수이니 반환된 함수를 실행하니 7777이 콘솔 로그에 찍힘.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value());</span><br><span class="line"></span><br><span class="line"><span class="comment">// yield에도 *(asterisk)를 찍어줄 수 있는데 yield를 쪼갠다고 보면 된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 그 다음엔 제너레이터 함수를 즉시 실행했으므로 이터레이터 객체가 반환된다.</span></span><br><span class="line"><span class="comment">// 그 반환된 이터레이터 객체를 *을 써서 또 쪼갰다.</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이번엔 제너레이터 함수의 실행 결과가 아닌 함수 자체를 리턴했으므로 쪼갤 수가 없다.</span></span><br><span class="line"><span class="comment">// 따라서 그 함수를 실행한 이터레이터 객체를 b에 따로 담아서 쪼개줘야한다.</span></span><br><span class="line"><span class="keyword">const</span> b = a.next().value();</span><br><span class="line"><span class="built_in">console</span>.log(b.next().value); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(b.next().value); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>제너레이터 함수의 스코프를 벗어나는 공간에 yield를 쓸 수 없다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="comment">// 콜백 함수는 제너레이터 함수가 아니므로 yield를 쓸 수 없다.</span></span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">yield</span> v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제너레이터를 통해 비동기 함수를 제어하는 방법이 있지만 ES2017의 async와 await를 적극 활용하기 바란다. </p><ul><li><a href="/2017/01/25/ES6-ajax-with-fetch/">(ES6+) ajax를 위한 fetch와 async/await</a>  </li><li><a href="/2017/04/03/js-async-function/">(ES6+) 비동기 함수를 깔끔하게 처리해보자.</a></li></ul><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="http://www.bsidesoft.com/?p=2913" rel="external nofollow noopener noreferrer" target="_blank">[es6] GDG 2016 발표자료</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function*" rel="external nofollow noopener noreferrer" target="_blank">function* - JavaScript | MDN</a>  </li><li><a href="http://hacks.mozilla.or.kr/2015/08/es6-in-depth-generators/" rel="external nofollow noopener noreferrer" target="_blank">ES6 In Depth: 제너레이터(Generator) ★ Mozilla 웹 기술 블로그</a>  </li><li><a href="https://bcnam.github.io/bcnam.github.io/2016/11/29/2016-11-29-ES6-Generator-and-yield/" rel="external nofollow noopener noreferrer" target="_blank">ES6 Generator with Aysnc | programmist</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> Interface </tag>
            
            <tag> Symbol </tag>
            
            <tag> Iterator </tag>
            
            <tag> Generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) Iterator</title>
      <link href="/2017/04/22/ES6-Iterator/"/>
      <url>/2017/04/22/ES6-Iterator/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-Iterator/thumb.png" alt="">  </p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>이 포스트는 <a href="https://festi.kr/festi/gdg-korea-2016-devfest-seoul/" rel="external nofollow noopener noreferrer" target="_blank">GDG 2016</a>에서 발표하신 <a href="https://www.facebook.com/hika00" rel="external nofollow noopener noreferrer" target="_blank">맹기완</a> 님의 <a href="http://www.bsidesoft.com/?p=2913" rel="external nofollow noopener noreferrer" target="_blank">발표</a>를 듣고 감명을 받아 정리해본 글이다.<br><a href="/2016/12/25/es6-interface/">(ES6) Interface</a>와 <a href="/2017/04/16/ES6-Symbol/">(ES6) Symbol</a>에 대한 내용은 링크를 참조하도록 하자.<br>또한 이 글을 다 읽고 나서 <a href="/2017/04/22/ES6-Generator/">ES6 Generator</a>도 읽어보자.<br><code>Iterator는 반복자</code>란 뜻을 가지고 있으며, 대충 반복과 관련된 용어라는 것만 알고 글을 읽어보자.</p><a id="more"></a><h2 id="다음에-나오는-예제는-이터레이터를-쓴다"><a href="#다음에-나오는-예제는-이터레이터를-쓴다" class="headerlink" title="다음에 나오는 예제는 이터레이터를 쓴다."></a>다음에 나오는 예제는 이터레이터를 쓴다.</h2><p>ES6에서는 다음과 같은 문법에서 알게 모르게 이터레이터를 쓰고 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. for of</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="built_in">console</span>.log(num); <span class="comment">// 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. spread operator</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr]; <span class="comment">// shallow copy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. destructuring assignment</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'asdf'</span>;</span><br><span class="line"><span class="keyword">const</span> [a, ...b] = str;</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 'a', ['s', 'd', 'f']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. rest parameter</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">a, ...args</span>) =&gt;</span>  <span class="built_in">console</span>.log(a, args);</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 1, [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>위 문법은 이터러블한 객체(Iterable Interface를 준수한 객체, (Typed )Array, String, (Weak)Map/Set)만 쓸 수 있는 문법이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype);</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Iterator/array-prototype.png" alt="Array의 프로토타입에는 Symbol.iterator 메소드가 있다.">  </p><p>반면에 Object는 이터러블한 객체가 아니다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Object</span>.prototype);</span><br></pre></td></tr></table></figure><p>Symbol.iterator() 메소드를 눈 씻고 찾아볼 수가 없다.<br>따라서 for of와 같은 문법을 쓸 수 없다.<br>하지만 현재 object에도 spread operator와 destructuring assignment를 쓸 수 있게 한 제안이 Stage-3까지 올라가 있어서<br><a href="/2016/11/11/Babel-ES6-with-IE8/">바벨</a>의 <a href="https://babeljs.io/docs/plugins/transform-object-rest-spread/" rel="external nofollow noopener noreferrer" target="_blank">transform-object-rest-spread</a>나 <a href="https://babeljs.io/docs/plugins/preset-stage-3/" rel="external nofollow noopener noreferrer" target="_blank">Stage 3 preset</a>을 쓰면 된다.<br>그럼 이제 이터러블과 이터레이터가 뭔지 알아보자.</p><h2 id="Iterator-관련-Interface"><a href="#Iterator-관련-Interface" class="headerlink" title="Iterator 관련 Interface"></a>Iterator 관련 Interface</h2><p>타입스크립트의 인터페이스 표기법을 사용하고 있으므로 타입스크립트에 익숙한 사람은<br>이미지를 보자마자 무슨 의미인지 알 수 있을 것이다.</p><h3 id="Iterable-Interface"><a href="#Iterable-Interface" class="headerlink" title="Iterable Interface"></a>Iterable Interface</h3><p><img src="/images/ES6-Iterator/iterable.png" alt=""><br>인터페이스이기 때문에 객체가 가져야하는 키와 그 키가 가져야하는 값을 명시하고 있다.  </p><ul><li>가져야하는 키: Symbol.iterator(well-known symbol 중 하나)</li><li>키(Symbol.iterator): 함수인데 반환 값은 <a href="#Iterator-Interface">Iterator 인터페이스</a>를 준수한 객체가 오면 된다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterable 인터페이스를 준수한 obj 객체</span></span><br><span class="line"><span class="keyword">const</span> IterableObject = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> IteratorObject;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Iterator-Interface"><a href="#Iterator-Interface" class="headerlink" title="Iterator Interface"></a>Iterator Interface</h3><p><img src="/images/ES6-Iterator/iterator.png" alt=""><br>인터페이스이기 때문에 객체가 가져야하는 키와 그 키가 가져야하는 값을 명시하고 있다.  </p><ul><li>가져야하는 키: next라는 키를 가진다.  </li><li>키(next)가 가져야할 값: 함수인데 반환 값은 <a href="IteratorResult-Interface">IteratorResult 인터페이스</a>를 준수한 객체이다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterator 인터페이스를 준수한 IteratorObject 객체.</span></span><br><span class="line"><span class="keyword">const</span> IteratorObject = &#123;</span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">return</span> IteratorResultObject;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="IteratorResult-Interface"><a href="#IteratorResult-Interface" class="headerlink" title="IteratorResult Interface"></a>IteratorResult Interface</h3><p>인터페이스이기 때문에 객체가 가져야하는 키와 그 키가 가져야하는 값을 명시하고 있다.<br><img src="/images/ES6-Iterator/iterator-result.png" alt=""></p><ul><li>가져야하는 키: value와 done이라는 키를 가진다.  </li><li>키(value, done)가 가져야할 값: value에는 어떤 값이든 와도 상관 없고, done에는 boolean 값만 허용하고 있다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IteratorResult 인터페이스를 준수한 IteratorResultObject 객체</span></span><br><span class="line"><span class="keyword">const</span> IteratorResultObject = &#123;</span><br><span class="line">  value: <span class="built_in">console</span>.log(<span class="string">'뭐든 들어와도 상관 없어!'</span>),</span><br><span class="line">  done: <span class="number">1</span> &lt;= <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="커스텀-이터레이터를-만들어보자"><a href="#커스텀-이터레이터를-만들어보자" class="headerlink" title="커스텀 이터레이터를 만들어보자."></a>커스텀 이터레이터를 만들어보자.</h2><p>위의 따분한 이론은 집어치우고 이제 배열의 요소를 거꾸로 반환하는 커스텀 이터레이터를 만들어보자.<br>Array.prototype.reverse()가 없다고 생각해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorResultObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환    </span></span><br><span class="line">    value: <span class="keyword">this</span>.pop(), <span class="comment">// value 값이 반환됨.</span></span><br><span class="line">    done: <span class="keyword">this</span>.length === <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">      <span class="keyword">return</span> makeIteratorResultObject.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr은 Iterable 인터페이스를 준수한 객체가 됨.</span></span><br><span class="line">arr[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">  <span class="keyword">return</span> makeIteratorObject.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> a <span class="keyword">of</span> arr) <span class="built_in">console</span>.log(a); <span class="comment">// 0 undefined 3 2 까지만 찍히게 된다.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> a <span class="keyword">of</span> arr) <span class="built_in">console</span>.log(a); <span class="comment">// this.pop()으로 원본 배열을 손상시켜서 이터레이터가 1회성을 띈다.</span></span><br></pre></td></tr></table></figure><p>그러면 이터레이터를 하나씩 분리해서 찍어보자.<br>다시 말해 이터러블 객체는 반복 요소를 끊어서 실행할 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorResultObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length)</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">    value: <span class="keyword">this</span>.pop(), <span class="comment">// value 값이 반환됨.</span></span><br><span class="line">    done: <span class="keyword">this</span>.length === <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">      <span class="keyword">return</span> makeIteratorResultObject.call(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr은 Iterable 인터페이스를 준수한 객체가 됨.</span></span><br><span class="line">arr[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">  <span class="keyword">return</span> makeIteratorObject.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(iter); <span class="comment">// Iterator 오브젝트를 반환함.</span></span><br><span class="line"><span class="comment">// pop 하기 전 length: 5, pop 한 후 length 4</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 0, done: false&#125;</span></span><br><span class="line"><span class="comment">// pop 하기 전 length: 4, pop 한 후 length 3</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: undefined, done: false&#125;</span></span><br><span class="line"><span class="comment">// pop 하기 전 length: 3, pop 한 후 length 2</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="comment">// pop 하기 전 length: 2, pop 한 후 length 1</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="comment">// pop 하기 전 length: 1, pop 한 후 length 0</span></span><br><span class="line"><span class="comment">// 즉 value를 실행해서 pop을 먼저 실행하고 그 이후의 length인 0을 가지고 done이 평가되는 거임.</span></span><br><span class="line"><span class="comment">// 그리고 그 done이 true이면 value를 반환하지 않게되니 1이 반환되지 않는 거였음.</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 1, done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Iterator/00.png" alt="콘솔 로그에서 찍어본 결과">  </p><p>그럼 위에서 기술한 커스텀 이터레이터를 수정해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorResultObject = <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">    value: <span class="keyword">this</span>.slice(-idx)[<span class="number">0</span>], <span class="comment">// value 값이 반환됨.</span></span><br><span class="line">    done: --idx === <span class="keyword">this</span>.length</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this를 바인딩해야하므로 ES5식 함수 사용</span></span><br><span class="line"><span class="keyword">const</span> makeIteratorObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 이 next 함수 안에 있는 내용은 매번 실행됨.</span></span><br><span class="line">      <span class="comment">// IteratorResult 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">      <span class="keyword">return</span> makeIteratorResultObject.call(<span class="keyword">this</span>, ++idx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">undefined</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr은 Iterable 인터페이스를 준수한 객체가 됨.</span></span><br><span class="line">arr[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 요 함수에 있는 내용은 한 번만 실행됨.</span></span><br><span class="line">  <span class="comment">// Iterator 인터페이스를 준수한 객체를 반환</span></span><br><span class="line">  <span class="keyword">return</span> makeIteratorObject.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 0, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: undefined, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 원본 배열을 손상시키지 않으므로 이터레이터를 무한정 쓸 수 있다.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> arr) <span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> arr) <span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h2 id="객체-관련-이터레이터"><a href="#객체-관련-이터레이터" class="headerlink" title="객체 관련 이터레이터"></a>객체 관련 이터레이터</h2><p>객체 관련해서도 커스텀 이터레이터를 만들 수 있지만, 커스텀 이터레이터를 쓰지 않고도 이터레이터를 쓸만한 방법이 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'간장냥'</span>,</span><br><span class="line">  age: <span class="number">25</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">'symbol'</span>)]: <span class="string">'오 마이 심볼!'</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.__proto__.asdf = <span class="string">'qwer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 키 뽑아내기(name과 age, [Symbol('symbol')])</span></span><br><span class="line"><span class="comment">// ES5(Symbol로 지정한 키는 못 뽑아냄)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span>(obj.hasOwnProperty(key)) <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6(Symbol로 지정한 키가 없으면 그냥 Object.keys를 쓰면 된다.)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Reflect</span>.ownKeys(obj)) <span class="built_in">console</span>.log(key);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 값 뽑아내기(간장냥과 25, '오 마이 심볼!')</span></span><br><span class="line"><span class="comment">// ES5(Symbol로 지정한 키는 못 뽑아냄)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span>(obj.hasOwnProperty(key)) <span class="built_in">console</span>.log(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6(Symbol로 지정한 키가 없으면 그냥 Object.keys를 쓰면 된다.)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Reflect</span>.ownKeys(obj)) <span class="built_in">console</span>.log(obj[key]);</span><br></pre></td></tr></table></figure><h2 id="배열-순환-메소드를-개선시킨-break-amp-continue"><a href="#배열-순환-메소드를-개선시킨-break-amp-continue" class="headerlink" title="배열 순환 메소드를 개선시킨 break &amp; continue"></a>배열 순환 메소드를 개선시킨 break &amp; continue</h2><p>우리는 에서 <a href="/2017/02/12/ES5-array-loop-method-break/">(ES5) 배열의 순회 메소드에서 break 기능 구현하기</a>배열에서 반복문에서 break, continue를 어떻게 구현할지 생각해보았다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'q'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>,</span><br><span class="line">  <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열이 숫자로만 이루어져있는지 파악하는 함수</span></span><br><span class="line"><span class="comment">//ES3</span></span><br><span class="line"><span class="keyword">var</span> isArrNum = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isNum = <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 프로그래머가 실수로 let i = 1;이라고 초기화한다면?</span></span><br><span class="line">  <span class="comment">// 실수로 i&lt;arr.length+1; 이라고 조건식을 잘못 입력한다면?</span></span><br><span class="line">  <span class="comment">// i+=2; 라고 증감식을 잘못 입력한다면?</span></span><br><span class="line">  <span class="comment">// arr[i+1]로 잘못 참조한다면?</span></span><br><span class="line">  <span class="comment">// 이렇게 일일이 초기화, 조건식 지정, 증감식 지정 등등을 일일이 해줘야하므로 귀찮다.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(arr[i])) &#123; <span class="comment">// 숫자라면</span></span><br><span class="line">      <span class="comment">// 아래 있는 코드는 실행할 필요 없이 다음 요소를 검사해야함.</span></span><br><span class="line">      <span class="comment">// 즉 다음 반복문을 실행.</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 숫자가 아니라면</span></span><br><span class="line">    isNum = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> isArrNum2 = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123; <span class="comment">// 과연 직관적이라고 말할 수 있는가?</span></span><br><span class="line">  <span class="keyword">return</span> !arr.some(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isNaN</span>(v);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> isArrNum3 = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 실수할 요소가 확연히 줄어들고 ES5보다 훨씬 직관적으로 변하였다.</span></span><br><span class="line">  <span class="keyword">let</span> isNum = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Number</span>.isNaN(+v)) <span class="keyword">continue</span>;</span><br><span class="line">    isNum = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// q</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isArrNum(arr));</span><br><span class="line"><span class="built_in">console</span>.log(isArrNum2(arr));</span><br><span class="line"><span class="built_in">console</span>.log(isArrNum3(arr));</span><br></pre></td></tr></table></figure><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="http://www.bsidesoft.com/?p=2913" rel="external nofollow noopener noreferrer" target="_blank">[es6] GDG 2016 발표자료</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Iteration_protocols" rel="external nofollow noopener noreferrer" target="_blank">[MDN] Iteration protocols</a>  </li><li><a href="https://bcnam.github.io/bcnam.github.io/2016/11/25/2016-11-25-ES6-Iterable-and-Iterator/" rel="external nofollow noopener noreferrer" target="_blank">ES6 Iterable and Iterator | programmist</a>  </li><li><a href="http://exploringjs.com/es6/ch_iteration.html" rel="external nofollow noopener noreferrer" target="_blank">21. Iterables and iterators</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> Interface </tag>
            
            <tag> Symbol </tag>
            
            <tag> Iterator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Webpack 2) 상대경로 헬파티에서 탈출하기</title>
      <link href="/2017/04/20/webpack2-escape-relative-path-hell/"/>
      <url>/2017/04/20/webpack2-escape-relative-path-hell/</url>
      
        <content type="html"><![CDATA[<h2 id="상대경로-헬파티"><a href="#상대경로-헬파티" class="headerlink" title="상대경로 헬파티"></a>상대경로 헬파티</h2><p><img src="/images/webpack2-escape-relative-path-hell/thumb.png" alt="예제를 위해 과장한 폴더 구조"><br>/app/src/lib/lib.js에는 아래와 같은 변수가 들어가있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> num = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>/app/src/lib/lib.scss에는 아래와 같은 변수가 들어가있다.  </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$var</span>: <span class="number">100px</span>;</span><br></pre></td></tr></table></figure><p>이제 이 변수를 사용하는 모듈이 /app/src/a/b/c/d/e/f 폴더 안에 있는 녀석들이다.<br>/app/src/a/b/c/d/e/f/a.js 파일의 내용은 아래와 같다.  </p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;num&#125; <span class="keyword">from</span> <span class="string">'../../../../../../lib/lib'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> num2 = num*num;</span><br></pre></td></tr></table></figure><p>/app/src/a/b/c/d/e/f/a.scss 파일의 내용은 아래와 같다.  </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'../../../../../../lib/lib'</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$var</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$var</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자동 완성이 되는 IDE의 경우에는 다행이지만… 그렇지 않은 에디터를 사용하는 경우에는 헬파티가 열리게 된다.<br>오늘은 이러한 문제점을 해결해보고자 한다!  </p><h2 id="프로젝트-세팅"><a href="#프로젝트-세팅" class="headerlink" title="프로젝트 세팅"></a>프로젝트 세팅</h2><p><img src="/images/webpack2-escape-relative-path-hell/dir.png" alt="프로젝트 구조">  </p><p>일단 프로젝트로 쓸 디렉토리를 아무거나 만들고 터미널로 해당 디렉토리로 이동 후 다음 명령어를 쳐서 npm을 초기화 시키고 패키지들을 설치하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init --y</span><br><span class="line">npm i -S webpack html-webpack-plugin style-loader css-loader node-sass sass-loader</span><br></pre></td></tr></table></figure><ul><li>웹팩 2에서는 바벨 없이도 import/export 문법을 쓸 수 있게 됐다!</li><li>html-webpack-plugin<br>빌드한 후에 소스 디렉토리에 있는 html 파일을 dist 디렉토리로 옮기기 위해 사용.<br>script, css 파일 자동 삽입 및 템플릿 엔진 사용, html minify 등등 다양한 기능 제공.  </li><li>style-loader css-loader<br>css 파일을 모듈로써 사용하기 위해 사용.  </li><li>node-sass sass-loader<br>sass, scss 파일을 모듈로써 사용하기 위해 사용.</li></ul><p>프로젝트 디렉토리에 웹팩 설정 파일인 webpack.config.js 파일을 만들고 아래와 같이 적어주자.<br>웹팩 1은 <a href="https://webpack.github.io/docs/configuration.html#resolve" rel="external nofollow noopener noreferrer" target="_blank">Configuration - Webpack</a> 링크를 참조하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ROOT = <span class="string">'./app/src'</span>;</span><br><span class="line"><span class="keyword">const</span> DIST = <span class="string">'./app/dist'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">`<span class="subst">$&#123;ROOT&#125;</span>/index`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/<span class="subst">$&#123;DIST&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">`<span class="subst">$&#123;ROOT&#125;</span>/index.html`</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, &#123;</span><br><span class="line">        loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">        <span class="comment">// 사스에서 상대경로 헬파티를 구제해줄 속성</span></span><br><span class="line">        options: &#123;</span><br><span class="line">          includePaths: [ROOT]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// es6 native module에서 상대경로 헬파티를 구제해줄 속성</span></span><br><span class="line">    modules: [ROOT, <span class="string">'./node_modules'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56</span></span><br><span class="line"><span class="comment">// parseQuery() will be replaced with getOptions() in the next major version of loader-utils.</span></span><br><span class="line"><span class="comment">// 위와 같이 로더 개발자를 위한 로그가 뜨는 게 보기 싫어서 추가.</span></span><br><span class="line">process.noDeprecation = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>/app/src/lib/lib.js은 아래와 같이 만들어주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> num = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>/app/src/lib/lib.scss도 아래와 같이 만들어주자.  </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$var</span>: <span class="number">100px</span>;</span><br></pre></td></tr></table></figure><p>이제 /app/src/a/b/c/d/e/f/a.js를 아래와 같이 만들어주자.<br>상대 경로의 헬파티로부터 벗어나게 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;num&#125; <span class="keyword">from</span> <span class="string">'lib/lib'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> num2 = num*num;</span><br></pre></td></tr></table></figure><p>/app/src/a/b/c/d/e/f/a.scss도 아래와 같이 만들어주자.<br>역시 상대 경로의 헬파티로부터 벗어나게 된다.  </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'lib/lib'</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$var</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$var</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/app/src/index.js는 아래와 같이 만들어주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;num2&#125; <span class="keyword">from</span> <span class="string">'./a/b/c/d/e/f/a'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./a/b/c/d/e/f/a.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br></pre></td></tr></table></figure><p>/app/src/index.html은 아래와 같이 만들어주자.<br>번들 된 js 경로를 입력하지 않아도 html-webpack-plugin이 알아서 삽입해준다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>package.json에 빌드 스크립트를 넣어주자.<br>scripts 부분에 넣어주면 된다.  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "$(npm bin)/webpack"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 다음과 같이 빌드를 해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>그리고 나서 /app/dist/index.html을 열어보면 다음과 같이 원하는 결과를 얻을 수 있다.<br><img src="/images/webpack2-escape-relative-path-hell/result.png" alt=""><br>100x100의 까만 div와 2*2=4의 결과를 콘솔창에서 볼 수 있다.  </p><h2 id="갓텔리제이-짱짱맨"><a href="#갓텔리제이-짱짱맨" class="headerlink" title="갓텔리제이 짱짱맨"></a>갓텔리제이 짱짱맨</h2><p><img src="/images/webpack2-escape-relative-path-hell/nono.png" alt="자동 완성이 지원되질 않는다."><br>한 가지 아쉬운 점이라면 IDE는 웹팩에서 정해준 루트 경로를 이해하지 못한다.<br>따라서 자동완성과 인덱싱(폴더가 존재하는 경로나 파일로 이동)을 지원하지 않는다.<br><img src="/images/webpack2-escape-relative-path-hell/gottellij.png" alt="하지만 우리의 IntelliJ가 최근에 업데이트 되면서 이러한 문제를 깔끔히 해결해주었다."><br>아마 Jet Brains의 IDE(Webstorm, PHPStorm 등등)에서는 다 지원될 것이다.<br>최신 버전으로 업데이트 한 후에 /app/src 경로를 Resource Root로 지정해주자.<br>Source Root로 지정하면 sass에서 모듈을 인덱싱하지 못한다.<br><img src="/images/webpack2-escape-relative-path-hell/markDir.png" alt=""><br><img src="/images/webpack2-escape-relative-path-hell/01.png" alt=""><br><img src="/images/webpack2-escape-relative-path-hell/02.png" alt=""><br><img src="/images/webpack2-escape-relative-path-hell/03.png" alt=""><br><img src="/images/webpack2-escape-relative-path-hell/04.png" alt=""><br>경로, 변수 자동 완성 및 인덱싱까지 너무 잘 돼서 개발자에게 뽀뽀 해주고 싶은 심정이다.<br>다른 IDE는 어떤지 모르겠지만 역시 갓텔리제이라 할만하다.</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Webpack 2) 최적화하기</title>
      <link href="/2017/04/18/webpack2-optimize/"/>
      <url>/2017/04/18/webpack2-optimize/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/webpack2-optimize/thumb.png" alt=""></p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>이 포스트들에서 말하는 내용들은 전부 배포용 파일에 적합한 작업이다.<br>이런 압축 작업을 개발용 버전에서 매번 빌드할 때마다 실행하면 빌드 시간이 매우 느려지기 때문이다.</p><p>우리는 <a href="/2017/03/12/webpack2-tree-shaking/">(Webpack 2) 트리 쉐이킹을 해보자!</a>에서 모듈 전체가 로딩 되는 CommonJS 방식에서<br>모듈의 필요한 부분만 로딩하는 ES2015 Native Module 방식을 사용하는 법을 배웠다.(Tree Shaking)<br>또한 <a href="/2017/03/13/webpack2-code-splitting/">(Webpack 2) 코드를 분할해보자!</a>에서 공통된 라이브러리를 분리시켜 사용자가 재접속시 캐싱을 적극 활용하게 바꿨고,<br>모든 페이지의 코드를 로딩하는 것이 아닌 페이지를 이동할 때마다 필요한 소스만 로딩하게 끔 청크 별로 코드를 분할하였다. (Code Splitting)<br>그리고 Webpakc 2가 미완성이라 코드 스플리팅이 제대로 되지 않아 일일이 필요한 모듈 파일을 하나씩 명시해줬어야 했는데,<br>이를 좀 더 똑똑하게 해주는 바벨 플러그인을 소개한 내용을 <a href="/2017/04/12/webpack2-smart-tree-shaking/">(Webpack 2) 트리 쉐이킹을 똑똑하게 해보자!</a> 통해서 보았다.<br>이번 포스트에서는 이와 더불어 조금이라도 더 소스 코드를 최적화하는 방법을 소개하도록 하겠다.<br>별로 안 대단해보일 수 있지만, 필자는 상당히 흥미롭게 느낀 내용이다.<br>혹시 위 3개 포스트를 보지 않은 사람은 따라하지는 않더라도 꼭 읽어보길 바란다.  </p><a id="more"></a><p>예제는 아래 깃헙 저장소의 hot-3 브랜치를 기준으로 진행된다.<br><a href="https://github.com/perfectacle/react-router-4/tree/hot-3" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/perfectacle/react-router-4/tree/hot-3</a></p><h2 id="너무나-많은-청크들"><a href="#너무나-많은-청크들" class="headerlink" title="너무나 많은 청크들"></a>너무나 많은 청크들</h2><p>위 저장소를 클론 받고 패키지를 전부 설치한 후에 번들링 해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack2-optimize/a-lot-chunks.png" alt="지금은 컴포넌트(페이지라고 생각)가 적어서 그렇지만 수백 개가 된다면 청크도 수백 개가 될 것이다"><br>청크 별로 코드를 분할 시켜서 로딩시간을 단축시켰다고 생각할 수 있지만 그렇지 않을 수도 있다.<br>실제 코드를 로딩받는 시간보다 http 요청을 수십, 수백 회 증가시키는 행위가 오히려 더 로딩시간을 늘리게 될 수가 있다.<br>http 1.1 스펙에서 하나의 요청당 하나의 응답(js 파일 등등)만 받아올 수 있는데 그 하나의 요청을 위한 비용은 어찌보면<br>코드 하나를 다운받는 것보다 더 비싼 비용을 지불하게 될 경우가 있다.<br>우리의 코드가 그렇다. 코드의 용량이 그렇게 크지가 않다면 차라리 하나의 요청으로 일정 크기를 한 번에 받아버리는 게 나을 수 있다.<br>그렇다, 청크의 최소 용량을 정해주는 것이다.</p><p>아래와 같이 웹팩 배포용 설정 파일일 webpack.config.js의 plugins에 아래 내용을 추가해주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.MinChunkSizePlugin(&#123;</span><br><span class="line">  minChunkSize: <span class="number">512000</span> <span class="comment">// 50kb</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/webpack2-optimize/min-chunks.png" alt="라이브러리 청크 빼고는 코드 스플리팅이 되지 않았다."><br>라우팅 된 컴포넌트의 코드 스플리팅이 안 된 것처럼 보이지만,<br>앱이 점점 커지고 컴포넌트 수가 급격히 증가하고, 코드의 용량이 증가하다보면<br>50kb짜리 코드 여러 개로 분할될 것이다.</p><h2 id="자바스크립트-코드-압축의-3단계"><a href="#자바스크립트-코드-압축의-3단계" class="headerlink" title="자바스크립트 코드 압축의 3단계"></a>자바스크립트 코드 압축의 3단계</h2><p>아래와 같은 코드를 짰다고 생각해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1 + num2); <span class="comment">// 579</span></span><br></pre></td></tr></table></figure><p>minify(압축)시키면 아래와 같이 변한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num1=<span class="number">123</span>;<span class="keyword">const</span> num2=<span class="number">456</span>;<span class="built_in">console</span>.log(num1+num2)</span><br></pre></td></tr></table></figure><p>여기서 한 단계 앞서 나가가서 보통 uglify(난독화)까지 하게 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="number">123</span>;<span class="keyword">const</span> b=<span class="number">456</span>;<span class="built_in">console</span>.log(a+b)</span><br></pre></td></tr></table></figure><p>하지만 여기서 한 단계 더 압축할 수 있다는 사실이 존재한다.<br>바로 gzip(GNU zip) 알고리즘을 써서 압축하는 것이다.<br>아래 글을 통해 주의 사항들을 확인해보자.<br><a href="https://vnthf.github.io/blog/Front-Gzip%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC/" rel="external nofollow noopener noreferrer" target="_blank">Gzip에 관하여</a><br>주로 유닉스 기반의 운영 체제인 유닉스, 리눅스, 맥 등등에서 많이 쓰인다.<br>이러한 알고리즘을 써서 js 파일을 gz 파일로 압축하고, 브라우저에서 이 gz 파일을 열게되는 것이다.<br>브라우저 지원 현황은 아래와 같은데 IE4부터 지원한다니 말 다 했다.<br><a href="http://schroepl.net/projekte/mod_gzip/browser.htm" rel="external nofollow noopener noreferrer" target="_blank">Which browsers can handle Content-Encoding: gzip ?</a><br>이를 위해선 서버가 필요한데 섭알못(서버를 알지 못함)이고 자바스크립트가 익숙하기 때문에 노드 js 기반의 서버를 기준으로 설명하겠다.  </p><p>우선 노드 js에서 gzip 파일을 불러오는 모듈과 웹팩에서 gz으로 압축해주는 플러그인을 설치하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S compression compression-webpack-plugin</span><br></pre></td></tr></table></figure><p>그리고 server.js를 아래와 같이 수정해주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =  <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> compression = <span class="built_in">require</span>(<span class="string">'compression'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> DIST = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/app/dist/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load *.gz</span></span><br><span class="line"><span class="comment">// app.use('/', express.static(DIST)); 보다 위에 존재해야함.</span></span><br><span class="line">app.use(compression());</span><br><span class="line"></span><br><span class="line"><span class="comment">// server-open</span></span><br><span class="line">app.use(<span class="string">'/'</span>, express.static(DIST));</span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Express listening on port'</span>, PORT);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// client router</span></span><br><span class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.sendFile(DIST);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그리고 웹팩 배포용 설정 파일인 webpack.config.js를 다음과 같이 수정하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// plugins에 아래 플러그인 추가</span></span><br><span class="line"><span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">  asset: <span class="string">"[path].gz[query]"</span>,</span><br><span class="line">  algorithm: <span class="string">"gzip"</span>,</span><br><span class="line">  test: <span class="regexp">/\.(js|html)$/</span>,</span><br><span class="line">  threshold: <span class="number">10240</span>, <span class="comment">// 10kb</span></span><br><span class="line">  minRatio: <span class="number">0.8</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/webpack2-optimize/gz.png" alt=""><br>그럼 위와 같이 gz으로 압축된 vendor 파일을 볼 수 있다.<br>파일 크기가 너무 작으면 압축을 해제하는데 더 큰 시간을 소모하므로 threshold를 잘 지정해주자.  </p><p><img src="/images/webpack2-optimize/check-gz.png" alt="크롬 개발자 도구 네트워크 탭에서 본 결과"><br>실제 페이지를 보면 위와 같이 vendor.js의 파일 용량(받은 용량)이 179kb가 아닌 50kb임을 알 수 있다.  </p><p>이 외에도 chunk의 최대 갯수(코드 스플리팅하는)를 제한하는 <a href="https://webpack.js.org/plugins/limit-chunk-count-plugin/" rel="external nofollow noopener noreferrer" target="_blank">LimitChunkCountPlugin</a> 등등이 있으니 궁금한 사람은 더 찾아보길 바란다.</p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://medium.com/little-big-programming/spa-%EC%B4%88%EA%B8%B0-%EB%A1%9C%EB%94%A9-%EC%86%8D%EB%8F%84-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-9db137d25566" rel="external nofollow noopener noreferrer" target="_blank">SPA 초기 로딩 속도 개선하기</a>  </li><li><a href="https://medium.com/little-big-programming/spa-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9A%A9%EB%9F%89-%EC%96%B4%EB%94%94%EA%B9%8C%EC%A7%80-%EC%A4%84%EC%9D%BC-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C-69c7e05bb3b3" rel="external nofollow noopener noreferrer" target="_blank">SPA 스크립트 용량 어디까지 줄일 수 있을까</a>  </li><li><a href="https://medium.com/@rajaraodv/two-quick-ways-to-reduce-react-apps-size-in-production-82226605771a" rel="external nofollow noopener noreferrer" target="_blank">Two Quick Ways To Reduce React App’s Size In Production</a>  </li><li><a href="http://expressjs.com/ko/advanced/best-practice-performance.html" rel="external nofollow noopener noreferrer" target="_blank">프로덕션 우수 사례: 성능 및 신뢰성</a>  </li><li><a href="https://vnthf.github.io/blog/Front-Gzip%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC/" rel="external nofollow noopener noreferrer" target="_blank">Gzip에 관하여</a>  </li><li><a href="https://webpack.js.org/plugins/" rel="external nofollow noopener noreferrer" target="_blank">Webpack 2 - Plugins</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack2 </tag>
            
            <tag> Optimize </tag>
            
            <tag> gzip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) Symbol</title>
      <link href="/2017/04/16/ES6-Symbol/"/>
      <url>/2017/04/16/ES6-Symbol/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-Symbol/thumb.png" alt="">  </p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="#들어가기에-앞서">들어가기에 앞서</a>  <ul><li><a href="#원시값-Primitive-Value">원시값(Primitive Value)</a>  </li><li><a href="#객체-Object">객체(Object)</a>  </li></ul></li><li><a href="#Symbol의-특성">Symbol의 특성</a>  </li><li><a href="#Symbol의-탄생-배경">Symbol의 탄생 배경</a>  </li><li><a href="#Symbol의-사용-사례">Symbol의 사용 사례</a>  </li><li><a href="#Symbol-파헤치기">Symbol 파헤치기</a></li><li><a href="#프로퍼티의-은닉화">프로퍼티의 은닉화?</a></li></ul><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>Symbol은 새로 생긴 7번 째 자료형이며 원시값(Primitive Value)이다.<br>Symbol에 들어가기 전에 몸풀기로 ES5의 자료형부터 알아보고 가자.<br>ES5에는 6가지 자료형이 있다.  </p><a id="more"></a><ul><li>Boolean</li><li>Number</li><li>String</li><li>Null</li><li>Undefined</li><li>Object</li></ul><h3 id="원시값-Primitive-Value"><a href="#원시값-Primitive-Value" class="headerlink" title="원시값(Primitive Value)"></a>원시값(Primitive Value)</h3><p>Object를 제외한 값들은 원시값이다.<br>값이 유한하며, 그리고 값으로서 비교한다.<br>(고 생각했지만 심볼을 보면 틀린 말 같다.<br>심볼을 생각하면 원시값은 <code>프로퍼티를 추가할 수 있느냐 없느냐</code>와 <code>불변값이냐</code>로 나뉘는 것 같다.)<br>다음 값은 모두 참이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> === <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'asdf'</span> === <span class="string">'asdf'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> === <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>하지만 다음과 같은 예외(버그)가 존재한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="number">-0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>typeof null을 제외하고 나머지 문제는 아래와 같이 해결할 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>isNaN은 NaN인지 아닌지 구하기 위한 함수이며, ES6 들어서 Number.isNaN()과 Object.is() 메소드가 생겼다.<br>isNaN과 Number.isNaN의 차이는 후자는 타입 검사(number인지 아닌지)까지 한다는 것이다.<br>아래 링크를 통해 예제로 확인해보자.<br><a href="/2016/12/24/ES6-Number-object-and-function/#Number-isNaN">Number.prototype.isNaN()</a>  </p><p>하지만 typeof null을 개선하면 레거시 코드들이 문제가 있는지 아직도 고쳐지지 않았다.<br>아래 링크를 참조해서 누가 번역을 해주면 고마울 것 같다.<br><a href="http://2ality.com/2013/10/typeof-null.html" rel="external nofollow noopener noreferrer" target="_blank">The history of “typeof null”</a></p><p>또한 원시값은 불변값(Immutable Value)이다.<br>아래의 결과가 당연하다고 생각하는 사람은 객체에서는 어떻게 결과가 나타나는지 객체 파트를 보길 바란다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'strin'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a += <span class="string">'g'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 'string'</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 'strin'</span></span><br></pre></td></tr></table></figure><h3 id="객체-Object"><a href="#객체-Object" class="headerlink" title="객체(Object)"></a>객체(Object)</h3><p>객체는 Boolean, Number, String, Null, Undefined를 제외한 자료형이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> /\d/); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span> Data()); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">// object</span></span><br><span class="line"><span class="comment">// ES6에서는 (Weak)Map/Set과 TypedArray까지 객체로 추가되었다.</span></span><br></pre></td></tr></table></figure><p>어… Function은 타입이 function인데 Array나 RegExp, Date는 왜 object인지 아는 사람이 있으면 알려주길 바란다.<br>일단 저 위에 있는 놈들은 객체이기 때문에 프로퍼티를 할당할 수 있다.<br>콘솔 창에서 각각 a란 프로퍼티가 붙었는지 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">func.a = <span class="number">1</span>;</span><br><span class="line">arr.a = <span class="number">1</span>;</span><br><span class="line">regExp.a = <span class="number">1</span>;</span><br><span class="line">date.a = <span class="number">1</span>;</span><br><span class="line">obj.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.dir(func);</span><br><span class="line"><span class="built_in">console</span>.dir(arr);</span><br><span class="line"><span class="built_in">console</span>.dir(regExp);</span><br><span class="line"><span class="built_in">console</span>.dir(date);</span><br><span class="line"><span class="built_in">console</span>.dir(obj);</span><br></pre></td></tr></table></figure><p>또한 객체는 참조 타입인 것 같다.<br>가지고 있는 값으로서 비교하는 게 아니라 저장된 메모리 주소를 참조하여 같은지 비교하는 것 같다.<br>또한 갯수도 무한하다.<br>다음은 모두 거짓을 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; === <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log([] === []);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d/</span> === <span class="regexp">/\d/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>() === <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;);</span><br></pre></td></tr></table></figure><p>또한 객체는 참조 타입이기 때문에 불변값이 아니다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr;</span><br><span class="line">arr.push(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// arr2에 넣지도 않은 1의 값이 들어가있다.  </span></span><br><span class="line"><span class="comment">// 이는 arr2가 arr의 값을 가져온 게 아니라 메모리 주소를 가져와 참조하고 있기 때문에 발생한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>이런 객체 타입을 불변값으로 만드는 예제는 아래 링크를 참조하자.<br><a href="http://cafe.naver.com/hacosa/184885" rel="external nofollow noopener noreferrer" target="_blank">직접 구현해본 JS 객체, 배열의 깊은 복사하는 방법</a>  </p><h2 id="Symbol의-특성"><a href="#Symbol의-특성" class="headerlink" title="Symbol의 특성"></a>Symbol의 특성</h2><p>여기서는 심볼에 대해 간략하게만 설명하겠다.<br>백날 이론을 봐봤자 왜 써야하며 언제 써야하는지를 모르면 무의미하다고 여기기 때문이다.<br>따라서 간단하게만 특성을 보고 탄생 배경과 사용 사례를 본 이후에 본격적인 설명을 하겠다.<br>Symbol은 새로 생긴 7번 째 자료형이며 원시값(Primitive Value)이다.<br>기존 원시값들은 위에서 보는 바와 같이 값으로서 비교를 했다.<br>하지만 심볼은 원시값임에도 불구하고 객체와 같이 참조하는 메모리의 주소를 가지고 비교하는 것 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">'a'</span>) === <span class="built_in">Symbol</span>(<span class="string">'a'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>심볼은 생성할 때마다 독자적인 메모리 공간을 가져서 고유함을 유지한다.<br>그럼에도 불구하고 원시값이란다.<br>내가 아는 원시값은 값으로서 비교하는 것 같았는데 그럼 얘는 왜 원시값이라 부르는 걸까?<br>그건 아마도 심볼이 불변값이며 프로퍼티를 추가(객체의 특성)할 수 없기 때문이 아닐까 싶다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line">a.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.dir(a); <span class="comment">// a 프로퍼티가 안 찍혀서 나온다.</span></span><br></pre></td></tr></table></figure><h2 id="Symbol의-탄생-배경"><a href="#Symbol의-탄생-배경" class="headerlink" title="Symbol의 탄생 배경"></a>Symbol의 탄생 배경</h2><p>이라고 하긴 뭐하고 어떤 문제점 때문에 심볼이란 놈이 생긴 건지 간단하게 다루어보았다.<br>아래와 같은 코드를 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5에서 Array인지 아닌지 구분하는 표준화된 방법이 없다.  </span></span><br><span class="line"><span class="comment">// typeof 연산자를 써도 object를 반환하기 때문에 구분해낼 방법이 없다.  </span></span><br><span class="line"><span class="comment">// 따라서 아래와 같이 함수화시켜서 라이브러리로 제작 후에 많은 사람에게 배포했다고 가정해보자.  </span></span><br><span class="line"><span class="comment">// 예제기 때문에 Boolean 대신에 String을 반환하게 했다는 점은 감안해주길 바란다.</span></span><br><span class="line"><span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>) ? <span class="string">'Array'</span> : <span class="string">'Not Array'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 라이브러리는 전 세계의 수백만 개발자들이 쓰게 되었고, 많은 사람들이 아래와 같이 코드를 짜기 시작했다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr) === <span class="string">'Array'</span>) <span class="built_in">console</span>.log(<span class="string">'나는 배열이당!'</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'나는 배열이 아니당!'</span>);</span><br></pre></td></tr></table></figure><p>하지만 ES6 들어서 위에 우리가 사용한 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" rel="external nofollow noopener noreferrer" target="_blank">Array.isArray</a> 메소드가 표준 메소드로 지정되었다!<br>그리고 그 메소드는 우리가 예측한 문자열들이 아닌 Boolean 값을 반환하는 메소드다!<br>따라서 우리 라이브러리를 사용해서 개발한 사용자들의 코드가 의도한 대로 작동하지 않을 가능성이 있다!<br>하지만 다행히도 위 메소드는 덮어쓰기가 가능하다.<br>그래도 우리 라이브러리를 쓰는 개발자가 ES6의 표준 메소드 작동 방식으로 Array.isArray를 썼다간 낭패를 볼 것이다.   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">Array</span>, <span class="string">'isArray'</span>).writable); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>하지만 모든 프로퍼티가 덮어쓰기가 가능한 게 아니다.<br>아래와 같이 상수(네이밍이 UPPER_SNAKE_CASE로 돼있다.) 프로퍼티도 존재하기 때문이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">Number</span>, <span class="string">'MAX_SAFE_INTEGER'</span>).writable); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Symbol의-사용-사례"><a href="#Symbol의-사용-사례" class="headerlink" title="Symbol의 사용 사례"></a>Symbol의 사용 사례</h2><ul><li>표준 객체의 프로퍼티로 사용<br>위에서 봤 듯이 표준 객체에 혹시 내가 쓴 프로퍼티가 표준 프로퍼티가 되는 불상사(?)가 생긴다면 코드가 의도치 않게 작동할 것이다.<br>물론 매우 드문 일일 것이지만, 코드를 방어적으로 쓰는 습관은 항상 들여야하는 것 같다.<br>위의 Array.isArray를 우리는 심볼을 사용해서 문제를 회피할 것이다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isArray = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="built_in">Array</span>[isArray] = <span class="function"><span class="params">arg</span> =&gt;</span> (</span><br><span class="line">  (<span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>) ? <span class="string">'Array'</span> : <span class="string">'Not Array'</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// Array.isArray를 지원하는 모던 브라우저(크롬, 파폭의 최신 버전 등등)에서 아래 코드를 확인해보자.</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>);</span><br><span class="line"><span class="comment">// 사용은 아래와 같이 하면 된다.</span></span><br><span class="line"><span class="keyword">const</span> arr = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>[isArray](arr) === <span class="string">'Array'</span>) <span class="built_in">console</span>.log(<span class="string">'나는 배열이당!'</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'나는 배열이 아니당!'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>이런 식으로 심볼을 사용하게 되면 표준 메소드 때문에 벌벌 떨며 염려할 필요가 사라진다.<br>하지만 위 사례에서도 하나 문제점이 존재한다.<br>바로 전역 공간에 심볼을 노출해야한다는 점이다.<br>우리의 라이브러리가 점점 규모가 커져서 아래와 같이 다양한 타입을 검출한다고 가정해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isArray = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="keyword">const</span> isRegExp = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="keyword">const</span> isDate = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="keyword">const</span> isObject = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="built_in">Array</span>[isArray] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">RegExp</span>[isRegExp] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Date</span>[isDate] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>[isObject] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이렇게 전역 공간에 심볼을 일일이 노출시키는 게 마음이 들지 않으므로 네임 스페이스 패턴을 사용해서 모듈을 구현할 수 있다.<br>전역에는 단 하나의 변수인 $SYMBOL만 노출되므로 좀 더 안전하게 코드를 작성할 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $SYMBOL = &#123; <span class="comment">// 전역 공간에 노출되므로 그 어떤 이름과도 충돌이 나지 않게 지어야한다.</span></span><br><span class="line">  isArray: <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>),</span><br><span class="line">  isRegExp: <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>),</span><br><span class="line">  isDate: <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>),</span><br><span class="line">  isObject: <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Array</span>[$SYMBOL.isArray] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">RegExp</span>[$SYMBOL.isRegExp] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Date</span>[$SYMBOL.isDate] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>[$SYMBOL.isObject] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>좀 더 우아하게 코드를 작성하고 싶은 사람은 ES6의 import/export(를 브라우저에서 미지원하므로 모듈 번들러인 Webpack 등등까지 사용)를 해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// symbol.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isArray = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isRegExp = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isDate = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isObject = <span class="built_in">Symbol</span>(<span class="string">'isArray'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;isArray, isRegExp, isDate, isObject&#125; <span class="keyword">from</span> <span class="string">'./symbol'</span>;</span><br><span class="line"><span class="built_in">Array</span>[isArray] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">RegExp</span>[isRegExp] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Date</span>[isDate] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>[isObject] = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>표준 심볼(Well-known Symbol)로써 사용<br>ES6가 등장하기 전에 사람들의 필요에 의해 생성하거나 개발한 함수들이 많을 것이다.<br>그 중에 공통된 함수들은 기능과 네이밍이 비슷한 경우가 많을 것이다. (내부 로직은 다를지라도)<br>이렇게 많은 사람들이 쓴 함수의 이름 등등을 표준 프로퍼티로 만들고 나면?<br>내부 로직이 다 같지는 않으므로 그 수많은 코드가 깨질 수 있다. (우리 Array.isArray와 마찬가지로 말이다.)<br>따라서 기존 개발자들이 개발한 코드들의 안전성을 보장하고자 표준 프로퍼티를 심볼로 만든 경우가 있다.<br>그 목록은 아래와 같다.  <ul><li>Symbol.iterator(추후 다룰 예정)  </li><li>Symbol.unscopables  </li><li>Symbol.match  </li><li>Symbol.species  </li><li>Symbol.toPrimitive  </li><li>등등…</li></ul></li></ul><h2 id="Symbol-파헤치기"><a href="#Symbol-파헤치기" class="headerlink" title="Symbol 파헤치기"></a>Symbol 파헤치기</h2><p>이제 왜 쓰는지를 알았으니 본격적으로 심볼에 대해 파헤쳐보자.<br>심볼은 생성할 때마다 독자적인 영역을 가지지만 공유도 가능하다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">Symbol</span>(<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">Symbol</span>.for(<span class="string">'key2'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a === <span class="built_in">Symbol</span>(<span class="string">'key'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(b === <span class="built_in">Symbol</span>.for(<span class="string">'key2'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [a]: <span class="number">1</span>,</span><br><span class="line">  [b]: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj[a]); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[b]); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>또한 심볼의 타입은 symbol이며 new 연산자를 써서 생성하면 오류가 뜬다.<br>(당연한 소리처럼 들리겠지만 ES5의 function의 경우를 생각하면 이런 오류 하나하나가 참 감사하다.)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">'a'</span>)); <span class="comment">// 'symbol'</span></span><br><span class="line"><span class="comment">// 이제 new 연산자는 클래스에서만 쓰자, 이제 자바스크립트가 꽃길만 걷길 바란다.</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">'a'</span>); <span class="comment">// Uncaught TypeError: Symbol is not a constructor</span></span><br></pre></td></tr></table></figure><p>그럼 저 <code>Symbol 안에 들어가는 문자열은 무엇에 쓰이는 물건인고?</code>하면… 디버깅 용으로 쓰인다고 한다.<br>개인적으로는 변수명만으로도 어떤 심볼인지 유추가 가능할 것 같은데 심볼의 문자열을 가지고 디버깅을 어떻게 하는지 모르겠지만…<br>심볼의 문자열을 가지고 노는 방법은 아래와 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asdf = <span class="built_in">Symbol</span>(<span class="string">'asdf'</span>);</span><br><span class="line"><span class="keyword">const</span> qwer = <span class="built_in">Symbol</span>.for(<span class="string">'qwer'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(asdf); <span class="comment">// Symbol(asdf), 문자열이 아닌 Symbol 타입이다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(asdf)); <span class="comment">// 'Symbol(asdf)'</span></span><br><span class="line"><span class="built_in">console</span>.log(asdf.toString()); <span class="comment">// 'Symbol(asdf)'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span> + asdf); <span class="comment">// Uncaught TypeError: Cannot convert a Symbol value to a string</span></span><br><span class="line"><span class="built_in">console</span>.log(asdf.toString().substr(<span class="number">7</span>).slice(<span class="number">0</span>, <span class="number">-1</span>)); <span class="comment">// 'asdf'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(qwer)); <span class="comment">// 'qwer'</span></span><br></pre></td></tr></table></figure><h2 id="프로퍼티의-은닉화"><a href="#프로퍼티의-은닉화" class="headerlink" title="프로퍼티의 은닉화?"></a>프로퍼티의 은닉화?</h2><p>심볼은 객체의 프로퍼티(메소드)에 쓸 때 우리는 그 값을 참조할 수 있을까?<br>있다! 따라서 은닉화를 위해서 Symbol을 쓰는 건 올바른 방법이 아니다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol = <span class="built_in">Symbol</span>(<span class="string">'symbol'</span>);</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="built_in">Symbol</span>(<span class="string">'symbol2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  key: <span class="number">1</span>,</span><br><span class="line">  method: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>),</span><br><span class="line">  [symbol]: <span class="number">3</span>,</span><br><span class="line">  [symbol2]: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol은 객체의 표준 메소드나 기존의 방법으로는 노출되지 않는다.  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj) <span class="built_in">console</span>.log(key); <span class="comment">// 'key' 'method'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// ['key', 'method']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj)); <span class="comment">// ['key', 'method']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 하지만 그렇다고 해서 프로퍼티가 은닉화된 것은 아니다.</span></span><br><span class="line"><span class="comment">// 아래와 같이 접근이 가능하기 때문이다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)); <span class="comment">// [Symbol(symbol), Symbol(symbol2)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로퍼티(키와 심볼)를 모두 가져오려면 Reflect 객체를 사용해야한다.</span></span><br><span class="line"><span class="comment">// 레인보우 리플렉션(무지개 반사)을 초등학교 때 많이 썼는데, Reflect는 '비추다'란 뜻이다.</span></span><br><span class="line"><span class="comment">// 즉 해당 객체를 비추어 안에 내용물을 다 본다고 생각하면 될 것 같다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj));  <span class="comment">// ['key', 'method', Symbol(symbol), Symbol(symbol2)]</span></span><br></pre></td></tr></table></figure><p>이 이상 심볼에 대해 더 딥하게 다루기에는 실용성이 떨어질 것 같고 그 때 그 때 찾아보면 될 것 같다.<br>사실 이터레이터 때문에 공부를 했지 실무에서 많이 쓸지는 잘 모르겠다.<br>이 글을 읽고 난 독자는 다음 글을 읽기 바란다.<br><a href="/2017/04/22/ES6-Iterator/">(ES6) Iterator</a></p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol" rel="external nofollow noopener noreferrer" target="_blank">Symbol - JavaScript | MDN</a>  </li><li><a href="http://hacks.mozilla.or.kr/2015/09/es6-in-depth-symbols/" rel="external nofollow noopener noreferrer" target="_blank">ES6 In Depth: 심볼 (Symbol) ★ Mozilla 웹 기술 블로그</a>  </li><li><a href="https://github.com/js-jsm/es6js/tree/master/07%20%EC%8B%AC%EB%B3%BC" rel="external nofollow noopener noreferrer" target="_blank">es6js/07 심볼 at master · js-jsm/es6js</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> Symbol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Webpack 2) 트리 쉐이킹을 똑똑하게 해보자!</title>
      <link href="/2017/04/12/webpack2-smart-tree-shaking/"/>
      <url>/2017/04/12/webpack2-smart-tree-shaking/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/webpack2-smart-tree-shaking/thumb.png" alt=""></p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>이 포스트는 <a href="/2017/03/12/webpack2-tree-shaking/">(Webpack 2) 트리 쉐이킹을 해보자!</a>의 후속작이다.<br>따라서 해당 포스트를 읽고 예제를 진행한 후에 보는 걸 추천한다.<br>또한 내가 리액트 말고 할 줄 아는 게 별로 없어서 예제를 리액트로만 진행하다보니<br>혹시 헷갈리면 다른 라이브러리로 진행해보길 바란다.  </p><a id="more"></a><h2 id="복습"><a href="#복습" class="headerlink" title="복습"></a>복습</h2><p>우리는 지난 포스트에서 리액트 라우터를 트리 쉐이킹하였다.<br>아래와 같이 기존에 쓰던 방식대로 진행하면 쓰지도 않는 모듈들이 전부 번들링되는 참사가 발생한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Router, Route, hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br></pre></td></tr></table></figure><p>티끌 모아 태산이라고 우리의 앱이 쓰지도 않는 모듈들로 눈덩이처럼 불어날지도 모른다.<br>따라서 우리는 아래와 같이 해주었다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'react-router/es/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Route <span class="keyword">from</span> <span class="string">'react-router/es/Route'</span>;</span><br><span class="line"><span class="keyword">import</span> hashHistory <span class="keyword">from</span> <span class="string">'react-router/es/hashHistory'</span>;</span><br></pre></td></tr></table></figure><p>매우 귀찮아보이지 않는가?<br>패키지가 늘어나고, 불러올 모듈들이 증가하면 한 줄 한줄 일일이 입력해줘야한다.  </p><h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><p>그럼 이제 이를 어떻게 해결할지 간단한 예제를 만들자.<br>프로젝트 폴더를 만들고 package.json 파일을 만들자.<br>그리고 다음과 같은 패키지들을 설치해준다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -S react react-dom react-router@^3.x</span><br><span class="line">npm i -D babel-core babel-preset-env babel-preset-react babel-loader babel-plugin-transform-imports</span><br></pre></td></tr></table></figure><p><code>babel-plugin-transform-imports</code> 요 녀석이 바로 핵심이다.  </p><p>프로젝트 폴더에 .babelrc(바벨 설정 파일)을 만들어주자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"browsers"</span>: [<span class="string">"last 2 versions"</span>, <span class="string">"&gt; 10%"</span>, <span class="string">"ie 9"</span>],</span><br><span class="line">        <span class="attr">"modules"</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"transform-imports"</span>, &#123;</span><br><span class="line">      <span class="attr">"react-router"</span>: &#123;</span><br><span class="line">        <span class="attr">"transform"</span>: <span class="string">"react-router/es/$&#123;member&#125;"</span>,</span><br><span class="line">        <span class="attr">"preventFullImport"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>플러그인 부분에 내용에 주목하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="comment">// 배열의 첫 번째 요소로 배열(transform-imports 플러그인 정보를 담은)이 옴.</span></span><br><span class="line">    <span class="comment">// 그 배열 안에는 transform-imports 플러그인 임을 알려주는 요소가 첫 번째로 들어와있고,</span></span><br><span class="line">    <span class="comment">// 두 번째 요소로 객체가 들어오는데 이는 react-router 모듈에 대한 객체이다.</span></span><br><span class="line">    <span class="comment">// transform 프로퍼티에서 어떤 폴더를 기점으로 모듈들을 일일이 불러올지 기술했다고 보면 될 것 같다.</span></span><br><span class="line">    <span class="comment">// preventFullImport, 쓰지도 않는 녀석은 불러오지 않는 걸(트리 쉐이킹) true로 지정했다.</span></span><br><span class="line">    [<span class="string">"transform-imports"</span>, &#123;</span><br><span class="line">      <span class="string">"react-router"</span>: &#123;</span><br><span class="line">        <span class="string">"transform"</span>: <span class="string">"react-router/es/$&#123;member&#125;"</span>,</span><br><span class="line">        <span class="string">"preventFullImport"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>webpack.config.js(웹팩 설정 파일)도 만들어주자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: <span class="string">'./'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      <span class="comment">// 사실 아래와 같이만 써도 트리 쉐이킹이 된다.</span></span><br><span class="line">      <span class="comment">// compress: true</span></span><br><span class="line">      compress: &#123;</span><br><span class="line">        <span class="comment">// warnings: false, // 콘솔 창에 출력되는 게 보기 귀찮다면 요 놈을 주석 제거를 하면 된다.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// 요 놈이 핵심</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mangle: <span class="literal">false</span>,    <span class="comment">// DEMO ONLY: Don't change variable names.(난독화)</span></span><br><span class="line">      beautify: <span class="literal">true</span>,   <span class="comment">// DEMO ONLY: Preserve whitespace (가독성 좋게 함)</span></span><br><span class="line">      output: &#123;</span><br><span class="line">        comments: <span class="literal">true</span>  <span class="comment">// DEMO ONLY: Helpful comments (주석 삭제 안 함)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 웹팩 1에서는 loaders를 썼지만 2에선 rules</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 쿼리가 필요한 로더는 loader로 써줘야함.</span></span><br><span class="line">        <span class="comment">// 쿼리가 필요 없는 로더는 use로 써도 된다.</span></span><br><span class="line">        <span class="comment">// 웹팩 2에선 babel-loader와 같이 -loader 생략이 불가능해졌다.</span></span><br><span class="line">        use: <span class="string">'babel-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56</span></span><br><span class="line"><span class="comment">// parseQuery() will be replaced with getOptions() in the next major version of loader-utils.</span></span><br><span class="line"><span class="comment">// 위와 같이 로더 개발자를 위한 로그가 뜨는데 보기 싫다면 주석을 제거하면 된다.</span></span><br><span class="line"><span class="comment">// process.noDeprecation = true;</span></span><br></pre></td></tr></table></figure><p>index.html도 만들어주자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>엔트리(index.js) 파일도 만들어주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Router, Route, hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Comp = <span class="function"><span class="params">()</span> =&gt;</span> &lt;h2&gt;하이&lt;<span class="regexp">/h2&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render(</span></span><br><span class="line"><span class="regexp">  &lt;Router history=&#123;hashHistory&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Route path="/</span><span class="string">" component=&#123;Comp&#125; /&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;,</span></span><br><span class="line"><span class="string">  document.getElementById('app')</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><p>터미널을 키고 아래와 같이 타이핑해주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/webpack/bin/webpack.js</span><br></pre></td></tr></table></figure><p>그리고나서 bundle.js 파일을 뒤져봐도 browserHistory에 대한 내용을 찾을 수 없다.<br>즉, 모듈 별로 일일이 불러오지 않고도 트리 쉐이킹을 할 수 있게 된 것이다!<br>물론 요렇게 해도 안 되는 녀석들도 있는 것 같다.<br>아마 웹팩 2가 나오기 전에 만들어진 모듈이거나<br>모듈 간에 의존성이 너무 높아서 하나만 불러와도 다른 모듈들까지 불러오지 않는 이상<br>사용이 불가능한 모듈인 경우에 그런 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack2 </tag>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) Promise에 파라미터를 넘겨서 사용해보자</title>
      <link href="/2017/04/04/js-promise-param/"/>
      <url>/2017/04/04/js-promise-param/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-promise-param/thumb.png" alt=""></p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>어제 프라미스를 쓰면서 정리 해봤는데,<br>또 파라미터를 넘겨서쓰거나 하려니 제대로 쓸 수가 없어서 정리해봤다.<br>일단 reject 되는 경우는 생각하지 않고, <code>그냥 내가 짠 비동기 함수를 동기식으로 실행시키길 원했을 뿐</code>이었다.<br>지극히 사용 방법 위주로 적었으니 아래 링크들을 참조해서 이해하자.<br>일단 구현이 먼저인 사람은 코드를 적극 참조하면 될 것 같다.  </p><a id="more"></a><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="external nofollow noopener noreferrer" target="_blank">Promise - JavaScript | MDN - Mozilla Developer Network</a>  </li><li><a href="http://programmingsummaries.tistory.com/325" rel="external nofollow noopener noreferrer" target="_blank">바보들을 위한 Promise 강의 - 도대체 Promise는 어떻게 쓰는거야? | 감성 프로그래밍</a>  </li><li><a href="http://han41858.tistory.com/11" rel="external nofollow noopener noreferrer" target="_blank">Promise 를 사용하는 두 가지 방법, new Promise, Promise.resolve()</a></li></ul><h2 id="파라미터-없는-일반-비동기-함수"><a href="#파라미터-없는-일반-비동기-함수" class="headerlink" title="파라미터 없는 일반 비동기 함수"></a>파라미터 없는 일반 비동기 함수</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 비동기 함수(setTimeout)의 콜백 함수 안에서</span></span><br><span class="line">    <span class="comment">// resolve 시켜줘야 순서를 보장할 수 있음.</span></span><br><span class="line">    <span class="comment">// 이 res 부분부터 then 안에 구문이 실행된다고 보면 된다.</span></span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f4 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f5 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f6 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f7 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f8 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"><span class="keyword">const</span> f9 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 후속 함수에게 Promise를 리턴해주므로 thenable해서 계속 체이닝이 가능.</span></span><br><span class="line">f1()       <span class="comment">// 1</span></span><br><span class="line">.then(f2)  <span class="comment">// 2</span></span><br><span class="line">.then(f3)  <span class="comment">// 3</span></span><br><span class="line">.then(f4)  <span class="comment">// 4</span></span><br><span class="line">.then(f5)  <span class="comment">// 5</span></span><br><span class="line">.then(f6)  <span class="comment">// 6</span></span><br><span class="line">.then(f7)  <span class="comment">// 7</span></span><br><span class="line">.then(f8)  <span class="comment">// 8</span></span><br><span class="line">.then(f9); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h2 id="파라미터가-있는-비동기-함수"><a href="#파라미터가-있는-비동기-함수" class="headerlink" title="파라미터가 있는 비동기 함수"></a>파라미터가 있는 비동기 함수</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">param</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="comment">// 비동기 함수(setTimeout)의 콜백 함수 안에서</span></span><br><span class="line">    <span class="comment">// resolve 시켜줘야 순서를 보장할 수 있음.</span></span><br><span class="line">    <span class="comment">// 이 res 부분부터 then 안에 구문이 실행된다고 보면 된다.</span></span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 후속 함수에게 new Promise를 리턴해주므로 thenable해서 계속 체이닝이 가능.</span></span><br><span class="line">f(<span class="number">1</span>)               <span class="comment">// 1</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">2</span>))  <span class="comment">// 2</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">3</span>))  <span class="comment">// 3</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">4</span>))  <span class="comment">// 4</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">5</span>))  <span class="comment">// 5</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">6</span>))  <span class="comment">// 6</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">7</span>))  <span class="comment">// 7</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">8</span>))  <span class="comment">// 8</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">9</span>)); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h2 id="현재-함수의-변수를-후속-함수에게-넘겨줘야하는-경우"><a href="#현재-함수의-변수를-후속-함수에게-넘겨줘야하는-경우" class="headerlink" title="현재 함수의 변수를 후속 함수에게 넘겨줘야하는 경우"></a>현재 함수의 변수를 후속 함수에게 넘겨줘야하는 경우</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">param</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="comment">// 비동기 함수(setTimeout)의 콜백 함수 안에서</span></span><br><span class="line">    <span class="comment">// resolve 시켜줘야 순서를 보장할 수 있음.</span></span><br><span class="line">    <span class="comment">// 덤으로 후속 함수에게 파라미터(++param)을 넘기고 있음.</span></span><br><span class="line">    <span class="comment">// 이 res 부분부터 then 안에 구문이 실행된다고 보면 된다.</span></span><br><span class="line">    res(++param);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function">(<span class="params">param</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> (</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    res();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 후속 함수에게 Promise를 리턴해주므로 thenable해서 계속 체이닝이 가능.</span></span><br><span class="line">f(<span class="number">1</span>)                      <span class="comment">// 1</span></span><br><span class="line">.then(<span class="function"><span class="params">param</span> =&gt;</span> f2(param)) <span class="comment">// 2</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">3</span>))         <span class="comment">// 3</span></span><br><span class="line">.then(<span class="function"><span class="params">param</span> =&gt;</span> f2(param)) <span class="comment">// 4</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">5</span>))         <span class="comment">// 5</span></span><br><span class="line">.then(<span class="function"><span class="params">param</span> =&gt;</span> f2(param)) <span class="comment">// 6</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">7</span>))         <span class="comment">// 7</span></span><br><span class="line">.then(<span class="function"><span class="params">param</span> =&gt;</span> f2(param)) <span class="comment">// 8</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> f(<span class="number">9</span>));        <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> promise </tag>
            
            <tag> callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6+) 비동기 함수를 깔끔하게 처리해보자.</title>
      <link href="/2017/04/03/js-async-function/"/>
      <url>/2017/04/03/js-async-function/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-async-function/thumb.png" alt=""></p><p>전에 AJAX를 Promise와 Async/Await로 처리하는 방법을 알아봤는데,<br>setTimeout과 같은 비동기 함수를 처리하려니 또 버퍼링이 걸려서 정리해봤다.<br>너무 사용법 위주로 공부하다보니 나중에 또 정리를 하게 될 것 같다.<br>AJAX를 비동기로 처리하고 싶은 사람은 아래 글을 참조하자.<br><a href="/2017/01/21/ES6-Promise-with-ajax/">(ES6) ajax 위주의 promise 실습</a><br><a href="/2017/01/25/ES6-ajax-with-fetch/">(ES6+) ajax를 위한 fetch와 async/await</a>  </p><a id="more"></a><h2 id="ES5-콜백-함수"><a href="#ES5-콜백-함수" class="headerlink" title="~ES5(콜백 함수)"></a>~ES5(콜백 함수)</h2><p>순서가 보장되지만 피라미드 같이 생겼다.<br>뎁스가 깊어질 수록 컨트롤하기가 어렵다.<br>혹시 cb &amp;&amp; cb()의 동작 방식과 원리가 궁금한 사람은 아래 글을 참조하자.<br><a href="/2017/02/13/es-logical-operator/#원리-파악">(ES) 똑똑한 논리 연산자</a>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// setTimeout의 콜백 함수 안에서</span></span><br><span class="line">  <span class="comment">// 콜백함수(f1 함수의 매개변수인 cb)</span></span><br><span class="line">  <span class="comment">// 를 실행해야 실행 순서가 보장됨.</span></span><br><span class="line">  <span class="comment">// 매개변수로 넘어온 콜백함수(cb)</span></span><br><span class="line">  <span class="comment">// 가 없으면 실행하지 않음.</span></span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f4 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f5 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f6 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f7 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f8 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f9 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">f1(</span><br><span class="line">  () =&gt; f2(</span><br><span class="line">    () =&gt; f3(</span><br><span class="line">      () =&gt; f4(</span><br><span class="line">        () =&gt; f5(</span><br><span class="line">          () =&gt; f6(</span><br><span class="line">            () =&gt; f7(</span><br><span class="line">              () =&gt; f8(</span><br><span class="line">                () =&gt; f9()</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="ES6-Promise"><a href="#ES6-Promise" class="headerlink" title="ES6(Promise)"></a>ES6(Promise)</h2><p><img src="/images/js-async-function/promises.png" alt="프라미스 동작 구조"><br>콜백 함수 패턴이 익숙해서 자주 쓰는데,<br>뎁스가 깊어지니 뭔가 깔끔하게 정리해보고 싶었다.<br>일단 나는 reject 되는 경우는 생각하지 않았다.<br><code>그냥 내가 짠 비동기 함수를 동기식으로 실행시키길 원했을 뿐이니까...</code><br>너무 사용 방법에만 치중하다보니 코드가 다소 복잡해보이기도 한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="function"><span class="params">cb</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 콜백 함수 안에서 resolve 함수를 실행해야 순서가 보장됨.</span></span><br><span class="line">  cb(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// setTimeout의 콜백 함수 안에서</span></span><br><span class="line">  <span class="comment">// 콜백함수(f1 함수의 매개변수인 cb)</span></span><br><span class="line">  <span class="comment">// 를 실행해야 실행 순서가 보장됨.</span></span><br><span class="line">  <span class="comment">// 매개변수로 넘어온 콜백함수(cb)</span></span><br><span class="line">  <span class="comment">// 가 없으면 실행하지 않음.</span></span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f4 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f5 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f6 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f7 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f8 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f9 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">promise(f1)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f2))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f3))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f4))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f5))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f6))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f7))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f8))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> promise(f9));</span><br></pre></td></tr></table></figure><h2 id="ES2017-Async-Await"><a href="#ES2017-Async-Await" class="headerlink" title="ES2017(Async/Await)"></a>ES2017(Async/Await)</h2><p>크롬, 파폭, 사파리, 오페라 최신 버전에서는 지원하는 것 같은데 MS 진영은(엣지 포함) 암담하다.<br><a href="http://kangax.github.io/compat-table/es2016plus/#test-async_functions" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript Next compatibility table</a></p><p>MS나 하위 브라우저를 지원해야한다면<br><a href="https://babeljs.io/docs/plugins/syntax-async-functions/" rel="external nofollow noopener noreferrer" target="_blank">Syntax async functions · Babel</a>을 참고하자.<br>Node.js LTS(v6.x)에서도 지원하지 않는 것 같으니 참고하자.<br><a href="http://node.green/#ES2017-features-async-functions" rel="external nofollow noopener noreferrer" target="_blank">Node.js ES2015/ES6, ES2016 and ES2017 support</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="function"><span class="params">cb</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 콜백 함수 안에서 resolve 함수를 실행해야 순서가 보장됨.</span></span><br><span class="line">  cb(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// setTimeout의 콜백 함수 안에서</span></span><br><span class="line">  <span class="comment">// 콜백함수(f1 함수의 매개변수인 cb)</span></span><br><span class="line">  <span class="comment">// 를 실행해야 실행 순서가 보장됨.</span></span><br><span class="line">  <span class="comment">// 매개변수로 넘어온 콜백함수(cb)</span></span><br><span class="line">  <span class="comment">// 가 없으면 실행하지 않음.</span></span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f4 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f5 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f6 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f7 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f8 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> f9 = <span class="function"><span class="params">cb</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">  cb &amp;&amp; cb();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// async 함수 안에서 비동기 코드 앞에 await를 붙여주면 된다.</span></span><br><span class="line"><span class="comment">// 안타깝게도 async '함수'라서 호출을 위해 즉시 실행함수를 사용했다.</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> promise(f1);</span><br><span class="line">  <span class="keyword">await</span> promise(f2);</span><br><span class="line">  <span class="keyword">await</span> promise(f3);</span><br><span class="line">  <span class="keyword">await</span> promise(f4);</span><br><span class="line">  <span class="keyword">await</span> promise(f5);</span><br><span class="line">  <span class="keyword">await</span> promise(f6);</span><br><span class="line">  <span class="keyword">await</span> promise(f7);</span><br><span class="line">  <span class="keyword">await</span> promise(f8);</span><br><span class="line">  <span class="keyword">await</span> promise(f9);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="external nofollow noopener noreferrer" target="_blank">Promise - JavaScript | MDN - Mozilla Developer Network</a>  </li><li><a href="http://programmingsummaries.tistory.com/325" rel="external nofollow noopener noreferrer" target="_blank">바보들을 위한 Promise 강의 - 도대체 Promise는 어떻게 쓰는거야? | 감성 프로그래밍</a>  </li><li><a href="http://han41858.tistory.com/11" rel="external nofollow noopener noreferrer" target="_blank">Promise 를 사용하는 두 가지 방법, new Promise, Promise.resolve()</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> promise </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
            <tag> ES6+ </tag>
            
            <tag> callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(React Hot Loader) v3로 마이그레이션 해보자!</title>
      <link href="/2017/03/25/react-hot-loader-3/"/>
      <url>/2017/03/25/react-hot-loader-3/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/react-hot-loader-3/thumb.png" alt="요놈도 v1이 언제 deprecated 될지 모르니 얼른 마이그레이션 해보자">  </p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>기본적으로 <a href="/2016/11/18/Module-bundling-with-Webpck/">웹팩</a>, <a href="/2016/11/11/Babel-ES6-with-IE8/">바벨</a>, 리액트 라우터 등등은 안다는 전제 하에 글을 썼다.<br>웹팩 2에 대한 모르는 부분은 아래 글을 조금씩 참조하면 도움이 될 것이다.  </p><ul><li><a href="/2017/03/12/webpack2-tree-shaking/">(Webpack 2) 트리 쉐이킹을 해보자!</a>  </li><li><a href="/2017/03/13/webpack2-code-splitting/">(Webpack 2) 코드를 분할해보자!</a>  </li></ul><p>또한 리액트 라우터 v4 예제로 진행할 것이므로 아래 포스트를 참고하고 소스 코드를 클론하자.  </p><a id="more"></a><ul><li><a href="/2017/03/25/react-router-v4/">(React Router) v4로 마이그레이션 해보자!</a>  </li><li><a href="https://github.com/perfectacle/react-router-4" rel="external nofollow noopener noreferrer" target="_blank">리액트 라우터 v4 소스 코드</a></li></ul><h2 id="리액트-핫-로더-v1"><a href="#리액트-핫-로더-v1" class="headerlink" title="리액트 핫 로더 v1"></a>리액트 핫 로더 v1</h2><p>지난 리액트 라우터 4 마이그레이션 포스트에서…  </p><ul><li>트리 쉐이킹  </li><li>코드 스플리팅  </li><li>HTML5 History API  </li></ul><p>까지 구현해보았다.<br>이제 리액트의 컴포넌트를 Hot Module로 만들어서<br>페이지 새로고침 없이도 수정 결과를 반영해주는 react-hot-loader를 사용해보자!<br><a href="https://github.com/perfectacle/react-router-4/tree/hot-1" rel="external nofollow noopener noreferrer" target="_blank">리액트 핫 로더 v1 소스 코드</a>에서 중간 중간 확인하면서 진행하도록 하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D react-hot-loader</span><br></pre></td></tr></table></figure><p>그리고 webpack.dev.config.js의 module 부분에서<br>js 파일의 로더에 react-hot-loader를 추가하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: [<span class="string">'react-hot-loader'</span>, <span class="string">'babel-loader'</span>],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 리액트 핫로더 v1은 트리 쉐이킹을 사용하면 번들링에 실패하므로<br>.babelrc에서 다음과 같이 트리쉐이킹을 꺼주자.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"browsers"</span>: [<span class="string">"last 2 versions"</span>, <span class="string">"&gt; 10%"</span>, <span class="string">"ie 9"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"syntax-dynamic-import"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 테스트를 위해 About.js를 다음과 같이 함수형 컴포넌트에서 일반 클래스 컴포넌트로 바꿔주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;About&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;&#123;this.props.children&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>npm start</code>를 쳐서 webpack-dev-server를 띄우고<br><a href="http://localhost:3001/about/name으로" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3001/about/name으로</a> 접속해보자.<br>그 다음에 About.js를 수정해보면 페이지 새로고침 없이도 수정 내역이 잘 반영된다.<br>그럼 이번에는 함수형 컴포넌트인 Name.js를 수정해보자.<br>아마도 페이지가 새로고침 되면서 수정 내역이 반영될 것이다.<br>이렇듯 리액트 라우터 4와 리액트 핫 로더 1에서는 다음과 같은 문제점이 존재한다.  </p><p>출처: <a href="https://medium.com/@apostolos/server-side-rendering-code-splitting-and-hot-reloading-with-react-router-v4-87239cfc172c#.c2cte5qa3" rel="external nofollow noopener noreferrer" target="_blank">Server-side rendering, code-splitting, and hot reloading with React Router v4</a>  </p><blockquote><ul><li>No hot reloading for functional components  </li></ul></blockquote><ul><li>Problems with high order components</li></ul><p>HOC(High Order Components)는 뭔지 잘 몰라서 테스트 해보지 못했다.  </p><h2 id="v3으로-마이그레이션-해보자"><a href="#v3으로-마이그레이션-해보자" class="headerlink" title="v3으로 마이그레이션 해보자!"></a>v3으로 마이그레이션 해보자!</h2><p>여튼 함수형 컴포넌트가 제대로 핫 로드 되지 않고, 트리 쉐이킹 문제점을<br>리액트 핫 로더 3에서는 해결했다고 하니 한번 믿고 설치해보자.<br>또한 중간 중간 <a href="https://github.com/perfectacle/react-router-4/tree/hot-3" rel="external nofollow noopener noreferrer" target="_blank">리액트 핫 로더 v3 소스 코드</a>와 비교해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un -D react-hot-loader</span><br><span class="line">npm i -D react-hot-loader@next</span><br></pre></td></tr></table></figure><p><a href="https://github.com/gaearon/react-hot-loader/tree/master/docs#migration-to-30" rel="external nofollow noopener noreferrer" target="_blank">마이그레이션 문서</a>를 보고 하나하나 따라해보자.  </p><ul><li>바벨 설정 파일(.babelrc) 수정하기  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"browsers"</span>: [<span class="string">"last 2 versions"</span>, <span class="string">"&gt; 10%"</span>, <span class="string">"ie 9"</span>],</span><br><span class="line">        // tree shaking</span><br><span class="line">        "modules": false</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  "plugins": [</span><br><span class="line">    "react-hot-loader/babel",</span><br><span class="line">    <span class="string">"syntax-dynamic-import"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>플러그인에 react-hot-loader/babel을 추가하고, 트리 쉐이킹도 켰다.<br>혹은 바벨을 사용하지 않거나 ES6 없이 바벨을 쓴다면 webpack.dev.config.js에서<br>js의 로더 부분에 react-hot-loader/webpack을 추가해야한다.<br>이번 포스트에서는 전자를 따르도록 하겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: [<span class="string">'react-hot-loader/webpack'</span>, <span class="string">'babel-loader'</span>],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>웹팩 개발용 설정 파일(webpack.dev.config.js) 엔트리 수정하기<br>react-hot-loader/patch를 엔트리 최상단에 넣어주자.<br>혹시 바벨 폴리필을 쓴다면 그 이후에 넣어주면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">    <span class="comment">// activate HMR for React</span></span><br><span class="line"></span><br><span class="line">    <span class="string">`webpack-dev-server/client?http://localhost:<span class="subst">$&#123;port.dev&#125;</span>`</span>,</span><br><span class="line">    <span class="comment">// bundle the client for webpack-dev-server</span></span><br><span class="line">    <span class="comment">// and connect to the provided endpoint</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'webpack/hot/only-dev-server'</span>,</span><br><span class="line">    <span class="comment">// bundle the client for hot reloading</span></span><br><span class="line">    <span class="comment">// only- means to only hot reload for successful updates</span></span><br><span class="line"></span><br><span class="line">    resolve(ROOT, <span class="string">'index-dev'</span>)</span><br><span class="line">    <span class="comment">// the entry point of our app</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>엔트리(index.js) 수정하기  </p></li></ul><ol><li><p>ES2015의 Native Module을 사용하지 않은 경우<br>바벨 설정 파일에서 따로 ES2015 프리셋의 modules 속성을 건드리지 않은 경우가 이에 속한다.<br>아마 바벨은 CommonJS 규격을 따라 모듈화를 진행하는 것 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="comment">// 배포할 때는 리액트 개발 도구를 죽여놔야함.</span></span><br><span class="line">  process.env.NODE_ENV === <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__ &amp;&amp;</span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers).length</span><br><span class="line">) <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('app'));</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">if (module.hot) &#123;</span></span><br><span class="line"><span class="xml">  module.hot.accept('./App', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    const NextApp = require('./App').default;</span></span><br><span class="line"><span class="xml">    render(<span class="tag">&lt;<span class="name">NextApp</span>/&gt;</span>, document.getElementById('app'));</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>ES2015의 Native Module을 사용한 경우(우리 소스 코드에 해당)<br>웹팩 2부터는 ES2015의 Native Module을 지원하기 시작하였다.<br>바벨 설정 파일에서 ES2015 프리셋의 modules 속성을 false로 준 경우가 이에 해당한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="comment">// 배포할 때는 리액트 개발 도구를 죽여놔야함.</span></span><br><span class="line">  process.env.NODE_ENV === <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__ &amp;&amp;</span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers).length</span><br><span class="line">) <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('app'));</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">if (module.hot) &#123;</span></span><br><span class="line"><span class="xml">  module.hot.accept('./App', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    render(<span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('app'));</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>AppContainer는 좀 이따 살펴보기로 하자.  </p><p>리액트 라우터 4의 치명적인 단점은 코드 스플리팅과 리액트 핫 로더를 동시에 적용할 수 없다는 점이다. </p><ul><li>정상적인 import 문으로 컴포넌트를 삽입하면 코드 스플리팅이 되지 않는다.<br>따라서 <code>const About2 = asyncComponent(() =&gt; import(&#39;./components/About&#39;).then(module =&gt; module.default));</code>와 같이 써야한다.<br>위와 같이 코드 스플리팅을 하면 왠지 모르겠으나 리액트 핫 로더가 먹히질 않는다.<br>따라서 개발용 파일에서는 코드 스플리팅을 하지 않아야 정상적으로 리액트 핫 로더가 작동한다.  </li><li>배포용 파일에서는 코드 스플리팅을 적용해 초기 로딩 시간을 단축시키고,<br>개발할 용도가 아니기 때문에 리액트 핫 로더는 작동 안 해도 되니 붙이지 않으면 된다.  </li></ul><p>app/src 폴더에 AppDev.js를 만들자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123; BrowserRouter, HashRouter, Route, Redirect, Switch &#125; from 'react-router-dom';</span></span><br><span class="line"><span class="comment">// 리액트 라우터를 코드 스플리팅 하려면 위 코드를 이렇게 하나씩 불러와야한다 귀찮 ㅠ</span></span><br><span class="line"><span class="keyword">import</span> BrowserRouter <span class="keyword">from</span> <span class="string">'react-router-dom/es/BrowserRouter'</span>;</span><br><span class="line"><span class="keyword">import</span> HashRouter <span class="keyword">from</span> <span class="string">'react-router-dom/es/HashRouter'</span>;</span><br><span class="line"><span class="keyword">import</span> Route <span class="keyword">from</span> <span class="string">'react-router-dom/es/Route'</span>;</span><br><span class="line"><span class="keyword">import</span> Redirect <span class="keyword">from</span> <span class="string">'react-router-dom/es/Redirect'</span>;</span><br><span class="line"><span class="keyword">import</span> Switch <span class="keyword">from</span> <span class="string">'react-router-dom/es/Switch'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML5 History API 지원여부 파악</span></span><br><span class="line"><span class="keyword">const</span> isBrowserHistory = history.pushState;</span><br><span class="line"><span class="keyword">const</span> Router = isBrowserHistory ? BrowserRouter : HashRouter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'./components/Menu'</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./components/About'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Name <span class="keyword">from</span> <span class="string">'./components/Name'</span>;</span><br><span class="line"><span class="keyword">import</span> Portfolio <span class="keyword">from</span> <span class="string">'./components/Portfolio'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppDev = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Menu/&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/about/name"</span> component=&#123;Name&#125; /&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Redirect to=<span class="string">"/portfolio/0"</span> <span class="keyword">from</span>=<span class="string">"/about/redirect0"</span>/&gt;</span><br><span class="line">        &lt;Redirect <span class="keyword">from</span>=<span class="string">"/about/redirect1"</span> to=<span class="string">"/portfolio/1"</span>/&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route exact path="/</span>portfolio<span class="string">" component=&#123;Portfolio&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/portfolio/:id<span class="string">" component=&#123;Portfolio&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default AppDev;</span></span><br></pre></td></tr></table></figure><p>개발용 엔트리를 app/src에 indexDev.js로 따로 파자.<br>import 문은 모듈을 정적으로만 로딩 가능해서 부득이하게 엔트리를 하나 더 만들게 됐다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="comment">// 배포할 때는 리액트 개발 도구를 죽여놔야함.</span></span><br><span class="line">  process.env.NODE_ENV === <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__ &amp;&amp;</span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers).length</span><br><span class="line">) <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> AppDev <span class="keyword">from</span> <span class="string">'./AppDev'</span>;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">AppDev</span> /&gt;</span>, document.getElementById('app'));</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">if (module.hot) &#123;</span></span><br><span class="line"><span class="xml">  module.hot.accept('./AppDev', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    render(<span class="tag">&lt;<span class="name">AppDev</span> /&gt;</span>, document.getElementById('app'));</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>배표용 엔트리(index.js)에서는 리액트 핫 로더를 떼버리자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="comment">// 배포할 때는 리액트 개발 도구를 죽여놔야함.</span></span><br><span class="line">  process.env.NODE_ENV === <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__ &amp;&amp;</span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers).length</span><br><span class="line">) <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('app'));</span></span><br></pre></td></tr></table></figure><p>웹팩 개발용 설정 파일(webpack.dev.config.js)에서 엔트리를 개발용 엔트리로 바꿔주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: [</span><br><span class="line">      <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">  </span><br><span class="line">      <span class="string">`webpack-dev-server/client?http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>,</span><br><span class="line">      <span class="comment">// bundle the client for webpack-dev-server</span></span><br><span class="line">      <span class="comment">// and connect to the provided endpoint</span></span><br><span class="line">  </span><br><span class="line">      <span class="string">'webpack/hot/only-dev-server'</span>,</span><br><span class="line">      <span class="comment">// bundle the client for hot reloading</span></span><br><span class="line">      <span class="comment">// only- means to only hot reload for successful updates</span></span><br><span class="line">  </span><br><span class="line">      resolve(ROOT, <span class="string">'indexDev'</span>)</span><br><span class="line">      <span class="comment">// the entry point of our app</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 모든 설정이 끝났다.<br><code>npm start</code>를 치면…</p><ul><li>코드 스플리팅 X - 어차피 개발용이니 초기 로딩 속도는 크게 상관을 하지 않으면 됨.  </li><li>리액트 핫 로더 O - 개발할 땐 이게 핵심이다.  </li></ul><p><code>npm build</code>를 치면…</p><ul><li>코드 스플리팅 O - 실 사용자들에게 쾌적한 로딩 속도를 보장해줘야한다.  </li><li>리액트 핫 로더 X - 배포용이기 때문에 내용을 수정하면서 확인할 일이 없다.  </li></ul><h2 id="AppConainer란"><a href="#AppConainer란" class="headerlink" title="AppConainer란?"></a>AppConainer란?</h2><p>react-hot-loader v3은 <a href="https://github.com/commissure/redbox-react" rel="external nofollow noopener noreferrer" target="_blank">redbox-react</a>를 내장하고 있다.<br><img src="/images/react-hot-loader-3/01.png" alt="내가 바로 redbox-react야!"><br>react-hot-loader v3에서 redbox-react를 사용하기 위해 AppContainer를 사용하는 것이다.<br>소스맵을 붙이려면 express 프레임워크에 webpack-dev-server를 붙여야한다.<br>안 그러면 위 스샷과 같이 소스맵이 붙질 않는다.<br>또한 트랜스파일 이후의 코드를 가지고 소스맵을 붙이기 때문에 좀 헷갈리기도 한다.<br>아직은 콘솔 창에 출력되게 끔 하는 게 더 나은 것 같지만…<br>일단은 나와있으니 한 번 써보자.<br>귀찮은 사람은 <a href="https://github.com/perfectacle/react-router-4/tree/redbox" rel="external nofollow noopener noreferrer" target="_blank">redbox-react 소스 코드</a>를 클론 받자.</p><p>indexDev.js에서 AppContainer를 갖다 붙이자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="comment">// 배포할 때는 리액트 개발 도구를 죽여놔야함.</span></span><br><span class="line">  process.env.NODE_ENV === <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__ &amp;&amp;</span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers).length</span><br><span class="line">) <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> AppContainer <span class="keyword">from</span> <span class="string">'react-hot-loader/lib/AppContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./AppDev'</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;AppContainer&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/AppContainer&gt;, document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">if (module.hot) &#123;</span></span><br><span class="line"><span class="regexp">  module.hot.accept('./</span>AppDev<span class="string">', () =&gt; &#123;</span></span><br><span class="line"><span class="string">    render(</span></span><br><span class="line"><span class="string">      &lt;AppContainer&gt;</span></span><br><span class="line"><span class="string">        &lt;App /&gt;</span></span><br><span class="line"><span class="string">      &lt;/AppContainer&gt;, document.getElementById('</span>app<span class="string">')</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>Home.js에서 일부러 오류를 내보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;h2&gt;&#123;aa()&#125;Home&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><p>webpack.dev.config에서 devtool을 <code>eval</code>로 바꿔주자.<br>다른 소스맵은 제대로 소스맵이 붙질 않는다.</p><p>server.js 파일을 수정해서 express에 webpack-dev-server를 붙여보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =  <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> DEV_PORT = <span class="number">3001</span>;</span><br><span class="line"><span class="keyword">const</span> DIST = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/app/dist/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="comment">// dev-server config</span></span><br><span class="line">  <span class="keyword">const</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">  <span class="keyword">const</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</span><br><span class="line">  <span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.config'</span>);</span><br><span class="line">  <span class="keyword">const</span> compiler = Webpack(webpackConfig);</span><br><span class="line">  <span class="keyword">const</span> devServer = <span class="keyword">new</span> WebpackDevServer(compiler, webpackConfig.devServer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dev-server open</span></span><br><span class="line">  devServer.listen(DEV_PORT, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'webpack-dev-server is listening on port'</span>, DEV_PORT);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// server-open</span></span><br><span class="line">  app.use(<span class="string">'/'</span>, express.static(DIST));</span><br><span class="line">  app.listen(PORT, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Express listening on port'</span>, PORT);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// client router</span></span><br><span class="line">  app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.sendFile(DIST);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>process.env가 뭐하는 놈인지 처음 본 사람은 아래 링크를 참조하자.<br><a href="http://inspiredjw.com/entry/Nodejs-%EC%97%90%EC%84%9C-NODEENV-%EA%B0%92%EC%9C%BC%EB%A1%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank">Node.js 에서 NODE_ENV 값으로 배포/개발 환경설정하기</a></p><p>이제 package.json의 start script 부분을 아래와 같이 수정해주자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"NODE_ENV=development node server"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"rm -rf app/dist &amp;&amp; node_modules/webpack/bin/webpack.js &amp;&amp; node server"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 다 끝났다.<br><code>npm start</code> 치고 <a href="http://localhost:3001/로" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3001/로</a> 접속하면 아래와 같은 화면이 뜰 것이다.</p><p><img src="/images/react-hot-loader-3/02.png" alt="소스 코드는 9번 라인을 넘지 않지만 트랜스파일 된 소스를 기준으로 해서 저렇게 나온다."></p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://github.com/gaearon/react-hot-loader" rel="external nofollow noopener noreferrer" target="_blank">React Hot Loader 3</a>  </li><li><a href="https://medium.com/@apostolos/server-side-rendering-code-splitting-and-hot-reloading-with-react-router-v4-87239cfc172c#.c2cte5qa3" rel="external nofollow noopener noreferrer" target="_blank">Server-side rendering, code-splitting, and hot reloading with React Router v4</a>  </li><li><a href="https://github.com/commissure/redbox-react" rel="external nofollow noopener noreferrer" target="_blank">redbox-react</a>  </li><li><a href="http://inspiredjw.com/entry/Nodejs-%EC%97%90%EC%84%9C-NODEENV-%EA%B0%92%EC%9C%BC%EB%A1%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank">Node.js 에서 NODE_ENV 값으로 배포/개발 환경설정하기</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack2 </tag>
            
            <tag> React </tag>
            
            <tag> Hot </tag>
            
            <tag> Loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(React Router) v4로 마이그레이션 해보자!</title>
      <link href="/2017/03/25/react-router-v4/"/>
      <url>/2017/03/25/react-router-v4/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/react-router-v4/thumb.png" alt="">  </p><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p><del>React Router v4가 정식으로 나와서 3은 deprecated 된 거나 마찬가지라고 본다.</del><br>현재 React Router v3은 디프리케잇 되지 않고 React Router v4와 다른 노선을 탔을 뿐, 지원은 계속 해주는 것 같다.<br>따라서 레거시 환경을 싫어하기도 해서 한 번 마이그레이션을 간단하게 해보았다.<br>기본적으로 <a href="/2016/11/18/Module-bundling-with-Webpck/">웹팩</a>, <a href="/2016/11/11/Babel-ES6-with-IE8/">바벨</a>, 리액트 라우터 등등은 안다는 전제 하에 글을 썼다.<br>웹팩 2에 대한 모르는 부분은 아래 글을 조금씩 참조하면 도움이 될 것이다.  </p><a id="more"></a><ul><li><a href="/2017/03/12/webpack2-tree-shaking/">(Webpack 2) 트리 쉐이킹을 해보자!</a>  </li><li><a href="/2017/03/13/webpack2-code-splitting/">(Webpack 2) 코드를 분할해보자!</a></li></ul><h2 id="v3으로-만들어보기"><a href="#v3으로-만들어보기" class="headerlink" title="v3으로 만들어보기"></a>v3으로 만들어보기</h2><p>소스 코드는 <a href="https://www.facebook.com/gomugomm?fref=ts" rel="external nofollow noopener noreferrer" target="_blank">정재남</a> 님께서 제공해주신 <a href="https://github.com/react-study/todo-app/tree/_lecture/05_router-test/src/routerTest" rel="external nofollow noopener noreferrer" target="_blank">소스</a>를 이용했다.<br>v3으로 만든 <a href="http://react-router-v3.surge.sh/" rel="external nofollow noopener noreferrer" target="_blank">라이브 데모</a>에서 직접 내용을 확인해보고 시작하자.<br>혹시 만들기 귀찮거나 중간중간 확인할 사람은 <a href="https://github.com/perfectacle/react-router-4/tree/master" rel="external nofollow noopener noreferrer" target="_blank">소스 코드</a>를 보도록 하자.<br>서버는 없으니 새로고침을 하면 제대로 정보를 표시 못 하지만, 우리가 실제 진행할 때는<br>Node.js의 express 프레임워크를 사용해서 새로고침을 해도 제대로 작동하게 만들 것이다.  </p><p>전체적인 프로젝트 구조는 다음과 같다.<br><img src="/images/react-router-v4/02.png" alt=""></p><p>일단 packge.json 파일을 만들고 다음 패키지들을 설치하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-core babel-loader babel-plugin-syntax-dynamic-import babel-preset-env babel-preset-react webpack-dev-server</span><br><span class="line">npm i -S express html-webpack-plugin react react-dom react-router@^3.x webpack</span><br></pre></td></tr></table></figure><p><code>babel-plugin-syntax-dynamic-import</code>는 코드 스플리팅을 위해 추가한 플러그인이다.<br>.babelrc 파일을 만들고 아래와 같이 적어주자.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"browsers"</span>: [<span class="string">"last 2 versions"</span>, <span class="string">"&gt; 10%"</span>, <span class="string">"ie 9"</span>],</span><br><span class="line">        // tree shaking</span><br><span class="line">        "modules": false</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  "plugins": [</span><br><span class="line">    <span class="string">"syntax-dynamic-import"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>presets 부분이 요상하게 적혀있는데 트리 쉐이킹을 위한 것이니 모르는 사람은<br><a href="/2017/03/12/webpack2-tree-shaking/">(Webpack 2) 트리 쉐이킹을 해보자!</a>을 참조하자.  </p><p>이제 컴포넌트들을 하나 하나 작성해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// About.js</span></span><br><span class="line"><span class="comment">// 프롭스 중에 children도 같이 렌더링한다.</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">(<span class="params">&#123;children&#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;About&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&#123;children&#125;&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default About;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Container.js</span></span><br><span class="line"><span class="comment">// 상단에 메뉴(고정)들이 존재하고, 프롭스 중에 children 내용이 변경되면서 렌더링 된다.</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'react-router/es/Link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Container = <span class="function">(<span class="params">&#123;children&#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about/name"</span>&gt;</span>About - Name<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about/redirect0"</span>&gt;</span>About - RedirectTo: Portfolio #0<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about/redirect1"</span>&gt;</span>About - RedirectTo: Portfolio #1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/portfolio"</span>&gt;</span>Portfolio - All<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/portfolio/0"</span>&gt;</span>Portfoilo - #0<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/portfolio/1"</span>&gt;</span>Portfoilo - #1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>header&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Container;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Name = <span class="function"><span class="params">()</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Name;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Portfolio.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Portfolio = <span class="function">(<span class="params">&#123;routeParams: &#123;id&#125;&#125;</span>) =&gt;</span>  &#123;</span><br><span class="line">  <span class="keyword">const</span> allList = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'portfolio #0'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'portfolio #1'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> filterList = id ? allList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.id === +id) : allList;</span><br><span class="line">  <span class="keyword">const</span> renderList = filterList.map(<span class="function"><span class="params">v</span> =&gt;</span> (</span><br><span class="line">      &lt;li key=&#123;v.id&#125;&gt;&#123;v.text&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;Portfolio&lt;/</span>h2&gt;</span><br><span class="line">      &lt;ul&gt;&#123;renderList&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Portfolio;</span><br></pre></td></tr></table></figure><p><img src="/images/react-router-v4/01.png" alt="리액트 라우터 v3의 파라미터는 요렇게 넘어온다."><br>id는 추후에 우리가 정할 파라미터이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123; Router, Route, IndexRoute, Redirect, browserHistory, hashHistory &#125; from 'react-router';</span></span><br><span class="line"><span class="comment">// 리액트 라우터를 코드 스플리팅 하려면 위 코드를 이렇게 하나씩 불러와야한다 귀찮 ㅠ</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'react-router/es/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Route <span class="keyword">from</span> <span class="string">'react-router/es/Route'</span>;</span><br><span class="line"><span class="keyword">import</span> IndexRoute <span class="keyword">from</span> <span class="string">'react-router/es/IndexRoute'</span>;</span><br><span class="line"><span class="keyword">import</span> Redirect <span class="keyword">from</span> <span class="string">'react-router/es/Redirect'</span>;</span><br><span class="line"><span class="keyword">import</span> browserHistory <span class="keyword">from</span> <span class="string">'react-router/es/browserHistory'</span>;</span><br><span class="line"><span class="keyword">import</span> hashHistory <span class="keyword">from</span> <span class="string">'react-router/es/hashHistory'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML5 History API 지원여부 파악</span></span><br><span class="line"><span class="keyword">const</span> isBrowserHistory = history.pushState;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리액트 라우터 3에서 코드 스플리팅 하기.</span></span><br><span class="line"><span class="keyword">const</span> loadRoute = <span class="function"><span class="params">callback</span> =&gt;</span> <span class="built_in">module</span> =&gt; callback(<span class="literal">null</span>, <span class="built_in">module</span>.default);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router history=&#123;isBrowserHistory ? browserHistory : hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> getComponent=&#123; <span class="comment">// component 대신에 getComponent를 써야 코드 스플리팅이 됨.</span></span><br><span class="line">      (loaction, callback) =&gt; &#123;</span><br><span class="line">        <span class="keyword">import</span>(<span class="string">'./components/Container'</span>).then(loadRoute(callback))</span><br><span class="line">      &#125;&#125;&gt;</span><br><span class="line">      &lt;IndexRoute getComponent=&#123; <span class="comment">// 요 아래 컴포넌트들은 전부 Container 라우트의 자식들이다.</span></span><br><span class="line">        (loaction, callback) =&gt; &#123;</span><br><span class="line">          <span class="keyword">import</span>(<span class="string">'./components/Home'</span>).then(loadRoute(callback))</span><br><span class="line">        &#125;&#125;/&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"about"</span> getComponent=&#123;</span><br><span class="line">        (loaction, callback) =&gt; &#123;</span><br><span class="line">          <span class="keyword">import</span>(<span class="string">'./components/About'</span>).then(loadRoute(callback))</span><br><span class="line">        &#125;&#125;&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"name"</span> getComponent=&#123;</span><br><span class="line">          (loaction, callback) =&gt; &#123;</span><br><span class="line">            <span class="keyword">import</span>(<span class="string">'./components/Name'</span>).then(loadRoute(callback))</span><br><span class="line">          &#125;&#125;/&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"redirect0"</span></span><br><span class="line">               onEnter=&#123;(nextState, replace) =&gt; replace(<span class="string">'/portfolio/0'</span>)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Redirect <span class="keyword">from</span>=<span class="string">"redirect1"</span> to=<span class="string">"/portfolio/1"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route path="portfolio(/</span>:id)<span class="string">" getComponent=&#123;</span></span><br><span class="line"><span class="string">        // 파라미터 :id 때문에 위의 사진과 같이 파라미터가 id가 된 거다.</span></span><br><span class="line"><span class="string">        // 괄호로 감쌌기 때문에 생략이 가능하다는 소리다.</span></span><br><span class="line"><span class="string">        (loaction, callback) =&gt; &#123;</span></span><br><span class="line"><span class="string">          import('./components/Portfolio').then(loadRoute(callback))</span></span><br><span class="line"><span class="string">        &#125;&#125;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><p>component 대신에 getComponent를 써서 코드 스플리팅을 하였다.<br>또한 그 안에 <code>import(component)</code>와 같은 구문 때문에<br><code>babel-plugin-syntax-dynamic-import</code>를 쓰게 된 거다.<br>혹시 코드 스플리팅에 대해 잘 모르는 사람은 <a href="/2017/03/13/webpack2-code-splitting/">(Webpack 2) 코드를 분할해보자!</a>를 봐보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">if</span>( <span class="comment">// 배포할 때는 리액트 개발 도구를 죽여놔야함.</span></span><br><span class="line">  process.env.NODE_ENV === <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__ &amp;&amp;</span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers).length</span><br><span class="line">) <span class="built_in">window</span>.__REACT_DEVTOOLS_GLOBAL_HOOK__._renderers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('app'));</span></span><br></pre></td></tr></table></figure><p>마지막으로 index.html도 만들어주자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 웹팩의 개발용 설정 파일을 작성하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3001</span>;</span><br><span class="line"><span class="keyword">const</span> ROOT = <span class="string">'./app/src'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">`webpack-dev-server/client?http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>,</span><br><span class="line">    <span class="comment">// bundle the client for webpack-dev-server</span></span><br><span class="line">    <span class="comment">// and connect to the provided endpoint</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'webpack/hot/only-dev-server'</span>,</span><br><span class="line">    <span class="comment">// bundle the client for hot reloading</span></span><br><span class="line">    <span class="comment">// only- means to only hot reload for successful updates</span></span><br><span class="line"></span><br><span class="line">    resolve(ROOT, <span class="string">'index'</span>)</span><br><span class="line">    <span class="comment">// the entry point of our app</span></span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="comment">// enable HMR globally</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="comment">// prints more readable module names in the browser console on HMR updates</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">`<span class="subst">$&#123;ROOT&#125;</span>/index.html`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: [<span class="string">'babel-loader'</span>],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    port: PORT,</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    contentBase: ROOT</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">process.noDeprecation = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>이제 배포용 웹팩 설정 파일을 작성하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ROOT = <span class="string">'./app/src'</span>;</span><br><span class="line"><span class="keyword">const</span> DIST = <span class="string">'app/dist'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: ROOT + <span class="string">'/index.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    path: resolve(__dirname, DIST),</span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>, <span class="comment">// 터미널 창에 출력되는 게 보기 귀찮아서 추가.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// tree shaking</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      <span class="comment">// 아래 부분이 핵심</span></span><br><span class="line">      minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this assumes your vendor imports exist in the node_modules directory</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.context &amp;&amp; <span class="built_in">module</span>.context.indexOf(<span class="string">'node_modules'</span>) !== <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./app/src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        conservativeCollapse: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        removeRedundantAttributes: <span class="literal">true</span>,</span><br><span class="line">        removeScriptTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: [<span class="string">'babel-loader'</span>],</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">process.noDeprecation = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>chunkhash가 뭔지 모르는 사람도 역시 <a href="/2017/03/13/webpack2-code-splitting/#hash-vs-chunkhash">(Webpack 2) 코드를 분할해보자!</a>를 봐보자.</p><p>이제 배포용 파일을 테스트 하기 위해 express 프레임워크를 써서 서버 설정 파일을 작성하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> express =  <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> DIST = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/app/dist/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server-open</span></span><br><span class="line">app.use(<span class="string">'/'</span>, express.static(DIST));</span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Express listening on port'</span>, PORT);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// client router</span></span><br><span class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.sendFile(DIST);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>작업을 편안하게 하기 위해 packge.json의 npm script를 수정해보자.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"./node_modules/webpack-dev-server/bin/webpack-dev-server.js -d --config webpack.dev.config.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"rm -rf app/dist &amp;&amp; node_modules/webpack/bin/webpack.js &amp;&amp; node server"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>npm start라고 치고 <a href="http://localhost:3001/에" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3001/에</a> 접속하면 개발용 버전으로 볼 수 있고(소스맵, 리액트 개발 도구)  </li><li>npm build라고 치고 <a href="http://localhost:3000/에" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/에</a> 접속하면 배포용으로 볼 수 있다. (소스맵 X, 리액트 개발 도구 X)  </li></ol><p>윈도우 유저는 <code>rm -rf</code>에 해당하는 다른 명령어로 build 스크립트를 수정해야할 것이다.  </p><h2 id="리액트-라우터-v4로-마이그레이션-하기"><a href="#리액트-라우터-v4로-마이그레이션-하기" class="headerlink" title="리액트 라우터 v4로 마이그레이션 하기"></a>리액트 라우터 v4로 마이그레이션 하기</h2><p>리액트 라우터 v3로 만드는 것도 좀 귀찮았는데 아직 마이그레이션은 시작도 하지 않았다.<br>리액트 라우터 v4에서는 바뀐 게 참 많아서… 수정해야할 부분이 참 많다.<br>혹시 따라하기 귀찮거나 중간 중간 확인하고 싶은 사람은 <a href="https://github.com/perfectacle/react-router-4/tree/v4" rel="external nofollow noopener noreferrer" target="_blank">소스 코드</a>를 확인하자.</p><p><img src="/images/react-router-v4/04.png" alt="뭐가 이렇게 많아?"><br>v3 때는 react-router 하나 밖에 못 봤던 것 같은데… 5개나 됐다.<br>대표적으로 react-router, react-router-dom, react-router-native만 알아봤다.  </p><ul><li>react-router = react-router-dom + react-router-native  </li><li>react-router-dom = Web 용 react-router  </li><li>react-router-native = App 용 react-router</li></ul><p>나는 웹을 주로 사용하니 react-router-dom v4로 설치하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un -S react-router</span><br><span class="line">npm i -S react-router-dom</span><br></pre></td></tr></table></figure><p>Container.js를 Menu.js로 이름을 바꾼 후 다음과 같이 수정하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4로 오면서 컨테이너로써의 기능을 상실하게 된다.</span></span><br><span class="line"><span class="comment">// 즉 Route 컴포넌트는 자식을 가질 수 없게 됐다.</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'react-router-dom/es/Link'</span>;</span><br><span class="line"><span class="keyword">const</span> Menu = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about/name"</span>&gt;</span>About - Name<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about/redirect0"</span>&gt;</span>About - RedirectTo: Portfolio #0<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about/redirect1"</span>&gt;</span>About - RedirectTo: Portfolio #1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/portfolio"</span>&gt;</span>Portfolio - All<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/portfolio/0"</span>&gt;</span>Portfoilo - #0<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/portfolio/1"</span>&gt;</span>Portfoilo - #1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>header&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Menu;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Portfolio.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Portfolio = <span class="function">(<span class="params">&#123; match: &#123;params: &#123;id&#125;&#125; &#125;</span>) =&gt;</span>  &#123;</span><br><span class="line">  <span class="keyword">const</span> allList = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'portfolio #0'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'portfolio #1'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> filterList = id ? allList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.id === +id) : allList;</span><br><span class="line">  <span class="keyword">const</span> renderList = filterList.map(<span class="function"><span class="params">v</span> =&gt;</span></span><br><span class="line">    &lt;li key=&#123;v.id&#125;&gt;&#123;v.text&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;Portfolio&lt;/</span>h2&gt;</span><br><span class="line">      &lt;ul&gt;&#123;renderList&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Portfolio;</span><br></pre></td></tr></table></figure><p><img src="/images/react-router-v4/03.png" alt="v4에서는 파라미터가 이런 식으로 넘어온다."></p><p>App.js가 가장 수정 사항이 많다…<br>나도 원리 보다는 사용방법 위주로 익혔으니 자세한 내용은 <a href="https://reacttraining.com/react-router/" rel="external nofollow noopener noreferrer" target="_blank">공식 사이트</a>를 참조하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123; BrowserRouter, HashRouter, Route, Redirect, Switch &#125; from 'react-router-dom';</span></span><br><span class="line"><span class="comment">// 리액트 라우터를 코드 스플리팅 하려면 위 코드를 이렇게 하나씩 불러와야한다 귀찮 ㅠ</span></span><br><span class="line"><span class="keyword">import</span> BrowserRouter <span class="keyword">from</span> <span class="string">'react-router-dom/es/BrowserRouter'</span>;</span><br><span class="line"><span class="keyword">import</span> HashRouter <span class="keyword">from</span> <span class="string">'react-router-dom/es/HashRouter'</span>;</span><br><span class="line"><span class="keyword">import</span> Route <span class="keyword">from</span> <span class="string">'react-router-dom/es/Route'</span>;</span><br><span class="line"><span class="keyword">import</span> Redirect <span class="keyword">from</span> <span class="string">'react-router-dom/es/Redirect'</span>;</span><br><span class="line"><span class="keyword">import</span> Switch <span class="keyword">from</span> <span class="string">'react-router-dom/es/Switch'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'./components/Menu'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML5 History API 지원여부 파악</span></span><br><span class="line"><span class="keyword">const</span> isBrowserHistory = history.pushState;</span><br><span class="line"><span class="keyword">const</span> Router = isBrowserHistory ? BrowserRouter : HashRouter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리액트 라우터 4에서 코드 스플리팅 하기.</span></span><br><span class="line"><span class="comment">// getComponent is a function that returns a promise for a component</span></span><br><span class="line"><span class="comment">// It will not be called until the first mount</span></span><br><span class="line"><span class="keyword">const</span> asyncComponent = <span class="function"><span class="params">getComponent</span> =&gt;</span> (</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;<span class="attr">Component</span>: AsyncComponent.Component&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.state.Component) &#123;</span><br><span class="line">        getComponent().then(<span class="function"><span class="params">Component</span> =&gt;</span> &#123;</span><br><span class="line">          AsyncComponent.Component = Component;</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;Component&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;Component&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">      <span class="keyword">if</span>(Component) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      return null;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const About = asyncComponent(() =&gt; import('./components/About').then(module =&gt; module.default));</span></span><br><span class="line"><span class="xml">const Home = asyncComponent(() =&gt; import('./components/Home').then(module =&gt; module.default));</span></span><br><span class="line"><span class="xml">const Name = asyncComponent(() =&gt; import('./components/Name').then(module =&gt; module.default));</span></span><br><span class="line"><span class="xml">const Portfolio = asyncComponent(() =&gt; import('./components/Portfolio').then(module =&gt; module.default));</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const App = () =&gt; (</span></span><br><span class="line"><span class="xml">  // v3에는 Router 속성에 browserRouter or hashRouter가 들어갔는데,</span></span><br><span class="line"><span class="xml">  // v4에는 BrowserRouter or HashRouter가 Router까지 포함한다.</span></span><br><span class="line"><span class="xml">  // 또한 Router 안에는 하나의 컴포넌트만 들어가야한다.</span></span><br><span class="line"><span class="xml">  // 따라서 div 같은 컴포넌트로 그 안을 한 번 감싸줘야한다.</span></span><br><span class="line"><span class="xml">  // 또한 IndexRoute는 Route 컴포넌트의 exact라는 속성으로 대체되었다.</span></span><br><span class="line"><span class="xml">  // Redirect 컴포넌트는 Switch 컴포넌트로 감싸줘야 정상 작동한다.</span></span><br><span class="line"><span class="xml">  // 또한 파라미터는 괄호를 써서 생략 가능하던 것이 불가능해졌다.</span></span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Menu/&gt;</span><br><span class="line">      &lt;Route exact path="/" component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path="/about" component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path="/about/name" component=&#123;Name&#125; /&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Redirect to="/portfolio/0" from="/about/redirect0"/&gt;</span><br><span class="line">        &lt;Redirect from="/about/redirect1" to="/portfolio/1"/&gt;</span><br><span class="line">      &lt;/Switch&gt;</span><br><span class="line">      &lt;Route exact path="/portfolio" component=&#123;Portfolio&#125; /&gt;</span><br><span class="line">      &lt;Route path="/portfolio/:id" component=&#123;Portfolio&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/Router&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>이렇게 하면 일단 내가 먼저 react-router v3으로 작성했던 내용들은 마이그레이션 됐다.<br><code>npm start</code>와 <code>npm build</code>를 통해 확인해보자.<br>더 자세한 사용 방법들은 무조건 <a href="https://reacttraining.com/react-router/" rel="external nofollow noopener noreferrer" target="_blank">공식 사이트</a>를 참조하자.  </p><p>그리고 여기서 끝난 게 아니다.<br>리액트 라우터 4는 리액트 핫 로더와도 문제가 있어서 리액트 핫 로더 3에서 해결했다고는 하지만…<br>이 또한 어느 정도 문제가 존재해 추후에 해당 내용을 다뤄봐야겠다.  </p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://reacttraining.com/react-router/" rel="external nofollow noopener noreferrer" target="_blank">React Router: Declarative Routing for React.js</a>  </li><li><a href="https://medium.com/@apostolos/server-side-rendering-code-splitting-and-hot-reloading-with-react-router-v4-87239cfc172c#.c2cte5qa3" rel="external nofollow noopener noreferrer" target="_blank">Server-side rendering, code-splitting, and hot reloading with React Router v4</a>  </li><li><a href="https://gist.github.com/acdlite/a68433004f9d6b4cbc83b5cc3990c194" rel="external nofollow noopener noreferrer" target="_blank">Quick and dirty code splitting with React Router v4</a>  </li><li><a href="https://velopert.com/2261" rel="external nofollow noopener noreferrer" target="_blank">React-Router v4 Pre-Release 사용해보기</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack2 </tag>
            
            <tag> React </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Webpack 2) 코드를 분할해보자!</title>
      <link href="/2017/03/13/webpack2-code-splitting/"/>
      <url>/2017/03/13/webpack2-code-splitting/</url>
      
        <content type="html"><![CDATA[<h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>웹팩 2, 웹팩 1, 바벨, 리액트 등등에 대해서 기본적인 부분은 설명하지 않는다.<br>또한 <a href="/2017/03/12/webpack2-tree-shaking/">(Webpack 2) 트리 쉐이킹을 해보자!</a>를 보고 나서 이 포스팅을 읽는 걸 추천한다.</p><h2 id="코드를-왜-분할하지"><a href="#코드를-왜-분할하지" class="headerlink" title="코드를 왜 분할하지?"></a>코드를 왜 분할하지?</h2><p><img src="/images/webpack2-code-splitting/thumb.png" alt=""><br>SPA(Single Page Application)은 한 번에 모든 리소스를 로딩해서<br>초기 로딩 이후에 페이지 이동이 매우 빠르다는 장점을 가지고 있다.<br>하지만 앱의 규모가 커지면 모든 리소스를 한 번에 로딩하므로<br><code>초기 로딩</code>이 느려져 사용자 이탈을 유발하는 양날의 검을 가지고 있다.  </p><a id="more"></a><h2 id="1단계-내-코드와-서드-파티-라이브러리-프레임워크-코드를-분리해보자"><a href="#1단계-내-코드와-서드-파티-라이브러리-프레임워크-코드를-분리해보자" class="headerlink" title="1단계: 내 코드와 서드 파티(라이브러리/프레임워크) 코드를 분리해보자."></a>1단계: 내 코드와 서드 파티(라이브러리/프레임워크) 코드를 분리해보자.</h2><p>HTTP 1.1 프로토콜은 2개의 http 요청을 병렬로 수행하게 돼있지만,<br>모던 브라우저는 4개의 http 요청을 병렬로 수행한다.<br>아래 링크를 참조하자.<br><a href="http://programmingsummaries.tistory.com/285" rel="external nofollow noopener noreferrer" target="_blank">브라우저의 리소스 병렬 다운로드를 가로막는 자바스크립트 | 감성 프로그래밍</a><br>따라서 내 코드와 서드 파티 코드를 동시에 다운로드 받으면 더 빠른 로딩이 가능하다.<br>따라서 내 코드(app)와 서드 파티 코드(vendor)를 하나의 bundle.js에서 분리시키는 단계가 필요하다.<br>리액트 대신에 다른 서드 파티로 진행해도 무방하다.</p><p>일단 프로젝트를 생성하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init --y</span><br><span class="line">npm i -S react react-dom</span><br><span class="line">npm i -D babel-core babel-preset-env babel-preset-react babel-loader webapck</span><br></pre></td></tr></table></figure><p><code>소스 코드는 src 폴더를 만들어 그 안에서 관리하도록 하겠다.</code><br>엔트리의 진입점인 main.js를 만들자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;h2&gt;히히헤헤&lt;<span class="regexp">/h2&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>webpack.config.js를 만들자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    <span class="comment">// 아래와 같이 수동적으로 서드 파티들을 다 추가해줘야한다.</span></span><br><span class="line">    <span class="comment">// 장점으로는 자기가 빼고 싶은 서드 파티만 지정할 수 있다는 점이다.</span></span><br><span class="line">    <span class="comment">// 자신의 앱과 벤더의 크기를 균형있게 맞출 수가 있다.</span></span><br><span class="line">    vendor: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// entry에 존재하는 app.js, vendor.js로 뽑혀 나온다.</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: <span class="string">'./dist/'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>, <span class="comment">// 터미널 창에 출력되는 게 보기 귀찮아서 추가.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// tree shaking</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 로더들에게 옵션을 넣어주는 플러그인이다.</span></span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// app.js에 들어갈만한 내용을 vendor로 빼주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      <span class="comment">// 위에 vendor와 통일시켜줘야한다.</span></span><br><span class="line">      name: <span class="string">'vendor'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 브라우저의 콘솔 창에 리액트를 프로덕션 모드로 빌드하라는 오류가 뜨는데 그걸 없애주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"env"</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>],</span><br><span class="line">                  <span class="comment">// tree shaking</span></span><br><span class="line">                  <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"react"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로더 개발자를 위한 로그 제거</span></span><br><span class="line">process.noDeprecation = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>위와 같이 해줘도 되는데 일일이 서드 파티를 적기 귀찮은 사람은 아래와 같이 하면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// entry에 존재하는 app.js,</span></span><br><span class="line">    <span class="comment">// new webpack.optimize.CommonsChunkPlugin의 name 값인 vendor.js로 뽑혀 나온다.</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: <span class="string">'./dist/'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>, <span class="comment">// 터미널 창에 출력되는 게 보기 귀찮아서 추가.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// tree shaking</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 로더들에게 옵션을 넣어주는 플러그인이다.</span></span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// app.js에 들어갈만한 내용을 vendor로 빼주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      <span class="comment">// 아래 부분이 핵심</span></span><br><span class="line">      minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this assumes your vendor imports exist in the node_modules directory</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.context &amp;&amp; <span class="built_in">module</span>.context.indexOf(<span class="string">'node_modules'</span>) !== <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 브라우저의 콘솔 창에 프로덕션 모드로 빌드하라는 오류가 뜨는데 그걸 없애주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"env"</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>],</span><br><span class="line">                  <span class="comment">// tree shaking</span></span><br><span class="line">                  <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"react"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로더 개발자를 위한 로그 제거</span></span><br><span class="line">process.noDeprecation = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>빌드를 할 때 마다 dist 폴더를 제거해야하므로 npm 스크립트를 이용하자.<br>packge.json의 scripts 부분을 다음과 같이 수정하자.  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">  "build": "rm -rf dist &amp;&amp; ./node_modules/webpack/bin/webpack.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rm -rf는 유닉스 기반 명령어이기 때문에 Mac OS, Linux, Unix 등등에서만 쓸 수 있다.<br>윈도우에서는 아마 아래와 같이 하면 될 거다. (될런지는 모르겠다.)  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">  "build": "rmdir dist /s &amp;&amp; ./node_modules/webpack/bin/webpack.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 터미널에 아래와 같이 치면 npm script를 쓸 수 있다.<br>test, build, start만 아래와 같이 칠 수 있고 나머지는<br>npm run scriptName과 같이 입력해야한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack2-code-splitting/01.png" alt=""><br>결과를 보면 벤더로 서드파티가 다 빠져서 파일 크기가 더 큰 걸 볼 수 있다.<br>아마 우리가 작성한 앱은 아직 규모가 작기 때문일 것이다.</p><p>그리고 index.html을 만들어 테스트 해보자.<br>vendor 보다 app이 더 먼저 삽입되면 오류가 난다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vendor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="라우터의-코드를-분할해보자"><a href="#라우터의-코드를-분할해보자" class="headerlink" title="라우터의 코드를 분할해보자!"></a>라우터의 코드를 분할해보자!</h2><p>모든 사용자가 우리 앱의 모든 페이지를 돌아다니지 않는다.<br>하지만 app.js에는 우리 앱의 모든 페이지 코드가 담겨있다.<br>라우터를 통해 구분했던 페이지대로 코드를 분할시켜보자!  </p><h3 id="hash-vs-chunkhash"><a href="#hash-vs-chunkhash" class="headerlink" title="hash vs chunkhash"></a>hash vs chunkhash</h3><ul><li>hash가 뭐지??<br>기본적으로 브라우저에는 임시 파일, 캐시 데이터라고 불리는 임시 저장공간이 존재한다.<br>이 임시 저장공간은 자신의 하드 공간의 일부에 해당한다.<br>브라우저 속성에서 찾아보면 나올 것이다.<br>만약 파일에 대한 요청이 있으면 처음에는 웹서버에서 다운 받고 임시 저장공간에 저장한다.<br>하지만 동일한 요청이 또 오면 웹서버를 거치지 않고 하드에 있는 임시 저장공간에서 뒤져서<br>해당 파일을 응답해줘서 더 빠른 응답을 하기 위한 기법이다.<br>하지만 파일의 내용이 바뀌었는데도 임시 저장 공간에 있는 내용을 내려줘서<br>변경된 파일이 보이지 않아 당황한 적이 많을 것이다.<br>이렇게 파일이 변경 됐음에도 반영되지 않는 걸 방지하고자<br>파일 이름에 hash라는 걸 붙이는 방법이다.<br>hash는 복잡한데 그냥 <code>암호화된 문자</code>라고 대충 생각하면 될 것 같다.<br>하지만 파일이 변경되지 않았을 때도 계속해서 다른 해쉬를 생성해서<br>캐시 데이터의 장점을 전혀 이용할 수가 없다.<br>이래서 나온 게 chunkhash다.  </li><li>chunkhash 짱짱맨!<br>chunkhash는 해당 파일이 변경 됐을 때만 파일에 hash를 바꿔서 저장하는 것이다.<br>즉 파일이 바뀌지 않았으면 똑같은 파일 이름에 대한 요청이므로 캐시 데이터를 쓰고,<br>파일이 바뀌었으면 다른 해쉬가 파일 이름에 들어가 웹서버에 새로 요청해서<br>수정된 내용을 즉각적으로 볼 수 있는 것이다.<br>그렇담 chunk는??<br>나도 잘 모르는데 그냥 페이지 별로 소스를 나눈 게 청크인 것으로 안다.  </li></ul><p>hash의 사용법은 어렵지 않으므로 chunkhash만 설명하겠다.<br>일단 chunkhash를 테스트하기 위해 리액트 라우터를 설치하자.<br>또한 HTML5의 History API(리액트 라우터의 browserHistory)를 사용하기 위해<br>node.js의 http 모듈을 사용해서 서버를 띄워보자.<br>쌩으로 코딩하면 번거로우니까 express 모듈을 사용하도록 하자.<br>react-router v4는 너무 변경사항이 많아서 일단은 3 버전을 토대로 설명한다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -S react-router@^3.x</span><br><span class="line">npm i -D express</span><br></pre></td></tr></table></figure><p>라우터를 테스트 하기 위해 두 개의 컴포넌트를 만들자.<br>일단은 Comp.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'react-router/es/Link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Comp = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"aa/bb/cc"</span>&gt;</span>하이<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>Comp2.js도 만들자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'react-router/es/Link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Comp2 = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>바이<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Comp2;</span></span><br></pre></td></tr></table></figure><p>엔트리의 진입점인 main.js도 수정하자.<br>청크의 코드를 분할하는 방법에는 세 가지가 있다.  </p><ol><li>System.import<br><a href="https://webpack.js.org/guides/code-splitting-import/#system-import-is-deprecated" rel="external nofollow noopener noreferrer" target="_blank">System.import is deprecated</a><br>deprecated 되었다. 쓰지 말자.  </li><li>import(module)<br><a href="https://webpack.js.org/guides/code-splitting-import/" rel="external nofollow noopener noreferrer" target="_blank">Dynamic import</a><br>귀찮다.<br>바벨 플러그인(babel-plugin-syntax-dynamic-import)을 설치하고 설정해줘야 한다.<br>청크의 이름을 지정할 수 없다.<br>하지만 오류가 났을 때 catch()를 써서 처리 할 수 있다는데,<br>뭐 그렇게 처리할만한 상황이 얼마나 있을까 싶다.  </li><li>require.ensure<br>다른 거 설치 안 해도 되고, 청크의 이름을 지정할 수 있다.<br>이 포스팅에서는 3번을 통해 청크 스플리팅을 해보겠다.  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span>  Router  <span class="keyword">from</span> <span class="string">'react-router/es/Router'</span>;</span><br><span class="line"><span class="keyword">import</span>  Route  <span class="keyword">from</span> <span class="string">'react-router/es/Route'</span>;</span><br><span class="line"><span class="keyword">import</span>  browserHistory  <span class="keyword">from</span> <span class="string">'react-router/es/browserHistory'</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  <span class="comment">// HTML5의 History API를 쓰기 위해 hashHistory 대신에 browserHistory를 사용하였다.</span></span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125;&gt;</span><br><span class="line">    <span class="comment">// component 대신에 getComponent를 사용하는 점을 주목하자.</span></span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 아래 코드 부분이 핵심이다.</span></span><br><span class="line">      <span class="comment">// [] 부분 안에 디펜던시가 들어간다는데 언제 쓰게 되는지는 잘 모르겠다.</span></span><br><span class="line">      <span class="built_in">require</span>.ensure([], (<span class="built_in">require</span>) =&gt; &#123;</span><br><span class="line">        callback(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./Comp'</span>).default);</span><br><span class="line">        <span class="comment">// 두 번째 인자로 청크의 이름이 들어간다.</span></span><br><span class="line">      &#125;, <span class="string">'Comp'</span>);</span><br><span class="line">    &#125;&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/aa/bb/cc"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class="line">      <span class="built_in">require</span>.ensure([], (<span class="built_in">require</span>) =&gt; &#123;</span><br><span class="line">        callback(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./Comp2'</span>).default);</span><br><span class="line">      &#125;, <span class="string">'Comp2'</span>);</span><br><span class="line">    &#125;&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></li></ol><p>이번엔 index.html를 수정하자.<br>어떤 청크해쉬가 들어갈지 모르므로 script 태그를 빼버렸다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 webpack.config.js를 수정해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 요 놈은 저 위에 엔트리의 app에 대한 내용</span></span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    <span class="comment">// 요 놈은 페이지 별 청크에 대한 내용</span></span><br><span class="line">    chunkFilename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    path: <span class="string">`./dist`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>, <span class="comment">// 콘솔 창에 출력되는 게 보기 귀찮아서 추가.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// tree shaking</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 로더들에게 옵션을 넣어주는 플러그인이다.</span></span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// app.js에 들어갈만한 내용을 vendor로 빼주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this assumes your vendor imports exist in the node_modules directory</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.context &amp;&amp; <span class="built_in">module</span>.context.indexOf(<span class="string">'node_modules'</span>) !== <span class="number">-1</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 요 놈은 vendor에 대한 내용</span></span><br><span class="line">      fileName: <span class="string">'[name].[chunkhash]'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 브라우저의 콘솔 창에 프로덕션 모드로 빌드하라는 오류가 뜨는데 그걸 없애주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"env"</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>],</span><br><span class="line">                <span class="comment">// tree shaking</span></span><br><span class="line">                <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"react"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로더 개발자를 위한 로그 제거</span></span><br><span class="line">process.noDeprecation = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>이제 빌드를 해보자</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack2-code-splitting/02.png" alt=""><br>빌드된 파일을 보면 두 가지 문제점이 존재한다.  </p><ol><li>뒤에 해쉬 값을 예측할 수가 없다.  </li><li>html 파일이 dist에 복사되지 않는다.  </li></ol><p>이럴 때 필요한 것은 html-webpack-plugin!<br>설치하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure><p>webpack.config.js를 수정하자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 요 놈은 저 위에 엔트리의 app에 대한 내용</span></span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    <span class="comment">// 요 놈은 페이지 별 청크에 대한 내용</span></span><br><span class="line">    chunkFilename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    <span class="comment">// HTML5의 History API를 쓰다보면 라우터가</span></span><br><span class="line">    <span class="comment">// http://localhost/aa/bb/cc 와 같이 뎁스가 깊어지는데</span></span><br><span class="line">    <span class="comment">// 그럴 때 js 파일은 localhost를 기준으로 잡아야하므로</span></span><br><span class="line">    <span class="comment">// 루트를 기준으로 잡아준 것이다.</span></span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>, <span class="comment">// 콘솔 창에 출력되는 게 보기 귀찮아서 추가.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// tree shaking</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 로더들에게 옵션을 넣어주는 플러그인이다.</span></span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// app.js에 들어갈만한 내용을 vendor로 빼주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this assumes your vendor imports exist in the node_modules directory</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.context &amp;&amp; <span class="built_in">module</span>.context.indexOf(<span class="string">'node_modules'</span>) !== <span class="number">-1</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 요 놈은 vendor에 대한 내용</span></span><br><span class="line">      fileName: <span class="string">'[name].[chunkhash]'</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 브라우저의 콘솔 창에 프로덕션 모드로 빌드하라는 오류가 뜨는데 그걸 없애주는 플러그인</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// htmlWebpackPlugin을 쓰면 html 파일 복사 및 js, css inject를 할 수 있다.</span></span><br><span class="line">    <span class="comment">// 물론 minify도 가능하다.</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"env"</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>],</span><br><span class="line">                <span class="comment">// tree shaking</span></span><br><span class="line">                <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"react"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 로더 개발자를 위한 로그 제거</span></span><br><span class="line">process.noDeprecation = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>이제 빌드를 해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm build</span><br></pre></td></tr></table></figure><p>dist 디렉토리를 보면 index.html이 생성되있고, 소스 코드를 봐보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/vendor.916f26b9c3a11d8f3204.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/app.f11205f23697a92f4153.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>해쉬가 정상적으로 붙어서 들어갔고, vendor가 먼저 들어갔고, 다른 페이지 청크는 들어가지 않았다.<br>또한 루트 디렉토리를 뜻하는 /도 정상적으로 들어가있다.<br>HTML5의 History API를 확인해보려면 실제 서버를 띄워야하므로 서버 코드를 작성해보자.<br>server.js를 프로젝트의 최상위 디렉토리에 만들자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 루트 디렉토리(/)로 오면 dist 디렉토리에 있는 index.html을 불러옴.</span></span><br><span class="line"><span class="comment">// 서버 라우터일 거다. 아마도...</span></span><br><span class="line">app.use(<span class="string">'/'</span>, express.static(__dirname + <span class="string">`/dist`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8080 포트로 서버 오픈</span></span><br><span class="line">app.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Express listening on port'</span>, <span class="number">8080</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클라이언트 라우터(일거다... 아마도...)인 react-router의 HTML5 History API를 사용하기 위함.</span></span><br><span class="line"><span class="comment">// http 메소드 중에 get을 사용해서 모든 라우터(*)로 접근할 경우에(요청할 경우에)</span></span><br><span class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 요청(request)에 대한 응답(response)으로 dist 디렉토리의 index.html을 돌려준다.  </span></span><br><span class="line">  <span class="comment">// __dirname은 노드 js의 전역 변수인데 현재 디렉토리(풀 디렉토리, 절대 경로)를 반환하는 변수이다.</span></span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/dist/index.html'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>터미널에서 이제 노드 서버를 켜보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server</span><br></pre></td></tr></table></figure><p>브라우저에서 실제로 테스트 해보자.<br><a href="http://localhost:8080으로" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080으로</a> 접속한 결과다.<br><img src="/images/webpack2-code-splitting/03.png" alt="Comp 컴포넌트"><br>크롬 개발자 도구의 네트워크 탭을 보면 Comp.[chunkhash]만 있고 Comp2는 로드하지 않았다.<br>하이 라는 링크를 클릭하면 <a href="http://localhost:8080/aa/bb/cc로" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/aa/bb/cc로</a> 이동한다.<br>여기서 다시 네트워크 탭을 봐보자.<br><img src="/images/webpack2-code-splitting/04.png" alt="Comp2 컴포넌트"><br>페이지를 처음부터 로딩하는 게 아니라 새로운 부분인<br>Comp2.[chunkhash] 부분만 로딩한 것을 볼 수 있다.<br>여기서 새로고침을 해보자.<br><img src="/images/webpack2-code-splitting/05.png" alt="Comp2 컴포넌트"><br>역시 Comp2.[chunkhash]만 로드하고 Comp는 로드하지 않았다.<br>바이 라는 링크를 클릭하면 <a href="http://localhost:8080/으로" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/으로</a> 이동한다.<br><img src="/images/webpack2-code-splitting/06.png" alt="Comp 컴포넌트"><br>역시 페이지를 처음부터 로딩하는 게 아니라 새로운 부분인<br>Comp.[chunkhash] 부분만 로딩한 것을 볼 수 있다.  </p><p>조금이나마 최적화에 한 단계 다가간 것 같아 뿌듯하다.<br>끝 !!</p><h2 id="참조링크"><a href="#참조링크" class="headerlink" title="참조링크"></a>참조링크</h2><ul><li><a href="https://www.zerocho.com/category/Javascript/post/58ad4c9d1136440018ba44e7" rel="external nofollow noopener noreferrer" target="_blank">웹팩2로 청크 관리 및 코드 스플리팅 하기</a>  </li><li><a href="http://programmingsummaries.tistory.com/285" rel="external nofollow noopener noreferrer" target="_blank">브라우저의 리소스 병렬 다운로드를 가로막는 자바스크립트 | 감성 프로그래밍</a>  </li><li><a href="https://webpack.js.org/guides/code-splitting-libraries/" rel="external nofollow noopener noreferrer" target="_blank">Code Splitting - Libraries</a>  </li><li><a href="https://brotzky.co/blog/code-splitting-react-router-webpack-2/" rel="external nofollow noopener noreferrer" target="_blank">A beginner’s step-by-step guide to Code Splitting with Webpack 2 and React Router</a><br>등등…</li></ul>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack2 </tag>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Webpack 2) 트리 쉐이킹을 해보자!</title>
      <link href="/2017/03/12/webpack2-tree-shaking/"/>
      <url>/2017/03/12/webpack2-tree-shaking/</url>
      
        <content type="html"><![CDATA[<h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>여기선 기본적으로 웹팩 1, 바벨, ES2015(ES6)을 알고 있다는 전제로 진행한다.<br>리액트 대신에 다른 서드 파티(라이브러리/프레임워크) 가지고 테스트하면서 이 글을 봐도 된다.<br>또한 이 글을 보고 나서 <a href="/2017/03/13/webpack2-code-splitting/">(Webpack 2) 코드를 분할해보자!</a>도 보는 걸 추천한다.</p><a id="more"></a><h2 id="트리-쉐이킹-Tree-Shaking"><a href="#트리-쉐이킹-Tree-Shaking" class="headerlink" title="트리 쉐이킹(Tree Shaking)??"></a>트리 쉐이킹(Tree Shaking)??</h2><p><img src="/images/webpack2-tree-shaking/thumb.png" alt="나무를 흔들어 썩은 과일(필요없는 놈)을 떨어트리자!"><br>트리 쉐이킹이란 나무를 흔들어서 필요없는 걸 떨어트리는 행위를 말한다.<br>여기서 우리에게 필요없는 것이란 쓰지 않는 코드를 뜻한다.  </p><h2 id="우리의-코드를-트리-쉐이킹-해보자"><a href="#우리의-코드를-트리-쉐이킹-해보자" class="headerlink" title="우리의 코드를 트리 쉐이킹 해보자"></a>우리의 코드를 트리 쉐이킹 해보자</h2><p>기존 웹팩 1에서 번들링이 어떻게 이루어졌는지 보자.  </p><p>우선 모듈을 하나 만들어보자. (module.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">123123123123</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">45645646456</span>;</span><br></pre></td></tr></table></figure><p>그리고 이 모듈을 불러다 쓰는 우리의 앱을 만들자. (app.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>하지만 번들링을 해보면 아래와 같이 쓰지도 않은 b가 들어가있는 반쪽짜리 모듈화가 된 셈이다.<br>아마 이게 ES2015의 Native Import가 아닌 CommonJS 스타일?인 것으로 알고 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _moduleA = __webpack_require__(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_moduleA.a);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;,</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">  value: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> a = exports.a = <span class="number">123123123123</span>;</span><br><span class="line"><span class="keyword">var</span> b = exports.b = <span class="number">45645646456</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><p>하지만 웹팩 2에서는 이런 ES2015 Native Import를 지원함으로써<br>쓸 데 없는 녀석(const b)을 나무에서 떨어트리는 트리 쉐이킹이 가능해진 것이다.<br>바로 알아보자!  </p><p>일단 프로젝트를 하나 만들고 웹팩을 설치해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init --y</span><br><span class="line">npm i -D webpack</span><br></pre></td></tr></table></figure><p>위에 적어놓은 app.js와 module.js를 똑같이 만들자.<br>그리고 webpack.config.js를 만들어서 아래와 같이 만들어주자.<br>바벨 없이 import/export를 쓸 수 있는 건 혁명이다!!  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: <span class="string">`./`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그리고 터미널에서 아래와 같이 번들링을 해보자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/webpack/bin/webpack.js</span><br></pre></td></tr></table></figure><p>하지만 번들링된 녀석을 보면 여전히 b가 남아있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">123123123123</span>;</span><br><span class="line"><span class="comment">/* harmony export (immutable) */</span> __webpack_exports__[<span class="string">"a"</span>] = a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">45645646456</span>;</span><br><span class="line"><span class="comment">/* unused harmony export b */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(__webpack_exports__, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> __WEBPACK_IMPORTED_MODULE_0__module__ = __webpack_require__(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(__WEBPACK_IMPORTED_MODULE_0__module__[<span class="string">"a"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><p>트리 쉐이킹을 위해선 웹팩 2의 플러그인인 <a href="https://github.com/mishoo/UglifyJS2" rel="external nofollow noopener noreferrer" target="_blank">UglifyJS2</a>를 이용하면 된다.<br>이제 webpack.config.js를 수정해주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: <span class="string">`./`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 여기부터 추가된 내용</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      <span class="comment">// 사실 아래와 같이만 써도 트리 쉐이킹이 된다.</span></span><br><span class="line">      <span class="comment">// compress: true</span></span><br><span class="line">      </span><br><span class="line">      compress: &#123;</span><br><span class="line">        <span class="comment">// warnings: false, // 콘솔 창에 출력되는 게 보기 귀찮다면 요 놈을 주석 제거하면 된다.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// 요 놈이 핵심</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mangle: <span class="literal">false</span>,    <span class="comment">// DEMO ONLY: Don't change variable names.(난독화)</span></span><br><span class="line">      beautify: <span class="literal">true</span>,   <span class="comment">// DEMO ONLY: Preserve whitespace (가독성 좋게 함)</span></span><br><span class="line">      output: &#123;</span><br><span class="line">        comments: <span class="literal">true</span>  <span class="comment">// DEMO ONLY: Helpful comments (주석 삭제 안 함)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그리고 다시 아래와 같이 터미널에서 번들링을 해주자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/webpack/bin/webpack.js</span><br></pre></td></tr></table></figure><p>그럼 아래와 같은 로그가 터미널에 뜬다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING <span class="keyword">in</span> bundle.js from UglifyJs</span><br><span class="line">Collapsing constant a [bundle.js:75,60]</span><br><span class="line">Dropping unused variable b [bundle.js:77,6]</span><br></pre></td></tr></table></figure><p><code>Dropping unused variable b [bundle.js:77,6]</code><br>위 부분이 핵심이다.<br>다시 번들링 된 코드를 보면 깔끔하게 b가 제거된 것을 볼 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="comment">/* harmony export (immutable) */</span></span><br><span class="line">    __webpack_exports__.a = <span class="number">123123123123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="서드파티-라이브러리-프레임워크-를-트리-쉐이킹-해보자"><a href="#서드파티-라이브러리-프레임워크-를-트리-쉐이킹-해보자" class="headerlink" title="서드파티(라이브러리/프레임워크)를 트리 쉐이킹 해보자"></a>서드파티(라이브러리/프레임워크)를 트리 쉐이킹 해보자</h2><p><code>이 챕터는 다소 문제가 많다.</code><br>서드파티마다 모듈화 한 방식이 제각각이라 트리 쉐이킹 하는 방법이 다양하고,<br>나도 처음 접하다 보니 모든 서드 파티를 테스트 할 수가 없어서 대표적으로<br>react-router(4는 너무 변경 사항이 많아서 3) 요 놈만 건드려보았다.  </p><p>react-router를 사용하기 위해 react를 설치해야 하고,<br>react를 사용하려면 react-dom도 설치해야하고,<br>또한 react를 쓰기 위해선 babel-preset-react를 설치해야하는데,<br>babel-preset-react를 쓰기 위해선 babel-core도 설치해야하고,<br>webpack에서 bable을 사용하기 위해선 bable-loader도 설치해야 하고,<br>uglifyJS2가 ES2015를 완벽하게 지원하지 않아서<br>babel-preset-2015(여기선 babel-preset-env)를 설치해야한다.<br>위에 절차가 복잡하므로 이해하지 말고 그냥 설치해버리자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -S react react-dom react-router@^3.x</span><br><span class="line">npm i -D babel-core babel-preset-env babel-preset-react babel-loader</span><br></pre></td></tr></table></figure><p>index.html 파일을 만들자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>라우팅 할 컴포넌트 Comp.js를 하나 만들자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Comp = <span class="function"><span class="params">()</span> =&gt;</span> &lt;h2&gt;하이&lt;<span class="regexp">/h2&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Comp;</span></span><br></pre></td></tr></table></figure><p>그리고 app.js를 다음과 같이 수정해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom/lib/ReactDOM'</span>; </span><br><span class="line"><span class="keyword">import</span> &#123;Router, Route, hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Comp <span class="keyword">from</span> <span class="string">'./Comp'</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;Comp&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>webpack.config.json에 바벨 로더를 붙이자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: <span class="string">`./`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      <span class="comment">// 사실 아래와 같이만 써도 트리 쉐이킹이 된다.</span></span><br><span class="line">      <span class="comment">// compress: true</span></span><br><span class="line"></span><br><span class="line">      compress: &#123;</span><br><span class="line">        <span class="comment">// warnings: false, // 콘솔 창에 출력되는 게 보기 귀찮다면 요 놈을 주석 제거를 하면 된다.</span></span><br><span class="line">        unused: <span class="literal">true</span> <span class="comment">// 요 놈이 핵심</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mangle: <span class="literal">false</span>,    <span class="comment">// DEMO ONLY: Don't change variable names.(난독화)</span></span><br><span class="line">      beautify: <span class="literal">true</span>,   <span class="comment">// DEMO ONLY: Preserve whitespace (가독성 좋게 함)</span></span><br><span class="line">      output: &#123;</span><br><span class="line">        comments: <span class="literal">true</span>  <span class="comment">// DEMO ONLY: Helpful comments (주석 삭제 안 함)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 여기서부터 추가된 내용.</span></span><br><span class="line">    <span class="comment">// 로더들에게 옵션을 넣어주는 플러그인이다.</span></span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">      minimize: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 웹팩 1에서는 loaders를 썼지만 2에선 rules</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 쿼리가 필요한 로더는 loader로 써줘야함.</span></span><br><span class="line">        <span class="comment">// 쿼리가 필요 없는 로더는 use로 써도 된다.</span></span><br><span class="line">        <span class="comment">// 웹팩 2에선 babel-loader와 같이 -loader 생략이 불가능해졌다.</span></span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        <span class="comment">// babel-loader?머시기와 같은 쿼리나 query: 옵션 대신에</span></span><br><span class="line">        <span class="comment">// 웹팩 2에선 options: 로 바뀜.</span></span><br><span class="line">        <span class="comment">// .babelrc로 따로 빼줘도 상관 없다.</span></span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"env"</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>],</span><br><span class="line">                <span class="comment">// babel-preset-2015에서는 Native Module을 쓰지 않는 것인지</span></span><br><span class="line">                <span class="comment">// 아래 옵션을 주지 않으면 우리가 만든 코드(ES2015의 import/export Syntax)가</span></span><br><span class="line">                <span class="comment">// 트리 쉐이킹 되질 않는다.</span></span><br><span class="line">                <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"react"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56</span></span><br><span class="line"><span class="comment">// parseQuery() will be replaced with getOptions() in the next major version of loader-utils.</span></span><br><span class="line"><span class="comment">// 위와 같이 로더 개발자를 위한 로그가 뜨는데 보기 싫다면 주석을 제거하면 된다.</span></span><br><span class="line"><span class="comment">// process.noDeprecation = true;</span></span><br></pre></td></tr></table></figure><p>이제 번들링 된 파일을 보면 우리가 import 시키지도 않은 browserHistory가 들어있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 211 */</span></span><br><span class="line"><span class="comment">/***/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="comment">/* harmony import */</span></span><br><span class="line">    <span class="keyword">var</span> __WEBPACK_IMPORTED_MODULE_0_history_lib_createBrowserHistory__ = __webpack_require__(<span class="number">129</span>), __WEBPACK_IMPORTED_MODULE_0_history_lib_createBrowserHistory___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_history_lib_createBrowserHistory__), __WEBPACK_IMPORTED_MODULE_1__createRouterHistory__ = __webpack_require__(<span class="number">103</span>);</span><br><span class="line">    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__createRouterHistory__.a)(__WEBPACK_IMPORTED_MODULE_0_history_lib_createBrowserHistory___default.a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇듯 서드 파티들은 트리 쉐이킹이 제대로 되지 않는다.<br>아마 서드파티 제작자들도 우리가 쓴 ES2015의 import/export 문법을 썼지만 배포할 때는<br>babel-preset-2015의 Native가 아닌 모듈로 트랜스파일 된 놈이 배포되기 때문에 그런 게 아닐까 싶다.<br>따라서 아래와 같이 별개의 모듈일 일일이 불러오는 번거로운 작업을 해줘야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/lib/React'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom/lib/ReactDOM'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'react-router/es/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Route <span class="keyword">from</span> <span class="string">'react-router/es/Route'</span>;</span><br><span class="line"><span class="keyword">import</span> hashHistory <span class="keyword">from</span> <span class="string">'react-router/es/hashHistory'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Comp <span class="keyword">from</span> <span class="string">'./Comp'</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;Comp&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>다른 서드 파티들은 바로 import 시켜도 트리 쉐이킹 되는 애들도 있을 것이지만,<br>대부분의 서드 파티가 업데이트 되기 전까지는 저렇게 일일이 import 시켜줘야하는 번거로움이 있다.  </p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://www.zerocho.com/category/Javascript/post/58aa916d745ca90018e5301d" rel="external nofollow noopener noreferrer" target="_blank">웹팩2(Webpack) 설정하기</a>  </li><li><a href="http://moduscreate.com/webpack-2-tree-shaking-configuration/" rel="external nofollow noopener noreferrer" target="_blank">Webpack 2 Tree Shaking Configuration</a>  </li><li><a href="https://webpack.js.org/guides/" rel="external nofollow noopener noreferrer" target="_blank">Webpack2 Guides</a>  </li><li><a href="https://github.com/mishoo/UglifyJS2" rel="external nofollow noopener noreferrer" target="_blank">UglifyJS2</a><br>등등 너무 많아서 증발함…</li></ul><p><code>혹시 틀린 내용이 있다면 무한 태클 환영입니다 ~</code></p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack2 </tag>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자작) perf-chk (Node.js 애플리케이션)</title>
      <link href="/2017/03/01/perf-chk/"/>
      <url>/2017/03/01/perf-chk/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/perf-chk/thumb.png" alt="">  </p><h1 id="perf-chk-Performance-Check"><a href="#perf-chk-Performance-Check" class="headerlink" title="perf-chk (Performance Check)"></a>perf-chk (Performance Check)</h1><h2 id="왜-perf-chk를-만들었나"><a href="#왜-perf-chk를-만들었나" class="headerlink" title="왜 perf-chk를 만들었나?"></a>왜 perf-chk를 만들었나?</h2><p>나는 코드 실행 시간에 굉장히 관심이 많다.<br>따라서 코드 실행 시간 측정을 위해 테스트를 종종 해보곤 한다.<br>그럴 때 아래와 같은 코드를 사용하였다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterations = <span class="number">10000000</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"function A"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">  <span class="comment">// some code1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"function A"</span>); <span class="comment">// 'Function A: xxx.xxx ms'</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"function B"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">  <span class="comment">// some code2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"function B"</span>); <span class="comment">// 'Function B: xxx.xxx ms'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>하지만 위 코드를 엄청 자주 쓰지 않다보니 암기가 되질 않았다.<br>따라서 매일 어디선가 복사 붙여넣기 해서 썼다.<br>또한 함수명, 코드, 반복 횟수를 일일이 바꿔가는 것도 귀찮았다.<br>이러한 귀찮음을 조금이라도 줄여보고자 perf-chk를 만들게 되었다.</p><h2 id="perf-chk는-무엇인가"><a href="#perf-chk는-무엇인가" class="headerlink" title="perf-chk는 무엇인가?"></a>perf-chk는 무엇인가?</h2><p>Node.js에서 코드의 실행 시간을 측정해주는 CLI 도구이다.<br>Node.js 어플리케이션이라고 하는 게 맞을라나…?<br>여튼 내가 짠 코드 중에 어떤 코드가 더 빠른지 알아보고자 할 때 쓰면 된다.  </p><h2 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h2><p>perf-chk는 몇몇 ES6 문법들을 사용한다. (const, arrow function)<br>따라서 Node.js v6.4.0 이상이 설치돼있어야만 한다.</p><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><ul><li><p>global로 설치하기 (권장)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g perf-chk</span><br></pre></td></tr></table></figure></li><li><p>local로 설치하기  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D perf-chk</span><br></pre></td></tr></table></figure></li></ul><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h3><h4 id="1-테스트-할-코드를-생성하자-모듈"><a href="#1-테스트-할-코드를-생성하자-모듈" class="headerlink" title="1. 테스트 할 코드를 생성하자. (모듈)"></a>1. 테스트 할 코드를 생성하자. (모듈)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// some code</span></span><br><span class="line"><span class="comment">// blahblah</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  methodA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// ES5 function 문법</span></span><br><span class="line">    <span class="comment">// blahblah</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methodB() &#123; <span class="comment">// ES6 Method 문법</span></span><br><span class="line">    <span class="comment">// blahblah</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methodC: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// ES6 Arrow Function 문법</span></span><br><span class="line">    <span class="comment">// blahblah</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h5><ul><li>module.exports = {} 는 node.js의 모듈 추출 문법이다.<br>perf-chk는 node.js 어플리케이션이므로 이 문법을 준수해야만 정상 작동된다.  </li><li>함수 문법은 입맛에 맞게 골라쓰면 된다.  </li></ul><h4 id="2-실행-시간을-체크하자"><a href="#2-실행-시간을-체크하자" class="headerlink" title="2. 실행 시간을 체크하자."></a>2. 실행 시간을 체크하자.</h4><ol><li>CLI 도구이므로 터미널을 열자. (윈도우에서는 cmd)</li><li>명령어를 아래와 같이 치자.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perf-chk &#123;모듈_이름&#125; [반복_횟수]</span><br></pre></td></tr></table></figure></li></ol><p>만약 local로 설치했다면 아래와 같이 입력하자.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/perf-chk &#123;모듈_이름&#125; [반복_횟수]</span><br></pre></td></tr></table></figure><h5 id="note"><a href="#note" class="headerlink" title="note"></a>note</h5><p>모듈_이름은 필수적이고, &lt;파일이름&gt;.js나 &lt;파일이름&gt;과 같이 치면 된다.<br>반복_횟수는 선택사항이며 기본 값은 100,000,000이다.<br>반복_횟수는 신뢰할 수 있는 정수(자연수)여야만 하며,<br>범위는 1 ~ 9,007,199,254,740,991까지다.<br>만약 코드들의 실행 시간이 모두 비슷하다면 큰 차이가 없는 것이다.<br>그럼에도 불구하고 코드들 사이의 실행 시간 차이를 알아보고 싶다면<br>반복 횟수를 늘려가며 실험해보면 된다.</p><h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><ul><li>실행 시간은 매번 동일하지 않다.<br>이는 컴퓨터 사양에 따라 결과가 달라진다. (CPU, RAM 등등)<br>또한 동일한 컴퓨터 사양이라고 해서 결과가 모두 같은 건 아니다.<br>왜냐하면 CPU 사용량과 RAM 사용량이 항상 같은 것은 아니기 때문이다.<br>따라서 실행 시간은 단순 참고용 정도로만 사용하자.  </li><li>perf-chk는 Node.js 위에서 돌아간다.<br>따라서 브라우저 내장 객체인 DOM(Document Object Model, 예를 들면 document.getElementById),<br>BOM(Browser Object Model, 예를 들면 window.alert)와 같은 걸 지원하지 않는다.<br>오직 ECMAScript만 테스트 할 수 있다.<br>Node.js 버전에 따라 ECMAScript 지원율도 다르다.<br>궁금한 사람은 아래 링크를 참조하자.<br><a href="http://node.green/" rel="external nofollow noopener noreferrer" target="_blank">Node.js ECMAScript compatibility tables</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 자작 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Performance </tag>
            
            <tag> CLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES) this</title>
      <link href="/2017/02/15/es-this/"/>
      <url>/2017/02/15/es-this/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/es-this/thumb.png" alt=""><br>자바스크립트에서 this는 상황에 따라 다른 값을 반환해서 아주 짜증나기 마련이다.<br>이와 관련해서 하나하나 낱낱이 테스트해보자.</p><h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><h3 id="함수로서-호출할-때"><a href="#함수로서-호출할-때" class="headerlink" title="함수로서 호출할 때"></a>함수로서 호출할 때</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 함수로서 호출할 때</span></span><br><span class="line">  <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">  <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="생성자-함수로서-호출할-때"><a href="#생성자-함수로서-호출할-때" class="headerlink" title="생성자 함수로서 호출할 때"></a>생성자 함수로서 호출할 때</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 생성자로서 호출할 때</span></span><br><span class="line">  <span class="keyword">this</span>.a = <span class="string">'1'</span>;</span><br><span class="line">  <span class="keyword">this</span>.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="comment">// this === &#123;a: 1, b: function() &#123;&#125;&#125;</span></span><br><span class="line">  <span class="comment">// 인스턴스 멤버(변수, 메소드)를 포함하고 있는 객체</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> b();</span><br></pre></td></tr></table></figure><h3 id="객체의-메소드로서-호출할-때"><a href="#객체의-메소드로서-호출할-때" class="headerlink" title="객체의 메소드로서 호출할 때"></a>객체의 메소드로서 호출할 때</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> C = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 메소드로서 호출할 때</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// C</span></span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 메소드로서 호출할 때</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 함수로서 호출해버리면 this를 재바인딩함.</span></span><br><span class="line">      <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">      <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    a();</span><br><span class="line">  &#125;,</span><br><span class="line">  c: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 메소드로서 호출할 때</span></span><br><span class="line">    <span class="comment">// 메소드를 호출</span></span><br><span class="line">    <span class="keyword">this</span>.a(); <span class="comment">// C</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">C.a();</span><br><span class="line">C.b();</span><br><span class="line">C.c();</span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>새로 나온 애로우 펑션은 this를 바인딩하지 않는다.<br>call, apply, bind 메소드로도 강제 바인딩이 이루어지지 않는다.<br>상위 스코프로부터 상속 받을 뿐이다.  </p><h3 id="일반-함수로서-호출할-때"><a href="#일반-함수로서-호출할-때" class="headerlink" title="일반 함수로서 호출할 때"></a>일반 함수로서 호출할 때</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 함수로서 호출할 때</span></span><br><span class="line">  <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">  <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h3 id="애로우-펑션으로서-호출할-때"><a href="#애로우-펑션으로서-호출할-때" class="headerlink" title="애로우 펑션으로서 호출할 때"></a>애로우 펑션으로서 호출할 때</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 애로우 펑션은 strict mode 여부에 상관없이 Window</span></span><br><span class="line">  <span class="comment">// 전역에서 this가 Window이기 때문에 상속받는 것임.</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window</span></span><br><span class="line">&#125;;</span><br><span class="line">b();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 전부 다 Window가 출력됨</span></span><br><span class="line">_b.call(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line">_b.apply(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line">_b.bind(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)();</span><br></pre></td></tr></table></figure><h3 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h3><p>ES6 들어서 생성자 함수를 대체할 녀석으로 클래스가 등장하였다.<br>이 클래스에서도 this를 낯낯이 파헤쳐보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수를 통해 객체의 인스턴스를 생성하던 것 대신에 클래스가 등장함.</span></span><br><span class="line"><span class="comment">// 멤버: 변수와 메소드</span></span><br><span class="line"><span class="comment">// 클래스 멤버: new 생성자 함수를 통해 생성된 인스턴스마다 동일한 값을 가짐.(공유함)</span></span><br><span class="line"><span class="comment">//           클래스의 인스턴스가 생기기 전에도 클래스이름.멤버로 사용 가능.</span></span><br><span class="line"><span class="comment">//           static으로 생성된 메소드 및 prototype이 이에 해당.</span></span><br><span class="line"><span class="comment">// 인스턴스 멤버: new 생성자 함수를 통해 생성된 인스턴스마다 다른 값을 가짐.(공유하지 않음)</span></span><br><span class="line"><span class="comment">//            클래스의 인스턴스가 생기기 전에는 사용 불가능, 인스턴스이름.멤버로 사용 가능</span></span><br><span class="line"><span class="comment">//            생성자 함수 내부에 작성된 애들이나 static 키워드를 쓰지 않고 생성한 메소드들이 해당됨.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 생성자 함수 외부에서 인스턴스 변수를 선언하지 못한다.</span></span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 인스턴스 멤버(변수, 메소드)를 포함하고 있는 객체</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   a: 1,</span></span><br><span class="line">    <span class="comment">//   b: () =&gt; &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//   __proto__: &#123; // 상속받는 놈이기 때문에 바로 this.d()와 같이 사용 가능.</span></span><br><span class="line">    <span class="comment">//                   위에 있는 놈들과 이름이 같다면 위에 있는 놈들이 우선 순위를 가짐.</span></span><br><span class="line">    <span class="comment">//     d: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     e: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     f: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     g: function() &#123;&#125;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 클래스 메소드의 this는</span></span><br><span class="line">  <span class="comment">// 클래스 멤버(변수, 메소드) 등등을 담고있는 생성자 함수이다.</span></span><br><span class="line">  <span class="comment">// 클래스 변수는 클래스 내에서 선언하지 못하고,</span></span><br><span class="line">  <span class="comment">// className.prototype.variable = value 와 같이 선언한다.</span></span><br><span class="line">  <span class="keyword">static</span> a() &#123;</span><br><span class="line">    <span class="comment">// function, 함수 또한 객체기 때문에 프로퍼티로 접근이 가능하다.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// new this(); 이렇게 생성자를 호출할 수도 있다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// __proto__는 상속받는 놈들이기 때문에 바로 this.머시기로 사용할 수 있었으나</span></span><br><span class="line">    <span class="comment">// prototype은 상속해주는 놈들이기 때문에 this.prototype.머시기로 사용해야한다.</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   a: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//   b: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//   c: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//   prototype: &#123;</span></span><br><span class="line">    <span class="comment">//     a: 1</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.dir(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> b() &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 함수로서 호출하면 this를 재바인딩</span></span><br><span class="line">      <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">      <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    a();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> c() &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 애로우 펑션은 this를 상속받음.</span></span><br><span class="line">      <span class="comment">// function, 함수 또한 객체기 때문에 프로퍼티로 접근이 가능하다.</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">this</span>);</span><br><span class="line">      <span class="comment">// new this(); 이렇게 생성자를 호출할 수도 있다.</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// __proto__는 상속받는 놈들이기 때문에 바로 this.머시기로 사용할 수 있었으나</span></span><br><span class="line">      <span class="comment">// prototype은 상속해주는 놈들이기 때문에 this.prototype.머시기로 사용해야한다.</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   a: function() &#123;&#125;,</span></span><br><span class="line">      <span class="comment">//   b: function() &#123;&#125;,</span></span><br><span class="line">      <span class="comment">//   c: function() &#123;&#125;,</span></span><br><span class="line">      <span class="comment">//   prototype: &#123;</span></span><br><span class="line">      <span class="comment">//     a: 1</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="built_in">console</span>.dir(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    a();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 인스턴스 메소드의 this는 생성자 내의 this와 일치한다.</span></span><br><span class="line">  d() &#123;</span><br><span class="line">    <span class="comment">// 인스턴스 멤버(변수, 메소드)를 포함하고 있는 객체</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   a: 1,</span></span><br><span class="line">    <span class="comment">//   b: () =&gt; &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//   __proto__: &#123; // 상속받는 놈이기 때문에 바로 this.d()와 같이 사용 가능.</span></span><br><span class="line">    <span class="comment">//                   위에 있는 놈들과 이름이 같다면 위에 있는 놈들이 우선 순위를 가짐.</span></span><br><span class="line">    <span class="comment">//     d: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     e: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     f: function() &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//     g: function() &#123;&#125;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.dir(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  e() &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 역시 ES5식 함수는 this를 덮어버린다.</span></span><br><span class="line">      <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">      <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    a();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f() &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 역시 애로우 펑션은 this를 상속 받음.</span></span><br><span class="line">      <span class="comment">// 인스턴스 멤버(변수, 메소드)를 포함하고 있는 객체</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   a: 1,</span></span><br><span class="line">      <span class="comment">//   b: () =&gt; &#123;&#125;,</span></span><br><span class="line">      <span class="comment">//   __proto__: &#123; // 상속받는 놈이기 때문에 바로 this.d()와 같이 사용 가능.</span></span><br><span class="line">      <span class="comment">//                   위에 있는 놈들과 이름이 같다면 위에 있는 놈들이 우선 순위를 가짐.</span></span><br><span class="line">      <span class="comment">//     d: function() &#123;&#125;,</span></span><br><span class="line">      <span class="comment">//     e: function() &#123;&#125;,</span></span><br><span class="line">      <span class="comment">//     f: function() &#123;&#125;,</span></span><br><span class="line">      <span class="comment">//     g: function() &#123;&#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    a();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  g() &#123;</span><br><span class="line">    <span class="comment">// 인스턴스의 this에 클래스 멤버는 없다.</span></span><br><span class="line">    <span class="comment">// 따라서 클래스 멤버를 사용할 수는 없다.</span></span><br><span class="line">    <span class="comment">// this.a(); // 클래스 메소드 사용 불가.</span></span><br><span class="line">    <span class="keyword">this</span>.f(); <span class="comment">// 인스턴스 멤버(메소드, 변수)는 사용 가능하다.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스 변수는 클래스 내에서 선언하지 못함.</span></span><br><span class="line"><span class="comment">// 레거시 환경을 지원하기 위해</span></span><br><span class="line"><span class="comment">// 프로토타입 방식의 상속을 포기하지 못했기 때문인 걸까??</span></span><br><span class="line">C.prototype.q = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> C();</span><br><span class="line">C.a();</span><br><span class="line">C.b();</span><br><span class="line">C.c();</span><br><span class="line">c.d();</span><br><span class="line">c.e();</span><br><span class="line">c.f();</span><br><span class="line">c.g();</span><br></pre></td></tr></table></figure><h3 id="객체의-메소드로서-호출할-때-1"><a href="#객체의-메소드로서-호출할-때-1" class="headerlink" title="객체의 메소드로서 호출할 때"></a>객체의 메소드로서 호출할 때</h3><p>ES6에서 객체의 메소드를<br>key: function() {} 대신에<br>key() {}와 같이 줄여쓸 수 있게 됐는데 두 개는 동일하다고 봐도 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> d = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 메소드로서 호출할 때</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// d</span></span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 애로우 펑션은 바로 상위 스코프인 전역의 this를 상속받음.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window</span></span><br><span class="line">  &#125;,</span><br><span class="line">  c() &#123; <span class="comment">// a 메소드와 다를 바가 없다.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// d</span></span><br><span class="line">  &#125;,</span><br><span class="line">  d() &#123; <span class="comment">// 메소드로서 호출할 때</span></span><br><span class="line">    <span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 역시 그냥 펑션은 this를 재바인딩함.</span></span><br><span class="line">      <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">      <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    a();</span><br><span class="line">  &#125;,</span><br><span class="line">  e() &#123; <span class="comment">// 메소드로서 호출할 때</span></span><br><span class="line">    <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 애로우 펑션은 상위 스코프에 있는 this를 상속 받음.</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// d</span></span><br><span class="line">    &#125;;</span><br><span class="line">    a();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">d.a();</span><br><span class="line">d.b();</span><br><span class="line">d.c();</span><br><span class="line">d.d();</span><br><span class="line">d.e();</span><br></pre></td></tr></table></figure><h3 id="this를-바인딩하는-콜백함수"><a href="#this를-바인딩하는-콜백함수" class="headerlink" title="this를 바인딩하는 콜백함수"></a>this를 바인딩하는 콜백함수</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1].forEach()의 this인 &#123;a: '11'&#125;에 가려진다.</span></span><br><span class="line"><span class="comment">// 그 이유는 forEach와 같은 함수는 자동으로 this를 바인딩하려는 성질이 있다.</span></span><br><span class="line">[<span class="number">0</span>].forEach(d.a, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;); <span class="comment">// &#123;a: '11'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백 함수 내부에서 써야 외부의 this로부터 영향을 받지 않는다.</span></span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  d.e(); <span class="comment">// d</span></span><br><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;);</span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="params">()</span> =&gt;</span> d.e(), &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;); <span class="comment">// d</span></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// function() &#123;&#125;인데 this를 재바인딩하지 않고 &#123;a: '11'&#125;을 상속 받았다.</span></span><br><span class="line">  <span class="comment">// 이는 this를 바인딩 시키는 메소드로 this를 강제 바인딩 시킨 것으로 보인다.</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;a: '11'&#125;</span></span><br><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// this를 재바인딩해버렸음.</span></span><br><span class="line">    <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">    <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  a();</span><br><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// this를 상속받는 애로우 펑션</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;a: '11'&#125;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  a();</span><br><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 애로우 펑션이라 this 바인딩 함수가 먹히지 않는다.</span></span><br><span class="line">  <span class="comment">// 즉 두 번째 매개변수는 무시된다.</span></span><br><span class="line">  <span class="comment">// 전역의 this인 Window를 상속받는다.</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window</span></span><br><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// this를 재바인딩해버렸음.</span></span><br><span class="line">    <span class="comment">// strict mode에서는 undefined</span></span><br><span class="line">    <span class="comment">// non-strict mode에서는 Window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  a();</span><br><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 애로우 펑션이라 Function.prototype.bind가 먹히지 않는다.</span></span><br><span class="line">  <span class="comment">// 즉 두 번째 매개변수는 무시된다.</span></span><br><span class="line">  <span class="comment">// 전역의 this인 Window를 상속받는다.</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// this를 상속받는 애로우 펑션</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Window</span></span><br><span class="line">  &#125;;</span><br><span class="line">  a();</span><br><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'11'</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="별도의-컨텍스트를-만드는-함수"><a href="#별도의-컨텍스트를-만드는-함수" class="headerlink" title="별도의 컨텍스트를 만드는 함수"></a>별도의 컨텍스트를 만드는 함수</h3><p>setTimeout, setInterval 함수는 함수 선언 시점과 함수 호출 시점에<br>별개의 컨텍스트를 가지는 대표적인 함수이다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> e = &#123;</span><br><span class="line">  a() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="comment">// setTimeout은 별개의 컨텍스트를 만든다.</span></span><br><span class="line">    <span class="comment">// 바로 실행시점에 컨텍스트를 만드는데,</span></span><br><span class="line">    <span class="comment">// 실행 시점의 this는 전역의 this(Window)가 된다.</span></span><br><span class="line">    setTimeout(<span class="keyword">this</span>.a, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  c() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// setTimeout은 별개의 컨텍스트를 만든다.</span></span><br><span class="line">      <span class="comment">// 바로 실행시점에 컨텍스트를 만드는데,</span></span><br><span class="line">      <span class="comment">// 실행 시점의 this는 전역의 this(Window)가 된다.</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  d() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// setTimeout은 별개의 컨텍스트를 만든다.</span></span><br><span class="line">      <span class="comment">// 바로 실행시점에 컨텍스트를 만드는데,</span></span><br><span class="line">      <span class="comment">// 실행 시점의 this는 전역의 this(Window)가 된다.</span></span><br><span class="line">      <span class="comment">// 하지만 애로우 펑션을 쓰면 클로저가 형성된다.</span></span><br><span class="line">      <span class="comment">// 실행 시점의 this(Window)와 선언 시점의 this(e 객체)가 달라서</span></span><br><span class="line">      <span class="comment">// 그것을 동기화(?)시키기 위해서 클로저가 형성되는 게 아닐까...싶다.</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// e</span></span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/es-this/01.png" alt=""><br>함수 선언 시점의 this는 e object이다.<br><img src="/images/es-this/02.png" alt=""><br>하지만 함수 실행 시점의 this는 window가 된다.<br>바로 setTimeout이 별도의 컨텍스트를 만들기 때문이다.<br><img src="/images/es-this/03.png" alt=""><br>함수로 래핑해봐도 마찬가지다.<br><img src="/images/es-this/04.png" alt=""><br>하지만 애로우 펑션으로 래핑하면 클로저를 형성해서 우리가 원하는 결과를 얻어낼 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES) ~(Tilde) 연산자</title>
      <link href="/2017/02/13/es-tilt-operator/"/>
      <url>/2017/02/13/es-tilt-operator/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/es-tilt-operator/thumb.png" alt=""><br>우리는 주로 <code>~</code>라는 문자를 물결이라고 읽었다.<br>하지만 영어권 국가에서는 Tilde(틸드)라고 읽는다.<br>따라서 해당 연산자를 틸드 연산자라고 부른다.<br>해당 연산자가 기본적으로 어떤 일을 하는지 보자.  </p><h2 id="뭐하는-놈이니"><a href="#뭐하는-놈이니" class="headerlink" title="뭐하는 놈이니?"></a>뭐하는 놈이니?</h2><p>~ 연산자는 비트 단위의 연산자이다.<br>즉, 10진수를 2진수로 바꿔버린 후 연산을 진행한다는 것이다.<br>비트 단위의 연산자 중에 Not을 진행하는 연산자이다.<br>Not 연산자이므로 단항 연산자이다.<br>간단하게 어떻게 작동하는지 보자.  </p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(~<span class="number">1</span>); <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><p>일단 1을 2진수로 바꿔보자.<br>00000001<br>여기서 틸드 연산자를 쓰면<br>~00000001<br>Not 연산자 이므로 0을 1로, 1을 0으로 역전시킨다.<br>11111110<br>위에 2진수가 -2인지 확인해보자.<br><img src="/images/es-tilt-operator/01.png" alt="https://planetcalc.com/747/ 에서 확인해보자">  </p><h2 id="1의-비밀"><a href="#1의-비밀" class="headerlink" title="-1의 비밀"></a>-1의 비밀</h2><p>유독 자바스크립트의 메소드를 보면 -1을 반환하는 녀석들이 많다.  </p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" rel="external nofollow noopener noreferrer" target="_blank">String.prototype.indexOf()</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" rel="external nofollow noopener noreferrer" target="_blank">String.prototype.charAt()</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/search" rel="external nofollow noopener noreferrer" target="_blank">String.prototype.search()</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" rel="external nofollow noopener noreferrer" target="_blank">Array.prototype.indexOf()</a>  </li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" rel="external nofollow noopener noreferrer" target="_blank">Array.prototype.findIndex()</a></li></ul><p>뭐 이외에도 더 있는지 모르겠지만 내가 아는 범위 내에서는 이게 끝이다.<br>주로 검색과 관련된 메소드 중에서<br>인덱스(number)를 반환하는 메소드에서<br>존재하면 해당 인덱스틀, 존재하지 않는다면 -1을 반환한다.<br>단순히 인덱스가 0부터 정수로 쭉쭉 뻗어가니<br>존재하지 않으면 0에서 가장 가까운 -1을 반환하는 게 타당해보인다.<br>하지만 틸드 연산자와 생각해보면 이 -1이란 녀석을 이용해먹을 수 있다.  </p><p>일단 -1을 2진수로 표현하면<br>11111111<br>인데 틸드 연산자를 써서 역전시켜버리면<br>00000000<br>정수 0이 돼버린다.<br>0은 형변환 했을 때 false로 취급되는 falsy value이다.<br><code>~-1 === 0</code>이라는 점을 이용하면 조건식을 간결하게 만들 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'나는바보입니다'</span>;</span><br><span class="line"><span class="keyword">let</span> search = <span class="string">'냐'</span>;</span><br><span class="line"><span class="keyword">if</span>(str.indexOf(search) === <span class="number">-1</span>) <span class="built_in">console</span>.log(<span class="string">'없다'</span>);</span><br><span class="line"><span class="comment">// ~ 연산자를 쓰면 아래와 같이 줄일 수 있다.</span></span><br><span class="line"><span class="comment">// ~-1 === 0 == false이기 때문에 논리 부정 연산자(!)를 썼다.</span></span><br><span class="line"><span class="keyword">if</span>(!~str.indexOf(search)) <span class="built_in">console</span>.log(<span class="string">'없다'</span>);</span><br><span class="line"></span><br><span class="line">search = <span class="string">'바보'</span>;</span><br><span class="line"><span class="keyword">if</span>(str.indexOf(search) !== <span class="number">-1</span>) <span class="built_in">console</span>.log(<span class="string">'있다'</span>);</span><br><span class="line"><span class="comment">// ~ 연산자를 쓰면 아래와 같이 줄일 수 있다.</span></span><br><span class="line"><span class="comment">// str.indexOf(search) === 2</span></span><br><span class="line"><span class="comment">// -1이 아닌 값에 틸드 연산자를 쓰면 0은 안 나옴.</span></span><br><span class="line"><span class="comment">// ~str.indexOf(search) === 0은 무조건 안 나옴.</span></span><br><span class="line"><span class="comment">// 0이 아닌 숫자는 무조건 true로 형변환 하게 돼있음.</span></span><br><span class="line"><span class="keyword">if</span>(~str.indexOf(search)) <span class="built_in">console</span>.log(<span class="string">'있다'</span>);</span><br></pre></td></tr></table></figure><p>연산 속도를 한번 비교해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 큰 차이는 없다.</span></span><br><span class="line"><span class="keyword">const</span> iterations = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'나는바보입니다'</span>;</span><br><span class="line"><span class="keyword">let</span> search = <span class="string">'냐'</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"==="</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.indexOf(search) === <span class="number">-1</span>); <span class="comment">// ===: 610.604ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"==="</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"!~"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!~str.indexOf(search)); <span class="comment">// !~: 578.663ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"!~"</span>);</span><br><span class="line">search = <span class="string">'바보'</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"!=="</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.indexOf(search) !== <span class="number">-1</span>); <span class="comment">// !==: 607.395ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"!=="</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"~"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(~str.indexOf(search)); <span class="comment">// ~: 619.903ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"~"</span>);</span><br></pre></td></tr></table></figure><h2 id="의"><a href="#의" class="headerlink" title="의 ~()"></a><del>의 ~(</del>)</h2><p>기본적으로 Tilde 연산자는 소수점 아래 비트를 버리는 성질을 가진다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(~<span class="number">1.1</span>); <span class="comment">// -2</span></span><br><span class="line"><span class="built_in">console</span>.log(~<span class="number">1</span>); <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><p>Not 연산은 기본적으로 두 번 사용하면 원본값을 반환하는 성질을 가진다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!<span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">true</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>논리 부정 연산인 !은 단순히 true를 false로, false를 true로 역전시킬 뿐이지만<br>비트 논리 부정 연산자인 ~는 조금 다르다.<br>위에서 보다 싶이 소수점 아래 비트를 아예 버려버리는 성질이 있기 때문에<br>이 점을 이용하면 다음과 같은 효과를 낼 수 있다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6에서 추가된 Math.trunc를 바벨이나 Polyfill을 쓰지 않아도 된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">45.6</span>)); <span class="comment">// 45</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">45.6</span>); <span class="comment">// 45</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">-45.6</span>)); <span class="comment">// -45</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">-45.6</span>); <span class="comment">// -45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 역시 비트 단위의 논리 연산자라서 메소드 호출보다 연산 속도가 훨씬 빠르다.</span></span><br><span class="line"><span class="keyword">const</span> iterations = <span class="number">10000000</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Math.trunc()"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="built_in">Math</span>.trunc(<span class="number">-45.6</span>); <span class="comment">// Math.trunc: 124.700ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Math.trunc()"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"~~"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    ~~<span class="number">-45.6</span>; <span class="comment">// ~~: 21.944ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"~~"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> Operator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 010일차 - 생성자, this, 멤버 변수 초기화</title>
      <link href="/2017/02/13/Java-study-010day/"/>
      <url>/2017/02/13/Java-study-010day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-010day/thumb.png" alt="">  </p><h2 id="생성자-Constructor"><a href="#생성자-Constructor" class="headerlink" title="생성자(Constructor)"></a>생성자(Constructor)</h2><p>인스턴스가 생성될 때 호출되는 <code>인스턴스 초기화 메소드</code><br>인스턴스 변수 초기화 작업에 주로 사용된다.  </p><h3 id="생성자는-인스턴스를-생성하지-못한다"><a href="#생성자는-인스턴스를-생성하지-못한다" class="headerlink" title="생성자는 인스턴스를 생성하지 못한다!"></a>생성자는 인스턴스를 생성하지 못한다!</h3><p>나는 생성자로 인스턴스를 생성하고<br>new 연산자가 C언어의 &amp;(주소값 반환) 역할을 하는 줄 알았는데<br>new 연산자가 있어야 인스턴스를 생성하면서 그 주소값을 반환하게 하는 연산자인 것 같다.<br>생성자는 인스턴스 변수 초기화이지 그 이상(인스턴스 생성)도 그 이하도 아닌 것 같다.  </p><a id="more"></a><h3 id="기본값-생성자"><a href="#기본값-생성자" class="headerlink" title="기본값 생성자"></a>기본값 생성자</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 아무런 생성자가 없으므로 기본 생성자가 생성됨.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 생성자가 1개 이상 존재하면 기본 생성자는 만들어지지 않음.</span></span><br><span class="line">    b(<span class="keyword">int</span> x) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="사용-예제"><a href="#사용-예제" class="headerlink" title="사용 예제"></a>사용 예제</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    String gearType;</span><br><span class="line">    <span class="keyword">int</span> cntDoor;</span><br><span class="line">    Car() &#123;&#125;</span><br><span class="line">    Car(String color, String gearType, <span class="keyword">int</span> cntDoor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.gearType = gearType;</span><br><span class="line">        <span class="keyword">this</span>.cntDoor = cntDoor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Car c1 = <span class="keyword">new</span> Car();</span><br><span class="line">      c1.color = <span class="string">"black"</span>;</span><br><span class="line">      c1.gearType = <span class="string">"manual"</span>;</span><br><span class="line">      c1.cntDoor = <span class="number">4</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 위 코드보다 생성자를 이용하면 간결하게 작성이 가능하다.</span></span><br><span class="line">      Car c2 = <span class="keyword">new</span> Car(<span class="string">"red"</span>, <span class="string">"auto"</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    String gearType;</span><br><span class="line">    <span class="keyword">int</span> cntDoor;</span><br><span class="line">    Car() &#123;</span><br><span class="line">        <span class="comment">// 생성자 내에서 다른 생성자 호출은 첫 줄에서만 가능함.</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"white"</span>, <span class="string">"auto"</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 아래와 같이도 가능하다.</span></span><br><span class="line">        <span class="comment">// color = "white";</span></span><br><span class="line">        <span class="comment">// gearType = "auto";</span></span><br><span class="line">        <span class="comment">// cntDoor = 4;</span></span><br><span class="line">    &#125;</span><br><span class="line">    Car(String color, String gearType, <span class="keyword">int</span> cntDoor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.gearType = gearType;</span><br><span class="line">        <span class="keyword">this</span>.cntDoor = cntDoor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Car c1 = <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>JS에서는 this가 호출하는 놈에 따라서 유동적으로 변해서 아주 골치가 아팠는데<br>Java에서는 <code>클래스의 인스턴스</code>만 가리키므로 명확하다.<br>이러한 이유로 static 메소드에서는 this를 쓸 수 없다.<br>static 메소드 호출을 클래스의 인스턴스 생성 이전에도 가능하나<br>this는 클래스의 인스턴스를 가리키므로 클래스의 인스턴스 생성 이후에만 사용 가능하기 때문이다.<br>생성자를 포함한 모든 인스턴스 메소드에는 해당 클래스의 인스턴스를 가리키는<br>this 지역변수가 숨겨진 채로 존재할 뿐이다.<br>static 메소드는 인스턴스 멤버와 관련된 작업을 하지 않는 애들이기 때문에<br>this 지역변수가 존재하지 않을 뿐이다.<br>또한 this에는 인스턴스의 주소가 저장돼있다.<br>즉 this는 참조 변수이고, this()는 생성자이다.  </p><h2 id="인스턴스의-복사"><a href="#인스턴스의-복사" class="headerlink" title="인스턴스의 복사"></a>인스턴스의 복사</h2><p>클래스 인스턴스 간의 차이점을 보면<br>static 멤버(변수 메소드)와 인스턴스 메소드는 모두 같다.<br>인스턴스 변수만 서로 다른 값을 가지고 있을 뿐이다.<br>즉, 인스턴스를 복사할 때는 인스턴스 변수만 복사하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    String gearType;</span><br><span class="line">    <span class="keyword">int</span> cntDoor;</span><br><span class="line">    Car(Car c) &#123;</span><br><span class="line">        color = c.color;</span><br><span class="line">        gearType = c.gearType;</span><br><span class="line">        cntDoor = c.cntDoor;</span><br><span class="line">        <span class="comment">// 사실 위와 같이 하는 것 보다는</span></span><br><span class="line">        <span class="comment">// 기존의 코드를 재활용하는 것이 유지보수 측면에서 좋다.</span></span><br><span class="line">        <span class="comment">// 미연의 실수도 방지하고...</span></span><br><span class="line">        <span class="comment">// this(c.color, c.gearType, c.cntDoor); </span></span><br><span class="line">        <span class="comment">// 위와 같이 써줘야하고 생성자의 제일 첫줄에 적어줘야한다.</span></span><br><span class="line">        <span class="comment">// 왜냐하면 여태까지 초기화한 내역 이후에 또 다시 생성자로 다시 인스턴스를 초기화할 필요는 없기 때문이다.</span></span><br><span class="line">        <span class="comment">// Car(c.colr, c.gearType, c.cntDoor); 라고 쓰면 오류가 난다.</span></span><br><span class="line">    &#125;</span><br><span class="line">    Car(String color, String gearType, <span class="keyword">int</span> cntDoor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.gearType = gearType;</span><br><span class="line">        <span class="keyword">this</span>.cntDoor = cntDoor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="변수의-초기화"><a href="#변수의-초기화" class="headerlink" title="변수의 초기화"></a>변수의 초기화</h2><p>멤버 변수(클래스 변수, 인스턴스 변수)와 배열은 기본값으로 초기화가 이루어지지만,<br>지역 변수(배열 빼고)는 기본값으로 초기화가 이루어지지 않는다.<br>즉, 멤버 변수와 배열의 초기화는 선택적이지만(초기화를 권장한단다)<br>지역 변수의 초기화는 필수적이다.<br>또한 멤버 변수의 초기화에는 다음 세 가지 방법이 존재한다.  </p><ul><li><p>명시적 초기화<br>가장 기본적이면서 간단한 방법이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String color = <span class="string">"black"</span>;</span><br><span class="line">    String gearType = <span class="string">"manual"</span>;</span><br><span class="line">    <span class="keyword">int</span> cntDoor = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>초기화 블럭<br>예외 처리나 반복, 조건문 등등의 복잡한 작업을 통해 초기화 해야할 경우<br>이러한 블럭<code>{}</code>을 사용해서 초기화를 진행하면 된다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cntCar; <span class="comment">// 현재 자동차가 몇 대 생성되었는지</span></span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">// 클래스 초기화 블럭</span></span><br><span class="line">        <span class="comment">// 프로그램이 실행되면 단 한 번만 실행된다.</span></span><br><span class="line">        System.out.println(<span class="string">"이렇게 함수 실행도 된다."</span>);</span><br><span class="line">        cntCar = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String color;</span><br><span class="line">    String gearType;</span><br><span class="line">    <span class="keyword">int</span> cntDoor;</span><br><span class="line">    &#123; <span class="comment">// 인스턴스 초기화 블럭</span></span><br><span class="line">        <span class="comment">// 인스턴스가 생성될 때마다 실행된다.</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"조건문도 쓸 수 있네?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cntCar++; <span class="comment">// 생성자마다 중복된 코드를 여기다가 빼면 된다.</span></span><br><span class="line">    &#125;</span><br><span class="line">    Car() &#123;</span><br><span class="line">        <span class="comment">// cntCar++; // 차가 생성됐으므로 1대 추가, 생성자마다 중복된 코드다.</span></span><br><span class="line">        color = <span class="string">"white"</span>;</span><br><span class="line">        gearType = <span class="string">"auto"</span>;</span><br><span class="line">        cntDoor = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Car(String color, String gearType, <span class="keyword">int</span> cntDoor) &#123;</span><br><span class="line">        <span class="comment">// cntCar++; // 차가 생성됐으므로 1대 추가, 생성자마다 중복된 코드다.</span></span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.gearType = gearType;</span><br><span class="line">        <span class="keyword">this</span>.cntDoor = cntDoor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 이렇게 함수도 실행된다.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 조건문도 쓸 수 있네?</span></span><br><span class="line">        Car c = <span class="keyword">new</span> Car();</span><br><span class="line">        <span class="comment">// 조건문도 쓸 수 있네?</span></span><br><span class="line">        Car c2 = <span class="keyword">new</span> Car(<span class="string">"black"</span>, <span class="string">"manual"</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>생성자<br>인스턴스 변수를 초기화하기 위해 쓴다고 위에 설명했으므로<br>자세한 설명은 생략한다.  </p></li></ul><h2 id="멤버-변수의-초기화-시기와-순서"><a href="#멤버-변수의-초기화-시기와-순서" class="headerlink" title="멤버 변수의 초기화 시기와 순서"></a>멤버 변수의 초기화 시기와 순서</h2><ul><li>클래스 변수의 초기화 시점<br>클래스 변수가 처음 로딩될 때 단 한 번 초기화 된다.  </li><li>인스턴스 변수의 초기화 시점<br>인스턴스가 생성될 때마다 각 인스턴스별로 초기화가 이루어진다.  </li><li>클래스 변수의 초기화 순서<br>기본값 - 명시적 초기화 - 클래스 초기화 블럭  </li><li>인스턴스 변수의 초기화 순서<br>기본값 - 명시적 초기화 - 인스턴스 초기화 블럭 - 생성자  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cv = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> iv = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cv = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        iv = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    InitTest() &#123;</span><br><span class="line">        iv = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InitTest i = <span class="keyword">new</span> InitTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th scope="col" colspan="3">클래스 초기화</th><th scope="col" colspan="4">인스턴스 초기화</th></tr></thead><tbody><tr><td>기본값</td><td>명시적 초기화</td><td>클래스 초기화 블럭</td><td>기본값</td><td>명시적 초기화</td><td>인스턴스 초기화 블럭</td><td>생성자</td></tr><tr><td>cv: 0</td><td>cv: 1</td><td>cv: 2</td><td>cv: 2</td><td>cv: 2</td><td>cv: 2</td><td>cv: 2</td></tr><tr><td></td><td></td><td></td><td>iv: 0</td><td>iv: 1</td><td>iv: 2</td><td>iv: 3</td></tr><tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES) 똑똑한 논리 연산자</title>
      <link href="/2017/02/13/es-logical-operator/"/>
      <url>/2017/02/13/es-logical-operator/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/es-logical-operator/thumb.png" alt=""><br>오늘은 기본값을 위해 많이 쓰던 논리 연산자인<br>||와 &amp;&amp;을 집중 탐구해보았다.<br>우선 위에 있는 녀석들은 어떨 때 쓰는지 알아보자.  </p><h2 id="사용-사례"><a href="#사용-사례" class="headerlink" title="사용 사례"></a>사용 사례</h2><ul><li><p>네임 스페이스 패턴(~ES5)<br>웹팩을 사용하면 js 파일을 모듈 단위로 사용할 수 있지만,<br>그럴 환경이 안 되면 아래와 같은 우회 방법을 통해서 전역 스코프를 최대한 덜 더럽힐 수 있다.<br>ES6에는 모듈 import, export 기능이 있어서 ~ES5라고 써놓긴 했지만…<br>아직 지원하는 브라우저가 없는 걸로 안다. (17년 2월 기준)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전역 스코프에는 namespace와 namespace2 모듈만이 존재한다.</span></span><br><span class="line"><span class="comment">// func라는 충돌나기 쉬운 네이밍이 전역에 존재하지 않으므로 충돌이 일어나지 않는다.</span></span><br><span class="line"><span class="comment">// 즉 네이밍을 고민할 염려가 조금은 줄어들게 된다. 뭐 그 외에 장점도 많지만...</span></span><br><span class="line"><span class="comment">// script src 태그를 통해 미리 namespace 모듈을 불러온 경우에는 전역에는 변수 namespace가 존재한다.</span></span><br><span class="line"><span class="comment">// || 연산자를 써서 전역에 namespace라는 변수(모듈)가 존재하면 그 모듈을 변수에 할당하고,</span></span><br><span class="line"><span class="comment">// 존재하지 않는다면 빈 객체를 변수에 할당하는 패턴이다.</span></span><br><span class="line"><span class="keyword">const</span> namespace = namespace || &#123;&#125;;</span><br><span class="line">namespace.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> namespace2 = namespace2 || &#123;&#125;;</span><br><span class="line">namespace2.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>함수의 매개변수 기본값 설정(~ES5)<br>ES6를 통해서는 아래와 같은 게 가능하지만,  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">param1 = <span class="number">0</span>, param2 = <span class="string">''</span></span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>바벨을 사용할 수 없고, IE 하위 브라우저까지 크로스 브라우징을 하는 환경에서는<br>아래와 같이 처리해줘야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// || 뒤에 오는 애가 기본 값이다.</span></span><br><span class="line">  param1 = param1 || <span class="number">0</span>;</span><br><span class="line">  param2 = param2 || <span class="string">''</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>함수의 인자로 기본값 설정<br>위에서는 함수를 선언할 때 매개변수의 기본값을 설정한 경우지만<br>이 경우는 함수를 호출할 때 인자의 기본값을 설정한 경우이다.<br>둘의 차이는 뭐 없다고 봐도 무방하지 않을까…싶다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">''</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> func = <span class="function"><span class="params">age</span> =&gt;</span> <span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="comment">// obj 객체에 age라는 키가 없으므로 undefined를 반환한다.</span></span><br><span class="line"><span class="comment">// undefined는 형변환 했을 때 false로 간주되므로 기본값인 1이 넘어간다.</span></span><br><span class="line">func(obj.age || <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>함수의 기본 반환값 설정<br>함수의 반환값이 매개 변수에 따라서 오류를 뿜는 경우가 존재한다.<br>그런 오류를 방지하고자 기본값을 설정하곤 하는데 어떤 경우인지 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cntOccurrences = <span class="function">(<span class="params">regExp, str</span>) =&gt;</span> (</span><br><span class="line">    <span class="comment">// 정규표현식과 매치되는 결과가 없어서 null을 반환할 경우</span></span><br><span class="line">    <span class="comment">// null.length는 오류를 반환하므로 기본값으로 빈 배열을 넣어줘서 오류를 방지함.</span></span><br><span class="line">    (str.match(regExp) || []).length</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(cntOccurrences(<span class="regexp">/\d/g</span>, <span class="string">'asdf'</span>)); <span class="comment">// 0, 기본값이 없었다면 오류가 난다.</span></span><br></pre></td></tr></table></figure></li><li><p>거짓 기본값 설정하기<br>말이 이상한데…<br>만약 해당 변수가 거짓이라면 더 이상의 판별을 하지 않고자 할 때 쓰면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'q'</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// 배열이 숫자로만 이루어진 건지 아닌지 판별하는 함수</span></span><br><span class="line"><span class="keyword">const</span> isNumArr = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isNum = <span class="literal">true</span>; <span class="comment">// 모든 값이 숫자인지 아닌지 판별하는 flag 변수</span></span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 만약에 한 번이라도 숫자가 아닌 값이 있었다면</span></span><br><span class="line">    <span class="comment">// 그 아래에 있는 구문들을 실행할 필요가 없으므로</span></span><br><span class="line">    <span class="comment">// return으로 함수를 조기 종료.</span></span><br><span class="line">    <span class="keyword">if</span>(!isNum) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 현재 값이 숫자인지 판단하여 변수에 저장.</span></span><br><span class="line">    isNum = <span class="built_in">isNaN</span>(v);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isNumArr(arr)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><p>위와 같은 코드가 있을 때 &amp;&amp; 논리 연산자를 쓰면 코드를 줄일 수 있다.<br>퍼포먼스 측면에서는 맞는지 잘 모르겠다…  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'q'</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// 배열이 숫자로만 이루어진 건지 아닌지 판별하는 함수</span></span><br><span class="line"><span class="keyword">const</span> isNumArr = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isNum = <span class="literal">true</span>; <span class="comment">// 모든 값이 숫자인지 아닌지 판별하는 flag 변수</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// &amp;&amp; 연산은 false인 값을 반환하려는 성질이 있는데</span></span><br><span class="line">  <span class="comment">// 둘 다 false이면 앞에 놈을 반환한다.</span></span><br><span class="line">  <span class="comment">// 만약 앞에 놈이 true이면 무조건 뒤에 놈을 반환한다.</span></span><br><span class="line">  <span class="comment">// 일단 false 값을 반환하는지 검사를 돌리다가 한 번이라도 false가 나오면</span></span><br><span class="line">  <span class="comment">// 뒤에 놈이 true여도 한 번 false인 놈은 계속 false로 만들고 싶을 때 쓰면 된다.</span></span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> isNum = isNum &amp;&amp; <span class="built_in">isNaN</span>(v));</span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isNumArr(arr)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="원리-파악"><a href="#원리-파악" class="headerlink" title="원리 파악"></a>원리 파악</h2><p>x || y =&gt; x가 참이면 무조건 참.<br>즉 x가 참이면 y는 평가(실행)하지도 않음.<br>x &amp;&amp; y =&gt; x가 거짓이면 무조건 거짓.<br>즉 x가 거짓이면 y는 평가(실행)하지도 않음.<br>이렇게 좌변에 어떤 값을 넣는가에 따라서 연산 속도에 영향을 미침.  </p><h2 id="검증"><a href="#검증" class="headerlink" title="검증"></a>검증</h2><p>이 말이 사실인가 한 번 아래 예제를 실행해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기본적으로 console.log()는 반환값이 없으므로 false로 취급한다.</span></span><br><span class="line"><span class="comment">// true || false</span></span><br><span class="line">!<span class="built_in">console</span>.log(<span class="string">'a'</span>) || <span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// true || true</span></span><br><span class="line">!<span class="built_in">console</span>.log(<span class="string">'a'</span>) || !<span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// false || false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>) || <span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// false || true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>) || !<span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// false &amp;&amp; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>) &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// false &amp;&amp; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>) &amp;&amp; !<span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// true &amp;&amp; false</span></span><br><span class="line">!<span class="built_in">console</span>.log(<span class="string">'a'</span>) &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// true &amp;&amp; true</span></span><br><span class="line">!<span class="built_in">console</span>.log(<span class="string">'a'</span>) &amp;&amp; !<span class="built_in">console</span>.log(<span class="string">'b'</span>); <span class="comment">// a b</span></span><br></pre></td></tr></table></figure><p>논리 연산자는 좌변에 따라서 우변이 실행되느냐 마느냐가 달려있다.<br>그럼 반환은 어떻게 하는지 살펴보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span> || <span class="literal">false</span>; <span class="comment">// true || false</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">a = &#123;&#125; || []; <span class="comment">// true || true</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;&#125;</span></span><br><span class="line">a = <span class="literal">null</span> || <span class="literal">undefined</span>; <span class="comment">// false || false</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">0</span> || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// false || true</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// function()&#123;&#125;</span></span><br><span class="line">a = <span class="literal">NaN</span> &amp;&amp; <span class="number">0</span>; <span class="comment">// false &amp;&amp; false</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// NaN</span></span><br><span class="line">a = <span class="string">''</span> &amp;&amp; <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// false &amp;&amp; true</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ''</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">Map</span>() &amp;&amp; <span class="literal">null</span>; <span class="comment">// true &amp;&amp; false</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// null</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">Set</span>() &amp;&amp; <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// true &amp;&amp; true</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>왜 위와 같은 값을 반환하게 됐는지 한번 원리와 연관 지어서 생각해보자.  </p><ul><li>x || y<br>|| 연산자는 좌변이 true이면 우변을 평가, 실행하지 않는다고 했다.<br>즉, 좌변이 true이면 우변은 없는 놈 취급하기 때문에 바로 x가 반환(평가, 실행)되는 것이다.<br>하지만 좌변이 false이면 우변을 평가, 실행하게 된다.<br>이렇게 되면 좌변은 아예 없는 놈 취급하게 된다.<br>즉, 좌변이 false이면 우변의 값은 뭐든간에 상관 없이 항상 우변이 반환(평가와 실행은 말할 것도 없이)된다.  </li><li>x &amp;&amp; y<br>&amp;&amp; 연산자는 좌변이 false이면 우변을 평가, 실행하지 않는다고 했다.<br>즉, 좌변이 false이면 우변은 없는 놈 취급하기 때문에 바로 x가 반환(평가, 실행)되는 것이다.<br>하지만 좌변이 true이면 우변을 평가, 실행하게 된다.<br>이렇게 되면 좌변은 아예 없는 놈 취급하게 된다.<br>즉, 좌변이 true이면 우변의 값은 뭐든간에 상관 없이 항상 우변이 반환(평가와 실행은 말할 것도 없이)된다.</li></ul><h2 id="쓸-데-없는-실험"><a href="#쓸-데-없는-실험" class="headerlink" title="쓸 데 없는 실험"></a>쓸 데 없는 실험</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) <span class="built_in">console</span>.log(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 줄임</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>;) <span class="built_in">console</span>.log(i++);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2차 줄임</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; <span class="built_in">console</span>.log(i++));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3차 줄임 ver 1.</span></span><br><span class="line"><span class="comment">// 좌변이 참일 동안 반복함.</span></span><br><span class="line"><span class="comment">// 좌변이 참이면 우변은 무조건 실행함.</span></span><br><span class="line"><span class="comment">// 우변을 실행한다는 것은 우변을 반환한다는 의미이므로</span></span><br><span class="line"><span class="comment">// 우변은 무조건 true로 만들어줘야함.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; (i&lt;<span class="number">10</span>) &amp;&amp; !<span class="built_in">console</span>.log(i++););</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3차 줄임 ver 2.</span></span><br><span class="line"><span class="comment">// 우변이 참일 동안 반복함.</span></span><br><span class="line"><span class="comment">// 좌변이 거짓이면 우변은 무조건 실행함.</span></span><br><span class="line"><span class="comment">// 우변을 실행한다는 것은 우변을 반환한다는 의미이므로</span></span><br><span class="line"><span class="comment">// 우변을 실행시키기 위해 좌변은 무조건 false로 만들어줘야함.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; <span class="built_in">console</span>.log(i++) || (i&lt;<span class="number">10</span>););</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 줄임</span></span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2차 줄임 ver 1.</span></span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 좌변이 참일 동안 반복함.</span></span><br><span class="line"><span class="comment">// 좌변이 참이면 우변은 무조건 실행함.</span></span><br><span class="line"><span class="comment">// 우변을 실행한다는 것은 우변을 반환한다는 의미이므로</span></span><br><span class="line"><span class="comment">// 우변은 무조건 true로 만들어줘야함.</span></span><br><span class="line"><span class="keyword">while</span>((i&lt;<span class="number">10</span>) &amp;&amp; !<span class="built_in">console</span>.log(i++));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2차 줄임 ver 2.</span></span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 우변이 참일 동안 반복함.</span></span><br><span class="line"><span class="comment">// 좌변이 거짓이면 우변은 무조건 실행함.</span></span><br><span class="line"><span class="comment">// 우변을 실행한다는 것은 우변을 반환한다는 의미이므로</span></span><br><span class="line"><span class="comment">// 우변을 실행시키기 위해 좌변은 무조건 false로 만들어줘야함.</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">console</span>.log(i++) || (i&lt;<span class="number">10</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> Operator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES5) 배열의 순회 메소드에서 break 기능 구현하기</title>
      <link href="/2017/02/12/ES5-array-loop-method-break/"/>
      <url>/2017/02/12/ES5-array-loop-method-break/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES5-array-loop-method-break/thumb.png" alt=""><br>이 글은 Outsider 님의 블로그 포스트 중<br><a href="https://blog.outsider.ne.kr/847" rel="external nofollow noopener noreferrer" target="_blank">forEach에 break문 대신 some 사용하기</a>를 보고 큰 감명을 받아<br>내가 이해한 내용을 토대로 정리해 본 글이다.</p><h2 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h2><p>for 반복문을 써서 배열을 순회하는 것은 할당, 프로퍼티 참조, 조건 분기 등등의 잡다한 일을 해야한다.<br>이러한 잡다한 일을 실수로 코딩을 잘못하면 원하지 않는 결과가 나오고, 귀찮음이 몰려오기 마련이다.  </p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'q'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>,</span><br><span class="line">  <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열이 숫자로만 이루어져있는지 파악하는 함수</span></span><br><span class="line"><span class="keyword">const</span> isArrNum = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isNum = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 프로그래머가 실수로 let i = 1;이라고 초기화한다면?</span></span><br><span class="line">  <span class="comment">// 실수로 i&lt;arr.length+1; 이라고 조건식을 잘못 입력한다면?</span></span><br><span class="line">  <span class="comment">// i+=2; 라고 증감식을 잘못 입력한다면?</span></span><br><span class="line">  <span class="comment">// arr[i+1]로 잘못 참조한다면?</span></span><br><span class="line">  <span class="comment">// 이렇게 일일이 초기화, 조건식 지정, 증감식 지정 등등을 일일이 해줘야하므로 귀찮다.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(arr[i])) &#123; <span class="comment">// 숫자라면</span></span><br><span class="line">      <span class="comment">// 아래 있는 코드는 실행할 필요 없이 다음 요소를 검사해야함.</span></span><br><span class="line">      <span class="comment">// 즉 다음 반복문을 실행.</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 숫자가 아니라면</span></span><br><span class="line">    isNum = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 바로 반복문을 종료해야함.</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// q</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isArrNum(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사실은 아래와 같이 break와 continue를 쓸 필요도 없는 예제긴 하다.</span></span><br><span class="line"><span class="keyword">const</span> isArrNum2 = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(arr[i])) &#123; <span class="comment">// 숫자가 아니라면</span></span><br><span class="line">      <span class="comment">// 반복문 탈출이고 나발이고 return으로 바로 함수를 조기 종료 시키면서</span></span><br><span class="line">      <span class="comment">// false를 반환하게 하면됨.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 반복문이 무사히 끝났으면 모든 게 숫자였다고 판단하여 true를 반환.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="continue-기능만-있는-배열-순회-메소드-ES5-IE9"><a href="#continue-기능만-있는-배열-순회-메소드-ES5-IE9" class="headerlink" title="continue 기능만 있는 배열 순회 메소드(ES5, IE9+)"></a>continue 기능만 있는 배열 순회 메소드(ES5, IE9+)</h2><p>따라서 그런 점을 해소하고자 ES5(IE9+)에서는 배열의 순환 메소드인<br>forEach, reduce, map, filter 등등이 추가됐다.<br>하지만!<br>이 메소드는 continue는 지원하지만 break는 지원하지 않는다.<br>또한 continue 기능은 continue 대신에 함수를 종료 시키는<br>return 키워드를 사용하며 반환하는 값은 중요치 않다.(continue 시키는 데에 있어서는)<br>return 키워드로 함수를 조기 종료 시켜도, 현재 요소에 대한 콜백 함수(continue)를 종료 시킨 것이지<br>모든 요소에 대한 콜백 함수(break)를 종료시켜버리는 것이 아니기 때문에 바로 다음 콜백함수의 실행이 일어난다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'q'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>,</span><br><span class="line">  <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열이 숫자로만 이루어져있는지 파악하는 함수</span></span><br><span class="line"><span class="keyword">const</span> isArrNum3 = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isNum = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// forEach, map, reduce, filter 메소드가</span></span><br><span class="line">  <span class="comment">// continue만 지원하고, break를 지원하지 않아 콘솔창을 보면 비효율적임을 보여준다.</span></span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 배열 중에 숫자가 아닌 값이 있어도 배열의 요소 끝까지 콜백 함수가 돈다.</span></span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// forEach, map, filter, reduce에서 return은 continue와 같다.</span></span><br><span class="line">    <span class="comment">// 반환값은 중요치 않고, break를 지원하지 않는다.</span></span><br><span class="line">    <span class="comment">// return으로 함수를 종료 해도 해당 인덱스의 콜백함수이기 때문에</span></span><br><span class="line">    <span class="comment">// 다음 요소의 콜백 함수가 돈다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 배열 요소 중 숫자가 아닌 값이 있었다면 그 아래 값들은 실행할 필요가 없어짐.</span></span><br><span class="line">    <span class="keyword">if</span>(!isNum) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 숫자가 아니라면</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(v)) isNum = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// q</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 3.3</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isArrNum3(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사실은 return으로 continue 시킬 것도 없는 예제이다.</span></span><br><span class="line"><span class="keyword">const</span> isArrNum4 = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isNum = <span class="literal">true</span>;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> isNum = isNum &amp;&amp; !<span class="built_in">isNaN</span>(v));</span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="break-기능까지-있는-배열-순회-메소드-ES5-IE9"><a href="#break-기능까지-있는-배열-순회-메소드-ES5-IE9" class="headerlink" title="break 기능까지 있는 배열 순회 메소드(ES5, IE9+)"></a>break 기능까지 있는 배열 순회 메소드(ES5, IE9+)</h2><blockquote><p>falsy values: boolean으로 형변환 했을 때 false로 취급되는 값들<br>  false, 0, ‘’, null, undefined, NaN<br>  truthy values: boolean으로 형변환 했을 때 true로 취급되는 값들<br>  falsy value가 아닌 모든 값들.</p></blockquote><ul><li><p>some<br>콜백함수가 반환하는 값이 하나라도 true인지 파악하는 메소드<br>하나라도 truthy value를 반환하는 순간 콜백함수를 멈춤.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'q'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>,</span><br><span class="line">  <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열이 숫자로만 이루어져있는지 파악하는 함수</span></span><br><span class="line"><span class="keyword">const</span> isArrNum5 = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isNum = arr.some(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(v)) &#123; <span class="comment">// 숫자가 아니라면</span></span><br><span class="line">      <span class="comment">// some에서 truthy value를 반환하면 break와 동일함.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// some에서 falsy value를 반환하면 continue와 동일함.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 숫자가 아니라면 some은 true를 반환하므로 not 연산자(!)를 써서 반환해줘야함.</span></span><br><span class="line">  <span class="keyword">return</span> !isNum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// q</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isArrNum5(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사실 아래와 같이 줄여쓸 수 있는 예제이다.</span></span><br><span class="line"><span class="keyword">const</span> isArrNum6 = <span class="function"><span class="params">arr</span> =&gt;</span> !arr.some(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">isNaN</span>(v));</span><br></pre></td></tr></table></figure></li><li><p>every<br>콜백함수가 반환하는 값이 모두 true인지 파악하는 메소드<br>하나라도 falsy value를 반환하는 순간 콜백함수를 멈춤.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'q'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>,</span><br><span class="line">  <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3.3</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열이 숫자로만 이루어져있는지 파악하는 함수</span></span><br><span class="line"><span class="keyword">const</span> isArrNum7 = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isNum = arr.every(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(v)) &#123; <span class="comment">// 숫자가 아니라면</span></span><br><span class="line">      <span class="comment">// every에서 falsy value를 반환하면 break와 동일함.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// every에서 truthy value를 반환하면 continue와 동일함.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isNum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// q</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isArrNum7(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사실 아래와 같이 줄여쓸 수 있다.</span></span><br><span class="line"><span class="keyword">const</span> isArrNum8 = <span class="function"><span class="params">arr</span> =&gt;</span> arr.every(<span class="function"><span class="params">v</span> =&gt;</span> !<span class="built_in">isNaN</span>(v));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES5 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>양 보다는 꾸준히</title>
      <link href="/2017/02/11/blahblah01/"/>
      <url>/2017/02/11/blahblah01/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/blahblah01/thumb.png" alt=""><br>자바를 공부하면서 느낀 것이다.  </p><blockquote><p>초반엔 내가 아는 내용이니 하루에 한 챕터씩 나가야지..</p></blockquote><p>하지만 내가 아는 게 다가 아니었다.<br>다 안다고 생각했지만 그 속에는 모르는 내용들이 너무 많았다.<br>하루 한 챕터를 정리해가면서 연습문제까지 풀어가기에는 정말 힘들었다.<br>초반에는 재밌어서 그래도 거의 한 챕터씩 나갔다.<br>하지만 가면 갈 수록 그 양에 질리고, 시간은 더욱 오래 걸렸다.<br>공부를 하는 것도 매일 매일이 아니라 그냥 생각날 때, 시간 날 때만 했다.<br>오늘 공부를 하다보니 이제는 지쳐서 2시간이 되자 책장을 넘기면서  </p><a id="more"></a><blockquote><p>이 챕터는 도대체 언제 끝나나…<br>다음 챕터는 얼마나 될라나…</p></blockquote><p>라면서 멘붕에 빠지게 되었다.<br>초반에 자바 공부를 할 때는 하루에 5~6시간씩 몰입을 했었지만 지쳤다.<br>가면 갈 수록 집중해지는 시간이 짧아지는 것을 느꼈다.<br>하루에 한 공부에만 몰두할 게 아니라 체계적으로 나눠야할 것 같다.<br>하루에 다 끝낸다는 생각보다는 꾸준히 해서 끝까지 마무리할 생각을 해야겠다.<br>하루에 조금이라도 하는 습관을 길러야겠다.<br>내가 지쳐서 못해먹겠다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 잡동사니 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 잡동사니 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 009일차 - 재귀함수, 클래스 설계, 오버로딩, 가변 인자</title>
      <link href="/2017/02/11/Java-study-009day/"/>
      <url>/2017/02/11/Java-study-009day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-009day/thumb.png" alt=""></p><p>어제는 친구들이랑 노느라 공부를 조금 밖에 못 했다.<br>그만큼 오늘은 좀 빡시게 달려야겠다.  </p><h2 id="재귀함수-recursive-function"><a href="#재귀함수-recursive-function" class="headerlink" title="재귀함수(recursive function)"></a>재귀함수(recursive function)</h2><p>함수 내에서 자기 자신을 호출하는 것이다.<br>배열의 요소를 모두 더하는 메소드는 아래와 같이 작성이 가능하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span> , <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = sumArr(arr);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>이걸 재귀함수로 바꾸면 아래와 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumArr</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; arr.length) &#123; <span class="comment">// 재귀함수를 호출하는 조건</span></span><br><span class="line">            <span class="keyword">return</span> arr[i] + sumArr(arr, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 재귀함수를 탈출하는 조건</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span> , <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = sumArr(arr, <span class="number">0</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 보듯이 재귀 함수에서는 두 가지 조건이 중요하다.  </p><ol><li>호출 조건<br>이게 없으면 재귀함수를 호출하지 않을 것이고, 재귀함수라 불릴 수가 없다.  </li><li>탈출 조건<br>이게 없으면 stack에 무한정 재귀함수가 쌓이게 될 것이다.<br>이렇게 되면 가용 가능한 메모리 영역을 넘어설 것이다.<br>이 때 stack overflow가 발생하는 것이다.<br>아래와 같이 말이다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line">        main(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>for문에 비해 재귀함수는 stack의 많은 공간을 차지하게 된다.<br>또한 매개 변수 복사 및 복귀할 주소 저장 등등의 추가적인 작업이 발생해서 더 느리다.<br>그럼에도 불구하고 재귀함수가 존재하는 이유는 논리적인 간결함이 있기 때문이다.<br>즉 가독성이 좋아져서 유지 보수 함에 있어서 한결 용이해진다는 소리이다.<br>반복문을 썼을 때 코드가 복잡해져서 한 눈에 파악하기 어려운 경우,<br>재귀함수를 한번 고려해보면 좋을 것 같다.<br>하지만 재귀함수는 퍼포먼스가 안 좋아지고, 엄청난 반복을 통해 호출하는 경우에는<br>stack overflow 등등 고려해야할 내용이 있다는 점은 유념해서 써야한다.</p><h2 id="클래스-설계하기"><a href="#클래스-설계하기" class="headerlink" title="클래스 설계하기"></a>클래스 설계하기</h2><h3 id="멤버-변수-클래스-변수-amp-인스턴스-변수-설계하기"><a href="#멤버-변수-클래스-변수-amp-인스턴스-변수-설계하기" class="headerlink" title="멤버 변수(클래스 변수 &amp; 인스턴스 변수) 설계하기"></a>멤버 변수(클래스 변수 &amp; 인스턴스 변수) 설계하기</h3><ol><li>모든 인스턴스에 공통적으로 사용해야하는 변수에는 static 키워드를 붙여 클래스 변수로 만들어준다.<br>인스턴스가 생성되기 전에 프로그램이 시작되면 자동적으로 메모리의 Method Area(Data) 영역에 적재된다.<br>모든 인스턴스가 동일한 주소를 참조하므로 값을 공유하게 된다.<br>공통적으로 사용하려면 값을 공유해야하므로 클래스 변수로 만들어줘야한다.<br>프로그램이 종료될 때까지 메모리에 계속 적재돼있는다.<br><code>클래스 이름.변수</code>와 같이 사용한다.  </li><li>인스턴스 마다 따로 사용해야하는 변수에는 static을 붙이지 않아 인스턴스 변수로 만들어준다.<br>프로그램이 시작되어도 메모리에 자동적으로 적재되지 않는다.<br>new 연산자와 생성자 호출로 인스턴스를 생성해야 비로소 메모리의 Heap 영역에 적재된다.<br>각각의 인스턴스가 다른 주소를 참조하므로 개별적으로 값을 가지게 된다.<br>참조 관계가 끊기는 순간 가비지 컬렉터가 메모리에서 자동적으로 회수해간다.(해제한다.)<br><code>인스턴스 이름.변수</code>와 같이 사용한다.</li></ol><h3 id="메소드-멤버-함수-클래스-메소드-amp-인스턴스-메소드-설계하기"><a href="#메소드-멤버-함수-클래스-메소드-amp-인스턴스-메소드-설계하기" class="headerlink" title="메소드(멤버 함수, 클래스 메소드 &amp; 인스턴스 메소드) 설계하기"></a>메소드(멤버 함수, 클래스 메소드 &amp; 인스턴스 메소드) 설계하기</h3><ol><li>인스턴스 변수를 사용하지 않는 메소드는 static 키워드를 붙여 클래스 메소드로 만드는 게 일반적이다.<br>인스턴스가 생성되기 전에 프로그램이 시작되면 자동적으로 메모리의 Method Area(Data) 영역에 적재된다.<br>하지만 인스턴스 변수가 메소드 내에 존재한다면,<br>존재하지 않는 변수(메모리 공간 상에 할당되지 않은 변수)를<br>참조해야하는 경우가 생기게 되므로 오류를 유발하게 된다.<br>또한 static 키워드를 붙이지 않으면 실행 시 호출되어야할<br>메소드를 찾는 과정이 추가적으로 필요해 퍼포먼스 적으로 안 좋다.<br>프로그램이 종료될 때까지 메모리에 계속 적재돼있는다.<br><code>클래스 이름.메소드()</code>와 같이 사용한다.  </li><li>인스턴스 변수를 사용하는 경우에는 static 키워드를 붙이지 않아 인스턴스 메소드로 만들어야한다.<br>프로그램이 시작되어도 메모리에 자동적으로 적재되지 않는다.<br>생성자 함수를 호출해서 인스턴스를 생성해야 비로소 메모리의 Heap 영역에 적재된다.<br>인스턴스 변수는 인스턴스가 생성되어야지만 메모리에 적재되고, 비로소 사용할 수 있게 된다.<br>이런 인스턴스 변수를 쓰려면 인스턴스가 생성된 이후이므로,<br>메소드도 인스턴스 변수가 생성된 이후에 사용이 가능해지는 것이므로<br>클래스 메소드(인스턴스 변수가 생성되기 이전에 생성됨)로 선언하면 안된다.<br>참조 관계가 끊기는 순간 가비지 컬렉터가 메모리에서 자동적으로 회수해간다.(해제한다.)<br><code>인스턴스 이름.메소드()</code>와 같이 사용한다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 멤버 변수 중 인스턴스 변수</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">3</span>, b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 인스턴스 변수를 쓰므로 인스턴스 메소드로 만들어줌.</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b; <span class="comment">// 인스턴스 변수</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 인스턴스 변수를 쓰지 않으므로 클래스 메소드로 만들어줌.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">// 매개 변수(Parameter) a, b</span></span><br><span class="line">        <span class="keyword">return</span> a + b; <span class="comment">// 지역 변수</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 클래스 변수(변수, 메소드)는 프로그램이 실행되는 순간 자동적으로 메모리의 Method Area(Data)에 할당된다.</span></span><br><span class="line">        <span class="comment">// 같은 클래스 내에 존재하는 클래스 변수(변수, 메소드)는 클래스 이름 생략이 가능하다.</span></span><br><span class="line">        System.out.println(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3, 인자(Argument)로 1과 2를 넘겨준 클래스 메소드</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 인스턴스 변수(변수, 메소드)는 생성자를 통해 인스턴스를 생성하기 전까지 메모리의 Heap에 할당되지 않는다.</span></span><br><span class="line">        test t = <span class="keyword">new</span> test();</span><br><span class="line">        System.out.println(t.add()); <span class="comment">// 5, 인스턴스 변수인 t.a와 t.b를 이용한 인스턴스 메소드</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 멤버 변수 중 인스턴스 변수</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">3</span>, b=<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// static int c = a; // 에러</span></span><br><span class="line">    <span class="comment">// static 컨텍스트에서는 인스턴스 멤버를 사용하려면 먼저 인스턴스를 생성해줘야함.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="keyword">new</span> test().a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 인스턴스 컨텍스트에서는 따로 처리해주지 않아도 됨.</span></span><br><span class="line">        <span class="comment">// 인스턴스 멤버가 존재한다는 것은</span></span><br><span class="line">        <span class="comment">// 클래스 멤버도 존재한다는 가정이기 때문.</span></span><br><span class="line">        <span class="keyword">return</span> a+b+c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return c + a + b; // 에러</span></span><br><span class="line">        <span class="comment">// static 컨텍스트에서는 인스턴스 멤버를 사용하려면 먼저 인스턴스를 생성해줘야함.</span></span><br><span class="line">        <span class="comment">// 클래스 멤버가 존재해도 인스턴스 멤버가 존재하지 않을 수도 있기 때문임.</span></span><br><span class="line">        <span class="comment">// 이럴 경우에는 클래스 메소드가 아닌 인스턴스 메소드를 권장하는 바임.</span></span><br><span class="line">        test t = <span class="keyword">new</span> test();</span><br><span class="line">        <span class="keyword">return</span> t.a + t.b + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="메소드-오버로딩-overloading-과-오버라이딩-overriding"><a href="#메소드-오버로딩-overloading-과-오버라이딩-overriding" class="headerlink" title="메소드 오버로딩(overloading)과 오버라이딩(overriding)"></a>메소드 오버로딩(overloading)과 오버라이딩(overriding)</h2><p>두 개가 너무 헷갈려서 간단하게 정리한다.  </p><ol><li>오버 라이딩<br>ride: 타다<br>부모 클래스로 올라<code>탄다</code>라는 생각으로 외웠다.<br>상속받은 부모 클래스의 메소드를 <code>재정의</code>하는 것.  </li><li>오버 로딩<br>다형성, 메소드 이름이 똑같아도<br><code>매개 변수의 타입</code>, <code>매개 변수의 갯수</code>에 따라<br>호출되는 메소드가 다른 것을 의미.<br><code>매개 변수의 이름</code>과 <code>반환 타입</code>은 중요치 않다.<br>load: 적재하다<br>원래는 하나의 메소드 이름에는 하나의 메소드만 적재해야하는데<br>그걸 초과한 하나의 메소드 이름에 여러 메소드를 적재하기 때문에<br>이런 이름이 붙은 게 아닐까 싶다.<br>이는 동적 타입 언어인 JS에는 없는 기능이다.  </li></ol><h2 id="가변-인자-variable-arguments"><a href="#가변-인자-variable-arguments" class="headerlink" title="가변 인자(variable arguments)"></a>가변 인자(variable arguments)</h2><p>정적 타입 언어인 Java에서는 매개 변수의 갯수가 고정적이었다.<br>동적 타입 언어인 JS를 먼저 접한 나로선 매우 빡빡하다고 생각이 들었다.<br>하지만 Java5부터는 동적으로 지정해줄 수 있게 됐다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">concatenate</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str + str2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">concatenate</span><span class="params">(String str, String str2, String str3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str + str2 + str3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">concatenate</span><span class="params">(String str, String str2, String str3, String str4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str + str2 + str3 + str4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 매개변수가 n개인 메소드를 계속 오버로딩할 것인가?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가변인자를 쓰면 아래와 같이 바꿀 수 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">concatenate</span><span class="params">(String ...str)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(String arg : str) &#123;</span><br><span class="line">            result += arg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가변인자는 내부적으로 배열을 생성한다.<br>이런 비효율이 존재하므로 꼭 필요한 경우에만 가변 인자를 사용해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 가변 인자는 제일 나중에 선언해야 한다.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">concatenate</span><span class="params">(String ...str, <span class="keyword">int</span> num)</span> </span>&#123; <span class="comment">// 에러</span></span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(String arg : str) &#123;</span><br><span class="line">            result += arg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">concatenate</span><span class="params">(String string, String... str)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(String arg : str) &#123;</span><br><span class="line">            result += arg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">concatenate</span><span class="params">(String... str)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(String arg : str) &#123;</span><br><span class="line">            result += arg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String concatenate(String string, String... str)</span></span><br><span class="line">        <span class="comment">// String concatenate(String... str)</span></span><br><span class="line">        <span class="comment">// 둘 중에 뭘 호출해야할지 모르므로 컴파일 에러</span></span><br><span class="line">        System.out.println(concatenate(<span class="string">"2"</span>, <span class="string">"aass"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 008일차 - JVM의 메모리 구조</title>
      <link href="/2017/02/10/Java-study-008day/"/>
      <url>/2017/02/10/Java-study-008day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-008day/thumb.png" alt=""></p><h2 id="JVM의-메모리-구조"><a href="#JVM의-메모리-구조" class="headerlink" title="JVM의 메모리 구조"></a>JVM의 메모리 구조</h2><p>이 글을 보기 전에 아래 글을 참조하면 더 이해가 잘 간다.<br><a href="/2017/02/09/C-ref-004/">(C/C++) 참고용 정리 - 메모리 영역(Code, Data, Stack, Heap)</a>  </p><ul><li>Method Area<br>클래스 데이터가 들어간다.<br>즉 클래스 변수(static 변수)가 들어간다.<br>프로그램 실행되자마자 적재되고 끝날 때까지 사라지지 않는 놈이다.<br>기본적인 메모리 영역의 <a href="/2017/02/09/C-ref-004/#Data">Data</a> 영역에 해당한다.  </li><li>Call Stack<br>메소드가 호출되면 해당 메소드를 콜스택에 push한다.<br>제어권이 이전에 실행 중이던 메소드에서 Stack의 top에 위치한 메소드로 이동하게 된다.<br>이전에 실행 중이던 메소드는 대기 상태가 되고 호출한 메소드의 작업이 끝날 때까지 대기하게 된다.<br>그러면서 해당 메소드 만의 스코프를 생성한다.<br>별도의 스코프를 생성하므로 지역 변수가 이곳에 존재한다.<br>해당 메소드 아래 있는 메소드가 해당 메소드를 호출한 메소드가 된다.<br>JVM은 프로그램이 실행되면 일단 main 메소드를 찾아 콜 스택에 push하게 된다.<br>그리고 메소드의 작업에 필요한 메모리 공간을 콜스택이 제공해주고,<br>작업을 마치게 되면 할당 되었던 메모리 공간은 반한된다.<br>기본적인 메모리 영역의 <a href="/2017/02/09/C-ref-004/#Stack">Stack</a>에 해당한다.  </li><li>Heap<br>클래스의 인스턴스가 생성되는 공간.<br>인스턴스 변수들이 들어간다.<br>new 연산자를 쓰므로 동적 할당이라고 할 수 있다.<br>메모리 상에서 해제는 가비지 컬렉터가 자동으로 수행한다.<br>기본적인 메모리 영역의 <a href="/2017/02/09/C-ref-004/#Heap">Heap</a>에 해당한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++) 참고용 정리 - 클래스의 두 가지 생성 방법</title>
      <link href="/2017/02/09/Cpp-ref-002/"/>
      <url>/2017/02/09/Cpp-ref-002/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Cpp-ref-002/thumb.png" alt=""></p><p>학교에서 클래스를 할당하는 한 가지 방법 밖에 배우지 않았다.<br>동적 할당에 대해서 배우지 않았기 때문인데…<br>왜 학교에서는 이런 심도있는 내용들은 1도 가르쳐주지 않는 걸까?<br>학교에서 이런 내용까지 알려준다면 좀 더 재미나게 수업에 임할 수 있을텐데…<br>정말 안타깝다 ㅠㅠ<br>이해를 돕기 위해 아래 포스트를 한 번 보는 걸 추천한다.<br><a href="/2017/02/09/C-ref-004/">(C/C++) 참고용 정리 - 메모리 영역(Code, Data, Stack, Heap)</a></p><a id="more"></a><h2 id="학교에서-배운-방법-정적-할당"><a href="#학교에서-배운-방법-정적-할당" class="headerlink" title="학교에서 배운 방법(정적 할당)"></a>학교에서 배운 방법(정적 할당)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;num = n;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> num;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test t;</span><br><span class="line">    t.setNum(<span class="number">22</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.getNum() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t; <span class="comment">// 에러, t가 가지고 있는 순수 값은 못 본다. 왜일까? ㅠㅠ</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test 클래스의 인스턴스인 t는 스택 영역에 올라가게 된다.<br>사실 자바를 먼저 배우고 C++을 그 이후에 배워서…<br>자바에서는 저렇게 선언하면 참조변수만 선언한 격이라<br>클래스의 인스턴스가 생성되지 않아서 할 수 있는 게 1도 없었는데…<br>자바에서는 클래스의 정적 할당이 없어서 그랬나 보다.</p><h2 id="학교에서-배우지-않은-방법-동적-할당"><a href="#학교에서-배우지-않은-방법-동적-할당" class="headerlink" title="학교에서 배우지 않은 방법(동적 할당)"></a>학교에서 배우지 않은 방법(동적 할당)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;num = n;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> num;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test *t;</span><br><span class="line">    t = <span class="keyword">new</span> test();</span><br><span class="line">    t -&gt; setNum(<span class="number">22</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t -&gt; getNum() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 22</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t; <span class="comment">// 주소값이 나옴.</span></span><br><span class="line">    <span class="keyword">delete</span> t;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test 클래스의 인스턴스인 t는 힙 영역에 올라가게 된다.<br>즉 메모리 동적 할당을 하게 된 것이고,<br>delete 해주기 전까지 메모리에서 해제되지 않는다.    </p><h3 id="동적-메모리-할당의-과정"><a href="#동적-메모리-할당의-과정" class="headerlink" title="동적 메모리 할당의 과정"></a>동적 메모리 할당의 과정</h3><p>위 코드는 포인터, 자바와도 관련이 있다.<br>어떻게 메모리에 할당되는지 과정을 지켜보자.<br>1.<code>test *t;</code><br><img src="/images/Cpp-ref-002/memory01.png" alt="아직 쓸만한 것은 아무런 내용도 없다."><br>변수의 타입을 test로 지정했다.<br>즉 내가 참조해서 쓸 변수의 타입은 test이다.<br>하지만 test라는 변수 타입은 없으므로 참조 타입이라고 봐야할 것 같다.<br>그 참조 타입은 클래스의 이름인 것 같다.</p><p>2.<code>t = new test();</code>를 두 가지 관점에서 나눠 보자.  </p><ul><li>t = <code>new test();</code><br><img src="/images/Cpp-ref-002/memory02.png" alt="임의의 메모리 공간에 t 클래스의 인스턴스가 생성된다.">  </li><li>t <code>=</code> new test();<br><img src="/images/Cpp-ref-002/memory03.png" alt="임의의 메모리 공간에 생성된 t 클래스의 인스턴스의 주소를 포인터 변수 t에 할당했다."><br>즉 new는 &amp;와 같은 역할을 하는 녀석인 것 같다.<br>기본형 변수 앞에는 <code>&amp;</code>가, 참조형 변수 앞에는 <code>new</code>가 붙는 것 같다.<br>이는 포인터에 변수의 주소를 할당하는 과정과 매우 유사한 것 같다.<br>메모리 공간에 포인터 변수와 실제 변수 두 공간이 필요하게 되고,<br>클래스의 동적 할당에서도 마찬가지로 포인터 변수와 클래스의 인스턴스 두 공간이 필요하기 때문이다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Variable </tag>
            
            <tag> Static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C/C++) 참고용 정리 - 메모리 영역(Code, Data, Stack, Heap)</title>
      <link href="/2017/02/09/C-ref-004/"/>
      <url>/2017/02/09/C-ref-004/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/C-ref-004/thumb.png" alt=""></p><p>프로그램을 실행하게 되면 OS는 메모리(RAM)에 공간을 할당해준다.<br>할당해주는 메모리 공간은 4가지(Code, Data, Stack, Heap)으로 나눌 수 있다.  </p><p><img src="/images/C-ref-004/memory.png" alt="메모리의 구조"><br>이미지 출처: <a href="http://dsnight.tistory.com/50" rel="external nofollow noopener noreferrer" target="_blank">C언어의 메모리 구조</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>우리가 작성한 소스 코드가 들어간다.<br>또한 상수도 여기에 들어간다고 한다.<br>물론 컴파일 된 기계어가 들어갈 것이다.<br>프로그램이 끝날 때까지 메모리에 계속 적재돼있는 놈들이다.  </p><a id="more"></a><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>전역 변수, static 변수 등등이 저장된다.<br>프로그램이 끝날 때까지 메모리에 계속 적재돼있는 놈들이다.  </p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>지역 변수, 매개 변수, 리턴 값 등등이 저장된다.<br>함수 호출 시 생성되고, 함수가 종료되면 시스템에 반환된다.<br>프로그램이 자동으로 사용하는 임시 메모리 영역이다.<br>또한 이름에서 보듯이 Stack 자료구조를 이용해 구현한 것 같다.<br>컴파일 시에 크기가 결정된다.</p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>프로그래머가 할당/해제하는 메모리 공간이다.<br>malloc() 또는 new 연산자를 통해 할당하고,<br>free() 또는 delete 연산자를 통해서만 해제가 가능하다.<br>Java에서는 가비지 컬렉터가 자동으로 해제하는 것 같기도 하다.<br>이 공간에 메모리 할당하는 것을 동적 할당(Dynamic Memory Allocation)이라고도 부른다.<br>런타임 시에 크기가 결정된다.</p><p>Stack 영역이 크면 클 수록 Heap 영역이 작아지고, Heap 영역이 크면 클 수록 Stack 영역이 작아진다.  </p><h3 id="그럼-Heap-영역-동적-할당은-왜-필요한-것일까"><a href="#그럼-Heap-영역-동적-할당은-왜-필요한-것일까" class="headerlink" title="그럼 Heap 영역, 동적 할당은 왜 필요한 것일까?"></a>그럼 Heap 영역, 동적 할당은 왜 필요한 것일까?</h3><ul><li><p>메모리를 효율적으로 관리할 수 있기 때문이지 않을까?<br>임베디드 시스템을 개발하다보면 하드웨어 크기가 매우 작은 경우가 많다.<br>하드웨어 크기가 작다는 것은 메모리의 용량도 작음을 의미한다.<br>뭐 메모리 용량이 클 수도 있지만, 가격이 매우 비싸질 것이다.<br>여튼 그러한 작은 메모리 공간에 프로그래머가 메모리 관리의 달인이라면…<br>컴파일러가 자동으로 할당해주는 것보다 더 효율적인 관리가 가능하지 않을까?  </p></li><li><p>배열의 길이를 사용자가 직접 정하고 싶을 경우<br>이는 매우 단적인 예이고, 실용성이 있는지는 잘 모르겠지만…<br>Heap 영역의 존재 이유를 설명하는 좋은 예가 될 것 같아서 가져와봤다.<br>소스 코드 출처: <a href="http://dsnight.tistory.com/50" rel="external nofollow noopener noreferrer" target="_blank">C언어의 메모리 구조</a>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 정상적인 배열 선언</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 비정상적인 배열 선언</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    <span class="keyword">int</span> arr2[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nsizeof(i): %d"</span>, <span class="keyword">sizeof</span>(i)); <span class="comment">// 4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(arr): %d"</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">// 40</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nsizeof(arr2): %d"</span>, <span class="keyword">sizeof</span>(arr2)); <span class="comment">// 뭐라 꼬집어 말할 수 있을까?</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>main <code>함수</code> 내부에 있는 변수 i와 arr, arr2는 스택 영역에 올라간다.<br>함수 내부에서 쓰인 <code>지역 변수</code>이기 때문이다.<br>이는 컴파일 시에 그 크기가 결정된다.<br>i의 크기는 int이기 때문에 4byte,<br>arr의 크기는 int형 변수 10개가 들어간 것이기 때문에<br>sizeof(int) * 10 = 40byte.<br>arr2의 크기는…?<br>stack 영역에 올라가는 arr2의 크기가 사용자의 입력에 따라서 유동적으로 바뀌게 된다.<br>이는 정상적인 메모리 할당이라고 볼 수 없다.<br>컴파일 시에 메모리의 크기가 결정되는 stack 영역에 올라갔음에도 불구하고,<br>런타임 시에 메모리의 크기가 결정되기 때문에 이는 힙 영역에 올리는 게 맞다고 본다.<br>아직 동적 할당을 제대로 배우지 않았기 때문에 이 이상의 설명과 이해는 힘들 것 같다.</p><h2 id="참고-링크"><a href="#참고-링크" class="headerlink" title="참고 링크"></a>참고 링크</h2><ul><li><a href="http://dsnight.tistory.com/50" rel="external nofollow noopener noreferrer" target="_blank">C언어의 메모리 구조</a>  </li><li><a href="http://sfixer.tistory.com/entry/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%81%EC%97%ADcode-data-stack-heap" rel="external nofollow noopener noreferrer" target="_blank">메모리 영역(code, data, stack, heap)</a>  </li><li><a href="http://ghgus0702.tistory.com/11" rel="external nofollow noopener noreferrer" target="_blank">동적할당과 정적할당</a>  </li><li><a href="http://pacs.tistory.com/entry/CC-Programming-%EC%8A%A4%ED%83%9DStack-%ED%9E%99Heap-%EC%98%81%EC%97%AD" rel="external nofollow noopener noreferrer" target="_blank">[C/C++] 데이터, 스택(Stack), 힙(Heap) 영역</a>  </li><li><a href="http://donghwada.tistory.com/entry/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%81%EC%97%AD-Code-Data-BSS-HEAP-Stack-Little-Endian-Stack%EC%9D%98-%EC%9D%B4%ED%95%B4" rel="external nofollow noopener noreferrer" target="_blank">메모리 영역 (Code, Data, BSS, HEAP, Stack), Little Endian, Stack의 이해</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Variable </tag>
            
            <tag> Static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 007일차 - OOP(객체, 클래스, 인스턴스), new 연산자, 참조 타입, 클래스 변수</title>
      <link href="/2017/02/09/Java-study-007day/"/>
      <url>/2017/02/09/Java-study-007day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-007day/thumb.png" alt=""><br>드디어 오늘부터 객체지향 프로그래밍(OOP, Object Oriented Programming) 파트를 나가기 시작했다.<br>이전까지는 다른 언어에도 대부분 있는 개념이었는데,<br>이제부터는 자바의 특성을 배울 차례인 것 같다.<br>객체 지향 언어는 C++/Javascript 등등이 있으므로 다른 언어를 배울 때도 유익할 것 같다.  </p><a id="more"></a><h2 id="객체-클래스-인스턴스"><a href="#객체-클래스-인스턴스" class="headerlink" title="객체? 클래스? 인스턴스?"></a>객체? 클래스? 인스턴스?</h2><p>객체지향하면 사람들은 클래스를 먼저 떠오르기 마련인 것 같다.<br>하지만 <code>객체 != 클래스</code>이다.<br>객체지향 언어의 하나인 자바스크립트를 통해 보도록 하자.<br>출처: <a href="http://www.nextree.co.kr/p7323/" rel="external nofollow noopener noreferrer" target="_blank">JavaScript : 프로토타입(prototype) 이해</a>  </p><blockquote><p>JavaScript는 클래스라는 개념이 없습니다.<br>그래서 기존의 객체를 복사하여(cloning)<br>새로운 객체를 생성하는 프로토타입 기반의 언어입니다.<br>프로토타입 기반 언어는 객체 원형인 프로토타입을 이용하여 새로운 객체를 만들어냅니다.<br>이렇게 생성된 객체 역시 또 다른 객체의 원형이 될 수 있습니다.<br>프로토타입은 객체를 확장하고 객체 지향적인 프로그래밍을 할 수 있게 해줍니다.</p></blockquote><p>즉, 클래스는 객체를 구현하기 위한 하나의 수단이지 그 자체가 객체는 아니란 것이다.<br>객체는 상태와 행위를 가지는 유형과 무형의 개념(?)이다.<br>실세계에 존재하지 않는 것들이 프로그래밍 세계에서는 객체로서 존재하기도 한다.<br>실세계의 객체로선 불가능한 것이 프로그래밍 세계의 객체로선 가능하기도 하다.<br>하지만 사람들의 이해를 돕기 위해서 실세계와 비교하다보니 오해가 빚어지기도 하는 것 같다.<br>또한 객체를 구현하기 위해 클래스가 월등히 많이 쓰이다 보니 중요하지 않은 것은 아니다.</p><p>이렇게 클래스를 통해 만들어진 놈을 인스턴스라고 부른다.<br>TV(객체) -&gt; TV 설계도(클래스) -&gt; LCD TV(인스턴스)<br>TV(객체) -&gt; TV 설계도(클래스) -&gt; LED TV(인스턴스)<br>뭐 나는 이정도로 이해를 했는데 맞는지 모르것다…</p><h2 id="new-연산자"><a href="#new-연산자" class="headerlink" title="new 연산자"></a>new 연산자</h2><p>이는 기본형(bool, char, byte, short, int, long, float, double)이 아닌 경우에 모두 해당하는 내용이다.<br>기본형이 아닌 경우에 모두 참조 변수이기 때문에<br>클래스의 인스턴스틑 new 연산자를 통해 생성된다.<br>(고 생각할 수 있다. 그 오해를 아래에서 풀어봤다.)<br><code>+ 170213 내용 추가  그 오해가 오해가 아니었다.  생성자로는 인스턴스 생성이 아닌 인스턴스 변수 초기화만 해준다.  new 자체가 인스턴스 생성 + 주소값 반환까지 해주는 녀석이란다.</code><br>예외로 String 클래스는<br>String str = new String(“asdf”);<br>String str = “asdf”;<br>두 가지 모두 허용한다.<br>또한 자바에서 모든 참조 변수는 클래스이다.<br>심지어 문자’열’도 클래스, 즉 참조 변수라는 사실을 알아둬야한다.<br>JS의 Object, Array, Function, RegExp도 해당하는 내용일지는 모르겠으나 아마 해당하지 않을까…싶다.</p><p>기본적으로 클래스를 만들어서 쓰는 과정은 아래와 같다.<br>응집도와 결합도에 내한 내용은 아래 링크를 참조하자.  </p><ul><li><a href="http://lazineer.tistory.com/93" rel="external nofollow noopener noreferrer" target="_blank">결합도(Coupling), 응집도(Cohesion)</a>  </li></ul><p>getter와 setter에 대한 이유는 아래 링크를 참조하자.  </p><ul><li><a href="http://ppomppu.co.kr/zboard/view.php?id=developer&no=6657" rel="external nofollow noopener noreferrer" target="_blank">인스턴스 변수의 getter, setter 설정의 궁금증</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test 패키지 내에 TV 클래스</span></span><br><span class="line"><span class="comment">// 디폴트 패키지의 클래스는 어떻게 import가 안 되는 것 같다.</span></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 외부(test 클래스와 같이)에서는 상태(power, channel 등)는 알 필요 없고,</span></span><br><span class="line">    <span class="comment">// 행위(메소드)와 행위 수행을 위한 입출력 값만 알면 되기 때문에</span></span><br><span class="line">    <span class="comment">// 상태는 숨기고, 행위를 드러내야</span></span><br><span class="line">    <span class="comment">// 결합도는 낮추게 되고, 응집도를 높이게 되므로 유지 보수가 좋은 프로그램이 된다고 알고 있다.</span></span><br><span class="line">    <span class="comment">// 하지만 상태를 알아내야 할 필요도 있기 때문에 getter 메소드를 만드는 것으로 알고 있다.</span></span><br><span class="line">    <span class="comment">// getter와 setter가 존재하는 이유가 </span></span><br><span class="line">    <span class="comment">// 나중에 확장성을 고려했기 때문이라는데 실제로 뭐 그렇게 쓰는지는 모르겠다...</span></span><br><span class="line">    <span class="comment">// 기본 생성자가 없기 때문에 기본값인 false와 0으로 초기화 된다.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> power;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> channel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOnOff</span><span class="params">()</span> </span>&#123; power = !power; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUp</span><span class="params">()</span> </span>&#123; channel++; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelDown</span><span class="params">()</span> </span>&#123; channel--; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChannel</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> channel; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test.TV;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TV t = new TV(); 와 같이 한 줄로 줄여쓰는 게 편하다.</span></span><br><span class="line">        TV t; <span class="comment">// 1번</span></span><br><span class="line">        t = <span class="keyword">new</span> TV(); <span class="comment">// 2번</span></span><br><span class="line">        t.channelUp();</span><br><span class="line">        t.channelUp();</span><br><span class="line">        t.channelUp();</span><br><span class="line">        t.channelUp();</span><br><span class="line">        System.out.println(t.getChannel()); <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++의 클래스를 보고 나니 이 역시 메모리의 동적 할당(heap 영역에 할당)되는 것 같다.<br>자세한 내용은 아래 두 포스트에 설명해놓았다.  </p><ul><li><a href="/2017/02/09/C-ref-004/">(C/C++) 참고용 정리 - 메모리 영역(Code, Data, Stack, Heap)</a>  </li><li><a href="/2017/02/09/Cpp-ref-002/">(C++) 참고용 정리 - 클래스의 두 가지 생성 방법</a>  </li></ul><h3 id="new-연산자의-오해"><a href="#new-연산자의-오해" class="headerlink" title="new 연산자의 오해"></a>new 연산자<del>의 오해</del></h3><p><del>나 또한 이런 오해를 가지고 있었다.</del><br><code>new 연산자를 통해 클래스의 인스턴스가 생성되는구나!</code><br><del>완전히 틀렸다.<br>new 없이도 클래스의 인스턴스의 <code>생성</code>은 가능하다.<br>그 말 뜻을 한 번 파헤쳐보자.</del><br>오해가 아니라 맞는 말이었다.</p><ol><li><p><code>TV t;</code><br><img src="/images/Java-study-007day/memory01.png" alt=""><br>변수의 타입을 TV로 지정했다.<br>하지만 TV라는 변수 타입은 없으므로 참조 타입이라고 봐야할 것 같다.<br>그 참조 변수의 타입은 클래스의 이름인 것 같다.<br>참조 변수는 값을 가지는 게 아니라 참조할 메모리의 주소값을 가진다.<br>하지만 아직 참조 변수 선언만 했으므로 안에는<br>참조 변수의 기본 값인 null이 들어가있을 것이다.</p></li><li><p><code>t = new TV();</code><br>이 부분을 세 가지 관점에서 나눠서 보고자 한다.  </p></li></ol><ul><li>t = new <code>TV()</code>;<br><img src="/images/Java-study-007day/memory02.png" alt=""><br>TV()라는 생성자(여기서는 기본 생성자)만 호출해도<br><del>클래스의 인스턴스는 생성되게 된다.</del><br>인스턴스 변수의 초기화(생성자 호출)만 이루어진다.  </li><li>t = <code>new</code> TV();<br>new라는 키워드는 C언어의 &amp;와 비슷하다고 보면 될 것 같다.<br>해당 변수가 할당된 메모리 상의 주소값을 얻어오는 연산자이다.<br>즉 저 키워드를 씀으로써 rvalue에는 0x1234가 들어가게 된다.  </li><li><em>위와 더불어 인스턴스 생성까지 이루어진다.*</em>  </li><li>t <code>=</code> new TV();<br>= 이라는 대입, 할당 연산자를 사용하여<br>rvalue인 0x1234를 lvalue인 t에 할당, 대입하면서<br>클래스의 인스턴스의 주소를 할당하게 되는 것이다.  </li></ul><p>즉, <code>new</code> 연산자를 통해 클래스의 인스턴스가 생성되는 게 <del>아니라</del> 맞다!!<br><del>주소값만을 얻어내는 연산자이지, 실제로는</del>생정자(TV())를 통해 만들어지게 되는 <del>것이었다</del>게 아니라 생성자로는 인스턴스 변수의 초기화만 이루어진다!!</p><h2 id="데이터-저장-개념의-발전-과정"><a href="#데이터-저장-개념의-발전-과정" class="headerlink" title="데이터 저장 개념의 발전 과정"></a>데이터 저장 개념의 발전 과정</h2><ol><li><p>변수, 하나의 데이터만 저장 가능.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.2</span>;</span><br><span class="line"><span class="keyword">double</span> e = <span class="number">3.3</span>;</span><br><span class="line"><span class="keyword">double</span> f = <span class="number">4.4</span>;</span><br></pre></td></tr></table></figure></li><li><p>배열, 동일한 데이터의 타입들을 저장 가능.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> b[] = &#123;<span class="number">1.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>구조체(C언어에서 등장함), 동일하지 않은 데이터의 타입들도 저장 가능.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> arr[];</span><br><span class="line">    <span class="keyword">double</span> arr2[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>클래스, 동일하지 않은 데이터 타입들 + 함수</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">double</span> b[] = &#123;<span class="number">1.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"얀냐셈!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>C언어와 같은 절차 지향 언어에서는 데이터는 데이터끼리, 함수는 함수끼리 따로 생각을 하였다.<br>하지만 함수는 주로 데이터를 가지고 작업을 하기 때문에<br>객체 지향 언어인 C++과 Java에서는 이 둘을 합친 Class가 등장하게 된 것이다.<br>절차 지향 언어인 C언어에서는 문자열이 문자의 배열에 그치는데 반해<br>객체 지향 언어인 Java에서는 문자열(데이터)과 문자열과 관련된 함수(메소드)를 같이 모아<br>String 클래스로 따로 뺀 이유가 위와 같다.  </p><h3 id="사용자-정의-타입"><a href="#사용자-정의-타입" class="headerlink" title="사용자 정의 타입"></a>사용자 정의 타입</h3><p>기본형(Primitive type) 외에 프로그래머가 서로 관련된 변수들을 묶어서<br>하나의 타입으로 새로 추가하는 것을 사용자 정의 타입(User-defined type)이라고 한다.<br>자바와 같은 객체 지향 언어에서는 클래스가 곧 사용자 정의 타입이다.<br>이 사용자 정의 타입은 프로그래머에 의해 만들어지므로 갯수에 제한이 없다.</p><h3 id="클래스-변수"><a href="#클래스-변수" class="headerlink" title="클래스 변수"></a>클래스 변수</h3><p>클래스의 변수는 멤버 변수(클래스 변수, 인스턴스 변수), 지역 변수로 나뉜다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tt</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 우리 둘은 멤버 변수</span></span><br><span class="line">    <span class="keyword">int</span> a; <span class="comment">// 나는 멤버 변수 중에 인스턴스 변수</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b; <span class="comment">// 나는 멤버 변수 중에 클래스 변수</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t; <span class="comment">// 나는 지역 변수</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스 변수는 클래스가 메모리에 적재되는 순간(import건 class를 선언했건) 만들어진다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV.a = <span class="number">4</span>;</span><br><span class="line">        System.out.println(TV.a); <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV.a = <span class="number">4</span>;</span><br><span class="line">        System.out.println(TV.a); <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 인스턴스 변수는 클래스의 인스턴스를 생성(TV())해야지만 만들어진다.<br>또한 인스턴스 변수는 클래스의 인스턴스마다 고유한 값을 가지지만,<br>클래스 변수는 같은 클래스의 인스턴스라면 모두 그 값을 공유하게 된다.<br>클래스 변수(static 변수)는 같은 주소를 참조하기 때문이다.<br>사용할 때 클래스의 변수는 <code>TV.b</code>와 같이 <code>클래스 이름.변수</code>와 같이 사용하지만<br>인스턴스 변수는 <code>t.a</code>와 같이 <code>인스턴스 이름.변수</code>와 같이 사용한다.<br>물론 클래스 변수도 <code>인스턴스 이름.변수</code>와 같이 사용할 수 있지만,<br>인스턴스 변수와 헷갈리므로 추천하지 않는다.</p><p>궁금해서 예제를 만들어보았으니 <a href="/2017/01/25/C-ref-003/">C언어의 static 변수</a>와 비교해보면 참 재밌다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Java에서는 클래스 외부에 변수를 선언할 수 없다.</span></span><br><span class="line">    <span class="comment">// static 변수는 마치 전역변수와 같다.</span></span><br><span class="line">    <span class="comment">// 왜냐면 다른 클래스에서도 사용이 가능하기 때문이다.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">22</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// static 변수는 어디서나 참조가 가능하다.(물론 접근 지정자에 따라 다르지만)</span></span><br><span class="line">    <span class="comment">// 난 그래서 이 static 변수가 진정한 의미의 전역 변수이고,</span></span><br><span class="line">    <span class="comment">// 인스턴스 변수는 인스턴스가 생성되어야만 사용할 수 있고, 값의 공유가 되지 않기 때문에</span></span><br><span class="line">    <span class="comment">// 가짜 전역 변수라고 생각한다.</span></span><br><span class="line">    <span class="keyword">int</span> b = TV.a;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="keyword">new</span> TV().b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ii = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV.a = <span class="number">4</span>;</span><br><span class="line">        System.out.println(TV.a); <span class="comment">// 4</span></span><br><span class="line">        TV2 t = <span class="keyword">new</span> TV2(); <span class="comment">// TV.a == 4</span></span><br><span class="line">        TV.a = <span class="number">33</span>;</span><br><span class="line">        TV2 t2 = <span class="keyword">new</span> TV2(); <span class="comment">// TV.a == 33</span></span><br><span class="line">        System.out.println(t.b); <span class="comment">// 4</span></span><br><span class="line">        System.out.println(t2.b); <span class="comment">// 33</span></span><br><span class="line">        System.out.println(t2.c); <span class="comment">// 22</span></span><br><span class="line">        System.out.println(ii); <span class="comment">// 123, 같은 클래스 내의 static 변수는 클래스 이름 생략이 가능함.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우선 C언어의 static 변수는 스코프가 지역 변수의 성향을 띄는데 반해<br>Java의 static 변수는 전역 변수의 성향을 띈다.<br>어디서나 접근이 가능하다.<br>하지만 사용하려면 <code>클래스 이름.변수</code>로 적어야해서 좀 불편시럽긴 하다.</p><p>또 하나 특징이 있다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2234</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// static이 붙지 않은 메소드끼리 호출 가능.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static이 붙지 않은 메소드에서 static 메소드 호출 가능.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        d();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static이 붙은 메소드에서 static이 붙지 않은 메소드 호출 불가능.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a(); <span class="comment">// 에러당!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>170211, 내용 추가<br>위 코드에 대한 이유는 아래 링크에서 설명하고 있다.<br><a href="/2017/02/11/Java-study-009day/#메소드-멤버-함수-클래스-메소드-amp-인스턴스-메소드-설계하기">(Java) 자바의 정석 3판 009일차 정리</a></li></ul><p>머리가 아프당…<br>나머지 개념은 내일이나 나중에 정리해야겠다.</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(자작) 동적 테이블 생성기</title>
      <link href="/2017/01/31/dynamic-table-generator/"/>
      <url>/2017/01/31/dynamic-table-generator/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/dynamic-table-generator/thumb.png" alt="">  </p><h2 id="개발-배경"><a href="#개발-배경" class="headerlink" title="개발 배경"></a>개발 배경</h2><p>예전부터 테이블 태그는 참 헷갈렸다.<br>어떤 게 행이고 어떤 게 열인지…<br>가끔은 행과 열 조차도 헷갈렸다.  </p><ol><li>scope=”row”, scope=”col”  </li><li>rowspan, colspan  </li><li>row, col</li></ol><p>그래서 그냥 내 맘대로 합치고 바꾸고 제목 설정하고 싶었다.<br>한글이나 엑셀에서는 가능한 것 같지만 HTML에서는 불가능 한 것 같았다.<br>그러한 불편함을 감수하고자 1년 전에 몇 시간동안 간단히 만든 적이 있다.<br><a href="http://jsfiddle.net/czfdLkhq/4/" rel="external nofollow noopener noreferrer" target="_blank">동적 테이블 생성 초기 버전</a>  </p><a id="more"></a><p>하지만 그냥 써보기만 해도 문제가 참 많다는 걸 알 수 있다.<br>그렇게 기억 속에 묻혀있었는데, 어느 한 분께서 친절하게 해당 사항에 대해 얘기를 꺼내셨고,<br>설날에 잉여였던 나는 길어야 2일 걸릴 줄 알았는데, 4일 밤낮을 샌 것 같다…<br><a href="https://perfectacle.github.io/dynamic-table-generator/">동적 테이블 생성기 v1.0</a></p><p>혹시 미천한 프로젝트가 궁금하시거나 개선하고 싶으신 분은 아래 링크로 들어가길 바란다.<br>(스타도 박아주심 헤헤헤…)<br><a href="https://github.com/perfectacle/tbl-maker" rel="external nofollow noopener noreferrer" target="_blank">동적 테이블 깃헙 링크</a>  </p><h2 id="사용-방법"><a href="#사용-방법" class="headerlink" title="사용 방법"></a>사용 방법</h2><h3 id="기본-사용-방법"><a href="#기본-사용-방법" class="headerlink" title="기본 사용 방법"></a>기본 사용 방법</h3><p>기본적인 사용 방법은 아래와 같다.<br>제목행(th scope=”col”), 제목열(th scope=”row”)<br>캡션, colspan, rowspan에 중점을 뒀다.<br><img src="/images/dynamic-table-generator/01.gif" alt="">  </p><p><img src="/images/dynamic-table-generator/02.gif" alt=""></p><h3 id="수정-모드"><a href="#수정-모드" class="headerlink" title="수정 모드"></a>수정 모드</h3><p>초기 버전과는 다르게 수정모드도 붙여 보았다.<br>엔터를 누르면 저장, ESC를 누르면 취소가 된다.<br><img src="/images/dynamic-table-generator/03.gif" alt="">  </p><p><img src="/images/dynamic-table-generator/04.gif" alt=""></p><h3 id="JSON-사용자-편의-고려"><a href="#JSON-사용자-편의-고려" class="headerlink" title="JSON, 사용자 편의 고려"></a>JSON, 사용자 편의 고려</h3><p>표가 복잡하면 다시 새롭게 만들기 귀찮은데,<br>이런 유저를 위해 제이슨 형태로 저장할 수 있게 제공하였다.<br><img src="/images/dynamic-table-generator/05.gif" alt=""></p><h3 id="하지만-가독성이-구린-문제점이…-지못미…"><a href="#하지만-가독성이-구린-문제점이…-지못미…" class="headerlink" title="하지만 가독성이 구린 문제점이… 지못미…"></a>하지만 가독성이 구린 문제점이… 지못미…</h3><p>제이슨에서 다른 셀과 구분 짓기 위해 병합된 셀의 정보는 다음과 같이 나타난다.<br><code>%데이터:rowspan,colspan%</code><br>병합된 셀은 <code>%collapsedCell%</code>과 같이 나타냈다.<br>가독성이 안 좋지만 딱히 방법이 떠오르지 않았다… ㅠㅠ<br>여하튼 이렇게 가독성이 구린 데이터를 함부로 손 댔다가는 테이블 조차 만들 수도 없을 것이다.<br><img src="/images/dynamic-table-generator/06.gif" alt=""></p><h3 id="셀-병합에-있어서-또-다른-문제점"><a href="#셀-병합에-있어서-또-다른-문제점" class="headerlink" title="셀 병합에 있어서 또 다른 문제점"></a>셀 병합에 있어서 또 다른 문제점</h3><p>또한 제목 행은 &lt;thead&gt; 안에 있고, 나머지 행은 &lt;tbody&gt;에 있기 때문에<br>제목 행과 다른 행을 합칠 순 없다.<br><img src="/images/dynamic-table-generator/07.gif" alt=""></p><h3 id="백업은-필수"><a href="#백업은-필수" class="headerlink" title="백업은 필수"></a>백업은 필수</h3><p>테이블을 새로 생성하면 기존 데이터는 날아가기 때문에<br>귀찮더라도 제이슨 데이터는 항상 백업해두자.<br><img src="/images/dynamic-table-generator/08.gif" alt=""></p><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>내가 이 짓을 할 시간에 리액트, 자바, ES6 등등을 공부했더라면<br>엄청나게 많은 지식을 습득했을 것 같은데 그래도 후회는 없다.  </p><p><img src="/images/dynamic-table-generator/09.png" alt="테스트 코드만 하루 반 나절은 작성한 것 같다."><br>일단 지금 공부하고 있는 자스민, 카르마를 연동해서 TDD를 해보았다.(+ESLint)<br>TDD가 없었다면 이 많은 케이스를 테스트 할 엄두가 나지 않았을 것이다.<br>물론 아직도 귀찮거나 미처 테스트하지 못한 케이스들이 존재할테지만…<br>어느정도 예상 가는 부분드은 중간중간 앱을 먼저 개발하기도 했다.<br>또한 처음엔 규모가 별로 크지 않을 줄 알고 script.js 파일 하나 안에 다 때려 박았다가<br>도저히 감당이 안 돼서 객체 지향의 원리를 곱씹어봐서 쪼개긴 했는데…<br>매우 허술하고 설계를 먼저 끝내고 코딩을 한 게 아니라<br>생각나는 대로 쪼개고 귀찮으면 하나에 몰아넣기도 한 것 같다.<br>또한 모듈로 쪼개다보니 어쩔 수 없이 웹팩을 쓰게 됐고 바벨까지 얹어서<br>복습할 좋은 기회가 된 것 같다.<br>또한 뷰나 리액트로 만들었으면 좋았을 것 같은데, 너무 산으로 가는 느낌과<br>공부하려면 시간이 곱절로 들 것 같아서 일단 포기.  </p><p>주절주절 많은 걸 쓰고 느낀 것 같다…<br>이런 것도 포트폴리오로 쓸 수 있으려나??</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 자작 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> Computer </tag>
            
            <tag> HTML </tag>
            
            <tag> Table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6+) ajax를 위한 fetch와 async/await</title>
      <link href="/2017/01/25/ES6-ajax-with-fetch/"/>
      <url>/2017/01/25/ES6-ajax-with-fetch/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-ajax-with-fetch/thumb.png" alt=""><br>이 글을 읽기 전에 <a href="/2017/01/21/ES6-Promise-with-ajax/">(ES6) ajax 위주의 promise 실습</a>를 먼저 읽을 것을 권한다.<br>ajax(XMLHttpRequest)와 promise에 대한 기본적인 이해가 있다면 상관없긴 하다.<br><a href="https://www.facebook.com/zerohch0?fref=ufi" rel="external nofollow noopener noreferrer" target="_blank">조현영</a> 님의 제보에 의하면 ie에서 fetch가 안 되고,<br>async/await 크롬과 오페라에서만 된다고 한다.<br>아래 사이트에서 확인 가능하다.<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#Browser_compatibility" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#Browser_compatibility</a><br><a href="http://kangax.github.io/compat-table/es2016plus/#test-async_functions" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript Next compatibility table</a></p><a id="more"></a><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>다시 공부하다보니 XMLHttpRequest와 Fetch는 ECMAScript가 아니라고 한다.<br>브라우저에서만 쓰이는 API이기 때문에 babel에서도 지원해주지 않기 때문에<br>크로스 브라우징을 위해선 <a href="https://github.com/github/fetch" rel="external nofollow noopener noreferrer" target="_blank">window.fetch polyfill</a>을 쓰자.<br>우선 기존에 우리가 ajax를 하기 위해서 어떻게 했는지 보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = <span class="string">"https://perfectacle.github.io/mock/test.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataAjax = <span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123; <span class="comment">// 4 means request is done.</span></span><br><span class="line">      <span class="keyword">if</span>(xhr.status === <span class="number">200</span>) &#123; <span class="comment">// 200 means status is successful</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> xhr.response) &#123; <span class="comment">// 받아온 json 데이터의 키와 값의 쌍을 모두 출력.</span></span><br><span class="line">          <span class="keyword">if</span>(xhr.response.hasOwnProperty(key))</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;xhr.response[key]&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 통신 상에 오류가 있었다면 오류 코드를 출력.</span></span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`http status code: <span class="subst">$&#123;xhr.status&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getDataAjax(jsonURL);</span><br></pre></td></tr></table></figure><p>이 복잡한 getDataAjax 부분을 줄여보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = <span class="string">"https://perfectacle.github.io/mock/test.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataAjaxFetch = <span class="function"><span class="params">url</span> =&gt;</span> (</span><br><span class="line">  fetch(url).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">getDataAjaxFetch(jsonURL).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123; <span class="comment">// 받아온 json 데이터의 키와 값의 쌍을 모두 출력.</span></span><br><span class="line">    <span class="keyword">if</span>(data.hasOwnProperty(key))</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure><p>fetch API는 XMLHttpRequest를 대신하기 위한 방안 중 하나이다.<br>아직 표준안은 아니고, 크롬에서 당장 사용이 가능하다.<br>자세한 설정은 <a href="https://davidwalsh.name/fetch" rel="external nofollow noopener noreferrer" target="_blank">fetch API</a>을 확인하자.</p><p>그럼 대충 fetch를 뜯어보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(fetch(<span class="string">"https://perfectacle.github.io/mock/test.json"</span>));</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-ajax-with-fetch/01.png" alt="크롬 콘솔창에서 본 fetch의 반환값"><br>Promise 인스턴스가 반환된다.<br>Promise에서 실제로 쓰고 싶은 값은 [[PromiseValue]]에 들어있는데 이를 직접 접근하지 못한다.<br>따라서 then() 메소드를 써야한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://perfectacle.github.io/mock/test.json"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.dir(res));</span><br></pre></td></tr></table></figure><p>![크롬 콘솔창에서 본 [[PromiseValue]]의 반환값](/images/ES6-ajax-with-fetch/02.png)<br>반환된 결과를 보니 Response의 인스턴스가 반환됐다.<br>처음 보는 놈이다.<br>뭐 쓰고 싶은 값을 찾아낼 수가 없다.<br>여기서 또 하나의 메소드를 쓰면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://perfectacle.github.io/mock/test.json"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.dir(res.json()));</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-ajax-with-fetch/03.png" alt="Response 인스턴스의 JSON화"><br>Response 인스턴스는 문자열이 아니다.<br>따라서 toJSON() 대신에 json() 메소드를 쓰면 json 형태로 바꿀 수 있다.<br>바꿨더니 또 promise 인스턴스다.<br>[[PromiseValue]]를 한 번 더 벗겨야한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://perfectacle.github.io/mock/test.json"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.dir(data));</span><br></pre></td></tr></table></figure><p>![또 다시 벗겨낸 [[PromiseValue]]](/images/ES6-ajax-with-fetch/04.png)<br>드디어 우리가 원하는 값을 얻어냈다.<br>기존의 XMLHttpRequest와 Promise를 사용했을 때보다 then을 한 번 더 타야한다는 단점이 있다.<br>근데 뭐 간단해지니 장점이 더 많은 것 같다.  </p><p>그럼 기존 XMLHttpRequest와 Fetch를 비교해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = [</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test.json"</span>,</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test2.json"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise에 파라미터를 넘겨주기 위해선 밖에서 함수로 한 번 래핑해줘야 함.</span></span><br><span class="line"><span class="keyword">const</span> getDataAjaxPromise = <span class="function"><span class="params">url</span> =&gt;</span> (</span><br><span class="line">  <span class="comment">// thenable하게 하기 위해 Promise 인스턴스를 리턴.</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123; <span class="comment">// 4 means request is done.</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status === <span class="number">200</span>) &#123; <span class="comment">// 200 means status is successful</span></span><br><span class="line">          res(xhr.response); <span class="comment">// 성공했을 시 실행할 콜백 함수.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rej(xhr.status); <span class="comment">// 실패했을 시 실행할 콜백 함수.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 성공 콜백함수는 공통 함수로 빼버렸다.</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line">getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="comment">// promise 인스턴스에 파라미터를 넘기기 위해선 다시 함수를 호출해야하고,</span></span><br><span class="line">  <span class="comment">// thenable 하게 만들어야하기 때문에 함수의 반환값(프라미스 인스턴스)을 리턴해줘야함.</span></span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 더 이상 비동기로 처리할 내용이 없으므로 return문은 필요 없어짐.</span></span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> res(data))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">`http status code: <span class="subst">$&#123;err&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = [</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test.json"</span>,</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test2.json"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 성공 콜백함수는 공통 함수로 빼버렸다.</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span>(data.hasOwnProperty(key))</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataFetch = <span class="function"><span class="params">url</span> =&gt;</span> (</span><br><span class="line">  fetch(url).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 부분은 promise와 크게 차이나진 않는다.</span></span><br><span class="line">getDataFetch(jsonURL[<span class="number">0</span>])</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataFetch(jsonURL[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> res(data))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure><h2 id="async-amp-await-ES2017"><a href="#async-amp-await-ES2017" class="headerlink" title="async &amp; await (ES2017)"></a>async &amp; await (ES2017)</h2><p>여기서 끝내기 아쉬우니 한번 코드를 Promise의 단점을 보완해보자.<br>요놈은 아직 표준 확정은 아니다. (ES2017이 나온 게 아니니…)<br>그래도 뭐 크롬에서 돌아가니 한 번 알아보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = [</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test.json"</span>,</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test2.json"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataFetch = <span class="function"><span class="params">url</span> =&gt;</span> (</span><br><span class="line">  fetch(url).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 성공 콜백함수는 공통 함수로 빼버렸다.</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span>(data.hasOwnProperty(key))</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async 함수 안에서 비동기 코드 앞에 await를 붙여주면 된다.</span></span><br><span class="line"><span class="comment">// 안타깝게도 async '함수'라서 호출을 위해 즉시 실행함수를 사용했다.</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// try-catch 문으로도 완벽하게 오류를 잡아낸다.</span></span><br><span class="line">  <span class="comment">// 하지만 에러코드가 제대로 출력되지 않는다.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">0</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">1</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test2: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">0</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">0</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">1</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test2: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">1</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test2: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">0</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">1</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test2: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">0</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test: hi</span></span><br><span class="line">    <span class="keyword">await</span> getDataFetch(jsonURL[<span class="number">1</span>]).then(<span class="function"><span class="params">data</span> =&gt;</span> res(data)); <span class="comment">// test2: hi</span></span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123; <span class="comment">// 하나의 통신이라도 실패하면 뒤에 오는 통신은 씹어버린다.</span></span><br><span class="line">    <span class="built_in">console</span>.error(err); <span class="comment">// 직접 URL을 틀리게 입력해서 오류를 뭐라고 뿜는지 보자.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>Promise, Fetch, Async/Await 모두 수박 겉핥기 식으로 공부해서<br>글에 부족한 부분이 매우 많을 것이니 무한 태클 환영합니다~<br>제가 들은 말로 정리를 해보자면…</p><ul><li>콜백 함수<br>ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ㄴ  </li><li>Promise(Fetch 또한 Promise를 쓰는 것)<br>ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;ㄴ<br>&nbsp;&nbsp;ㄴ  </li><li>Async/Await<br>ㄴ<br>ㄴ<br>ㄴ<br>ㄴ<br>ㄴ<br>ㄴ<br>ㄴ<br>ㄴ<br>ㄴ  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ajax </tag>
            
            <tag> ES2015+ </tag>
            
            <tag> ES6+ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C/C++) 참고용 정리 - 전역 변수 vs 지역 변수 vs static 변수</title>
      <link href="/2017/01/25/C-ref-003/"/>
      <url>/2017/01/25/C-ref-003/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/C-ref-003/thumb.png" alt=""> </p><ul><li>전역 변수(Global Variable)  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var = <span class="number">3</span>; <span class="comment">// 전역변수</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    var++; <span class="comment">// 어디서나 접근 가능</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, var); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    add();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, var); <span class="comment">// 4, 값의 유지</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ol><li>값의 유지  </li><li>어디에서든 접근 가능  </li><li>main 함수 실행 전에, 프로그램이 실행되자 마자 메모리에 할당됨.  </li><li>프로그램이 끝나는 순간 메모리에서 해제됨.  </li><li>메모리의 Data 영역에 적재됨.<br>&nbsp;<br>2번의 이유로 인해서 변수의 스코프가 더럽혀진다.<br>더럽혀진다는 의미는 변수 이름의 충돌 가능성이 존재하고,<br>그로 인해 변수 이름 짓기에 큰 시간을 할애해야 하며,<br>변수의 이름이 길어지거나 이상해지는 경우도 존재한다.<br>어디서나 접근 가능하기 때문에 실수로 변수의 값이 바뀔 가능성이 존재한다.<br>뭐 그렇다고 해서 꼭 안 좋은 것만은 아니기 때문에 적절히 활용하면 된다.</li></ol><ul><li>지역 변수(Local Variable)  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var = <span class="number">3</span>; <span class="comment">// 전역변수</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var = <span class="number">4</span>;</span><br><span class="line">    var++;</span><br><span class="line">    <span class="comment">// 지역 변수의 우선순위가 전역 변수보다 높음.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, var); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123; <span class="comment">// block scope</span></span><br><span class="line">        <span class="keyword">int</span> asdf = <span class="number">33</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, asdf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("%d", asdf); // 스코프를 벗어나서 컴파일 오류가 남.</span></span><br><span class="line">    add();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, var); <span class="comment">// 3, 값의 유지가 안 됨.</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 지역 변수 i의 scope 시작</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, i); <span class="comment">// 0 1 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 지역 변수 i의 scope 끝</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%d"</span>, i); <span class="comment">// 0, 여기서 나온 건 전역 변수 i</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>매번 새로운 값 생성, 값의 유지가 안 됨.  </li><li>지정된 블록 스코프(제어문, 함수 등등)에서만 접근 가능  </li><li>함수가 실행되는 순간마다 메모리에 할당됨.  </li><li>함수가 종료되는 순간마다 메모리에서 해제됨.  </li><li>메모리의 Stack 영역에 적재됨.<br>&nbsp;<br>값이 유지되지 않기 때문에 함수를 실행할 때마다 매번 똑같은 값을 써야할 때 쓴다.<br>스코프 내에서만 접근 가능하기 때문에 유지보수에 용이하다.<br>가능하면 스코프의 범위는 좁은 게 유지보수하기 편하다고 들었다.  </li></ol><ul><li>static 변수  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> var = <span class="number">4</span>;</span><br><span class="line">    var++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, var); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    add(); <span class="comment">// 5</span></span><br><span class="line">    add(); <span class="comment">// 6</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>값의 유지  </li><li>지정된 블록 스코프(제어문, 함수 등등)에서만 접근 가능  </li><li>main 함수 실행 전에, 프로그램이 실행되자 마자 메모리에 할당됨.  </li><li>프로그램이 끝나는 순간 메모리에서 해제됨.  </li><li>메모리의 Data 영역에 적재됨.<br>&nbsp;<br>값이 유지돼야 하지만, 유지보수 등등 때문에 전역변수도, 지역변수도 마땅치 않을 때가 있다.<br>이럴 때 쓰는 게 static 변수이다.<br>값이 유지 된다는 전역 변수의 특징과 지정된 스코프에서만 접근 가능하다는 지역 변수가 짬뽕된 케이스이다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Variable </tag>
            
            <tag> Static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 006일차 - 배열</title>
      <link href="/2017/01/24/Java-study-006day/"/>
      <url>/2017/01/24/Java-study-006day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-006day/thumb.png" alt=""></p><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><p>Java에서는 길이가 0인 배열의 선언도 가능하다.<br>또한 길이는 int 범위의 양의 정수이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 둘 다 가능하지만 후자가 C/C++에서 먹히는 스타일이라 이식성이 높다고 생각한다.</span></span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">boolean</span> flag[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 배열을 초기화하지 않으면 기본값으로 초기화 돼서 나온다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length; i++) System.out.println(num[i]); <span class="comment">// 0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;flag.length; i++) System.out.println(flag[i]); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> num2[] = <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1.1</span>, <span class="number">4.5</span>&#125;; <span class="comment">// 선언과 동시에 초기화.</span></span><br><span class="line">        <span class="keyword">double</span> num3[] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">5</span>]&#123;<span class="number">1.1</span>, <span class="number">4.5</span>&#125;; <span class="comment">// 길이를 지정해주면 오류가 난다.</span></span><br><span class="line">        <span class="keyword">double</span> num4[] = &#123;<span class="number">1.5</span>, <span class="number">3.14</span>, <span class="number">15</span>&#125;; <span class="comment">// 선언과 동시에 초기화 할 때는 new 연산자를 뺄 수 있다.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 선언과 초기화를 따로 할 때는 new 연산자를 써서 할당까지 해주어야 한다.</span></span><br><span class="line">        <span class="keyword">double</span> num5[];</span><br><span class="line">        num5 = <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">33.123</span>, <span class="number">51.792</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 아래와 같은 경우를 불허한다.</span></span><br><span class="line">        <span class="keyword">double</span> num6[] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">123</span>];</span><br><span class="line">        num6 = &#123;<span class="number">123.22</span>, <span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 수정할 때는 new 연산자를 써서 새로 만들어줘야한다.</span></span><br><span class="line">        num2 = <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>, <span class="number">111.33</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 아래 세 문장은 배열의 길이가 0이다.</span></span><br><span class="line">        <span class="keyword">int</span> num7[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        <span class="keyword">int</span> num8[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> num9[] = &#123;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// import java.util.Arrays;</span></span><br><span class="line">        <span class="comment">// java 패키지의 utill 패키지의 Arrays 클래스에 있는 toString이라는 메소드를 쓴다.</span></span><br><span class="line">        System.out.println(Arrays.toString(num4)); <span class="comment">// [1.5, 3.14, 15.0]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// char 배열은 for 문이나 다른 메소드를 안 써도 된다.</span></span><br><span class="line">        <span class="keyword">char</span> ch[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">        System.out.println(ch); <span class="comment">// hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="배열을-복사하는-방법"><a href="#배열을-복사하는-방법" class="headerlink" title="배열을 복사하는 방법"></a>배열을 복사하는 방법</h3><ul><li><p>하드코딩(비효율적)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 배열의 길이를 늘리고 싶다고 생각하면 아래와 같이 복사해야한다.</span></span><br><span class="line">        <span class="keyword">int</span> arrNum[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> arrNumLen = arrNum.length;</span><br><span class="line">        <span class="comment">// 배열의 길이가 너무 길어지면 메모리에 부담이 되므로 x2 정도가 적당하다.</span></span><br><span class="line">        <span class="keyword">int</span> tmp[] = <span class="keyword">new</span> <span class="keyword">int</span>[arrNumLen*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for 문을 돌리는 부분에서도 상당한 비용을 소모한다.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arrNumLen; i++) &#123;</span><br><span class="line">            tmp[i] = arrNum[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        arrNum = tmp;</span><br><span class="line">        <span class="comment">// 원본 배열과의 참조 관계가 끊겼다는 걸 알 수 있다.</span></span><br><span class="line">        <span class="comment">// 즉 원본 배열 [1, 2, 3, 4, 5]는 가비지 컬렉팅 대상이 된다.</span></span><br><span class="line">        System.out.println(arrNum.length); <span class="comment">// 10</span></span><br><span class="line">        System.out.println(Arrays.toString(arrNum)); <span class="comment">// [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>내장된 API 사용(효율적)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 배열의 길이를 늘리고 싶다고 생각하면 아래와 같이 복사해야한다.</span></span><br><span class="line">        <span class="keyword">int</span> arrNum[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> arrNumLen = arrNum.length;</span><br><span class="line">        <span class="comment">// 배열의 길이가 너무 길어지면 메모리에 부담이 되므로 x2 정도가 적당하다.</span></span><br><span class="line">        <span class="keyword">int</span> tmp[] = <span class="keyword">new</span> <span class="keyword">int</span>[arrNumLen*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for 문은 요소 하나하나마다 접근하지만</span></span><br><span class="line">        <span class="comment">// 배열은 연속된 메모리 공간이라는 점을 활용하여</span></span><br><span class="line">        <span class="comment">// arraycopy 메소드는 하나의 값으로 취급하여 접근한다고 한다.</span></span><br><span class="line">        System.arraycopy(arrNum, <span class="number">0</span>, tmp, <span class="number">0</span>, arrNumLen);</span><br><span class="line"></span><br><span class="line">        arrNum = tmp;</span><br><span class="line">        <span class="comment">// 원본 배열과의 참조 관계가 끊겼다는 걸 알 수 있다.</span></span><br><span class="line">        <span class="comment">// 즉 원본 배열 [1, 2, 3, 4, 5]는 가비지 컬렉팅 대상이 된다.</span></span><br><span class="line">        System.out.println(arrNum.length); <span class="comment">// 10</span></span><br><span class="line">        System.out.println(Arrays.toString(arrNum)); <span class="comment">// [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="String-클래스의-배열"><a href="#String-클래스의-배열" class="headerlink" title="String 클래스의 배열"></a>String 클래스의 배열</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str[] = <span class="keyword">new</span> String[<span class="number">3</span>]; <span class="comment">// [null, null, null]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// String은 기본형이 아니기 때문에 전자와 같이 써야하지만 후자와 같이 간편히 쓰는 걸 허용한다.</span></span><br><span class="line">        <span class="comment">// 그리고 기본형이 아닌 참조 변수이기 때문에 값이 아닌 주소가 아닌 객체의 주소가 담겨있다.</span></span><br><span class="line">        <span class="comment">// 객체의 주소는 그냥 임의대로 넣은 거니 크게 의미를 담지 말길 바란다.</span></span><br><span class="line">        String str2[] = &#123;<span class="keyword">new</span> String(<span class="string">"asdf"</span>), <span class="keyword">new</span> String(<span class="string">"qwer"</span>)&#125;; <span class="comment">// [0x100, 0x200]</span></span><br><span class="line">        String str3[] = &#123;<span class="string">"asdf"</span>, <span class="string">"qwer"</span>&#125;; <span class="comment">// [0x400, 0x500]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 클래스는 char 배열에 기능을 추가하여 확장한 것.<br>객체 지향 이전의 절차 지향의 C언어의 경우에는<br>데이터와 기능을 따로 다루었지만(그래서 char 배열로 문자열을 표현),<br>객체 지향 개념인 Java에서는 데이터와 그와 관련된 기능을 하나의 클래스로 묶음.<br>기능 = 함수 = 메소드라고 보면 된다.  </p><p>하지만 char 배열과 달리 String 클래스는 내용의 변경이 불가능하다.<br>변경 가능한 String 클래스는 StringBuffer라는 클래스가 따로 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"asd"</span>;</span><br><span class="line">        str += <span class="string">"8"</span>; <span class="comment">// 변경되는 게 아니라 새로운 문자열이 생성된 것이다.</span></span><br><span class="line">        System.out.println(str); <span class="comment">// asd8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 클래스와 char 배열의 변환은 아래와 같다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch[] = &#123;<span class="string">'h'</span>, <span class="string">'i'</span>&#125;;</span><br><span class="line">        String str = <span class="keyword">new</span> String(ch);</span><br><span class="line">        <span class="keyword">char</span> ch2[] = str.toCharArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="향상된-for문"><a href="#향상된-for문" class="headerlink" title="향상된 for문"></a>향상된 for문</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            num = <span class="number">1</span>; <span class="comment">// 값이 변경 될까?</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            System.out.print(num ); <span class="comment">// 4 5 6</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> nums2[][] = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 이중 배열 안에 있는 놈도 배열이므로</span></span><br><span class="line">        <span class="comment">// int num2[]와 같이 해줘야 함.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num2[] : nums2) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : num2) &#123;</span><br><span class="line">                System.out.print(num);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다차원-배열"><a href="#다차원-배열" class="headerlink" title="다차원 배열"></a>다차원 배열</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">        <span class="comment">// 아래와 같은 형태의 배열이 됨.</span></span><br><span class="line">        <span class="comment">// 정사각형이 아닌 배열을 만들 수 있게 됨.</span></span><br><span class="line">        <span class="comment">// int int</span></span><br><span class="line">        <span class="comment">// int int int</span></span><br><span class="line">        <span class="comment">// int int int int</span></span><br><span class="line">        nums[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        nums[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="comment">// 아래와 같은 것도 가능하다.</span></span><br><span class="line">        <span class="keyword">int</span> nums2[][] = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가변 배열 문제만 보고 있다보니 드럽게 재미없다.<br>좀 쉬다가 다른 공부나 해야지…</p><p>+ 내용 추가(170125)</p><h2 id="연습문제-오답-정리"><a href="#연습문제-오답-정리" class="headerlink" title="연습문제 오답 정리"></a>연습문제 오답 정리</h2><ul><li>배열의 잘못된 선언 및 초기화<br>b. int[] arr = {1,2,3,}; // 마지막의 쉼표는 있어도 상관없음.<br>d. int[] arr = new int[5]{1,2,3,4,5}; // 두 번째 대괄호[]에 숫자 넣으면 안됨.<br>e. int arr[5]; // 배열을 선언만 할 때는 배열의 크기를 지정할 수 없음.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 배열 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ASM) 참고용 정리 - 리틀 엔디안, 빅 엔디안</title>
      <link href="/2017/01/24/ASM-ref-002/"/>
      <url>/2017/01/24/ASM-ref-002/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ASM-ref-002/thumb.png" alt=""><br>엔디안은 시스템 프로그래밍에서 많이 쓰이는 용어이다.<br>엔디안은 메모리의 저장 및 처리 방식을 말하는 것이다.<br>이는 바이트 순서(Byte Order)와도 큰 관련이 있다.</p><ol><li>빅 엔디안(Big Endian)<br>메모리의 높은 번지 부터 저장하는 방식<br>MSB(Most Significant Byte), 최상위 바이트부터 차례로 저장한다.  </li><li>리틀 엔디안(Little Endian)<br>메모리의 낮은 번지 부터 저장 하는 방식<br>LSB(Least Significant Byte), 최하위 바이트부터 차례로 저장한다.  </li></ol><a id="more"></a><p>4바이트에 값이 저장되는 방식을 알아보자.</p><table><thead><tr><th>10진수</th><th>빅 엔디안</th><th>리틀 엔디안</th></tr></thead><tbody><tr><td>0</td><td>0x00000000</td><td>0x00000000</td></tr><tr><td>1</td><td>0x00000001</td><td>0x01000000</td></tr><tr><td>2</td><td>0x00000002</td><td>0x02000000</td></tr><tr><td>3</td><td>0x00000003</td><td>0x03000000</td></tr><tr><td>4</td><td>0x00000004</td><td>0x04000000</td></tr><tr><td>5</td><td>0x00000005</td><td>0x05000000</td></tr><tr><td>6</td><td>0x00000006</td><td>0x06000000</td></tr><tr><td>7</td><td>0x00000007</td><td>0x07000000</td></tr><tr><td>8</td><td>0x00000008</td><td>0x08000000</td></tr><tr><td>9</td><td>0x00000009</td><td>0x09000000</td></tr><tr><td>10</td><td>0x0000000A</td><td>0x0A000000</td></tr><tr><td>11</td><td>0x0000000B</td><td>0x0B000000</td></tr><tr><td>12</td><td>0x0000000C</td><td>0x0C000000</td></tr><tr><td>13</td><td>0x0000000D</td><td>0x0D000000</td></tr><tr><td>14</td><td>0x0000000E</td><td>0x0E000000</td></tr><tr><td>15</td><td>0x0000000F</td><td>0x0F000000</td></tr></tbody></table><p>빅 엔디안 방식이 우리가 자주 생각하는 저장 방식이다.<br>빅 엔디안은 가독성이 뛰어나고 대소 비교도 편하고 등등의 장점이 많다.<br>또한 네트워크 통신에서는 빅 엔디안 방식을 이용하자고 약속하였다.<br>0x00000001을 A 컴퓨터는 빅 엔디안 방식으로 숫자 ‘1’을 보낸것인데<br>리틀 엔디안 방식인 컴퓨터 B는 데이터를 받을 때 0x01000000으로 받는다.<br>그럼 A는 숫자 ‘1’을 보냈는데 컴퓨터 B는 ‘268435456’을 받은 꼴이 돼버리기 때문이다.</p><p>그럼 리틀 엔디안은 왜 나왔을까…?<br>가산기를 설계할 때 올림수를 계산하기 편하고, 빠르기 위함이란다.<br>15 + 1 을 빅 엔디안 방식으로 계산하면<br>0x0000000F + 0x00000001 = 0x00000010<br>으로 계산 후 최하위 바이트로 이동해서 올림수가 발생한다.<br>이번앤 리틀 엔디안 방식으로 계산해보자.<br>0x0F000000 + 0x01000000 = 0x10000000<br>올림수를 계산할 때 최상위 바이트에서 바로 올림수가 가능하기 때문이다.<br>라고 이해했는데 뭐 케바케기도 할 것 같고 요즘엔 둘 사이에 차이가 거의 없다고 한다.  </p><p>또한 이런 엔디안은 CPU에 의존적이다.<br>주로 인텔 CPU가 리틀 엔디안 방식을 사용한다고 한다.<br>비디오 게임기인 SFC, NDS 등등에서도 리틀 엔디안 방식을 사용하는 경우가 많으니 참고하자.  </p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="http://blog.naver.com/krinlion/40137959041" rel="external nofollow noopener noreferrer" target="_blank">시스템 프로그래밍 리틀 엔디안(Little Endian), 빅 엔디안(Big Endian)</a>  </li><li><a href="http://genesis8.tistory.com/37" rel="external nofollow noopener noreferrer" target="_blank">리틀 엔디안 VS 빅 엔디안</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASM </tag>
            
            <tag> Assembly </tag>
            
            <tag> Endian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(상식) 무선 공유기 암호와 속도에 관한 진실</title>
      <link href="/2017/01/24/Wifi-password-fact/"/>
      <url>/2017/01/24/Wifi-password-fact/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Wifi-password-fact/thumb.png" alt="">  </p><h2 id="공유기에-암호를-걸어놓는다는-것의-의미"><a href="#공유기에-암호를-걸어놓는다는-것의-의미" class="headerlink" title="공유기에 암호를 걸어놓는다는 것의 의미"></a>공유기에 암호를 걸어놓는다는 것의 의미</h2><p><img src="/images/Wifi-password-fact/01.png" alt="인증이 1번 내용, 암호화가 2번 내용"><br>무선 공유기의 보안 때문에 AP에 암호를 걸어놓는 경우가 많다.<br>여기서 무선 공유기에 암호를 건다는 것은…  </p><ol><li>무선 공유기에 타인이 접속하는 걸 방지하고자 암호를 건다.<br>(WPA2PSK와 같은 방식으로…)  </li><li><code>송수신하는 데이터(평문으로 된 개인정보 등등)을 암호화 하고자 데이터를 암호화 한다.</code><br>(AES와 같은 알고리즘으로…)</li></ol><a id="more"></a><p>하지만 암호를 걸어놓음으로써 인터넷 속도가 줄어든다는 사실을 알고 있는가?<br>Why?<br>우리가 보내는 데이터 -&gt; 암호화 -&gt; 전송과 같이<br>‘암호화’의 단계가 포함되기 때문에 당연히 느려질 수 밖에 없다.<br>그럼으로 인해서 아예 암호를 걸어놓지 않고 사용하는 사람들이 있다.  </p><h2 id="공유기에-암호-걸지-않고-사용하기"><a href="#공유기에-암호-걸지-않고-사용하기" class="headerlink" title="공유기에 암호 걸지 않고 사용하기"></a>공유기에 암호 걸지 않고 사용하기</h2><p>이러한 방법은 <code>매우 위험</code>하다.<br>타인이 나의 AP로 접근하여 동영상 등등의 기타 데이터를 마구 발생시키고 있다면<br>자신이 쓸 수 있는 속도가 줄어든다.<br>10MiB/s를 두 명이 나눠쓰면 5MiB/s로 줄어들거나<br>동영상을 받고 있는 유저가 거의 10MiB/s 가까이 끌어다 쓰는 등등…<br>혹은 한 AP에 접속된 기기가 많을 수록 혼선이 발생되는 등등 인터넷 접속이 불안정해지게 된다.</p><p>이를 해결하기 위한 여러가지 방안이 있지만 대표적인 몇 가지를 소개하고자 한다.<br>물론 암호화를 진행하고 이 방안까지 쓴다면 보안에 금상첨화이다.  </p><ol><li>MAC 주소 인증<br>MAC 주소는 컴퓨터 부품 중 하나인 LAN 카드에 있는 ‘고유’한 정보로서,<br>IP 주소와 달리 LAN 카드를 바꾸지 않는한 영구적이다.<br>또한 MAC 주소는 전 세계적으로 유일한 번호이므로 어찌 보면 ‘개인 정보’ 영역에도 속해서<br>액티브 X 등등을 쓰지 않는 한 보안상 수집을 할 수 없다.<br>이러한 MAC 주소의 ‘유일성’을 통해서 ‘인증된 MAC 주소’만 접속을 허용하게끔 하는 것이다.<br>물론 MAC 주소를 바꾸는 방법이 존재하긴 하지만,<br>인증된 MAC 주소를 알아내는 건 그리 쉬운 일이 아니다.<br>또한 새로운 기기를 추가할 때마다 MAC 주소를 추가해야된다는 번거로움이 존재한다.  </li><li>SSID 숨기기.<br>이 방법은 SSID 이름을 맞춰야만 해당 AP로 접속할 수 있게 하는 방법이다.<br>사람들이 쉽게 생각할 수 없는 문자(특수문자)들의 조합으로<br>SSID를 지정하면 쉽게 찾아낼 수가 없을 것이다.</li></ol><h2 id="공유기에-암호를-걸지-않는-것의-의미"><a href="#공유기에-암호를-걸지-않는-것의-의미" class="headerlink" title="공유기에 암호를 걸지 않는 것의 의미"></a>공유기에 암호를 걸지 않는 것의 의미</h2><p>우리가 흔히 쓰는 무선 공유기는 송수신 하는 패킷(메시지, 데이터를 자잘하게 쪼갠 단위)을 기본적으로 암호화하지 않는다.<br>잘 만들어진 사이트는 사이트 자체적(https 프로토콜 등등)으로 패킷을 암호화 하는 방법을 통해 보안을 유지하고 있다.<br>하지만 우리가 사용하는 사이트가 모두 그렇게 잘 만들어진 사이트인가?<br>보안에 그만큼 신경 쓴 사이트라면 비용이 비쌀테니 개인이나 소규모 기업 같은 경우에는<br>크게 신경을 쓰지 않는 경우도 많다.<br>잘 만들어진 사이트인지 일일이 확인하고 쓰기도 번거로울 뿐더러 알아내기도 쉽지 않다.<br>즉 그러한 사이트를 이용하면 우리의 개인정보가<br>고스란히 평문으로써 보이지 않는 공간에 날아다니게 된다.<br>이러한 패킷들을 가로채는 건 해커들에겐 식은 죽 먹기다.<br>흔히 생각하는 ‘무선 공유기 암호’는 ‘AP의 접근 인증’ 외에도<br><code>&#39;송수신 패킷(데이터) 암호화&#39;</code>도 포함돼있다.<br>공짜라고, 비밀번호가 걸려있지 않다고, 옆 집에 있는 와이파이를 훔쳐쓰다가<br>친구한테 몰래 보낸 메일이나 사이트의 비밀번호 등등이 크래커에게 고스란히 노출될 수 있다.<br>옆 집 사람이 크래커라서 의도적으로 공개를 해놓은 건지도 모른다.<br>공개 AP를 쓸 때는 <code>보안에 민감하지 않은 작업</code>만 하자.  </p><h2 id="공유기-암호화에-대한-다른-비밀"><a href="#공유기-암호화에-대한-다른-비밀" class="headerlink" title="공유기 암호화에 대한 다른 비밀"></a>공유기 암호화에 대한 다른 비밀</h2><p>암호화 방법이 여러 개 있고, 암호화 방법에 따라서 인터넷 속도도 천차 만별이다.<br>출처는 아래 링크와 같다.<br><a href="http://www.clien.net/cs2/bbs/board.php?bo_table=cm_iphonien&wr_id=1061462" rel="external nofollow noopener noreferrer" target="_blank">iptime 암호화 방법에 따라 속도 차이가 엄청나군요.</a><br><img src="/images/Wifi-password-fact/speed.jpg" alt="이는 암호화 알고리즘 때문에 나타나는 현상이다"><br>복잡한 알고리즘, 안전한 알고리즘일 수록 느리지 않을까…<br>뭐 꼭 그렇다는 것만은 아니지만…</p><p>하지만 여러 가지의 암호화 방법 중 ‘안전하지 않은’ 암호화 방식도 있다.<br>이 말은 암호화를 걸었는데 이미 크래커들에게 뚫린 방식일 수도 있다는 뜻이다.<br>802.11N 방식(100메가 광랜)에서는 WPA2PSK + AES 방식을 쓰는 게 가장 좋을 것 같다.<br><a href="http://www.bodnara.co.kr/bbs/article.html?num=106786" rel="external nofollow noopener noreferrer" target="_blank">WiFi 공유기 암호방식, 꼭 WPA2-AES를 써야하는 이유는?</a><br>802.11AC 방식(기가 광랜)에서는 어떤 방식이 제일 좋은지는 모르겠다.<br>TKIP 방식의 암호화 알고리즘은 802.11N 방식을 지원하지 않는다는 것 같다.<br><a href="http://blog.daum.net/fachul/49" rel="external nofollow noopener noreferrer" target="_blank">공유기 암호화방법 변경으로 무선/WIFI 속도 제대로 활용하기!</a></p><p>비밀번호를 걸지 않고, 송수신 데이터만 암호화 하는 방법이 존재하는지 모르겠지만,<br>어지간하면 비밀번호가 걸려있지 않은 공개 AP는 쓰지 않는 게 좋고,<br>꼭 써야한다면 <code>보안에 민감하지 않은 작업</code>만 하자.<br>또한 소 잃고 외양간 고치기 싫은 사람들은  </p><ol><li>무선 공유기를 WPA2PSK + AES 방식의 암호화 방법을 적용시키거나…  </li><li>속도를 포기하기 싫으신 분은 귀찮으시더라도 유선랜을 쓰도록 하자…</li></ol><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="http://www.clien.net/cs2/bbs/board.php?bo_table=cm_iphonien&wr_id=1061462" rel="external nofollow noopener noreferrer" target="_blank">iptime 암호화 방법에 따라 속도 차이가 엄청나군요.</a>  </li><li><a href="http://www.bodnara.co.kr/bbs/article.html?num=106786" rel="external nofollow noopener noreferrer" target="_blank">WiFi 공유기 암호방식, 꼭 WPA2-AES를 써야하는 이유는?</a>  </li><li><a href="http://blog.daum.net/fachul/49" rel="external nofollow noopener noreferrer" target="_blank">공유기 암호화방법 변경으로 무선/WIFI 속도 제대로 활용하기!</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> Computer </tag>
            
            <tag> 인터넷 </tag>
            
            <tag> 속도 </tag>
            
            <tag> 암호 </tag>
            
            <tag> 보안 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(상식) 인터넷 속도에 대한 진실</title>
      <link href="/2017/01/23/giga-internet-fact/"/>
      <url>/2017/01/23/giga-internet-fact/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/giga-internet-fact/thumb.png" alt=""></p><p>이제는 100메가 광랜을 넘어서 기가의 시대가 열렸다.<br>100메가 광랜을 쓸 적에 100 메가의 속도를 느껴본 적이 있는가?<br>이론상 저항 등등에 의해 불가능하지만 그에 준하는 속도라도 느껴본 적 있는가?<br>그럼 현재 기가에 조금 못 미치더라도 그에 준하는 속도를 느끼고 있는가?<br>오늘은 그 진실과 상술과 마주해보자.<br>결론부터 쉽게 풀어서 말하자면<br>100메가 광랜의 이론상 최대 속도(나올 수가 없음)은 11.9메가이고,<br>1기가 광랜의 이론상 최대 속도(이 또한 나올 수가 없음)은 119메가이다.  </p><a id="more"></a><h2 id="b와-B"><a href="#b와-B" class="headerlink" title="b와 B"></a>b와 B</h2><p>사람들이 컴퓨터의 용량을 표기할 때 대소문자를 크게 여기지 않는다.<br>물론 킬로를 뜻하는 k를 K로 적어도 kilo의 의미가 그대로 담겨있다.<br>하지만 바이트를 뜻하는 B를 b로 적으면 bit의 뜻이 된다.<br>일반인들은 잘 모르지만 그게 표준인지는 모르지만 표준과 같이 쓰이고 있다.<br>인터넷 업체들은 b(it)라고 적으면서 사람들은 B(yte)로 받아들이는 것이다.<br>8bit = 1Byte, 8배의 속도 차이가 나게 되는 것이다.<br>1Gb/s = 1Gbps = <code>10³Mbps</code> = <code>1000Mbps</code> = 1000/8(MBps) = 125MBps = 125MB/s<br>즉 1Gb/s는 125MB/s로 환산되어 우리가 피부로 느끼는 속도가 된다.</p><h2 id="iB와-B"><a href="#iB와-B" class="headerlink" title="iB와 B"></a>iB와 B</h2><p>여기서 한 번 더 의구심을 품어야한다.<br>1Gb/s = 1Gbps = <code>2¹⁰Mbps</code> = <code>1024Mbps</code>가 아니다.<br>즉!<br>1GB(1024MB)의 파일을 1Gb/s(125MBps)로는 8초만에 받을 수 없다는 사실이다!<br>이 또한 상술이다.<br>생각해보면 참 나쁜 놈들이다.<br>2중 상술을 썼다.<br>위 용량 관련된 글을 아래 링크를 참조하자.<br><a href="/2017/01/23/Computer-capacity-fact/">(상식) 컴퓨터 용량 단위에 대한 진실</a></p><ul><li>b 단위 = bit 단위 = 1kb = 1kilobit = 125byte = 1000bit  </li><li>B 단위(SI 단위) = Byte 단위(10진 배수) = 1kB = 1kiloByte = 1000Byte = 8000bit  </li><li>iB 단위(IEC 이진 접두어) = Byte 단위(2진 배수) = 1KiB = 1KibiByte = 1024Byte = 8192bit</li></ul><p>우리는 파일 용량에 있어서 B 단위를 쓰면서 iB라고 생각하고 실제로도 iB 단위이다.<br>컴퓨터의 저장 장치는 B 단위를 쓰고 우리는 iB라고 생각하지만 실제로는 B 단위이다.<br>인터넷 전송 속도는 b 단위를 쓰고 우리는 iB라고 생각하지만 실제 단위는 b이다.<br>이게 참 혼동이 온다.<br>즉 인터넷 업자들은 B 단위 대신에 b 단위를 써서 우리를 한 번 속였고,<br>iB 단위도 쓰지 않아서 우리를 두 번 속인 꼴이 된다.<br>따라서 100메가 광랜은 100Mbps = 12.5MBps ≒ 11.9MiBps<br>1기가 광랜은 1Gbps = 125MBps ≒ 119MiBps가 된다.<br>하지만 위의 상황도 이론상 최대 속도이지<br>손실 없이 온전하게 전달하는 방법은 초전도체 뿐이지 않을까 싶지만…<br>초전도체를 상온(20±5°C)에서 쓰는 방법은 없는 것으로 알고 있고,<br>비용도 매우 비쌀 것이므로 사람들은 대부분 어느 정도 손실을 감수하고 사용하고 있다.  </p><h2 id="119MiB-s-인터넷의-속도를-방해하는-요소들"><a href="#119MiB-s-인터넷의-속도를-방해하는-요소들" class="headerlink" title="119MiB/s 인터넷의 속도를 방해하는 요소들"></a>119MiB/s 인터넷의 속도를 방해하는 요소들</h2><p><code>아래 두 환경이 받춰주지 않는다면 119MiB/s의 가짜 기가 광랜 사용을 하고 싶어도 할 수 없다.</code>  </p><ul><li><p>ISP(Internet Service Provider)에서 깔아주는 망(케이블, 선)<br>ISP는 그냥 LG U+, KT Olleh, SK Broadband 요런 애들이라고 보면 된다.<br>요즘 인터넷이 무선으로 와이파이 통신을 한다고들 하지만 사실 완전한 무선은 아니다.<br>ISP로부터 우리 집/사무실까지 유선으로 쭉~오게 된다.<br>외국과 통신을 한다고 해서 예외가 아니다.<br>태평양 심해 어딘가에는 광 케이블이 깔려있다.<br>우선 ISP에서 쓰는 케이블이 초전도체가 아니기 때문에 1차적으로 속도 손실이 일어나지 않을까 싶다.<br>또한 여러 유저가 동시에 몰리다 보면 100% 속도를 내기는 힘들지 않을까… 싶다.<br>또한 아파트나 자신이 사는 동네에 기가 망 구축이 돼있어야 한다.<br>요즘 같은 경우에 11.9MiB/s 광랜은 대부분 구축이 돼있는데,<br>기가 망은 비용과 케이블이 두껍다보니 미관상의 이유로 깔리기를 반대하는 사람들이 있다.<br>대표적으로 우리 아파트는 집 값 떨어진다고 못 깔고 있다고 한다… 에휴 ㅠㅠ<br>ISP나 경비실에 문의해서 확실히 알아보고 신청해야 할 사항이다.</p></li><li><p>다운로드 속도는 괜찮은데 업로드 속도는…?<br>혹은 그 반대인 경우가 있는데 이 경우들을 비대칭이라고 한다.<br>지금은 잘 모르겠는데 과거에 주택 같은 경우에는 대칭형이었으나<br>아파트가 주로 비대칭형이었다.<br>대부분의 사람들이 동영상이나 파일을 받는 <code>다운로드 속도</code>에는 집착하지만<br>인터넷 방송을 하는 스트리머의 경우나 대용량 파일을 메일로 보내는 등등의 행위에서는<br><code>업로드 속도</code>가 중요하다.<br>하지만 대부분은 업로드 속도는 신경쓰지 않다보니 이것 또한 상술인지<br>기술적 or 환경 문제인지 제대로 제공해주지 않는 ISP들이 있는 것으로 알고 있다.<br>아니면 추가 과금을 통해서 개선이 된다거나…<br>잘은 모르겠으나 직접 가입할 때 확인해야할 사항인 것 같다.  </p></li></ul><p><code>이제부터 나오는 네 가지 사항은 본인의 장비에 문제가 있는 경우이다.</code><br>일단은 다운로드와 유선에 한해서 설명한다.  </p><ul><li><p>우리 집에 있는 랜선의 종류는?<br>랜선은 랜선이지 무슨 또 종류가 있담?<br>랜선에 따라서도 지원되는 속도가 있고, 가격도 다르다.<br>물론 내구성과 안정성에 따라서도 달라지겠지만…<br>UTP &gt; FTP &gt; STP 순으로 비싸지지만, (내구성/안정성 측면)<br>일반 가정과 사무실에서는 가격을 이유로 UTP 케이블을 쓴다.<br>아래 링크를 참조하자.<br><a href="http://leeahnlee.tistory.com/19" rel="external nofollow noopener noreferrer" target="_blank">랜선의 종류와 각종 개념정리</a><br>이번에는 속도 측면에서 보자.<br>출처는 아래와 같다.<br><a href="https://blog.lael.be/post/50" rel="external nofollow noopener noreferrer" target="_blank">랜선의 종류와 구분 (UTP/STP/FTP 차이점)</a><br><img src="/images/giga-internet-fact/lan.jpg" alt="규격은 무시하고 보자."><br>대역폭은 길이 좁냐 넓냐인데 이 또한 속도와도 관련이 있다고만 보면 된다.<br>자신의 집이 아마 UTP 쓸테고, 그럼 CAT 어느 규격의 랜선을 쓰고 있는지를 알아야<br>랜선을 새로 사야할지, 기가 광랜을 설치할지 말지를 결정할 수 있다.  </p></li><li><p>내 컴퓨터의 랜카드 종류는?<br>아니 랜카드가 랜카드지 또 종류가 있다고?<br>구글링을 통해 내 랜카드가 1Gbps를 지원하는지 확인해야 한다.<br>윈 7이나 10이나 비슷할테니 아래 링크를 참조하고, 리눅스나 맥은 따로 확인하길 바란다.<br><a href="http://blog.naver.com/PostView.nhn?blogId=bonida7&logNo=220693859460" rel="external nofollow noopener noreferrer" target="_blank">기가랜을 사용하려면 랜카드 확인하고 설치하세요.</a><br>만약에 본인의 컴퓨터에 장착된 랜카드가 기가 광랜을 지원하지 않는다면<br>PCI-Express 슬롯에 장착할 수 있는 기가 랜카드를 사서 장착 후 그 곳에 랜선을 꽂거나<br>USB 3.0용 랜카드를 사야한다.<br>USB 2.0의 스펙상 쓰기 속도가 119MiB/s가 되지 않기 때문에 USB 3.0 용으로 사야한다.<br>USB 3.0 미지원 메인보드면 PCI-Express용을 사거나 메인보드를 USB 3.0 지원용으로 바꾸자.</p></li><li><p>내가 파일을 저장하는 공간의 쓰기 속도는?<br>이게 뭔소린지 모를 수도 있다.<br>간단하게 CrystalDiskMark라는 프로그램을 써서<br>내가 파일 저장하려는 공간의 읽기/쓰기 속도를 체크할 수 있다.<br><img src="/images/giga-internet-fact/bench.png" alt="읽기/쓰기 속도를 체크해보자"><br>대충 seq를 기준으로 잡으면 되지 않을까 싶다.<br>다운로드는 아래 페이지를 이용하자.<br><a href="http://crystalmark.info/software/CrystalDiskMark/index-e.html" rel="external nofollow noopener noreferrer" target="_blank">CrystalDiskMark</a><br>즉, 내가 SSD에 저장할 때는 기가 광랜의 속도를 충분히 활용할 수 있는데,<br>SD 카드나 USB, 외장 하드에 파일을 저장할 때는 기가 광랜의 속도가 안 날 수도 있다는 거다.<br>기가 광랜 빵빵하게 이용하고 싶으면 쓰기 속도가 119MiB/s(125MB/s)를 넘는<br>SSD나 USB 3.0 용량 큰 거 하나 장만하자.  </p></li><li><p>우리집 공유기의 종류는?<br>대부분이 집에 PC 한 대 이상은 있을 거다.<br>그래서 IP 공유기/인터넷 공유기 하나 쯤은 대부분 있을 거다.<br>근데 이 공유기가 자세히 보면 기가 광랜을 지원하지 않는 경우가 있다.<br>판매처나 제조업체 홈페이지/메뉴얼에서 스펙을 보도록 하자.<br>그리고 제대로 지원하지 않으면 그냥 하나 사자.  </p></li></ul><p><code>이제부터 나오는  가지 사항은 무선과 다운로드/업로드에 해당하는 내용이다.</code>  </p><ul><li><p>우리집 무선 랜카드의 종류는?<br>대부분의 휴대 기기(노트북, 태블릿, 스마트폰)에는 무선 랜카드가 내장돼있다.<br>노트북은 유선 랜카드도 내장된 경우가 많고, 데스크탑에는 대부분 유선 랜카드만 내장돼있다.<br>따라서 본인이 와이파이를 이용하는 경우에는 무선 랜카드를 쓴다고 보면 된다.<br>본인 무선 랜카드가 기가 광랜의 속도를 지원하는지,<br>지원하지 않는다면 데스크탑의 경우에는 PCI-Express나 USB 3.0,<br>랩탑의 경우에는 USB 3.0 무선 랜카드 밖에 방법이 없을 것이다.<br>스마트폰이나 태블릿의 경우에는 오히려 번거롭거나 비싸거나 존재 자체가 없지 않을까 싶다…</p></li><li><p>공유기와 내 컴퓨터 사이의 거리는? 장애물의 종류와 갯수는?<br>여기서 말하는 컴퓨터는 와이파이를 사용하는 모든 기기를 총칭한다.<br>무선의 경우에는 거리가 멀어지면 멀어질 수록 안정성이 떨어짐과 동시에 속도가 느려진다.<br>기본적으로 유선은 거리에 제약이 없지만 무선은 거리에 제약이 존재하기도 하고,<br>속도나 안정성 측면(자주 끊긴다거나 보안)에서도 구리다.<br>또한 공유기와 컴퓨터 직선거리 사이에 장애물(대표적인 게 벽)이 많고 두껍고,<br>투과하기 힘든 그런 물체일 수록 더 속도와 안정성 측면에서 안 좋아진다.<br>신호 증폭기를 사용하거나 공유기를 중간에 하나 더 설치하거나 공유기 위치를 옮겨보자.<br>공유기는 한 쪽 방향으로 신호를 쏘는 게 아니라 자신을 중심으로<br>사방 팔방으로 신호를 쏴대는 것으로 알고 있다.<br>따라서 공유기의 위치는 집의 정중앙이 제일 이상적이다. (케바케긴 하지만…)  </p></li><li><p>공유기와 랜카드의 신호 세기는?<br>공유기와 컴퓨터 사이가 그리 멀지도 않거나 장애물도 없는데 속도가 느리면<br>애초에 공유기나 무선 랜카드가 안 좋아서 신호가 약한 경우이다.<br>한 쪽이 뛰어나도 한 쪽이 받춰주지 못하면 제대로 된 속도가 나오지 않을 것이다.<br>대표적으로 안테나가 여러 개 달려있는 등의 제품이 신호 세기가 강하다.<br>하지만 이런 무선 신호가 너무 세면 신체에 악영향을 끼칠지도 모른다는 글을 본 것 같다.  </p></li><li><p>공유기의 지원 접속 모드와 설정된 값은?<br>무선 통신의 전송 방식 표준에는 B/G/N/AC 모드가 있다.<br>각각에 대한 확인은 아래 링크에서 하자.<br><a href="https://ko.wikipedia.org/wiki/IEEE_802.11#.EC.A0.84.EC.86.A1_.EB.B0.A9.EC.8B.9D_.ED.91.9C.EC.A4.80" rel="external nofollow noopener noreferrer" target="_blank">IEEE 802.11 - 전송 방식 표준</a><br>과거에는 N모드가 짱짱맨이었는데 기가 광랜이 나오면서 AC 모드를 지원해야 짱짱맨인 것 같다.<br>공유기 설정에서도 AC 모드가 아닌 다른 모드로 설정돼있는지 봐보자.  </p></li></ul><p><code>이제부터 나오는 내용은 다운로드/업로드와 관련된 내용이다.</code>  </p><ul><li><p>다운로드와 업로드를 동시에 하면…?<br>대부분이 토렌트를 써봤을 거다.<br>자신이 다운로드하면서 업로더도 되기도 한다.<br>하지만 만약에 10MiB/s가 본인의 인터넷 최대 속도라고 해보자.<br>10MiB/s로 다운로드 하다가 다른 사람이 다운로드 요청을 해서<br>5MiB/s의 속도로 업로드 하면 동시에 5MiB/s로 다운로드 속도도 줄어든다.<br>안 그런 컴퓨터나 네트워크 환경도 있겠지만 대부분이 이렇다.<br>이는 업로드를 하다가 동시에 다운로드를 해도 마찬가지이다.  </p></li><li><p>여러가지 파일을 동시에 다운로드 하면…?<br>만약에 10MiB/s가 본인의 인터넷 최대 속도라고 해보자.<br>A란 파일을 10MiB/s의 속도로 다운받고 있었다.<br>B란 파일을 받으면 A란 파일의 다운로드 속도가 5MiB/s로 떨어지고<br>B란 파일의 속도도 5MiB/s의 속도로 다운받게 된다.<br>안 그런 컴퓨터나 네트워크 환경도 있겠지만 대부분이 이렇다.<br>이는 업로드를 하다가 동시에 다른 파일이나 다른 유저에게 업로드를 해도 마찬가지이다.  </p></li><li><p>우리 가족이나 룸메 중에 누가 인터넷으로 동영상을 본다면?<br>만약에 10MiB/s가 본인의 인터넷 최대 속도라고 해보자.<br>혹은 대용량 메일을 보낸다면?<br>둘이 다른 네트워크(공유기, 모바일 네트워크)에 접속돼있으면 상관 없지만<br>대부분 공유기는 1대일 것이고 공유기가 달라도 메인으로 쏴주는 ISP 제공 장비(모뎀 같은 놈)<br>같은 게 같다면 무용지물이다.<br>대부분의 공유기는 더미 허브이다.(뭐 몰라도 된다.)<br>인터넷 속도를 1/N한다.<br>1명만 쓰고 있을 때는 10MiB/s의 속도를 보장 받지만<br>2명이 같이 쓴다면 각자 5MiB/s의 속도를 보장 받게 될 것이다.  </p></li><li><p>파일을 다운로더에게 직접 쏴주는 경우/BJ가 방송하는 경우<br>이 경우에는 본인의 업로드 속도도 중요하지만 상대방의 다운로드 속도도 중요하다.<br>다운로드 속도는 위에 말했다 싶이 아주 다양한 요인에 따라 달라진다.<br>메일이나 클라우드 서버에 올리는 경우가 아니라 1대1로 쏘는 경우가 이에 속한다.<br>또한 BJ가 방송을 송출할 때는 업로드 속도도 중요하지만,<br>방송을 보는 시청자의 다운로드 속도 또한 버퍼링의 큰 요인이다.</p></li></ul><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="http://leeahnlee.tistory.com/19" rel="external nofollow noopener noreferrer" target="_blank">랜선의 종류와 각종 개념정리</a>  </li><li><a href="https://blog.lael.be/post/50" rel="external nofollow noopener noreferrer" target="_blank">랜선의 종류와 구분 (UTP/STP/FTP 차이점)</a>  </li><li><a href="http://blog.naver.com/PostView.nhn?blogId=bonida7&logNo=220693859460" rel="external nofollow noopener noreferrer" target="_blank">기가랜을 사용하려면 랜카드 확인하고 설치하세요.</a>  </li><li><a href="http://www.kbench.com/?q=node/142038" rel="external nofollow noopener noreferrer" target="_blank">기가 인터넷 시대, 궁금증 해결하자</a>  </li><li><a href="https://ko.wikipedia.org/wiki/IEEE_802.11" rel="external nofollow noopener noreferrer" target="_blank">IEEE 802.11</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> Computer </tag>
            
            <tag> 용량 </tag>
            
            <tag> 상식 </tag>
            
            <tag> 인터넷 </tag>
            
            <tag> 속도 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(상식) 컴퓨터 용량 단위에 대한 진실</title>
      <link href="/2017/01/23/Computer-capacity-fact/"/>
      <url>/2017/01/23/Computer-capacity-fact/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Computer-capacity-fact/thumb.png" alt=""></p><p>이제 사람들이 IT에 많은 관심이 생겨서<br>1TB 짜리 저장장치를 사도 온전히 1TiB가 아님을 알 수 있다.<br>내가 여기서 TB와 TiB를 사용했는데, 이에 대해 알아보자.  </p><h2 id="SI-단위"><a href="#SI-단위" class="headerlink" title="SI 단위"></a>SI 단위</h2><p>프랑스어로 Système international d’unités<br>현 과학계에서 사용하는 표준단위.<br>표준화의 대표적인 성공사례이자 현재의 국제 과학계가 있을 수 있게 해 준 일등공신.<br>컴퓨터 용량과 관련된 단위들만 살펴보자.</p><a id="more"></a><table><thead><tr><th>단위</th><th>이름</th><th>배수(10진법)</th><th>배수(2진법)</th></tr></thead><tbody><tr><td>Y</td><td>yotta</td><td>10<sup>24</sup></td><td>≒2<sup>80</sup></td></tr><tr><td>Z</td><td>zetta</td><td>10<sup>21</sup></td><td>≒2<sup>70</sup></td></tr><tr><td>E</td><td>exa</td><td>10<sup>18</sup></td><td>≒2<sup>60</sup></td></tr><tr><td>P</td><td>peta</td><td>10<sup>15</sup></td><td>≒2<sup>50</sup></td></tr><tr><td>T</td><td>tera</td><td>10<sup>12</sup></td><td>≒2<sup>40</sup></td></tr><tr><td>G</td><td>giga</td><td>10<sup>9</sup></td><td>≒2<sup>30</sup></td></tr><tr><td>M</td><td>mega</td><td>10<sup>6</sup></td><td>≒2<sup>20</sup></td></tr><tr><td>k</td><td>kilo</td><td>10<sup>3</sup></td><td>≒2<sup>10</sup></td></tr></tbody></table><p>위와 같이 SI 단위의 접두어는 과학계에서 사용하는 표준 단위이다.<br>참고로 k는 온도를 나타내는 K와 헷갈린다고 소문자로 표기하였다.<br>저장장치 제조 회사는 이를 저장장치의 용량을 표기하는데 사용했다.<br>저장장치 제조 회사가 말하는 1kB = 10<sup>3</sup>Byte = 1000Byte<br>하지만 전기회로는 전압이 불안정해서 컴퓨터에서도 전압을 두 가지로만 나누었다.<br>이게 컴퓨터가 0과 1로만 이루어진 까닭이다.<br>이러한 탓에 컴퓨터는 1kB = 2<sup>10</sup>Byte = 1024Byte로 인식한다.<br>우리가 생각하는 1024Byte에서 24Byte의 오차가 생긴다.<br><code>1000Byte ≒ 1024Byte</code><br>1kB니까 24Byte의 차이 밖에 안 나는데, 1TB라면…?<br>2<sup>40</sup> - 10<sup>12</sup> = 99511627776(Byte) =  92.6774253845214844(GB)의 오차가 난다.<br>물론 저장 장치에 따라 달라지기도 한다.<br><img src="https://upload.wikimedia.org/wikipedia/commons/4/4f/Binaryvdecimal.svg" alt="실제 용량과 표기 용량사이의 차이"><br>내가 보기엔 이거 분명 상술이다.<br>애초에 십진 표기법을 사용하는 SI 단위를 이진 표기법을 사용하는 컴퓨터에 사용하는 것 자체가 맞지 않았다.<br>이진 표기법의 표준이 정해지기 전에 컴퓨터가 나와서 어쩔 수 없었을지도 모르기도 하지만…  </p><h2 id="IEC-표준-접두어-IEC-60027-2"><a href="#IEC-표준-접두어-IEC-60027-2" class="headerlink" title="IEC 표준 접두어(IEC 60027-2)"></a>IEC 표준 접두어(IEC 60027-2)</h2><p>국제 전기 기술위원회(International Electrotechnical Commission, IEC)에서 정의한 이진 표준 접두어이다.</p><table><thead><tr><th>단위</th><th>이름</th><th>배수(10진법)</th><th>배수(2진법)</th></tr></thead><tbody><tr><td>Yi</td><td>yobi</td><td>2<sup>80</sup></td><td>≒10<sup>24</sup></td></tr><tr><td>Zi</td><td>zebi</td><td>2<sup>70</sup></td><td>≒10<sup>21</sup></td></tr><tr><td>Ei</td><td>exbi</td><td>2<sup>60</sup></td><td>≒10<sup>18</sup></td></tr><tr><td>Pi</td><td>pebi</td><td>2<sup>50</sup></td><td>≒10<sup>15</sup></td></tr><tr><td>Ti</td><td>tebi</td><td>2<sup>40</sup></td><td>≒10<sup>12</sup></td></tr><tr><td>Gi</td><td>gibi</td><td>2<sup>30</sup></td><td>≒10<sup>9</sup></td></tr><tr><td>Mi</td><td>mebi</td><td>2<sup>20</sup></td><td>≒10<sup>6</sup></td></tr><tr><td>Ki</td><td>kibi</td><td>2<sup>10</sup></td><td>≒10<sup>3</sup></td></tr></tbody></table><p>1KiB = 2<sup>10</sup>Byte = 1024Byte로 우리가 생각하는 단위가 맞다.  </p><p>그나마 다행인 것은 하드 디스크나 플래시 메모리(USB, SD 카드, SSD 등등)과는 달리<br>RAM이나 CD(거의 쓰지 않게 됐지만…)는 SI 단위를 쓰면서 IEC 표준 접두어와 같은 결과를 낸다고 한다.<br>쉽게 말해 RAM이나 CD는 상술을 쓰지 않는다는 뜻이다.<br>아마 RAM의 경우에는 메모리 주소와 관련이 있지도 않을까… 싶다.</p><p>하지만 이름이 뭔가 이상하고 어색해서 많이들 쓰지 않는다.<br>이러면 이럴 수록 그들의 상술에 놀아나기 때문에 조금이라도 써야겠다.  </p><p>또한 이러한 상술은 인터넷 업체에서도 쓰고 있다.<br>아래 링크를 참조하자.<br><a href="/2017/01/23/giga-internet-fact/">(상식) 인터넷 속도에 대한 진실</a></p><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="https://namu.wiki/w/SI%20%EB%8B%A8%EC%9C%84" rel="external nofollow noopener noreferrer" target="_blank">SI 단위</a>  </li><li><a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%EC%A0%91%EB%91%90%EC%96%B4" rel="external nofollow noopener noreferrer" target="_blank">이진 접두어</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> Computer </tag>
            
            <tag> 용량 </tag>
            
            <tag> 상식 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C/C++) 참고용 정리 - 변수와 리터럴, 그리고 메모리</title>
      <link href="/2017/01/23/C-ref-002/"/>
      <url>/2017/01/23/C-ref-002/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/C-ref-002/thumb.png" alt="">  </p><h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><p>변수라 함은 자바에서 정리했 듯이 아래와 같다.  </p><blockquote><p>짧게 얘기하면 변하는 수<br>길게 얘기하면 단 하나의 값을 저장할 수 있는 메모리 상의 공간.</p></blockquote><h2 id="리터럴"><a href="#리터럴" class="headerlink" title="리터럴"></a>리터럴</h2><p>리터럴이라 함은 자바에서 정리했 듯이 아래와 같다.  </p><blockquote><p>짧게 얘기하면 변하지 않는 값<br>  길게 얘기하면 우리는 변하지 않는 값을 일상생활에서는 상수라고 불렀다.<br>  하지만 상수는 프로그래밍 세계에서는 좀 다른 뜻으로 불리기 때문에<br>  그와 차별성을 부여하기 위해 리터럴이라고 붙였다.<br>  “ch”, ‘c’, 123, 123.55 등등 모두 리터럴이다.  </p></blockquote><a id="more"></a><h2 id="내가-위에서-정의한-말들이-맞을까"><a href="#내가-위에서-정의한-말들이-맞을까" class="headerlink" title="내가 위에서 정의한 말들이 맞을까?"></a>내가 위에서 정의한 말들이 맞을까?</h2><p>좀 부족한 부분이 있는 것 같다.<br>아래의 경우를 보자.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p"</span>, &amp;num); num의 주소값이 나온다.</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>num은 변수기 때문에 메모리를 4byte 잡아먹고 그 안에<br>00000000 00000000 00000000 00000011<br>이런 값이 들어있다.<br>그럼 리터럴인 1과 2는 메모리 상에 적재되지 않는 걸까…?<br>CPU에서 연산을 하기 위해서는 메모리 상에 있는 데이터들을 끌고 와야한다.<br>메모리 상에 없는 데이터는 CPU에서 끌고 올 수가 없으니 연산 및 처리가 불가능하다.<br>따라서 리터럴인 1과 2도 메모리 상에 올라가야한다는 것이다.<br>이 1과 2도 메모리 상의 <code>어딘가</code>에 적재가 된다.<br>그 어디가 어딘지는 아무도 모른다.<br>(메인)메모리(RAM, Random Access Memory)의 특성상<br>비어있는 공간 랜덤한 부분에 적재되지 않을까 싶다.<br>정수 리터럴의 기본 크기는 모르지만 아마 4byte이지 않을까… 싶다.<br>즉 1을 저장할 4byte 공간, 2를 저장할 4byte 공간이 따로 필요하게 된다.<br>그리고 이러한 연산이 끝난 이후에는 가비지 컬렉팅 대상이 되어 소멸되게 되는 것이다.<br>즉 리터럴도 메모리 상에 할당이 되고, 변수도 메모리 상에 할당이 된다.<br>그럼 그 차이점을 아래의 표로 나타내보았다.</p><p> | 변수 | 리터럴<br>— | — | —<br>할당 형태 | 정적 할당 | 동적 할당<br>메모리 주소&nbsp;&nbsp;&nbsp;&nbsp; | 알 수 있음(재호출 가능) | 알 수 없음(재호출 불가)<br>가비지 컬렉팅 | 자세히 모르겠음 | 연산 되자마자<br>캐싱 | 메모리 주소에만 접근하면 되므로 캐싱을 함 | 매번 새로운 메모리 공간을 만들어야 하므로 캐싱하지 않음</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Variable </tag>
            
            <tag> Literal </tag>
            
            <tag> Memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C/C++) 참고용 정리 - 포인터와 배열</title>
      <link href="/2017/01/23/C-ref-001/"/>
      <url>/2017/01/23/C-ref-001/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/C-ref-001/thumb.png" alt=""><br>윤성우 님의 열혈 C 프로그래밍 동영상 강좌를 열심히 보고 있다.<br>자바는 메모리 관리를 안 해도 된다지만 공부하면 할 수록 메모리에 자꾸만 관심이 갔다.<br>그러한 갈증에 대한 해소를 C언어에서 할 수 있었다.  </p><h2 id="포인터"><a href="#포인터" class="headerlink" title="포인터"></a>포인터</h2><p><code>메모리 주소의 값</code>을 가지고 있는 <code>변수</code>이다.<br>주된 용도는 <code>특정 변수</code>의 메모리 주소의 값을 가지고 있는 변수이지만,<br>아래와 같은 것도 가능하다.  </p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0x00000013이 어떤 영역인지 모른다.</span></span><br><span class="line">    <span class="comment">// 만약 OS영역이라면 치명적인 오류가 나고, 시스템이 뻗을 수도 있다.</span></span><br><span class="line">    <span class="comment">// 하지만 요즘 OS들은 다들 방어적으로들 행동한다고 한다.</span></span><br><span class="line">    <span class="comment">// 혹시 모르니 아래 코드는 권장하지 않는다.</span></span><br><span class="line">    <span class="keyword">long</span>* ptr = <span class="number">0x00000013</span>; <span class="comment">// 에러를 뿜는 컴파일러도 있으니 권장하지 않음.</span></span><br><span class="line">    *ptr = <span class="number">13</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 코드는 OS 영역을 건들지도 모르므로 매우 위험하다.<br>따라서 아래와 같이 써야한다.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">long</span>* ptr = &amp;num;</span><br><span class="line">    *ptr = <span class="number">13</span>;</span><br><span class="line">    <span class="comment">// %p의 크기는 운영체제의 bit에 따라, 값은 실행할 때마다 달라질 수 있다.</span></span><br><span class="line">    <span class="comment">// 핵심은 ptr에 저장된 값과 num의 메모리 번지수가 동일하다는 것이다.</span></span><br><span class="line">    <span class="comment">// 0x7fff588a2ad8 0x7fff588a2ad8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p %p"</span>, &amp;num, ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="크기"><a href="#크기" class="headerlink" title="크기"></a>크기</h3><p>위에서 보듯이 포인터는 실수가 아닌 정수이다.<br>하지만 그 크기가 1byte인지 2byte인지 어떻게 알 수 있을까?<br>그 크기는 OS에 의존적이다.<br>OS를 깔 때 32bit 버전, 64bit 버전의 컴퓨터를 본 적이 있다.<br>32bit는 OS에서 한 번에 처리할 수 있는 데이터의 양은 32bit, 즉 4byte이다.<br>왜냐하면 CPU가 처리하는 데이터의 최소 단위인 Register의 크기가 몇 bit인지에서 나오기 때문이다.<br>또한 한 번에 이동시킬 수 있는 데이터의 양 또한 32bit라고 한다.<br>데이터 버스를 이용하는 건지 뭔지는 잘 모르겠다.<br>이는 메인 메모리(RAM, Random Access Memory)의 인식과도 관련이 있다.<br>참고로 메인 메모리의 주소 체계는 1byte 단위이다.<br>2<sup>32</sup>Byte = 2<sup>22</sup>Kilobyte = 2<sup>12</sup>Megabyte = 2<sup>2</sup>Gigabyte = 4GB  </p><blockquote><p>잠시 다른 이야기, 왜 32비트 컴퓨터를 x86이라고 부를까?<br>통칭 x86계열의 CPU가 32비트까지 나와있고, 여기서 64비트를 지원하도록 확장된게 x86-64죠. 그래서 x86-64를 줄여서 간단히 x64…<br>8080 - 8086 - 80186 - 80286 - 80386 - 80486 - 80586 등으로 나가는 인텔의 CPU를 통칭해서 x86이라고 부름  </p></blockquote><p>그렇다면 64bit의 경우에는 어떨까?<br>64bit를 지원하는 CPU에 64bit의 OS가 깔린 경우라는 가정하에…<br>CPU의 Register의 크기가 64bit라서 한 번에 연산(처리)할 수 있는 데이터의 양은 64bit, 즉 8byte.<br>한 번에 이동시킬 수 있는 데이터의 양 또한 64bit.<br>이론 상으로 인식할 수 있는 메인 메모리의 크기는<br>2<sup>64</sup>Byte = 2<sup>54</sup>Kilobyte = 2<sup>44</sup>Megabyte = 2<sup>34</sup>Gigabyte = 2<sup>24</sup>Terabyte<br>= 2<sup>14</sup>Petabyte = 2<sup>4</sup>Exabyte = 16EB  </p><p>참고로 말하자면 int의 크기 또한 OS의 bit에 의존적이지 않다!!<br>같은 64bit지만 컴파일러에 따라서 int의 크기가 달라지기도 하는 것 같다.<br>하지만 표준이나 요새 상황은 잘 모르겠다.</p><blockquote><p>엄밀하게는 컴파일러에 따라 int 크기가 다르다…가 답일거 같군요.<br>  <a href="http://stackoverflow.com/questions/10197242/what-should-be-the-sizeofint-on-a-64-bit-machine" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/10197242/what-should-be-the-sizeofint-on-a-64-bit-machine</a><br>  Sang-Kyu Ahn님</p></blockquote><blockquote><p>C99 표준에 따르면 sizeof(char)=1이란 것만 정해져 있고, char는 최소 8비트 라는 것이 정해져 있습니다(limits.h를 통해). 그 다음부터는 상대적인 크기로만 되어 있죠. 보통은 그래서 char가 8비트이지만, 16비트 char를 쓴다고 해서 표준 위반은 아니죠.<br>  short는 마찬가지 방식으로 16비트 이상이면 되고, int는 기계가 다루는 가장 자연스러운(?) 크기(보통은 CPU레지스터나 데이터 버스 크기에 따르겠죠)면서 최소 16비트, long은 int보다 크거나 같은 크기이면서 32비트, long long은 long보다 크거나 같으면서 최소 64비트…<br>  따라서 64비트 머신이라면 64비트 char, short, int, long, long long 도 표준 위반이 아닙니다.<br>  Hyunsok Oh님</p></blockquote><p>이미지와 소스 코드의 출처는 <a href="http://blog.junsu.kim/entry/32bit%EC%99%80-64bit%EC%9D%98-C-%EC%9E%90%EB%A3%8C%ED%98%95Data-Type-%ED%81%AC%EA%B8%B0-%EC%B0%A8%EC%9D%B4" rel="external nofollow noopener noreferrer" target="_blank">32bit와 64bit의 C 자료형(Data Type) 크기 차이</a>이다.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"\n-- General Data Type Size --\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"char size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"short size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"int size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"long size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"double size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"long double size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"\n-- Pointer Data Type Size -- \n"</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"char* size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"short* size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">short</span>*));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"int* size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int</span>*));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"long* size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">long</span>*));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"double* size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">double</span>*));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"long double* size : %d byte\n"</span>, (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>*));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C-ref-001/32bit.png" alt="32bit os에서 확인한 결과"><br><img src="/images/C-ref-001/64bit.png" alt="64bit os에서 확인한 결과">  </p><h3 id="포인터-변수-타입에-대한-이해"><a href="#포인터-변수-타입에-대한-이해" class="headerlink" title="포인터 변수 타입에 대한 이해"></a>포인터 변수 타입에 대한 이해</h3><p>32bit에서는 포인터 변수의 크기가 4byte, 64bit에서는 포인터 변수의 크기가 8byte다.<br>포인터의 크기는 OS에 의존적인데 그럼 그 변수의 타입도 OS에 의존적인 타입만 써야하지 않을까…? NO!!<br>32bit OS에서 놓고 포인터 변수의 크기도 4byte, long의 크기도 4byte이다.<br>64bit OS에서 놓고 포인터 변수의 크기도 8byte, long의 크기도 8byte이다.<br>따라서 포인터 변수의 타입은 무조건 long이면 될 것 같다.<br>그런데 왜 char<em>, short</em>, int<em>, float</em>, double* 요런 놈이 존재하는 걸까…?<br>그건 포인터를 쓰는 근본적인 목적인 메모리 주소에 대한 <code>접근</code> 때문이다.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">123.2</span>;</span><br><span class="line">    <span class="comment">// 컴파일 되지않는 컴파일러도 있지만, 메모리 주소인 정수값을 long에 담는 것이니 상관이 없다고 여긴다.</span></span><br><span class="line">    <span class="keyword">long</span> ptr = &amp;num;</span><br><span class="line">    <span class="comment">// 해당 주소로 접근해서 그 주소에 있는 값을 바꾸려고 한다.</span></span><br><span class="line">    <span class="comment">// 하지만 ptr이란 놈은 num의 주소만 알고있을 뿐이지 어떤 타입인지 알지 못한다.</span></span><br><span class="line">    <span class="comment">// 메모리에는 0과 1의 값만 잔뜩 들어가있는데 그러한 정보를 알 수 없다.</span></span><br><span class="line">    <span class="comment">// 따라서 에러가 나거나 원하는 결과가 나오지 않을 것이다.</span></span><br><span class="line">    *ptr = <span class="number">13.4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예제에서 알 수 있듯이 메모리 주소만으로는 해당 메모리 주소가 가리키는 공간이 어떠한 타입인지<br>즉 몇 byte를 조작해야 내가 원하는 결과가 나올지, 문자일지 숫자일지 등등을 판단하기 힘들다.<br>즉 포인터의 타입은 <code>포인터가 가리키는 곳의 타입</code>을 알고 있는 것이지,<br>포인터의 크기를 알고 있는 아이가 아니다.<br>포인터의 크기는 신경쓸 필요도 없고 컴파일러가 알아서 처리하는 것 같다.<br>포인터 변수의 데이터 타입이 달라도 컴파일이 되는 경우도 있지만 추천하지 않는다.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// int형 1은</span></span><br><span class="line">    <span class="comment">// 00000000 00000000 00000000 00000001</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// int*이 아니지만 컴파일 되는 컴파일러도 있다.</span></span><br><span class="line">    <span class="comment">// short*이라고 선언했기 때문에 2byte라고 인식한다.</span></span><br><span class="line">    <span class="keyword">short</span>* ptr = &amp;num;</span><br><span class="line">    <span class="comment">// short형 2는</span></span><br><span class="line">    <span class="comment">// 00000000 00000010</span></span><br><span class="line">    *ptr = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 따라서 num은 아래와 같이 바뀌어있다.</span></span><br><span class="line">    <span class="comment">// 00000000 00000010 00000000 00000001</span></span><br><span class="line">    <span class="comment">// 정수로 131073</span></span><br><span class="line">    <span class="comment">// 컴파일이 되는 경우도 있지만 올바른 값이 나오지 않으므로 권장하지 않는다.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h2><p>배열은 연속된 메모리 공간에 할당하는 것을 뜻한다.<br>연속해서 메모리 공간에 할당하는 이유는 두가지가 아닐까 싶다.  </p><ol><li>중간 중간 이빨이 나가지 않아 메모리 단편화가 안 일어나지 않을까?  </li><li>반복문 측면에서 주소값+배열 타입만 하면 되기 때문이지 않을까?<br>또한 변수를 하나만 선언해도 된다는 장점이 존재한다.</li></ol><p>그리고 배열의 이름도 포인터이다.<br>하지만 포인터와의 차이점이라면 포인터 <code>상수</code>라는 점이다.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">// 0x7fff58f16acc 0x7fff58f16acc</span></span><br><span class="line">    <span class="comment">// &amp;연산자를 붙이지도 않았는데 변수의 이름이 주소값을 가리킨다.</span></span><br><span class="line">    <span class="comment">// 즉 배열의 이름은 배열의 첫번째 요소의 주소값(포인터)와 같다.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p %p"</span>, num, &amp;num[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 포인터이기 때문에 메모리 주소로 접근이 가능하다.</span></span><br><span class="line">    *num = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, *num, *&amp;num[<span class="number">0</span>], num[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 하지만 포인터 상수이기 때문에 컴파일 에러가 난다.</span></span><br><span class="line">    num = &amp;num[<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C언어에서 배열의 이름은 포인터 상수라고 했기 때문에 아래와 같은 게 불가능하다.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 배열의 이름은 포인터 상수라서 컴파일 에러.</span></span><br><span class="line">    num = &#123;<span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">// 따라서 아래와 같이 해줘야하는데 매우 귀찮아지므로 선언과 동시에 초기화해주는 것이 좋다.</span></span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    num[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="포인터의-덧셈-뺄셈-증감-연산자-–"><a href="#포인터의-덧셈-뺄셈-증감-연산자-–" class="headerlink" title="포인터의 덧셈, 뺄셈, 증감 연산자(+, -, ++, –)"></a>포인터의 덧셈, 뺄셈, 증감 연산자(+, -, ++, –)</h3><p>포인터에서 포인터 ± n은 다음과 같은 의미를 가진다.<br>주소값 ± n * sizeof(포인터 변수 타입)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">int</span>* ptr = &amp;num;</span><br><span class="line">    <span class="comment">// 0x7fff5fb37adc</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, ptr);</span><br><span class="line">    <span class="comment">// 0x7fff5fb37adc + sizeof(int)</span></span><br><span class="line">    <span class="comment">// 0x7fff5fb37adc + 4</span></span><br><span class="line">    <span class="comment">// 즉, 0x7fff5fb37ae0</span></span><br><span class="line">    ptr += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, ptr);</span><br><span class="line">    <span class="comment">// 0x7fff5fb37ae0 + 4</span></span><br><span class="line">    <span class="comment">// 즉, 0x7fff5fb37ae4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, ++ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>배열의 이름 또한 상수이지만 일단은 포인터이기 때문에 덧셈, 뺄셈 연산자를 사용할 수 있다.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// c언어에서는 배열의 length를 구하는 api가 없다.</span></span><br><span class="line">    <span class="keyword">int</span> length = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="comment">// 배열의 이름이 포인터이기 때문에 &amp;를 안 붙여도 됨.</span></span><br><span class="line">    <span class="keyword">int</span>* ptr = num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;) <span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i++]); <span class="comment">// 1 3 5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">// 배열의 이름은 포인터이기 때문에 *를 붙여줘야 함.</span></span><br><span class="line">    <span class="comment">// 또한 덧셈 연산자나 증감 연산자 보다 * 연산자의 우선순위가 더 높아서 괄호로 우선순위를 명시해줘야 함.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;) <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(num + (i++))); <span class="comment">// 1 3 5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;) <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(ptr + (i++))); <span class="comment">// 1 3 5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">// 배열의 이름은 포인터 상수이기 때문에 아래와 같은 것이 불가능하다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i++&lt;length;) <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(num++));</span><br><span class="line">    <span class="comment">// ptr은 포인터 변수이기 때문에 아래와 같은 것이 가능하다.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i++&lt;length;) <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(ptr++)); <span class="comment">// 1 3 5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">    *(num+<span class="number">1</span>) = <span class="number">3</span>; <span class="comment">// num[1]과 동일함, 괄호 빼면 안 된다.</span></span><br><span class="line">    *(--ptr) = <span class="number">1</span>; <span class="comment">// ptr++를 3번 해줘서 ptr+3이 되었으므로 배열의 범위를 벗어났으니 한 번 빼줘야 함.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length;) <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(num + (i++))); <span class="comment">// 5 3 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참조-링크"><a href="#참조-링크" class="headerlink" title="참조 링크"></a>참조 링크</h2><ul><li><a href="http://bluese05.tistory.com/17" rel="external nofollow noopener noreferrer" target="_blank">Windows 환경에서 32 bit 와 64 bit</a>  </li><li><a href="https://kldp.org/node/102650" rel="external nofollow noopener noreferrer" target="_blank">왜 32비트 환경을 x86이라고 하는걸까요?</a>  </li><li><a href="http://blog.junsu.kim/entry/32bit%EC%99%80-64bit%EC%9D%98-C-%EC%9E%90%EB%A3%8C%ED%98%95Data-Type-%ED%81%AC%EA%B8%B0-%EC%B0%A8%EC%9D%B4" rel="external nofollow noopener noreferrer" target="_blank">32bit와 64bit의 C 자료형(Data Type) 크기 차이</a>  </li><li><a href="http://foxlime.tistory.com/115" rel="external nofollow noopener noreferrer" target="_blank">32bit 자료형 / 64bit 자료형의 크기 정리</a>  </li><li><a href="https://kldp.org/node/61089" rel="external nofollow noopener noreferrer" target="_blank">64bit 머신에서 int형이 64bit가 아닌가요?</a>  </li><li><a href="http://dev.likejazz.com/post/69840022906/long%EA%B3%BC-int%EB%8A%94-%ED%81%AC%EA%B8%B0%EA%B0%80-%EA%B0%99%EC%9D%80%EB%8D%B0-%EC%99%9C-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%82%98%EC%9A%94" rel="external nofollow noopener noreferrer" target="_blank">long과 int는 크기가 같은데 왜 존재하나요?</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Pointer </tag>
            
            <tag> Address </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) ajax 위주의 promise 실습</title>
      <link href="/2017/01/21/ES6-Promise-with-ajax/"/>
      <url>/2017/01/21/ES6-Promise-with-ajax/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-Promise-with-ajax/thumb.png" alt=""></p><h1 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h1><p>집중력을 위해 짧은 글을 지향하여 Promise 문법을 설명하지는 않았다.<br>간단히 jQuery를 사용해본 사람이라면 쉽게 이해할 수 있을 것이다.<br>내가 찾아본 대부분의 Promise 관련 예제가 setTimeout 위주여서<br>ajax 위주의 예제를 한 번 정리해보았다.  </p><a id="more"></a><h2 id="비동기-코드를-동기식으로-작성하면"><a href="#비동기-코드를-동기식으로-작성하면" class="headerlink" title="비동기 코드를 동기식으로 작성하면?"></a>비동기 코드를 동기식으로 작성하면?</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = [</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test.json"</span>,</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test2.json"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataAjax = <span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123; <span class="comment">// 4 means request is done.</span></span><br><span class="line">      <span class="keyword">if</span>(xhr.status === <span class="number">200</span>) &#123; <span class="comment">// 200 means status is successful</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> xhr.response) &#123; <span class="comment">// 받아온 json 데이터의 키와 값의 쌍을 모두 출력.</span></span><br><span class="line">          <span class="keyword">if</span>(xhr.response.hasOwnProperty(key))</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;xhr.response[key]&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 통신 상에 오류가 있었다면 오류 코드를 출력.</span></span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`http status code: <span class="subst">$&#123;xhr.status&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콘솔창을 키고 새로고침을 10번 정도 해보자.</span></span><br><span class="line"><span class="comment">// 콘솔창에 계속해서 동일한 결과가 출력되는가??</span></span><br><span class="line"><span class="comment">// 비동기 작업이기 때문에 순서를 보장하기 힘들다.</span></span><br><span class="line"><span class="comment">// 원래는 아래와 같이 나와야한다.</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line">getDataAjax(jsonURL[<span class="number">0</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">1</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">0</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">0</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">1</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">1</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">0</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">1</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">0</span>]);</span><br><span class="line">getDataAjax(jsonURL[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h2 id="비동기-코드를-비동기식-콜백-함수-으로-작성하면-ES5"><a href="#비동기-코드를-비동기식-콜백-함수-으로-작성하면-ES5" class="headerlink" title="비동기 코드를 비동기식(콜백 함수)으로 작성하면? (ES5)"></a>비동기 코드를 비동기식(콜백 함수)으로 작성하면? (ES5)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = [</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test.json"</span>,</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test2.json"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 따라서 아래와 같이 콜백 함수를 이용하여야 한다...</span></span><br><span class="line"><span class="keyword">const</span> getDataAjaxCallback = <span class="function">(<span class="params">url, res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123; <span class="comment">// 4 means request is done.</span></span><br><span class="line">      <span class="keyword">if</span>(xhr.status === <span class="number">200</span>) &#123; <span class="comment">// 200 means status is successful</span></span><br><span class="line">        res(xhr.response); <span class="comment">// 성공했을 시 실행할 콜백 함수.</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rej(xhr.status); <span class="comment">// 실패했을 시 실행할 콜백 함수.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 성공과 에러 콜백함수는 공통 함수로 빼버렸다.</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span>(data.hasOwnProperty(key))</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rej = <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">`http status code: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 새로고침 10번을 해보고도 아래와 같은 순서로 나오는지 확인해보자.</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// 함수 안에 매개변수로 콜백함수가 들어가있다.</span></span><br><span class="line">getDataAjaxCallback(jsonURL[<span class="number">0</span>], data =&gt; &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">  getDataAjaxCallback(jsonURL[<span class="number">1</span>], data =&gt; &#123;</span><br><span class="line">    res(data);</span><br><span class="line">    <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">    getDataAjaxCallback(jsonURL[<span class="number">0</span>], data =&gt; &#123;</span><br><span class="line">      res(data);</span><br><span class="line">      <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">      getDataAjaxCallback(jsonURL[<span class="number">0</span>], data =&gt; &#123;</span><br><span class="line">        res(data);</span><br><span class="line">        <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">        getDataAjaxCallback(jsonURL[<span class="number">1</span>], data =&gt; &#123;</span><br><span class="line">          res(data);</span><br><span class="line">          <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">          getDataAjaxCallback(jsonURL[<span class="number">1</span>], data =&gt; &#123;</span><br><span class="line">            res(data);</span><br><span class="line">            <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">            getDataAjaxCallback(jsonURL[<span class="number">0</span>], data =&gt; &#123;</span><br><span class="line">              res(data);</span><br><span class="line">              <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">              getDataAjaxCallback(jsonURL[<span class="number">1</span>], data =&gt; &#123;</span><br><span class="line">                res(data);</span><br><span class="line">                <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">                getDataAjaxCallback(jsonURL[<span class="number">0</span>], data =&gt; &#123;</span><br><span class="line">                  res(data);</span><br><span class="line">                  <span class="comment">// 순서를 보장하기 위해 콜백함수 안에 또 콜백함수가 들어가있다.</span></span><br><span class="line">                  getDataAjaxCallback(jsonURL[<span class="number">1</span>], data =&gt; &#123;</span><br><span class="line">                    res(data);</span><br><span class="line">                  &#125;, err =&gt; rej(err))</span><br><span class="line">                &#125;, err =&gt; rej(err))</span><br><span class="line">              &#125;, err =&gt; rej(err))</span><br><span class="line">            &#125;, err =&gt; rej(err))</span><br><span class="line">          &#125;, err =&gt; rej(err))</span><br><span class="line">        &#125;, err =&gt; rej(err))</span><br><span class="line">      &#125;, err =&gt; rej(err))</span><br><span class="line">    &#125;, err =&gt; rej(err))</span><br><span class="line">  &#125;, err =&gt; rej(err))</span><br><span class="line">&#125;, err =&gt; rej(err));</span><br></pre></td></tr></table></figure><h2 id="비동기식-코드의-순서를-아름답게-보장하려면…-ES6"><a href="#비동기식-코드의-순서를-아름답게-보장하려면…-ES6" class="headerlink" title="비동기식 코드의 순서를 아름답게 보장하려면…? (ES6)"></a>비동기식 코드의 순서를 아름답게 보장하려면…? (ES6)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonURL = [</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test.json"</span>,</span><br><span class="line">  <span class="string">"https://perfectacle.github.io/mock/test2.json"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 코드를 보면 가독성이 매우매우매우 안 좋다.</span></span><br><span class="line"><span class="comment">// 이를 위해 등장한 것이 promise.</span></span><br><span class="line"><span class="comment">// promise에 파라미터를 넘겨주기 위해선 밖에서 함수로 한 번 래핑해줘야 함.</span></span><br><span class="line"><span class="keyword">const</span> getDataAjaxPromise = <span class="function"><span class="params">url</span> =&gt;</span> (</span><br><span class="line">  <span class="comment">// thenable하게 하기 위해 Promise 인스턴스를 리턴.</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>) &#123; <span class="comment">// 4 means request is done.</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status === <span class="number">200</span>) &#123; <span class="comment">// 200 means status is successful</span></span><br><span class="line">          res(xhr.response); <span class="comment">// 성공했을 시 실행할 콜백 함수.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rej(xhr.status); <span class="comment">// 실패했을 시 실행할 콜백 함수.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 성공 콜백함수는 공통 함수로 빼버렸다.</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 코드가 한결 우아해지지 않았는가?</span></span><br><span class="line"><span class="comment">// 새로고침 10번을 해보고도 아래와 같은 순서로 나오는지 확인해보자.</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line"><span class="comment">// test: hi</span></span><br><span class="line"><span class="comment">// test2: hi</span></span><br><span class="line">getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="comment">// promise 인스턴스에 파라미터를 넘기기 위해선 다시 함수를 호출해야하고,</span></span><br><span class="line">  <span class="comment">// thenable 하게 만들어야하기 때문에 함수의 반환값(프라미스 인스턴스)을 리턴해줘야함.</span></span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>]);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  res(data);</span><br><span class="line">  <span class="keyword">return</span> getDataAjaxPromise(jsonURL[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 더 이상 비동기로 처리할 내용이 없으므로 return문은 필요 없어짐.</span></span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> res(data))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">`http status code: <span class="subst">$&#123;err&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>콜백 함수를 Promise로 바꾸긴 했지만 그래도 좀 번거로운 건 어쩔 수 없을까…?<br>그에 대한 해답이라고 하긴 뭐하지만<br><a href="/2017/01/25/ES6-ajax-with-fetch/">(ES6+) ajax를 위한 fetch와 async/await</a>에서 해결방안을 보자.  </p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> ajax </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 005일차 - 반복문(for, while, do-while), continue와 break</title>
      <link href="/2017/01/20/Java-study-005day/"/>
      <url>/2017/01/20/Java-study-005day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-005day/thumb.png" alt=""></p><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><h2 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i \t i % 3 \t i / 3"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>;)</span><br><span class="line">            System.out.printf(<span class="string">"%d \t %d \t %d%n"</span>, i, i%<span class="number">3</span>, i++/<span class="number">3</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            i % n에서 % 연산자는 n개의 숫자가 연속적으로 순환하면서 나오고</span></span><br><span class="line"><span class="comment">            i / n에서 / 연산자는 동일한 숫자가 n번 연속해서 나온다.</span></span><br><span class="line"><span class="comment">            알고리즘 어딘가 쓰일지 모르니 기억해두자.</span></span><br><span class="line"><span class="comment">            i  i % 3  i / 3</span></span><br><span class="line"><span class="comment">            0  0  0</span></span><br><span class="line"><span class="comment">            1  1  0</span></span><br><span class="line"><span class="comment">            2  2  0</span></span><br><span class="line"><span class="comment">            3  0  1</span></span><br><span class="line"><span class="comment">            4  1  1</span></span><br><span class="line"><span class="comment">            5  2  1</span></span><br><span class="line"><span class="comment">            6  0  2</span></span><br><span class="line"><span class="comment">            7  1  2</span></span><br><span class="line"><span class="comment">            8  2  2</span></span><br><span class="line"><span class="comment">            9  0  3</span></span><br><span class="line"><span class="comment">            10  1  3</span></span><br><span class="line"><span class="comment">            11  2  3</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="향상된-for문"><a href="#향상된-for문" class="headerlink" title="향상된 for문"></a>향상된 for문</h3><p>배열이나 컬렉션을 순회할 때만 사용할 수 있다.<br>es6의 for of와 유사하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1</span></span><br><span class="line"><span class="comment">  2</span></span><br><span class="line"><span class="comment">  3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> num <span class="keyword">of</span> nums) <span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          4</span></span><br><span class="line"><span class="comment">          5</span></span><br><span class="line"><span class="comment">          6</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h3><p>for문과 while문은 항상 변환이 가능하다.<br>for는 <code>반복할 횟수</code>에 포커스를, while은 <code>조건</code>에 포커스를 뒀다.  </p><h2 id="연습문제-오답"><a href="#연습문제-오답" class="headerlink" title="연습문제 오답"></a>연습문제 오답</h2><ul><li><p>char 범위 구하기<br>자꾸만 아스키 코드의 함정에 갇혀있다.<br>오답은 아닌데 어차피 int로 변환되므로 굳이 아스키코드로 대조하지 않아도<br>숫자인지 영어인지 비교가 가능했다.<br><code>ch &gt; 47 &amp;&amp; ch &lt; 58</code>가 아니라<br><code>&#39;0&#39; &lt;= ch &amp;&amp; ch &lt;=&#39;9&#39;</code><br><code>(ch &gt; 64 &amp;&amp; ch &lt; 91) || ( ch &gt; 96 &amp;&amp; ch &lt; 123)</code>가 아니라<br><code>(&#39;a&#39; &lt;= ch &amp;&amp; ch &lt;= &#39;z&#39;) || (&#39;A&#39; &lt;= ch &amp;&amp; ch &lt;= &#39;Z&#39;)</code>  </p></li><li><p>boolean형 변수 powerOn가 false일 때 true인 조건식<br>한 가지 경우밖에 떠올리지 못했다.  </p><ul><li>!powerOn  </li><li>powerOn == false  </li><li>powerOn != true  </li></ul></li></ul><ul><li><code>정수, 음수 교차 합산 문제</code><br>또 한번 나의 머리를 강타한 문제다.<br>내가 굉장히 편협한 사고 방식을 가지고 있는 게 아닐까 하는 생각이 들었다.<br>정답을 살짝 보고 나와 다른 것 같아서 아무리 생각해봤지만…<br>저자의 발끝만치도 따라오지 못했다.<br>정말 반성해야겠다.<br>&nbsp;<br>1+(-2)+3+(-4)+… 과 같은 식으로 계속 더해나갔을 때, 몇까지 더해야 총합이 100이상이 되는지 구하시오.<br>&nbsp;<br>내가 생각한 답안  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>, sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i = i&gt;<span class="number">0</span> ? -(++i) : -(--i);</span><br><span class="line">        &#125;</span><br><span class="line">        i = i&gt;<span class="number">0</span> ? i : -i;</span><br><span class="line">        System.out.printf(<span class="string">"sum: %d, i: %d"</span>, sum, --i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>저자가 제시한 답안<br>s라는 부호 변수를 놓고, 토글시키면서 쓸 줄은 전혀 몰랐다…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, s = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            sum += ++i * s;</span><br><span class="line">            s = -s;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"sum: %d, i: %d"</span>, sum, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>두 개의 주사위를 던졌을 때, 눈의 합이 6이 되는 모든 경우의 수<br>필요없는 sum을 선언했었다.<br>다른 곳에서 쓰지 않는 변수는 따로 캐싱을 하지 않아도 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; ++i&lt;<span class="number">6</span>;)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; ++j&lt;<span class="number">6</span>;)</span><br><span class="line">                <span class="keyword">if</span>(i+j == <span class="number">6</span>) System.out.printf(<span class="string">"i: %d, j: %d%n"</span>, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>정수형 변수에 랜덤한 값 담기.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 형변환을 꼭 해줘야하고, + 이전까지가 실수이므로 랩핑은 거까지만 해주면 됨.</span></span><br><span class="line"><span class="keyword">int</span> rnd = (<span class="keyword">int</span>)(Math.random() * <span class="number">6</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>문자를 정수로 바꾸기.<br>parseInt가 만능이 아니었다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'4'</span>;</span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(<span class="string">""</span> + ch);</span><br><span class="line"><span class="keyword">int</span> num2 = ch - <span class="string">'0'</span>; <span class="comment">// - 연산에 의해 int로 둘 다 형변환 되서 연산이 진행됨.</span></span><br></pre></td></tr></table></figure></li><li><p>정수의 각 자릿수 구하기.<br>문자열이면 정수로 바꾸고 진행하는 게 맘 편하다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> num = <span class="number">12345</span>;</span><br><span class="line">      <span class="keyword">while</span>(num &gt; <span class="number">0</span>) &#123; <span class="comment">// 이 놈의 조건이 참 유용하다. 괜히 for로 해서 변수 선언할 필요 없다.</span></span><br><span class="line">          System.out.println(num % <span class="number">10</span>);</span><br><span class="line">          num /= <span class="number">10</span>;</span><br><span class="line">          <span class="comment">// 결국 마지막엔 10 이하의 값을 나누게 되므로 0이 된다.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="continue와-break"><a href="#continue와-break" class="headerlink" title="continue와 break"></a>continue와 break</h2><p>이중 반복문이 있을 때 반복문에 이름을 붙이고, continue와 break 뒤에 반복문의 이름을 붙이면 해당 반복문을 탈출한다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*00</span></span><br><span class="line"><span class="comment">        01</span></span><br><span class="line"><span class="comment">        10</span></span><br><span class="line"><span class="comment">        11*/</span></span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                System.out.println(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 반복문 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ASM) 참고용 정리 - 기계어와 ASM, 고급 언어의 관계</title>
      <link href="/2017/01/06/ASM-ref-001/"/>
      <url>/2017/01/06/ASM-ref-001/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ASM-ref-001/thumb.png" alt=""></p><h2 id="가상-기계-Virtual-Machine"><a href="#가상-기계-Virtual-Machine" class="headerlink" title="가상 기계(Virtual Machine)"></a>가상 기계(Virtual Machine)</h2><p>기계를 추상화한 것.<br>소프트웨어일 수도, 하드웨어일 수도 있다.<br>각각의 가상 기계는 대응되는 언어들이 존재한다.<br>아래의 표에서 레벨에 해당하는 것들이 가상 기계이다.</p><table><thead><tr><th>Level</th><th>Language</th></tr></thead><tbody><tr><td>High-Level Language</td><td>Java, C, etc.</td></tr><tr><td>Assembly Language</td><td>x86 ASM, 65c816 ASM, etc.</td></tr><tr><td>Instruction Set Architecture(ISA)</td><td>Machine Code</td></tr><tr><td>Digital Logic</td><td>???</td></tr></tbody></table><a id="more"></a><h2 id="어셈블리어-Low-Level-Language"><a href="#어셈블리어-Low-Level-Language" class="headerlink" title="어셈블리어(Low-Level Language)"></a>어셈블리어(Low-Level Language)</h2><p><a href="https://namu.wiki/w/%EA%B8%B0%EA%B3%84%EC%96%B4" rel="external nofollow noopener noreferrer" target="_blank">기계어</a><br>고급 언어로 만들던, 저급 언어(ASM)으로 만들던 어차피 기계어로 바뀌어 실행되게 된다.<br><img src="/images/ASM-ref-001/machine-code.jpg" alt="좋은 뇌만 있다면 키보드가 매우 간단해도 된다....(물론 시간도 엄청 걸린다)"><br>즉 프로그래머는 무엇을 만들던 간에 사실 위와 같이 코딩하는 것이다.<br>컴퓨터는 0과 1로 이루어진 전자 계산기이기 때문에 사실 0과 1만으로 이루어진<br>기계어만으로 코딩이 가능하다는 사실이다.<br>단, 가독성이 매우 안 좋아서 시간이 엄청 걸린다는 단점이 존재한다.<br>이러한 단점을 보완하고자 기계어와 1:1로 매칭되는 어셈블리어를 만들고,<br>그 어셈블리어를 기계어로 해석해주는 가상 기계를 만들게 된 것이다.<br>하지만 특정 프로세서에 의존적이기 때문에 이식성이 없다.  </p><h2 id="고급-언어-High-Level-Language"><a href="#고급-언어-High-Level-Language" class="headerlink" title="고급 언어(High-Level Language)"></a>고급 언어(High-Level Language)</h2><p>컴퓨터의 성능이 비약적으로 발전함에 따라 단순한 어플리케이션이 아니라<br>방대한 규모의 어플리케이션들을 개발하기 시작했다.<br>하지만 기계어와 1:1로 매칭되는 어셈블리어로 개발하기에는<br>시간과 유지보수 측면에서 너무나 많은 제약이 존재하였다.<br>이러한 단점을 보완하고자 어셈블리어를 좀 더 추상화 시킨 고급 언어가 등장하게 된다.<br>고급 언어는 어셈블리어와 일대다 관계를 가지고,<br>이는 기계어와도 일대다 관계를 가진다는 것을 뜻한다.<br>아래 예시를 통해 무슨 말인지 이해하자.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Y;</span><br><span class="line"><span class="keyword">int</span> X = (Y + <span class="number">4</span>) * <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>고급 언어로는 딱 2줄에 불과한 코드이다.<br>이 코드가 기계어와 1대1로 매칭되는 어셈블리어로 변환시켜 보자.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov  eax, Y     ; move Y to the EAX <span class="keyword">register</span></span><br><span class="line">add  eax, <span class="number">4</span>     ; add <span class="number">4</span> to the EAX <span class="keyword">register</span></span><br><span class="line">mov  ebx, <span class="number">3</span>     ; move <span class="number">3</span> to the EBX <span class="keyword">register</span></span><br><span class="line">imul ebx        ; multiply EAX by EBX</span><br><span class="line">mov  X, eax     ; move EAX to X</span><br></pre></td></tr></table></figure><p>위와 같이 단 2줄의 고급 언어 코드는 5줄의 어셈블리어와 매칭이 되는 걸 볼 수 있다.</p><h2 id="어셈블리어는-왜-쓸까"><a href="#어셈블리어는-왜-쓸까" class="headerlink" title="어셈블리어는 왜 쓸까?"></a>어셈블리어는 왜 쓸까?</h2><p>누가 요새 저렇게 무식(?)한 문법으로 코딩을 하냐고 비아냥 할 수 있다.<br>생산성이 무지 낮은 건 사실이다.<br>하지만 고급 언어에서 불가능한 것이 있다.<br>바로 <code>하드웨어의 직접 접근</code>을 제공하지 않는 경우가 많다.<br>하드웨어, 장치 드라이버, 펌웨어 등등을 개발할 때<br>하드웨어로 직접 접근하지 못한다는 것은 매우 치명적이다.<br>또한 메모리를 매우 경제적으로 사용하기 때문에<br>소량의 메모리를 가지고 있는 전화기, 냉장고 등등의<br>임베디드 프로그램을 작성할 때 제격이다.</p><h3 id="장치-드라이버"><a href="#장치-드라이버" class="headerlink" title="장치 드라이버"></a>장치 드라이버</h3><p>일반적인 운영체제 명령어에 대응하는 구체적인 하드웨어 동작으로 변환하는 프로그램.<br>똑같은 장치라 하더라도 운영체제에 따라서 다른 장치 드라이버를 개발해야한다.  </p><h2 id="저는-임베디드나-하드웨어-쪽-개발을-안-할건데요"><a href="#저는-임베디드나-하드웨어-쪽-개발을-안-할건데요" class="headerlink" title="저는 임베디드나 하드웨어 쪽 개발을 안 할건데요?"></a>저는 임베디드나 하드웨어 쪽 개발을 안 할건데요?</h2><p>어셈블리어를 배우면 하드웨어, 운영체제, 응용 프로그램 간의<br>상호 작용을 전체적으로 이해하는데 큰 도움을 준다.<br>지금 당장은 어렵고 지루하더라도 훗날에 큰 도움이 되리라 믿고 있다.</p><h2 id="각-가상-기계별-언어-호환-방법"><a href="#각-가상-기계별-언어-호환-방법" class="headerlink" title="각 가상 기계별 언어 호환 방법?"></a>각 가상 기계별 언어 호환 방법?</h2><p>기계어의 상위 언어(저급, 고급 언어)들은 L1이라고 칭하겠다.    </p><ul><li>해독(Interpretation) - 인터프리터??<br>L1 프로그램이 실행됨에 따라 L1의 각 명령어는<br>기계어로 작성된 프로그램에 의해서 해독(decode)되기 때문에<br>실행이 가능해진다.<br>L1 프로그램은 즉시 실행되기 시작하지만<br>각 명령어는 먼저 해동되어야 실행될 수 있다.  </li><li>변환(Translation) - 컴파일??<br>L1 프로그램 전체가 특별히 설계된 기계어 프로그램에 의해<br>기계어 프로그램으로 변환된다.<br>그 후 변환된 기계어 프로그램은 컴퓨터 하드웨어에서 직접 실행될 수 있다.</li></ul><h2 id="어셈블러-링커-디버거"><a href="#어셈블러-링커-디버거" class="headerlink" title="어셈블러, 링커, 디버거"></a>어셈블러, 링커, 디버거</h2><ul><li>어셈블러 (Assembler)<br>어셈블리 언어로 작성된 소스 코드를 기계어로 변환하는 유틸리티 프로그램  </li><li>링커 (Linker)<br>어셈블러가 생성한 각각의 파일들을 하나의 실행 파일로 합치는 유틸리티 프로그램  </li><li>디버거 (Debugger)<br>프로그램이 실행되는 동안 프로그램을 단계적으로 실행하고,<br>레지스터와 메모리를 살펴보는 유틸리티 프로그램</li></ul><h2 id="javap를-이용해서-자바-클래스를-역어셈블-Deassemble-해보자"><a href="#javap를-이용해서-자바-클래스를-역어셈블-Deassemble-해보자" class="headerlink" title="javap를 이용해서 자바 클래스를 역어셈블(Deassemble)해보자."></a>javap를 이용해서 자바 클래스를 역어셈블(Deassemble)해보자.</h2><p><a href="http://a07274.tistory.com/44" rel="external nofollow noopener noreferrer" target="_blank">Javap 란? (자바 역어셈블러)</a><br>역어셈블은 바이트 코드로 변환된 class 파일을<br>원본인 고급 언어(java)로 역컴파일(Decompile) 하는 게 아니라<br>클래스 파일 내부의 기본 구조와 역어셈블 코드(JVM의 바이너리 코드)만 나오게 된다.<br>클래스 내부의 상수와 함수들의 목록을 볼 때 유용하게 쓰인단다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Y = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> X = (Y + <span class="number">4</span>) * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">javap -c test2</span><br><span class="line">0: bipush        6 // 6을 push??</span><br><span class="line">2: istore_1        // 1번 레지스터에 저장</span><br><span class="line">3: iload_1         // 1번 레지스터를 로드</span><br><span class="line">4: iconst_4        // 상수 4</span><br><span class="line">5: iadd            // 로드한 값(1번 레지스터와 상수 4)을 덧셈한 값을 1번 레지스터에 저장.</span><br><span class="line">6: iconst_3        // 상수 3</span><br><span class="line">7: imul            // 로드한 값(1번 레지스터와 상수 3)을 곱한 값을 1번 레지스터에 저장.</span><br><span class="line">8: istore_2        // 로드한 값(1번 레지스터)를 2번 레지스터에 저장.</span><br><span class="line">9: <span class="built_in">return</span>          // 함수 종료</span><br></pre></td></tr></table></figure><h2 id="진수-변환하기"><a href="#진수-변환하기" class="headerlink" title="진수 변환하기"></a>진수 변환하기</h2><p>이는 프로그래밍 언어마다 대체적으로 내장된 라이브러리들이 있다.<br>하지만 진수를 손으로 변환하는 알고리즘을 그대로 옮긴다고 생각하고,<br>즉 내장된 라이브러리를 직접 구현한다는 생각으로 코딩을 해보았다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Integer.toParseInt(String int, int radix)를 구현(radix는 2로 고정)</span></span><br><span class="line">    <span class="comment">// 2진수 문자열을 10진수 정수로 반환.</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binToDec</span><span class="params">(String bin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> decimal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bitIdx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bin.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 비트 별로 하나씩 뽑아서 문자를 정수로 변경.</span></span><br><span class="line">            bitIdx = Integer.parseInt(bin.substring(i, i+<span class="number">1</span>));</span><br><span class="line">            <span class="comment">// 2^n-1-i * bitIdx;</span></span><br><span class="line">            <span class="keyword">if</span>(bitIdx != <span class="number">0</span>) decimal += Math.pow(<span class="number">2</span>, bin.length()-<span class="number">1</span>-i) * bitIdx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decimal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Integer.toParseInt(String hex, int radix)를 구현(radix는 16으로 고정)</span></span><br><span class="line">    <span class="comment">// 16진수 문자열을 10진수 정수로 반환.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hexToDec</span><span class="params">(String hex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> decimal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bitIdx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;hex.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 비트 별로 하나씩 뽑아서 문자를 정수로 변경.</span></span><br><span class="line">            <span class="keyword">switch</span> (hex.substring(i, i+<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"A"</span>: <span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">                    bitIdx = <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"B"</span>: <span class="keyword">case</span> <span class="string">"b"</span>:</span><br><span class="line">                    bitIdx = <span class="number">11</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"C"</span>: <span class="keyword">case</span> <span class="string">"c"</span>:</span><br><span class="line">                    bitIdx = <span class="number">12</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"D"</span>: <span class="keyword">case</span> <span class="string">"d"</span>:</span><br><span class="line">                    bitIdx = <span class="number">13</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"E"</span>: <span class="keyword">case</span> <span class="string">"e"</span>:</span><br><span class="line">                    bitIdx = <span class="number">14</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"F"</span>: <span class="keyword">case</span> <span class="string">"f"</span>:</span><br><span class="line">                    bitIdx = <span class="number">15</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    bitIdx = Integer.parseInt(hex.substring(i, i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 16^n-1-i * bitIdx;</span></span><br><span class="line">            <span class="keyword">if</span>(bitIdx != <span class="number">0</span>) decimal += Math.pow(<span class="number">16</span>, hex.length()-<span class="number">1</span>-i) * bitIdx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decimal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Integer.toBinaryString(int dec)를 구현.</span></span><br><span class="line">    <span class="comment">// 10진수 정수를 2진수 문자열로 반환.</span></span><br><span class="line">    <span class="function">String <span class="title">decToBin</span><span class="params">(<span class="keyword">int</span> dec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> quot = dec;</span><br><span class="line">        String rest = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>(quot &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            rest = quot % <span class="number">2</span> + rest;</span><br><span class="line">            quot = quot / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> quot + rest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Integer.toHexString(int dec)를 구현.</span></span><br><span class="line">    <span class="comment">// 10진수 정수를 16진수 문자열로 반환.</span></span><br><span class="line">    <span class="function">String <span class="title">decToHex</span><span class="params">(<span class="keyword">int</span> dec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> quot = dec;</span><br><span class="line">        String rest = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>(quot &gt; <span class="number">15</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (quot % <span class="number">16</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    rest = <span class="string">"A"</span> + rest;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                    rest = <span class="string">"B"</span> + rest;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    rest = <span class="string">"C"</span> + rest;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                    rest = <span class="string">"D"</span> + rest;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                    rest = <span class="string">"E"</span> + rest;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                    rest = <span class="string">"F"</span> + rest;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    rest = quot % <span class="number">16</span> + rest;</span><br><span class="line">            &#125;</span><br><span class="line">            quot = quot / <span class="number">16</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (quot) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"A"</span> + rest;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"B"</span> + rest;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"C"</span> + rest;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"D"</span> + rest;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"E"</span> + rest;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"F"</span> + rest;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> quot + rest;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASM </tag>
            
            <tag> Assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++) 참고용 정리 - 변수의 주소</title>
      <link href="/2017/01/02/Cpp-ref-001/"/>
      <url>/2017/01/02/Cpp-ref-001/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Cpp-ref-001/thumb.png" alt="">  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">int</span> num3 = num;</span><br><span class="line">    <span class="comment">// 같은 값이던 변수를 참조하던 다른 메모리 공간을 차지함.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;num2 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0x7FFF5322DAD8</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;num &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0x7FFF5322DAD4</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;num3 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0x7FFF5322DAD0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Pointer </tag>
            
            <tag> Address </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 004일차 - 연산자(우선 순위 및 결합 규칙), switch 문</title>
      <link href="/2017/01/02/Java-study-004day/"/>
      <url>/2017/01/02/Java-study-004day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-004day/thumb.png" alt=""></p><h2 id="연산자-우선순위"><a href="#연산자-우선순위" class="headerlink" title="연산자 우선순위"></a>연산자 우선순위</h2><p>x &lt;&lt; 2 <strong>+</strong> 1 =&gt; x &lt;&lt; (2 + 1)<br>data &amp; 0xFF <strong>==</strong> 0 =&gt; data &amp; (0xFF == 0)<br>x &lt; -1 || x &gt; 3 <strong>&amp;&amp;</strong> x &lt; 5 =&gt; x &lt; -1 || (x &gt; 3 &amp;&amp; x &lt; 5)  </p><a id="more"></a><p>괄호는 연산자가 아닌 우선순위를 임의로 정하는 기호임.</p><h2 id="연산자-결합-규칙"><a href="#연산자-결합-규칙" class="headerlink" title="연산자 결합 규칙"></a>연산자 결합 규칙</h2><p>x = <strong>y = 3</strong> =&gt; <strong>x = 3</strong> =&gt; x = 3, y = 3<br>식을 평가하면 단 하나의 결과를 얻을 수 있음.<br>할당 연산자인 y = 3도 하나의 식으로 쓸 수 있으며<br>저장된 값, 즉 3을 결과로 반환함.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        System.out.println(num = <span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="형변환"><a href="#형변환" class="headerlink" title="형변환"></a>형변환</h2><p>타입이 다른 피 연산자끼리의 연산은 값 손실 최소화를 위해 큰 타입으로 자동 변환.<br>형변환 연산자 생략해도 자동으로 붙음.<br>연산 결과도 큰 타입의 결과로 반환.<br>1.1f + 1L =&gt; 1.1f + (float)1L =&gt; 1.1f + 1.0f = 2.1f<br>int보다 작은 byte, short, char는 자동으로 int로 바뀜.<br>1 + ‘A’ =&gt; 1 + (int)’A’ =&gt; 1 + 65 = 66<br>boolean을 제외한 기본형은 연산이 가능함.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> j = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 다 오류다.</span></span><br><span class="line">        System.out.println(j + <span class="string">'A'</span>);</span><br><span class="line">        System.out.println(j + <span class="number">1</span>);</span><br><span class="line">        System.out.println(j + <span class="number">2.1</span>);</span><br><span class="line">        System.out.println(++j);</span><br><span class="line">        System.out.println(j &lt;&lt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="산술-연산"><a href="#산술-연산" class="headerlink" title="산술 연산"></a>산술 연산</h2><p>0으로 나눴을 때 무조건 오류가 나는 게 아니었다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">3.0</span> / <span class="number">0</span>); <span class="comment">// Infinity, 3.0 / 0.0 으로 형변환이 일어나기 때문.</span></span><br><span class="line">        System.out.println(<span class="number">3</span> / <span class="number">0</span>); <span class="comment">// java.lang.ArithmeticException: / by zero</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>나머지 연산자도 한번 보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">3.0</span> % <span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line">        System.out.println(<span class="number">3</span> % <span class="number">0</span>); <span class="comment">// java.lang.ArithmeticException: / by zero</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>int 보다 작은 타입끼리의 연산은 형변환이 필수적이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> num = <span class="number">1</span>, num2 = <span class="number">3</span>, num3;</span><br><span class="line">        num3 = <span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 에러 발생 안함.</span></span><br><span class="line">        num3 = (<span class="keyword">byte</span>)(num + num2); <span class="comment">// 이렇게 해줘야함.</span></span><br><span class="line">        <span class="comment">// (byte)num + num2 =&gt; (byte)num + (int)num2 =&gt; (int)num + (int)num2와 같아짐.</span></span><br><span class="line">        num3 = (<span class="keyword">byte</span>)num + num2; <span class="comment">// 에러 발생.</span></span><br><span class="line">        <span class="comment">// + 때문에 형변환이 발생.</span></span><br><span class="line">        num3 = num + num2; <span class="comment">// (int)num + (int)num2 =&gt; (int)(num + num2)가 됨.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>더 큰 타입으로 선언했다고 해도 형변환 연산을 적절하게 써줘야 손실이 일어나지 않는다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">2000000</span>;</span><br><span class="line">        <span class="comment">// int 형을 long으로 변환 후에 저장. (long)(num * num2)</span></span><br><span class="line">        <span class="comment">// 이미 오버플로우가 발생한 int를 long으로 변환한들 원래 값으로 돌아오지 않음.</span></span><br><span class="line">        <span class="keyword">long</span> num3 = num * num2;</span><br><span class="line">        System.out.println(num3); <span class="comment">// -1454759936</span></span><br><span class="line">        <span class="comment">// 아래 3가지 중 하나처럼 하면 됨.</span></span><br><span class="line">        num3 = (<span class="keyword">long</span>)num * num2;</span><br><span class="line">        num3 = num * (<span class="keyword">long</span>)num2;</span><br><span class="line">        num3 = (<span class="keyword">long</span>)num * (<span class="keyword">long</span>)num2;</span><br><span class="line">        System.out.println(num3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>리터럴과 상수 간의 연산은 실행 과정동안 변하는 값이 아니기 때문에<br>컴파일러가 미리 덧셈 연산을 수행한 후 그 결과를 저장함.<br>int num = 11 * 11이라고 치면 컴파일 후에는<br>int num = 121이 저장되는 거임.<br>하지만 변수가 들어간 연산은 계산 결과를 예측할 수가 없음.<br>int num = num2 * 11이라고 치면 컴파일 후에도<br>int num = num2 * 11이 저장됨.</p><p>위와 같은 이유로 리터럴과 상수 간의 연산은 계산 결과를 예측가능하기 때문에<br>형변환 연산자가 생략이 가능한 경우도 있음.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">char</span> c2 = <span class="string">'b'</span>;</span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">'a'</span> + <span class="number">1</span>; <span class="comment">// 리터럴 간의 연산이므로 컴파일 후엔 'b'가 저장됨.</span></span><br><span class="line">        <span class="keyword">char</span> c4 = c2 + <span class="number">1</span>; <span class="comment">// 상수와 리터럴 간의 연산이므로 컴파일 후엔 'c'가 저장됨.</span></span><br><span class="line">        <span class="comment">// 에러, 변수가 껴있는 연산이므로 컴파일 후에도 c1 + 1로 저장됨.</span></span><br><span class="line">        <span class="comment">// 컴파일 후에 c1이 int보다 작으므로 (int)c1 + 1과 같이 변하게 됨.</span></span><br><span class="line">        <span class="keyword">char</span> c5 = c1 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="문자열-비교-메소드-equals"><a href="#문자열-비교-메소드-equals" class="headerlink" title="문자열 비교 메소드 equals()"></a>문자열 비교 메소드 equals()</h2><p>문자열 클래스 String은 기본형이 아니다.<br>따라서 String 클래스의 인스턴스들은 참조형이다.<br>참조형은 변수, 상수에 값을 저장하는 게 아니라 주소(번지)를 저장한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"ab"</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">"ab"</span>);</span><br><span class="line">        System.out.println(str == str2); <span class="comment">// false, 둘은 다른 주소값을 참조함.</span></span><br><span class="line">        System.out.println(str.equals(str2)); <span class="comment">// true, 둘은 같은 문자열을 갖고 있음.</span></span><br><span class="line">        str = str2 = <span class="string">"ab"</span>;</span><br><span class="line">        <span class="comment">// new 키워드를 쓰지 않으면 클래스의 인스턴스가 되지 않아서인지 둘 다 true</span></span><br><span class="line">        System.out.println(str == str2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(str.equals(str2)); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="문자가-숫자인가-영문자인가"><a href="#문자가-숫자인가-영문자인가" class="headerlink" title="문자가 숫자인가? 영문자인가?"></a>문자가 숫자인가? 영문자인가?</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">'1'</span>;</span><br><span class="line">        System.out.println(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>); <span class="comment">// 숫자면 true</span></span><br><span class="line">        ch = <span class="string">'c'</span>;</span><br><span class="line">        <span class="comment">// 괄호가 없어도 되지만 가독성을 위해 넣음.</span></span><br><span class="line">        System.out.println((<span class="string">'A'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'Z'</span>) || (<span class="string">'a'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'z'</span>)); <span class="comment">// 영어 대소문자면 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="효율적인-논리-연산자"><a href="#효율적인-논리-연산자" class="headerlink" title="효율적인 논리 연산자"></a>효율적인 논리 연산자</h2><p>x || y =&gt; x가 참이면 무조건 참.<br>즉 x가 참이면 y는 평가하지도 않음.<br>x &amp;&amp; y =&gt; x가 거짓이면 무조건 거짓.<br>즉 x가 거짓이면 y는 평가하지도 않음.<br>이렇게 좌변에 어떤 값을 넣는가에 따라서 연산 속도에 영향을 미침.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>, num2 = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num == <span class="number">0</span> || ++num2 != <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// num == 0이 참이되자 ++num2는 실행도 안 됨.</span></span><br><span class="line">        System.out.println(num + <span class="string">" "</span> + num2); <span class="comment">// 0 1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(num != <span class="number">0</span> || ++num2 == <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// num != 0이 거짓이되자 ++num2가 실행됨.</span></span><br><span class="line">        System.out.println(num + <span class="string">" "</span> + num2); <span class="comment">// 0 2</span></span><br><span class="line"></span><br><span class="line">        System.out.println(num != <span class="number">0</span> &amp;&amp; ++num2 == <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// num != 0이 거짓이되자 ++num2는 실행도 안 됨.</span></span><br><span class="line">        System.out.println(num + <span class="string">" "</span> + num2); <span class="comment">// 0 2</span></span><br><span class="line"></span><br><span class="line">        System.out.println(num == <span class="number">0</span> &amp;&amp; ++num2 == <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// num == 0이 참이되자 ++num2가 실행 됨.</span></span><br><span class="line">        System.out.println(num + <span class="string">" "</span> + num2); <span class="comment">// 0 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="비트-연산자"><a href="#비트-연산자" class="headerlink" title="비트 연산자"></a>비트 연산자</h2><p>전자 계산기를 배우니까 드디어 이해가 간다.<br>논리 게이트에서  </p><ul><li>AND 연산자(&amp;)<br>특정 비트의 값을 뽑아낼 때 사용.  </li><li>OR 연산자(|)<br>특정 비트의 값을 변경할 때 사용.  </li><li>XOR 연산자(^)<br>XOR을 한 번 때리면 암호화, 두 번 때리면 복호화  </li><li>NOT 연산자(~)<br>1의 보수를 얻을 때 사용.<br>십진수를 이진수로 바꾼 후 각 비트별로 연산을 때린 후 다시 십진수로 바꾼 결과를 반환한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">toBinaryString</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String zero = <span class="string">"00000000000000000000000000000000"</span>;</span><br><span class="line">        String tmp = zero + Integer.toBinaryString(num);</span><br><span class="line">        <span class="keyword">return</span> tmp.substring(tmp.length()-<span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            num = 0XAB                  00000000000000000000000010101011</span></span><br><span class="line"><span class="comment">            num2 = 0XF                  00000000000000000000000000001111</span></span><br><span class="line"><span class="comment">            0XAB &amp; 0XF = 0XB            00000000000000000000000000001011</span></span><br><span class="line"><span class="comment">            0XAB | 0XF = 0XAF           00000000000000000000000010101111</span></span><br><span class="line"><span class="comment">            0XAB ^ 0XF = 0XA4           00000000000000000000000010100100</span></span><br><span class="line"><span class="comment">            0XAB ^ 0XF ^ 0XF = 0XAB     00000000000000000000000010101011</span></span><br><span class="line"><span class="comment">            num3 = 0X2                  00000000000000000000000000000010</span></span><br><span class="line"><span class="comment">            ~num3 = -3                  11111111111111111111111111111101</span></span><br><span class="line"><span class="comment">            num3 + ~num3 = -1           11111111111111111111111111111111</span></span><br><span class="line"><span class="comment">            ~num3 + 1 = -2              11111111111111111111111111111110</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0xAB</span>, num2 = <span class="number">0xF</span>, num3 = <span class="number">2</span>;</span><br><span class="line">        System.out.printf(<span class="string">"num = %#X\t\t\t\t\t%s%n"</span>, num, toBinaryString(num));</span><br><span class="line">        System.out.printf(<span class="string">"num2 = %#X\t\t\t\t\t%s%n"</span>, num2, toBinaryString(num2));</span><br><span class="line">        <span class="comment">// 1인 비트들만 뽑아냄.</span></span><br><span class="line">        System.out.printf(<span class="string">"%#X &amp; %#X = %#X\t\t\t%s%n"</span>, num, num2, num &amp; num2, toBinaryString(num &amp; num2));</span><br><span class="line">        <span class="comment">// 특정 비트들을 1로 바꿈.</span></span><br><span class="line">        System.out.printf(<span class="string">"%#X | %#X = %#X\t\t\t%s%n"</span>, num, num2, num | num2, toBinaryString(num | num2));</span><br><span class="line">        <span class="comment">// 간단한 암호화.</span></span><br><span class="line">        System.out.printf(<span class="string">"%#X ^ %#X = %#X\t\t\t%s%n"</span>, num, num2, num ^ num2, toBinaryString(num ^ num2));</span><br><span class="line">        <span class="comment">// 간단히 암호화한 것을 복호화.</span></span><br><span class="line">        System.out.printf(<span class="string">"%#X ^ %#X ^ %#X = %#X\t\t%s%n"</span>, num, num2, num2, num ^ num2 ^ num2, toBinaryString(num ^ num2 ^ num2));</span><br><span class="line">        System.out.printf(<span class="string">"num3 = %#X\t\t\t\t\t%s%n"</span>, num3, toBinaryString(num3));</span><br><span class="line">        <span class="comment">// 1의 보수를 구함.</span></span><br><span class="line">        System.out.printf(<span class="string">"~num3 = %d\t\t\t\t\t%s%n"</span>, ~num3, toBinaryString(~num3));</span><br><span class="line">        <span class="comment">// 직접 더해보니 모든 비트가 1이 되는 걸 보니 1의 보수가 맞음.</span></span><br><span class="line">        System.out.printf(<span class="string">"num3 + ~num3 = %d\t\t\t%s%n"</span>, num3 + ~num3, toBinaryString(num3 + ~num3));</span><br><span class="line">        <span class="comment">// 1의 보수에 1을 더하면 2의 보수, 즉 음수를 구할 수 있음.</span></span><br><span class="line">        System.out.printf(<span class="string">"~num3 + 1 = %d\t\t\t\t%s%n"</span>, ~num3 + <span class="number">1</span>, toBinaryString(~num3 + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="쉬프트-연산자"><a href="#쉬프트-연산자" class="headerlink" title="쉬프트 연산자"></a>쉬프트 연산자</h2><p>연산 속도가 상당히 빠르다.<br>하지만 가독성이 안 좋다.<br>피연산자의 타입을 일치시키지 않는다.<br>byte, short, char는 int로 자동 형변환이 일어난다.<br>속도가 엄청 중요시되는 곳이 아니면 곱셈, 나눗셈을 쓰자.  </p><h2 id="삼항-연산자"><a href="#삼항-연산자" class="headerlink" title="삼항 연산자"></a>삼항 연산자</h2><p>역시 형변환이 일어난다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">true</span> ? <span class="number">0</span> : .<span class="number">1</span>); <span class="comment">// 0.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="대입-연산자-할당-연산자"><a href="#대입-연산자-할당-연산자" class="headerlink" title="대입 연산자(할당 연산자)"></a>대입 연산자(할당 연산자)</h2><p>lvalue = rvalue<br>l은 left, r은 right의 준말.<br>lvalue에는 변수와 이 값을 변경할 수 있는 것만 들어갈 수 있고,<br>rvalue에는 변수 뿐만 아니라 식, 상수, 리터럴 등등이 가능하다.  </p><ol><li>x = y = 3  </li><li>y = 3 =&gt; 3  </li><li>x = 3</li></ol><h2 id="복합-연산자"><a href="#복합-연산자" class="headerlink" title="복합 연산자"></a>복합 연산자</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>;</span><br><span class="line">        i += <span class="number">1</span> + j; <span class="comment">// i = i + (1 + j) = i + 1 + j</span></span><br><span class="line">        System.out.println(i); <span class="comment">// 4</span></span><br><span class="line">        i *= <span class="number">1</span> + j; <span class="comment">// i = i * (1 + j)</span></span><br><span class="line">        System.out.println(i); <span class="comment">// 12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="반복문-switch"><a href="#반복문-switch" class="headerlink" title="반복문 - switch"></a>반복문 - switch</h2><h3 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h3><ul><li>가독성이 좋아짐.  </li><li>조건을 한 번만 검사하면 돼서 속도가 빠름.  </li><li>if 문으로 표현 가능하나 switch 문으로 표현 불가능한 경우가 있음.  </li></ul><h3 id="제약조건"><a href="#제약조건" class="headerlink" title="제약조건"></a>제약조건</h3><ul><li>switch 조건식은 (정수)리터럴, 변수, 상수, (문자)리터럴, 변수, 상수, (문자열)리터럴, 변수, 상수만 가능  </li><li>case 문의 값은 정수 리터럴, 정수 상수, 문자 리터럴, 문자 상수, 문자열 리터럴, 문자열 상수만 가능함.  </li><li>문자는 자동으로 int형으로 변환돼서 정수와 같이 취급됨.  </li><li>자바7부터 문자열 관련 내용이 추가됨.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">47</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="string">'1'</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">49</span>: <span class="comment">// 조건식은 char이지만 int와 호환 가능</span></span><br><span class="line">                System.out.println(<span class="string">"str"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> num: <span class="comment">// num은 final 지정 예약어를 써서 상수로 만들었으므로 가능함.</span></span><br><span class="line">                System.out.println(<span class="string">"str"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> num2: <span class="comment">// 변수는 불가능!</span></span><br><span class="line">                System.out.println(<span class="string">"str"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"asdf"</span>: <span class="comment">// 조건식은 char인데 값은 string이라서 오류.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="연습-문제-오답"><a href="#연습-문제-오답" class="headerlink" title="연습 문제 오답"></a>연습 문제 오답</h2><ul><li><p>연산자의 우선 순위<br>사칙 연산이 시프트 연산자보다 우선순위가 높다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// int는 32비트, 33 % 32 = 1;</span></span><br><span class="line">        System.out.println(<span class="number">1</span> + x &lt;&lt; <span class="number">33</span>); <span class="comment">// 3 &lt;&lt; 33 = 3 &lt;&lt; 1 = 3 * 2^1 = 3 * 2 = 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>나의 머리를 때린 문제  </p><blockquote><p>아래는 변수 num의 값보다 크면서도 가장 가까운 10의 배수에서 변수 num의 값을<br>뺀 나머지를 구하는 코드이다. 예를 들어 24의 크면서도 가장 가까운 10의 배수는 30이다.<br>19의 경우 20이고, 81의 경우 90이 된다. 30에서 24를 뺀 나머지는 6이기 때문에<br>변수 num의 값이 24라면 6을 결과로 얻어야 한다.</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">24</span>;</span><br><span class="line">        <span class="comment">// 내가 생각한 답.</span></span><br><span class="line">        System.out.println((num / <span class="number">10</span> + <span class="number">1</span>) * <span class="number">10</span> - num);</span><br><span class="line">        <span class="comment">// 저자가 생각한 답. 진짜 천재다. 문제는 함정 투성이었다 ㅠㅠ</span></span><br><span class="line">        System.out.println(<span class="number">10</span> - num%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>실수형 비교<br>boolean result = d==f2; → boolean result = (float)d==f2;<br>비교연산자도 이항연산자이므로 연산 시에 두 피연산자의 타입을 맞추기 위해 형변환이 발생한다.<br>그래서 double과 float의 연산은 double과 double의 연산으로 자동형변환 되는데<br>실수는 정수와 달리 근사값으로 표현을 하기 때문에 float를 double로 형변환했을 때 오차가 발생할 수 있다.<br>그래서 float값을 double로 형변환하기 보다는 double값을 유효자리수가 적은<br>float로 형변환해서 비교하는 것이 정확한 결과를 얻는다.<br>&nbsp;<br>이제부터 나만의 해설.<br>같은 수가 있을 때 float로 표현한 실수가 double로 표현한 실수보다 오차가 클 수 있다.<br>따라서 오차가 큰 float를 double로 바꿔도 오차가 큰 double이 된다.<br>따라서 float를 double로 바꿨다 하더라도<br>오차가 큰 double와 오차가 작은 double을 비교하면 신뢰할 수 없는 값이 나온다.<br>그럼 역으로 오차가 작은 double을 오차가 큰 float로 형변환 시키는 것이다.<br>이러한 역발상을 통해 둘 다 오차가 큰 float로 만들어서 비교하면 신뢰할 수 있는 결과가 나온다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 연산자 </tag>
            
            <tag> 조건문 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 003일차 - 형변환, 정규화, 연산자</title>
      <link href="/2017/01/01/Java-study-003day/"/>
      <url>/2017/01/01/Java-study-003day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-003day/thumb.png" alt=""></p><h2 id="형변환-캐스팅-Casting"><a href="#형변환-캐스팅-Casting" class="headerlink" title="형변환(캐스팅, Casting)"></a>형변환(캐스팅, Casting)</h2><p>기본형(primitive type)에서 boolean을 제외한 나머지 타입들은 형변환이 가능.<br>역시 자스를 먼저 배우고 나니 자스의 자유로운 형변환이 그리울 때가 있다.<br>또한 기본형과 참조형(reference type)간의 형변환은 불가능하다.<br>또한 실수형을 정수형으로 바꾸면 반올림 하지 않고 소수점 이하를 다 짜른다.<br>왜냐하면 정수형에서는 소수점 이하를 표현할 방법이 없기 때문이다.<br>형변환을 할 때 캐스팅 연산자를 써줘야하지만 생략하면 자동으로 컴파일러가 붙여준다.<br>하지만 손실이 발생할 수 있는 경우에는 오류가 발생한다.<br>따라서 손실이 발생하는 경우에는 무조건 캐스팅 연산자를 써줘야한다.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">short</span> num = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = num;</span><br><span class="line">        num2 = ch;</span><br><span class="line">        <span class="keyword">long</span> num3 = <span class="number">12345678781234L</span>;</span><br><span class="line">        <span class="comment">// float은 4byte지만 부동 소수점 형태로 표현되기 때문에 8byte인 long보다 더 넓은 범위를 표현할 수 있다.</span></span><br><span class="line">        <span class="comment">// 하지만 정밀도 때문에 오차가 발생할 수는 있다.</span></span><br><span class="line">        <span class="keyword">float</span> num4 = num3;</span><br><span class="line">        <span class="keyword">double</span> num5 = num3;</span><br><span class="line">        <span class="comment">// ch와 num은 둘 다 2byte지만 ch는 unsigned short와 같이 부호가 없으므로 표현 범위가 다름.</span></span><br><span class="line">        <span class="comment">// 따라서 서로 손실이 발생하므로 형변환 연산자가 꼭 존재해야함.</span></span><br><span class="line">        ch = (<span class="keyword">char</span>)num;</span><br><span class="line">        num = (<span class="keyword">short</span>)ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="십진수를-2진수로-보기"><a href="#십진수를-2진수로-보기" class="headerlink" title="십진수를 2진수로 보기"></a>십진수를 2진수로 보기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = (<span class="keyword">int</span>)-<span class="number">2.8</span>d;</span><br><span class="line">        <span class="comment">// num = 11111111111111111111111111111110</span></span><br><span class="line">        System.out.println(<span class="string">"num = "</span> + Integer.toBinaryString(num));</span><br><span class="line">        num = (<span class="keyword">int</span>)<span class="number">2.8</span>d;</span><br><span class="line">        System.out.println(<span class="string">"num = "</span> + Integer.toBinaryString(num)); <span class="comment">// num = 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="정규화"><a href="#정규화" class="headerlink" title="정규화"></a>정규화</h2><p>정규표현식의 정규는 많이 들어봤는데 그것과는 많이 다른 것이다.<br>기본적으로 부동소수점에 대한 이해를 하고 있어야한다.<br>우선 정의부터 살펴보면  </p><blockquote><p>2진수로 변환된 실수를 저장기 전에 1.xxx x 2<sup>n</sup>의 형태로 변환하는 과정.<br>2진수로 변환된 실수를 정수부에 1만 남기고 소수점에 관한 정보는 2<sup>n</sup>으로 표현한 것.</p></blockquote><p>십진 실수 10.625를 2진 실수로 바꾸면 1010.101이다.<br>2진수로 변환된 실수를 정규화하면 1.010101 x 2<sup>3</sup>가 된다.<br>이를 지수 표기법(Exponential Notation)으로 바꾸면 1.010101e3이 된다.<br>이 정규화된 수를 토대로 IEE754로 표기하여 저장하는 것이다.</p><h2 id="연산자-operator"><a href="#연산자-operator" class="headerlink" title="연산자(operator)"></a>연산자(operator)</h2><ul><li>식(expression)<br>연산자와 피연산자를 조합하여 계산하고자 하는 바를 표현한 것.<br>2+3 등등</li><li>식을 평가(evaluation)하다.<br>식을 계산하여 결과를 얻는 것<br>단 하나의 식을 평가(계산)하면 단 하나의 결과를 얻음.  </li><li>문(statement)<br>식을 프로그램에 포함시키려면 식의 끝에 세미콜론을 붙여 하나의 문으로 만들어야함.<br>2+3; 등등<br>하지만 결과를 얻었지만 쓰이지 않고 사라지기 때문에 무의미함.<br>나중에 사용하기 위해 메모리 상의 공간(변수, 상수)에 저장한 후 꺼내 쓰면 됨.<br>int num = 1 + 2;<br>int num2 = num * 3;<br>변수 선언 = 식; =&gt; 하나의 문장.<br>하지만 다른 곳에서도 쓰이지 않을 결과라면 굳이 식을 문으로 바꾸지 않아도 됨.<br>아래와 같이 메소드의 매개변수로 쓰이는 등등의 경우와 같음.<br>System.out.println(2+3);<br>식을 혼자 쓴 게 아니라 문 안에 식이 쓰인 것이다.  </li></ul><h2 id="연습문제-오답"><a href="#연습문제-오답" class="headerlink" title="연습문제 오답"></a>연습문제 오답</h2><ul><li>char의 형변환!<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">'A'</span> + <span class="string">'B'</span>); <span class="comment">// 65 + 66 = 131</span></span><br><span class="line">      System.out.println(<span class="string">'1'</span> + <span class="number">2</span>); <span class="comment">// 49 + 2 = 51</span></span><br><span class="line">      System.out.println(<span class="string">'1'</span> + <span class="string">'2'</span>); <span class="comment">// 49 + 50 = 99</span></span><br><span class="line">      System.out.println(<span class="string">""</span> + <span class="keyword">true</span>); <span class="comment">// "true"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>문자열 + any type → 문자열 + 문자열 → 문자열<br>any type + 문자열 → 문자열 + 문자열 → 문자열</p><ul><li><p>System은 키워드가 아니었다!</p></li><li><p>참조형 변수(reference type) 4byte이다!!<br><a href="https://labofengineer.wordpress.com/2013/07/08/java-%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/" rel="external nofollow noopener noreferrer" target="_blank">JAVA 변수타입</a><br>참조형 변수는 null 또는 객체의 주소(4 byte, 0x0~0xffffffff)를 값으로 갖는다.<br>null은 어떤 값도 갖고 있지 않음, 즉 어떠한 객체도 참조하고 있지 않다는 것을 뜻한다.</p></li><li><p>캐스팅 연산자 생략</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 표현할 수 있는 범위더라도 int =&gt; 4byte, byte =&gt; 1byte 이므로 캐스팅 연산자 꼭 써줘야함.</span></span><br><span class="line">      <span class="keyword">byte</span> num2 = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>접근 지정자, 지정 예약어, 메소드<br>접근 지정자 - public, protect, default, private<br>지정 예약어 - this, static, final<br>메소드 - 리턴타입 이름(매개변수) {}<br>지정 예약어 this를 빼고 설명.  </p><ul><li>지정 예약어끼리는 순서 상관 없음 =&gt; static final이던 final static이던  </li><li>접근 지정자와 지정 예약어도 순서 상관 없음 =&gt; public static이던 static public이던  </li><li>하지만 메소드는 무조건 접근 지정자와 지정 예약어 뒤에 와야함.  </li><li>접근 지정자를 생략하면 default 접근 지정자가 적용됨.  </li><li>지정 예약어는 생략 가능하며 생략해도 기본값이 없음.</li><li>메소드에서는 매개변수를 제외한 모든 것은 생략 불가능. 즉 기본 값이 없음.</li></ul></li><li><p>변수의 기본값  </p><ul><li>참조형 - null  </li><li>기본형  <ul><li>boolean - false  </li><li>char - ‘\u0000’  </li><li>byte - 0  </li><li>short - 0  </li><li>int - 0  </li><li>long - 0L or 0l  </li><li>float - 0.0F or 0.0f  </li><li>double - 0.0 or 0.0D or 0.0d<br>byte, short는 컴파일 할 때 자동으로 int 타입으로 바꿈.<br>long에 접미어 L을 붙이는 이유는 int와 다른 메모리 공간을 차지하게 하기 위함.<br>float도 double과 차별을 두기 위해 접미어를 붙이게 끔 설계됨. </li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 형변환 </tag>
            
            <tag> 정규화 </tag>
            
            <tag> 연산자 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 002일차 - char의 형변환과 실수형(부동 소수점)</title>
      <link href="/2016/12/31/Java-study-002day/"/>
      <url>/2016/12/31/Java-study-002day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-002day/thumb.png" alt=""></p><h2 id="char의-연산자별-형변환"><a href="#char의-연산자별-형변환" class="headerlink" title="char의 연산자별 형변환."></a>char의 연산자별 형변환.</h2><p>전위&amp;후위 연산자는 형변환을 하지 않고<br>기타 연산자는 int로 형변환을 함.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="number">65</span>;</span><br><span class="line">        System.out.println(ch++); <span class="comment">// 'A'</span></span><br><span class="line">        System.out.println(ch); <span class="comment">// 'B'</span></span><br><span class="line">        System.out.println(++ch); <span class="comment">// 'C'</span></span><br><span class="line">        ch = <span class="number">65</span>;</span><br><span class="line">        System.out.println(ch); <span class="comment">// 'A'</span></span><br><span class="line">        System.out.println(ch+<span class="number">0</span>); <span class="comment">// 65</span></span><br><span class="line">        System.out.println(+ch); <span class="comment">// 65</span></span><br><span class="line">        System.out.println(-ch); <span class="comment">// -65</span></span><br><span class="line">        System.out.println(ch &lt;&lt; <span class="number">1</span>); <span class="comment">// 130</span></span><br><span class="line">        System.out.println(ch); <span class="comment">// 'A'</span></span><br><span class="line">        <span class="keyword">short</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// num = ch + 1; // error</span></span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        num2 = ch + <span class="number">1</span>; <span class="comment">// 에러가 나지 않음.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>170102 내용 수정<br>형변환은 쉬프트 연산자(&lt;&lt;, &gt;&gt;), 증감 연산자(++, –)에서만 일어나지 않음.</li></ul><h2 id="오버-플로우-overflow"><a href="#오버-플로우-overflow" class="headerlink" title="오버 플로우(overflow)"></a>오버 플로우(overflow)</h2><p>정수형<br>최대값 + 1 == 최소값<br>최소값 - 1 == 최대값</p><p>실수형<br>최대값 + @ == Infinity<br>최소값 - @ == -Infinity<br>표현할 수 없는 아주 작은 0에 수렴하는 값 == 0.0(underflow)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Float.MAX_VALUE * <span class="number">2</span>); <span class="comment">// Infinity</span></span><br><span class="line">        System.out.println(Float.MAX_VALUE * -<span class="number">2</span>); <span class="comment">// -Infinity</span></span><br><span class="line">        System.out.println(Float.MIN_VALUE * <span class="number">0.1f</span>); <span class="comment">// 0.0 (underflow)</span></span><br><span class="line">        System.out.println(Float.MIN_VALUE * -<span class="number">0.1f</span>); <span class="comment">// -0.0 (underflow)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실수형의-오차"><a href="#실수형의-오차" class="headerlink" title="실수형의 오차"></a>실수형의 오차</h2><p><a href="https://ko.wikipedia.org/wiki/IEEE_754" rel="external nofollow noopener noreferrer" target="_blank">IEEE 754</a><br>전기 전자 기술자 협회(IEEE)에서 개발했고, 컴퓨터에서 부동 소수점을 표기하기 위한 표준.<br>실수를 표기하는 데는 위와 같이 부동 소수점이 있고, 고정 소수점이 있다.<br>고정 소수점은 매우 직관적이라는 장점이 있지만<br>범위가 작고, 정밀도가 낮다.(이 말은 오차 없이 표현해낼 수 있는 수의 범위가 매우 좁다고 이해하면 되려나??)<br>그에 따라 부동 소수점이 현재 쓰이는 것으로 알고 있다.</p><p>나는 정밀도(precision)에 대해 이해하지 못해서 정리를 해보자 한다.<br>float 정밀도: 7자리<br>double 정밀도: 15자리<br>나는 아래와 같이 소수점을 제외한 십진수 7개를 뜻하는 줄 알았다.<br>xxxx.xxx<br>x.xxxxxx  </p><p>뭐 반은 맞고 반은 틀렸달까… 예제를 보고 이해해보자.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 정밀도는 오차 없이 표현하는 10진수의 갯수이다.</span></span><br><span class="line">        <span class="comment">// 오차가 있을 수도, 없을 수도 있다.</span></span><br><span class="line">        <span class="comment">// 10진수 8개를 오차없이 표현해냈다.</span></span><br><span class="line">        System.out.println(<span class="number">1.2345678e-3f</span>); <span class="comment">// 0.0012345678</span></span><br><span class="line">        <span class="comment">// 10진수 8개를 오차있이 표현해냈다.</span></span><br><span class="line">        System.out.println(<span class="number">1.2345679e-3f</span>); <span class="comment">// 0.001234568</span></span><br><span class="line">        <span class="comment">// double은 15자리의 정밀도를 가지므로 10진수 8개 정도는 거뜬하다.</span></span><br><span class="line">        System.out.println(<span class="number">1.2345679e-3</span>); <span class="comment">// 0.0012345679</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 소수점 계산시 오차가 발생한다.<br>0.1 + 0.2 == 0.30000000000000004<br>아주 괴랄한 숫자가 나온다.<br>왜 나오는지 파악해보자.<br>는 귀찮으니 아래 글들을 참고하자.<br><a href="http://namsieon.com/232" rel="external nofollow noopener noreferrer" target="_blank">소수점 때문에 바보가 되는 컴퓨터??</a><br><a href="https://kldp.org/node/116672" rel="external nofollow noopener noreferrer" target="_blank">컴퓨터에서는 0.1을 어떻게 저장/표현 하나요?!</a><br><a href="http://loveknof.tistory.com/entry/10%EC%A7%84%EC%88%98-%EC%86%8C%EC%88%98%EC%A0%90%EC%9D%84-2%EC%A7%84%EC%88%98-%EB%B3%80%ED%99%98" rel="external nofollow noopener noreferrer" target="_blank">10진수 소수점을 2진수 변환</a><br>소수점끼리의 계산은 끝자리가 5로 끝나는 (0.00005, 0.231423415 등등) 숫자들끼리의 연산이 아니고서는<br>정확한 값이 나온다는 확신을 가질 수가 없다.<br>왜냐하면 5로 끝나지 않는 0.1 같은 십진 소수를 이진 소수로 바꿀 방법이 없다.<br>10진수로는 유한소수여도 2진수로는 무한 소수인 경우가 존재하기 때문에…<br>2진수로도 무한 소수가 아니더라도 가수를 저장할 수 있는 공간이 한정돼있기 때문에<br>버려지는 수에 의해 오차가 발생하기도 한다.<br>아마 같은 수라도 고정 소수점에서는 오차가 발생하지 않을 수도 있지 않을까.. 하는 생각을 한다.<br>이는 부동 소수점이 가지는 단점이며 소수를 정수로 바꿔서 연산 후 다시 소수로 바꾸는 방법이 있다.<br>정수는 오차가 없기 때문이다.</p><h2 id="실수형의-정밀도"><a href="#실수형의-정밀도" class="headerlink" title="실수형의 정밀도"></a>실수형의 정밀도</h2><p>왜 float은 7자리, double은 15자리의 정밀도를 가질까?<br>그것은 float은 1자리의 부호 비트, 8자리의 지수 비트, <strong>23자리의 가수 비트</strong> = 32비트<br><strong>23자리의 2진수</strong> =&gt; 약 7자리의 10진수가 표현이 가능하기 때문이다.<br>double도 찾아보면 마찬가지의 공식으로 결과가 나온다.</p><h2 id="바이어스-표기법"><a href="#바이어스-표기법" class="headerlink" title="바이어스 표기법"></a>바이어스 표기법</h2><p><a href="http://thrillfighter.tistory.com/349" rel="external nofollow noopener noreferrer" target="_blank">부동소수점에 대한 이해</a><br>위 링크를 참조하자. 부동 소수점에서 지수부를 표현할 때는 바이어스 표기법을 사용한다.<br>바이어스 표기법 = 2의 보수 + 바이어스 상수.</p><p>바이어스 상수: 2<sup>n-1</sup>-1<br>n은 지수를 나타내는 비트의 갯수.<br>음의 지수를 나타내기 위해 n비트로 나타낼 수 있는 갯수를 반으로 쪼개고(n-1)<br>0이 포함돼있기 때문에 -1을 해준다.<br>정수를 표현할 때는 음수가 표현할 수 있는 갯수가 1개가 더 많았는데<br>실수의 지수를 표현할 때는 양수가 표현할 수 있는 갯수가 1개 더 많은 차이점이 존재한다.  </p><p>float: 2<sup>8-1</sup>-1 = 2<sup>7</sup>-1 = 128-1 = 127(-127~128의 지수 표현 가능)<br>double: 2<sup>52-1</sup>-1 = 2<sup>51</sup>-1 = 알아서 계산<br>하지만 자바에서는 마지막 끝 값들인 -2<sup>n-1</sup>-1 ~ 2<sup>n-1</sup>은 NaN, ±Infinity를 표현하는데 쓰임.<br>따라서 실제로 쓰이는 범위는<br>-2<sup>n-1</sup> + 1 ~ 2<sup>n-1</sup>-1 이라고 보면 됨</p><p>double은 너무 크니까 float를 기준으로 설명.<br><sup>3</sup>을 바이어스 표기법으로 나타내면<br>3 + 127 = 0000<strong>0101</strong> + 0111<strong>1111</strong> = 1000<strong>0010</strong><br>위와 같이 하면 어려우니까 그냥 아래와 같이 계산하는 게 훨씬 쉽다.<br>지수 + 바이어스 상수 = 10진수 =&gt; 2의 보수법으로 변경<br>3 + 127 = 130 = 1000<strong>0010</strong><br><sup>-126</sup> = -126 + 127 = 1 = 0000<strong>0001</strong><br><sup>128</sup> = 128 + 127 = 255 = 1111<strong>1111</strong></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
            <tag> 부동소수점 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java) 자바의 정석 3판 001일차 - 컴퓨터 이론, 리터럴 &amp; 변수 &amp; 변수</title>
      <link href="/2016/12/30/Java-study-001day/"/>
      <url>/2016/12/30/Java-study-001day/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Java-study-001day/thumb.png" alt=""></p><h2 id="컴퓨터는-왜-2진수를-사용할까"><a href="#컴퓨터는-왜-2진수를-사용할까" class="headerlink" title="컴퓨터는 왜 2진수를 사용할까?"></a>컴퓨터는 왜 2진수를 사용할까?</h2><p>10진법이 익숙한 이유는 손가락이 10개이기 때문이지 않을까?<br>에니악은 10진법 체계였지만 전기회로는 전압이 불안정해서 전압을 10단계로 나누어 처리하는데 한계가 있음<br>에드박은 단 두가지 단계, 전기가 흐르면 1, 전기가 흐르지 않으면 0만으로 동작하게 설계되었다<br>따라서 컴퓨터와 같은 전기회로는 2진 체계를 사용하게 되었다.  </p><a id="more"></a><h2 id="그렇다면-8진수와-16진수는-왜-생겼을까"><a href="#그렇다면-8진수와-16진수는-왜-생겼을까" class="headerlink" title="그렇다면 8진수와 16진수는 왜 생겼을까?"></a>그렇다면 8진수와 16진수는 왜 생겼을까?</h2><p>2진수는 숫자를 표현하기 위해 상당히 많은 자릿수를 차지한다.<br>코딩할 때도 이렇게 많은 자릿수는 가독성을 해칠 수 있다.<br>따라서 이런 단점을 보완하기 위해 8진수와 16진수가 등장했다.<br>그렇다면 왜 8진수와 16진수일까?<br>2진수 2자리로는 4진수를<br>2진수 3자리로는 8진수를<br>2진수 4자리로는 16진수를 표현할 수 있다.<br>2진수 2자리는 그닥 많은 자릿수를 절약할 수 없어서 사용을 안 하게 된 게 아닐까 싶다…<br>8진수를 사용하는 대표적인 예는 리눅스나 FTP 등에서 파일이나 폴더에 관한 권한을 표현하기 위해 많이 쓰인다.<br>777 을 예로 들면<br>r 읽기 허용(4) w 쓰기 허용(2) x 실행 허용(1) 을 다 더하면 7이 나오고<br>u 사용자(소유자) g 그룹 o 기타(사용자와 그룹을 제외한 사람) 순서로 기술하면 된다.<br>16진수를 사용하는 대표적인 예는 rgb 컬러 코드(#ff00ff), 유니코드(\u0061, U+0061, 0x0061 등등)에서 쓰인다.</p><h2 id="boolean은-1bit가-아닌-왜-1byte일까"><a href="#boolean은-1bit가-아닌-왜-1byte일까" class="headerlink" title="boolean은 1bit가 아닌 왜 1byte일까?"></a>boolean은 1bit가 아닌 왜 1byte일까?</h2><p><a href="http://stackoverflow.com/questions/4626815/why-is-a-boolean-1-byte-and-not-1-bit-of-size" rel="external nofollow noopener noreferrer" target="_blank">Why is a boolean 1 byte and not 1 bit of size?</a><br>CPU가 메모리(RAM)의 주소(address)에 접근해야하는데<br>하나의 메모리 주소가 가지는 데이터의 크기는 1byte(8bit)이다.<br>따라서 CPU가 메모리 주소에 접근해서 사용할 수 있는 최소한의 단위는 1byte가 된다.<br>따라서 boolean은 1bit가 아니라 1byte가 된 것이다.</p><h2 id="1byte는-왜-8bit일까"><a href="#1byte는-왜-8bit일까" class="headerlink" title="1byte는 왜 8bit일까?"></a>1byte는 왜 8bit일까?</h2><p><a href="http://air802.tistory.com/72" rel="external nofollow noopener noreferrer" target="_blank">아스키(Ascii)</a><br><a href="https://kldp.org/node/153459" rel="external nofollow noopener noreferrer" target="_blank">메모리 하나당 차지하는 바이트 수에 대해 궁금한 점이 있습니다.</a><br><a href="https://kldp.org/node/149091" rel="external nofollow noopener noreferrer" target="_blank">메모리 주소당 데이터용량이 1바이트인 이유가 먼가요??</a><br><a href="http://zepeh.tistory.com/313" rel="external nofollow noopener noreferrer" target="_blank">1바이트는 왜 8비트일까?</a><br>과거에는 1byte가 7bit, 9bit 등등이던 시절이 있다고 하지만 현재는 8비트로 거의 표준이 된 것 같다.<br>이에 대한 이유로 내 나름대로 결론을 내린 것은 미국에서 컴퓨터를 개발했기 때문이라고 본다.<br>미국에서 문자를 사용하기 위한 코드로 ascii 코드(7bit)가 있는데<br>왜 7bit가 아닌 8bit가 1byte가 되었을까?<br>내 나름대로 추측을 해보자면  </p><ol><li>데이터 송수신의 오류를 검출하기 위한 패리티 비트로 1비트가 추가됐다.  </li><li>유럽권을 고려해서 확장 아스키 코드를 베이스로 정했다.</li></ol><p>정확히 뭔지는 모르겠으나 ascii 코드를 베이스로 1byte의 bit수가 정해진 것에는 틀림이 없는 것 같다.</p><h2 id="리터럴-변수-상수"><a href="#리터럴-변수-상수" class="headerlink" title="리터럴, 변수, 상수"></a>리터럴, 변수, 상수</h2><ul><li>리터럴 - 짧게 얘기하면 변하지 않는 값<br>길게 얘기하면 우리는 변하지 않는 값을 일상생활에서는 상수라고 불렀다.<br>하지만 상수는 프로그래밍 세계에서는 좀 다른 뜻으로 불리기 때문에<br>그와 차별성을 부여하기 위해 리터럴이라고 붙였다.<br>“ch”, ‘c’, 123, 123.55 등등 모두 리터럴이다.  </li><li>변수 - 짧게 얘기하면 변하는 수<br>길게 얘기하면 단 하나의 값을 저장할 수 있는 메모리 상의 공간.<br>int num = 2;<br>int num;<br>까지만 하면 램(RAM, Random Access Memory)에서<br>사용 중이지 않은 주소 4개를 랜덤하게 접근해서 공간 확보만 함.<br>램은 여러 프로그램이 공유하는 자원이므로 이전에 다른 프로그램에 의해 저장된 값이 남아있을 수 있음.<br>그 다른 프로그램에 의해 저장된 알 수 없는 값을 쓰레기값(garbage value)이라고 함.  </li><li>상수 - 짧게 얘기하면 변하지 않는 수<br>길게 얘기하면 단 하나의 <strong>변하지 않는</strong> 값을 저장할 수 있는 메모리 상의 공간.<br>상수가 필요한 이유는 리터럴에 <strong>의미있는 이름</strong>을 붙여서 가독성을 높이기 위함이다.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 상수를 사용하지 않음.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> triangleArea = <span class="number">20</span> * <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 상수를 사용함.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> WIDTH = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> HEIGHT = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> triangleArea = WIDTH * HEIGHT / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바의 정석 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) Interface</title>
      <link href="/2016/12/25/es6-interface/"/>
      <url>/2016/12/25/es6-interface/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/es6-interface/thumb.png" alt=""></p><p>이 포스트는 <a href="https://festi.kr/festi/gdg-korea-2016-devfest-seoul/" rel="external nofollow noopener noreferrer" target="_blank">GDG 2016</a>에서 발표하신 <a href="https://www.facebook.com/hika00" rel="external nofollow noopener noreferrer" target="_blank">맹기완</a> 님의 <a href="http://www.bsidesoft.com/?p=2913" rel="external nofollow noopener noreferrer" target="_blank">발표</a>를 듣고 감명을 받아 정리해본 글이다.<br><a href="/2017/04/22/ES6-Iterator/">이터레이터 인터페이스와 이터러블 인터페이스</a>는 다음 포스트에서 정리할 예정이다.<br>이 글을 읽고난 후에 <a href="/2017/04/16/ES6-Symbol/">(ES6) Symbol</a>에 대한 글부터 읽어보길 바란다.<br>다소 짧아서 어디 공유하기 부끄럽지만 이렇게 짧은 내용들이 집중해서 읽기에 참 좋은 것 같다.</p><a id="more"></a><h1 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h1><p>ECMAScript2015(이하 ES6) 들어서서 <code>인터페이스</code>는 <code>고유 명사</code>가 되었다.</p><blockquote><p>고유명사(固有名詞)<br>낱낱의 특정한 사물이나 사람을 다른 것들과 구별하여 부르기 위하여 고유의 기호를 붙인 이름.</p></blockquote><p>Java에서 Interface는 다음과 같은 명세를 준수해야 Interface라고 부른다.<br>자바 허접이라 다음 링크를 참조하였다.<br><a href="http://blog.eairship.kr/122" rel="external nofollow noopener noreferrer" target="_blank">JAVA 강좌 21편. 인터페이스(Interface)</a><br><a href="https://slipp.net/questions/52" rel="external nofollow noopener noreferrer" target="_blank">Interface는 객체인가?</a>  </p><ul><li>메소드는 public abstract로 선언된 추상 메소드만을 가진다.</li><li>변수는 public static final로 선언된 상수만을 가진다.</li></ul><p>위 2가지 조건만 만족하면 자바에서는 인터페이스라고 불리운다.<br>나머지는 인터페이스의 특징인 것 같아 생략하였다. (다중 상속 등등)<br>자바에서 인터페이스는 고유 명사이며 위와 같은 의미를 가진다.</p><p>이와 같이 ES6에서도 이제 인터페이스는 자바와 같이 고유 명사가 되었다.<br>그 말은 ES6에서의 인터페이스는 다른 곳에서 쓰이는 인터페이스와는 다른 것이라는 걸 뜻한다.<br>아래 사이트를 가도 볼 수 있다.<br><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-iteration" rel="external nofollow noopener noreferrer" target="_blank">http://www.ecma-international.org/ecma-262/6.0/#sec-iteration</a><br>그럼 ES6에서 말하는 인터페이스는 무엇인지 살펴보자.  </p><ul><li>객체가 가져야하는 키를 명시.</li><li>그 키가 가져야 하는 값을 명시.</li></ul><p>위 조건만 만족하면 ES6에서는 인터페이스라고 불리울 수 있다.<br>인터페이스는 객체나 클래스가 아닌 하나의 <code>명세</code>라고 보면 될 것 같다.<br>그럼 test 인터페이스를 정의해보자.<br><strong>안타깝게도 사용자 인터페이스를 정의할 방법은 없는 것 같지만,<br>설명을 위해 작성해보았다.</strong>  </p><ul><li>test와 testing이라는 키를 가짐.</li><li>test는 매개변수로 숫자를 받고 매개변수의 제곱한 결과를 반환함.</li><li>testing은 boolean 값을 가짐.</li></ul><p>하나만 하면 심심하니 test2라는 인터페이스도 정의해보자.</p><ul><li>name과 age라는 키를 가짐.</li><li>name은 string 값을 가짐.</li><li>age는 number 값을 가짐.</li></ul><p>그럼 위 인터페이스를 충족하는 객체를 만들어보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  test: <span class="function"><span class="params">num</span> =&gt;</span> <span class="built_in">Math</span>.pow(num, <span class="number">2</span>),</span><br><span class="line">  testing: <span class="literal">false</span>,</span><br><span class="line">  name: <span class="string">"양간장"</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  etc: <span class="string">"위 키들을 제외하고는 어떠한 키가 오던 상관이 없다."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj 객체는</p><ul><li>test와 test2 인터페이스 조건을 충족하므로 test, test2 인터페이스를 따르는 객체이다.<ul><li>test 인터페이스의 조건을 충족하므로 test 인터페이스를 따르는 객체이다.<ul><li>test라는 키를 가지고 있다.  <ul><li>test라는 키의 값은 숫자를 매개변수로 받고 매겨변수로 받은 숫자를 제곱해서 반환한다.  </li></ul></li><li>testing이라는 키를 가지고 있다.  <ul><li>testing이라는 키의 값은 boolean 값을 가진다.  </li></ul></li></ul></li><li>test2 인터페이스의 조건을 충족하므로 test2 인터페이스를 따르는 객체이다.<ul><li>name이라는 키를 가지고 있다.<ul><li>name이라는 키의 값은 string 값을 가진다.</li></ul></li><li>age라는 키를 가지고 있다.<ul><li>age라는 키의 값은 number 값을 가진다.</li></ul></li></ul></li></ul></li></ul><p>그 이외에 키에 관해서는 test와 test2 인터페이스에서 명세한 바가 없으므로 전혀 상관이 없다.<br>이는 마치 덕타이핑(duck typing)과 매우 유사한 것 같다.</p><blockquote><p>덕 타이핑(duck typing)<br>오리처럼 생겨서 오리처럼 걷고 오리처럼 꽥꽥 소리를 낸다면 그건 오리다<br>라는 속담에서 유래됐다고 한다.</p></blockquote><p>name, age 키가 있고 그 키에 맞는 값들을 가진다면 그건 test2 인터페이스를 따르는 것이다.<br>다른 어떠한 키가 오더라도 위 두개의 키만 조건을 준수한다면 test2 인터페이스를 따른다는 것이다.<br>좀 다른 건가…?</p><p>역시 남이 떠다 먹여주는 정보들만 받아 먹다보니 혼자서 탐구하는 것은 정말 어려운 것 같다.</p><p>뭐 여하튼 이렇듯 ES6에서는 사용자가 인터페이스를 정의할 수 없다보니<br>표준으로 정의해놓은 인터페이스가 있는데 그게 바로<br>이터러블 인터페이스와 이터레이터 인터페이스인데 길어서 인터페이스는 빼는 것 같다.<br>위 두 인터페이스 외에도 많은 것 같은데(사실 모른다.)<br>대표적인 두 인터페이스만 다음 포스트에서 다뤄야할 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> Interface </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) Number 객체와 함수</title>
      <link href="/2016/12/24/ES6-Number-object-and-function/"/>
      <url>/2016/12/24/ES6-Number-object-and-function/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-Number-object-and-function/thumb.png" alt=""><br><a href="/2016/12/23/ES6-Number-type/">(ES6) 숫자형</a>을 보고 이 글을 보는 걸 추천한다.</p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="#Number-객체-Global-객체">Number 객체(Global 객체)</a>  <ul><li><a href="#Properties">Properties</a>  </li><li><a href="#Methods">Methods</a>  </li></ul></li><li><a href="#Number-함수">Number 함수</a>  <ul><li><a href="#함수">함수</a>  </li><li><a href="#생성자">생성자</a></li></ul></li><li><a href="#Number-↔-String">Number ↔ String</a></li></ul><h2 id="Number-객체-Global-객체"><a href="#Number-객체-Global-객체" class="headerlink" title="Number 객체(Global 객체)"></a>Number 객체(Global 객체)</h2><p>ES5까지 Number 객체는 거의 <a href="http://noritersand.tistory.com/536" rel="external nofollow noopener noreferrer" target="_blank">래퍼 객체</a>의 역할만을 수행했다.<br>하지만 ES6에 들어서면서 다양한 프로퍼티와 메소드들이 생기면서<br>래퍼 객체 이상의 역할을 수행하는 전역 객체와 같이 쓸 수 있게 되었다.<br>래퍼 객체는 원시 타입의 값을 객체로 다루기 위한 객체이며,<br>래퍼 객체의 진가는 prototype 프로퍼티를 통해 드러나게 된다.<br>래퍼 객체를 어떻게 사용하는지는 나중에 보도록 하고,<br>일단 Number 객체의 구조를 보도록 하자.  </p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Number</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Number-object-and-function/number-object.png" alt="">  </p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p><code>*</code> 표시는 ES6에서 새로 추가됨.</p><ul><li><a href="#Number-POSITIVE-INFINITY-amp-Number-NEGATIVE-INFINITY-amp-Number-NaN">Number.POSITIVE_INFINITY</a>  </li><li><a href="#Number-POSITIVE-INFINITY-amp-Number-NEGATIVE-INFINITY-amp-Number-NaN">Number.NEGATIVE_INFINITY</a>  </li><li><a href="#Number-POSITIVE-INFINITY-amp-Number-NEGATIVE-INFINITY-amp-Number-NaN">Number.NaN</a>  </li><li><a href="#Number-MIN-VALUE-amp-Number-MAX-VALUE">Number.MIN_VALUE</a>  </li><li><a href="#Number-MIN-VALUE-amp-Number-MAX-VALUE">Number.MAX_VALUE</a>  </li><li><a href="#Number-MIN-SAFE-INTEGER-amp-Number-MAX-SAFE-INTEGER">Number.MIN_SAFE_INTEGER</a> <code>*</code>  </li><li><a href="#Number-MIN-SAFE-INTEGER-amp-Number-MAX-SAFE-INTEGER">Number.MAX_SAFE_INTEGER</a> <code>*</code>   </li><li><a href="#Number-EPSILON">Number.EPSILON</a> <code>*</code></li><li><a href="#Number-prototype">Number.prototype</a></li></ul><p>표준 프로퍼티들은 상수이다.<br>즉 변경이 불가능하다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON = <span class="string">"asdf"</span>; <span class="comment">// 오류는 나지 않는다.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.EPSILON); <span class="comment">// 2.220446049250313e-16</span></span><br></pre></td></tr></table></figure><h4 id="Number-POSITIVE-INFINITY-amp-Number-NEGATIVE-INFINITY-amp-Number-NaN"><a href="#Number-POSITIVE-INFINITY-amp-Number-NEGATIVE-INFINITY-amp-Number-NaN" class="headerlink" title="Number.POSITIVE_INFINITY &amp; Number.NEGATIVE_INFINITY &amp; Number.NaN"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY" rel="external nofollow noopener noreferrer" target="_blank">Number.POSITIVE_INFINITY</a> &amp; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY" rel="external nofollow noopener noreferrer" target="_blank">Number.NEGATIVE_INFINITY</a> &amp; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN" rel="external nofollow noopener noreferrer" target="_blank">Number.NaN</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.POSITIVE_INFINITY === <span class="literal">Infinity</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.NEGATIVE_INFINITY === -<span class="literal">Infinity</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="built_in">Number</span>.NaN)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Number-MIN-VALUE-amp-Number-MAX-VALUE"><a href="#Number-MIN-VALUE-amp-Number-MAX-VALUE" class="headerlink" title="Number.MIN_VALUE &amp; Number.MAX_VALUE"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE" rel="external nofollow noopener noreferrer" target="_blank">Number.MIN_VALUE</a> &amp; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE" rel="external nofollow noopener noreferrer" target="_blank">Number.MAX_VALUE</a></h4><h5 id="Problem-in-ES"><a href="#Problem-in-ES" class="headerlink" title="Problem in ES"></a>Problem in ES</h5><p><a href="http://thrillfighter.tistory.com/349" rel="external nofollow noopener noreferrer" target="_blank">부동 소수점에 대한 이해</a><br><a href="http://slame.tistory.com/2" rel="external nofollow noopener noreferrer" target="_blank">수의 표현범위가 다른 int와 float, 그리고 신뢰할 수 없는 부동소수점</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE); <span class="comment">// 5e-324</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE - <span class="number">1</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE + <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE + <span class="number">1</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE + <span class="number">1</span> === <span class="built_in">Number</span>.MAX_VALUE - <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Number-MIN-SAFE-INTEGER-amp-Number-MAX-SAFE-INTEGER"><a href="#Number-MIN-SAFE-INTEGER-amp-Number-MAX-SAFE-INTEGER" class="headerlink" title="Number.MIN_SAFE_INTEGER * &amp; Number.MAX_SAFE_INTEGER *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER" rel="external nofollow noopener noreferrer" target="_blank">Number.MIN_SAFE_INTEGER</a> <code>*</code> &amp; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" rel="external nofollow noopener noreferrer" target="_blank">Number.MAX_SAFE_INTEGER</a> <code>*</code></h4><h5 id="Solution-in-ES6"><a href="#Solution-in-ES6" class="headerlink" title="Solution in ES6"></a>Solution in ES6</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER); <span class="comment">// -9007199254740991</span></span><br><span class="line"><span class="built_in">console</span>.log(-(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>)); <span class="comment">// -9007199254740991</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER !== <span class="built_in">Number</span>.MIN_SAFE_INTEGER + <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER - <span class="number">1</span> !== <span class="built_in">Number</span>.MIN_SAFE_INTEGER - <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER); <span class="comment">// 9007199254740991</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>); <span class="comment">// 9007199254740991</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER !== <span class="built_in">Number</span>.MAX_SAFE_INTEGER - <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span> === <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">2</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Number</span>.MIN_SAFE_INTEGER) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">Object</span>.create) &#123; <span class="comment">// in ES3</span></span><br><span class="line">    <span class="built_in">Number</span>.MIN_SAFE_INTEGER = -(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// in ES5</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">Number</span>, <span class="string">"MIN_SAFE_INTEGER"</span>, &#123;</span><br><span class="line">      value: -(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Number</span>.MAX_SAFE_INTEGER) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">Object</span>.create) &#123; <span class="comment">// in ES3</span></span><br><span class="line">    <span class="built_in">Number</span>.MAX_SAFE_INTEGER = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// in ES5</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">Number</span>, <span class="string">"MAX_SAFE_INTEGER"</span>, &#123;</span><br><span class="line">      value: <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON" rel="external nofollow noopener noreferrer" target="_blank">Number.EPSILON</a> <code>*</code></h4><h5 id="Problem-in-ES-1"><a href="#Problem-in-ES-1" class="headerlink" title="Problem in ES"></a>Problem in ES</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">.1</span> + <span class="number">.2</span>); <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>ES에서는 위와 같이 소수점 계산에서 고질적인 문제를 안고 있다.<br>이는 아마 <a href="https://ko.wikipedia.org/wiki/IEEE_754" rel="external nofollow noopener noreferrer" target="_blank">IEEE에서 제정한 부동소수점 표현 형식인 IEE754의 고질적인 문제</a>라고 보여진다.<br><a href="http://karmainearth.tistory.com/143" rel="external nofollow noopener noreferrer" target="_blank">실수 표현 문제 발생 이유 or 오차 발생 이유</a></p><blockquote><p>자바스크립트의 숫자는 십진 부동 소수점 숫자로 접근하는데 반해<br>  그 내부 동작 원리는 이진 부동 소수점 숫자이기 때문에 오차가 발생한다.<br><a href="http://speakingjs.com/es5/ch11.html#rounding_errors" rel="external nofollow noopener noreferrer" target="_blank">원문 보기</a><br>JavaScript’s numbers are usually entered as decimal floating-point numbers,<br>but they are internally represented as binary floating-point numbers.<br>That leads to imprecision.</p></blockquote><p>위와 같은 문제는 IEE754를 사용하는 Java에서도 동일하게 발생한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);      <span class="comment">// 0.30000000000000004</span></span><br><span class="line">        System.out.println(<span class="number">0.3</span> == <span class="number">0.1</span>+<span class="number">0.2</span>); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어찌보면 0.00000000000000004 정도의 오차는 무시되도 되는 작은 숫자이다.  </p><h5 id="Solution-in-ES6-1"><a href="#Solution-in-ES6-1" class="headerlink" title="Solution in ES6"></a>Solution in ES6</h5><p>Number.EPSILON은 오차없이 나타낼 수 있는 가장 작은 양의 소수를 나타낸다.<br>이렇게 무시되어도 될 정도의 작은 오차를 구분하기 위해 등장한 프로퍼티이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">5e2</span>); <span class="comment">// 500</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5e-2</span>); <span class="comment">// 0.05</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.5e2</span>); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.EPSILON); <span class="comment">// 2.220446049250313e-16</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.EPSILON.toFixed(<span class="number">20</span>)); <span class="comment">// 0.00000000000000022204</span></span><br></pre></td></tr></table></figure><p>과연 0.0000000000000004는 무시돼도 될 정도로 작은 오차인지 살펴보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 0.00000000000000004</span></span><br><span class="line"><span class="comment"> * 0.00000000000000022204</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.0000000000000004</span> &lt; <span class="built_in">Number</span>.EPSILON); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>즉 좌변에 있는 값이 우변에 있는 Number.EPSILON 보다도 작다면 무시해도 되는 오차다.  </p><h5 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 함수가 true를 반환하면 formula와 result는 동일하다고 보면 됨.</span></span><br><span class="line"><span class="comment">// Number.EPILON은 항상 양수이기 때문에 Math.abs 메소드를 사용하여</span></span><br><span class="line"><span class="comment">// 계산식의 결과를 절대값으로 바꾼 후 오차를 비교해야함.</span></span><br><span class="line"><span class="keyword">const</span> isEqual = <span class="function">(<span class="params">formula, result</span>) =&gt;</span> </span><br><span class="line">  <span class="built_in">Math</span>.abs(formula - result) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line"><span class="built_in">console</span>.log(isEqual(<span class="number">0.1</span> + <span class="number">1</span> - <span class="number">2.2</span>, <span class="number">-1.1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEqual(<span class="number">0.1</span> + <span class="number">1</span> - <span class="number">2.2</span>, <span class="number">-1.2</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill-1"><a href="#Polyfill-1" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Number</span>.EPSILON) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">Object</span>.create) &#123; <span class="comment">// in ES3</span></span><br><span class="line">    <span class="built_in">Number</span>.EPSILON = <span class="number">2.220446049250313e-16</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// in ES5</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">Number</span>, <span class="string">"EPSILON"</span>, &#123;</span><br><span class="line">      value: <span class="number">2.220446049250313e-16</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Number-prototype"><a href="#Number-prototype" class="headerlink" title="Number.prototype"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype" rel="external nofollow noopener noreferrer" target="_blank">Number.prototype</a></h4><p>숫자가 상속받는 프로퍼티와 메소들을 정의해놓은 프로퍼티이다.<br>표준 메소드 및 프로퍼티가 미리 정의돼있으며, 사용자가 직접 정의하려면 아래와 같이 하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.lastNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> % <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12.0</span>.lastNum()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><p><code>*</code> 표시는 ES6에서 새로 추가됨.  </p><ul><li><a href="#Number-isFinite">Number.isFinite()</a> <code>*</code>  </li><li><a href="#Number-isInteger">Number.isInteger()</a> <code>*</code>  </li><li><a href="#Number-isNaN">Number.isNaN()</a> <code>*</code>  </li><li><a href="#Number-isSafeInteger">Number.isSafeInteger()</a> <code>*</code>  </li><li><a href="#Number-parseInt">Number.parseInt()</a> <code>*</code>  </li><li><a href="#Number-parseFloat">Number.parseFloat()</a> <code>*</code>  </li><li><a href="#Number-prototype-toFixed-amp-Number-prototype-toPrecision">Number.prototype.toFixed()</a>  </li><li><a href="#Number-prototype-toFixed-amp-Number-prototype-toPrecision">Number.prototype.toPrecision()</a>  </li><li><a href="#Number-prototype-toExponential">Number.prototype.toExponential()</a>  </li><li><a href="#Number-prototype-toString">Number.prototype.toString()</a>  </li><li><a href="#Number-prototype-valueOf">Number.prototype.valueOf()</a></li><li><a href="#Number-prototype-toLocaleString">Number.prototype.toLocaleString()</a></li></ul><p>메소드는 수정 가능하다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"a"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">123</span>)); <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure><h4 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite() *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite" rel="external nofollow noopener noreferrer" target="_blank">Number.isFinite()</a> <code>*</code></h4><h5 id="in-ES"><a href="#in-ES" class="headerlink" title="in ES"></a>in ES</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">255</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">-254</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="string">"1"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(-<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">null</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>([])); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="in-ES6"><a href="#in-ES6" class="headerlink" title="in ES6"></a>in ES6</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">255</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">-254</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="string">"1"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(-<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite([])); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill-2"><a href="#Polyfill-2" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite = <span class="built_in">Number</span>.isFinite || <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">"number"</span> &amp;&amp; <span class="built_in">isFinite</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger() *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger" rel="external nofollow noopener noreferrer" target="_blank">Number.isInteger()</a> <code>*</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">255</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">-254</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">"1"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(-<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger([])); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill-3"><a href="#Polyfill-3" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger = <span class="built_in">Number</span>.isInteger || <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">"number"</span> &amp;&amp; </span><br><span class="line">    <span class="built_in">isFinite</span>(value) &amp;&amp; </span><br><span class="line">    <span class="built_in">Math</span>.floor(value) === value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN() *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN" rel="external nofollow noopener noreferrer" target="_blank">Number.isNaN()</a> <code>*</code></h4><h5 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="in-ES-1"><a href="#in-ES-1" class="headerlink" title="in ES"></a>in ES</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(-<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"1.1"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"NaN"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"a"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">0</span> / <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(&#123;&#125;)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>([])); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="regexp">/a/</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="in-ES6-1"><a href="#in-ES6-1" class="headerlink" title="in ES6"></a>in ES6</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(-<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">"1.1"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">"NaN"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">"a"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">0</span> / <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN([])); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="regexp">/a/</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill-4"><a href="#Polyfill-4" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN = <span class="built_in">Number</span>.isNaN || <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">"number"</span> &amp;&amp; <span class="built_in">isNaN</span>(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN = <span class="built_in">Number</span>.isNaN || <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;     </span><br><span class="line">    <span class="keyword">return</span> value !== value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Number-isSafeInteger"><a href="#Number-isSafeInteger" class="headerlink" title="Number.isSafeInteger() *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger" rel="external nofollow noopener noreferrer" target="_blank">Number.isSafeInteger()</a> <code>*</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="number">3</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>))); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="string">"3"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="number">3.1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="number">3.0</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill-5"><a href="#Polyfill-5" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isSafeInteger = <span class="built_in">Number</span>.isSafeInteger || <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Number</span>.isInteger(value) &amp;&amp; <span class="built_in">Math</span>.abs(value) &lt;= <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Number-parseInt"><a href="#Number-parseInt" class="headerlink" title="Number.parseInt() *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt" rel="external nofollow noopener noreferrer" target="_blank">Number.parseInt()</a> <code>*</code></h4><h5 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.parseInt(string[, radix])</span><br></pre></td></tr></table></figure><h5 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h5><ul><li>string: 문자열  </li><li>radix: 2~36진수, 10이 기본값.</li></ul><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt === <span class="built_in">parseInt</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11.11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"A11"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11A1"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11.A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"011"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11 0"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"0xFF"</span>)); <span class="comment">// 255</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="literal">true</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h5 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"0b111"</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"0b111"</span>, <span class="number">2</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"0o10"</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"0o10"</span>, <span class="number">8</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"111"</span>, <span class="number">2</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"0b111"</span>).valueOf()); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"0b111"</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"0b111"</span>); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"10"</span>, <span class="number">8</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"0o10"</span>).valueOf()); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"0o10"</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"0o10"</span>); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill-6"><a href="#Polyfill-6" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.parseInt = <span class="built_in">Number</span>.parseInt || <span class="built_in">parseInt</span>;</span><br></pre></td></tr></table></figure><h4 id="Number-parseFloat"><a href="#Number-parseFloat" class="headerlink" title="Number.parseFloat() *"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat" rel="external nofollow noopener noreferrer" target="_blank">Number.parseFloat()</a> <code>*</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat === <span class="built_in">parseFloat</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11.11"</span>)); <span class="comment">// 11.11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"A11"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11A1"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11.A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"011"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11 0"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"0xFF"</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="literal">true</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h5 id="Polyfill-7"><a href="#Polyfill-7" class="headerlink" title="Polyfill"></a>Polyfill</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.parseFloat = <span class="built_in">Number</span>.parseFloat || <span class="built_in">parseFloat</span>;</span><br></pre></td></tr></table></figure><h4 id="Number-prototype-toFixed-amp-Number-prototype-toPrecision"><a href="#Number-prototype-toFixed-amp-Number-prototype-toPrecision" class="headerlink" title="Number.prototype.toFixed() &amp; Number.prototype.toPrecision()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" rel="external nofollow noopener noreferrer" target="_blank">Number.prototype.toFixed()</a> &amp; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision" rel="external nofollow noopener noreferrer" target="_blank">Number.prototype.toPrecision()</a></h4><p>실수를 반올림 할 때 쓰인다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">123.45678</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed()); <span class="comment">// "123"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision()); <span class="comment">// "123.45678"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// "123.45678"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">4</span>)); <span class="comment">// "123.4568"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">4</span>)); <span class="comment">// "123.5"</span></span><br></pre></td></tr></table></figure><h4 id="Number-prototype-toExponential"><a href="#Number-prototype-toExponential" class="headerlink" title="Number.prototype.toExponential"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential" rel="external nofollow noopener noreferrer" target="_blank">Number.prototype.toExponential</a></h4><p>숫자를 지수를 통해 표현할 때 쓰인다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">7817.1278</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential()); <span class="comment">// "7.8171278e+3"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">2</span>)); <span class="comment">// "7.82e+3"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">6</span>)); <span class="comment">// "7.817128e+3"</span></span><br><span class="line">num = <span class="number">0.1445</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential()); <span class="comment">// "1.445e-1"</span></span><br></pre></td></tr></table></figure><h4 id="Number-prototype-toString"><a href="#Number-prototype-toString" class="headerlink" title="Number.prototype.toString()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString" rel="external nofollow noopener noreferrer" target="_blank">Number.prototype.toString()</a></h4><p>숫자를 문자열로 바꿀 때 쓰인다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1.1</span>.toString()); <span class="comment">// "1.1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1.0</span>.toString()); <span class="comment">// "1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span>.toString()); <span class="comment">// "3"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>.toString()); <span class="comment">// "NaN"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">Infinity</span>.toString()); <span class="comment">// "Infinity"</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="literal">Infinity</span>.toString()); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.0</span>.toString()); <span class="comment">// "0"</span></span><br></pre></td></tr></table></figure><h4 id="Number-prototype-valueOf"><a href="#Number-prototype-valueOf" class="headerlink" title="Number.prototype.valueOf()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf" rel="external nofollow noopener noreferrer" target="_blank">Number.prototype.valueOf()</a></h4><p>숫자 객체의 인스턴스에서 숫자값을 얻어올 때 쓰인다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">11</span>).valueOf()); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">0b11</span>).valueOf()); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(&#123;&#125;).valueOf()); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="Number-prototype-toLocaleString"><a href="#Number-prototype-toLocaleString" class="headerlink" title="Number.prototype.toLocaleString()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" rel="external nofollow noopener noreferrer" target="_blank">Number.prototype.toLocaleString()</a></h4><h5 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax"></a>Syntax</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.toLocaleString([locales [, options]]);</span><br></pre></td></tr></table></figure><h5 id="Parameters-1"><a href="#Parameters-1" class="headerlink" title="Parameters"></a>Parameters</h5><ol><li><p>locales<br><a href="https://tools.ietf.org/html/rfc5646" rel="external nofollow noopener noreferrer" target="_blank">BCP 47 language tag</a><br>language[-script][-region]*(-variant)*(-extension)[-privateuse]<br>“en-US”, “en-CA”, “tlh-Kore-AQ-fonipa”, “ja-JP”, “zh-Hans-CN”, etc.</p></li><li><p>Options<br>style: “currency”, “percent”, “decimal”(default)<br>currency: <a href="http://www.currency-iso.org/en/home/tables/table-a1.html" rel="external nofollow noopener noreferrer" target="_blank">Current currency &amp; funds code list</a><br>“USD”, “EUR”, “KRW”, “JPY”, “CNY”, etc.<br>etc options.</p></li></ol><h5 id="Checking-for-support"><a href="#Checking-for-support" class="headerlink" title="Checking for support"></a>Checking for support</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSupportToLocaleString = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  !!(<span class="built_in">Intl</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Intl</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Intl</span>.NumberFormat === <span class="string">"function"</span>);</span><br><span class="line"><span class="keyword">if</span>(isSupportToLocaleString()) &#123; <span class="comment">// if support toLocaleString()</span></span><br><span class="line">  <span class="comment">// blahblah...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// if not support toLoacleString()</span></span><br><span class="line">  <span class="comment">// blahblah...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">123456.789</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString(<span class="string">"en-US"</span>)); <span class="comment">// "123.456.789"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString(<span class="string">"zh-Hans-CN-u-nu-hanidec"</span>)); <span class="comment">// "一二三,四五六.七八九"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString(<span class="string">"en-US"</span>, &#123;<span class="attr">style</span>: <span class="string">"currency"</span>, <span class="attr">currency</span>: <span class="string">"USD"</span>&#125;)); <span class="comment">// "$123,456.79"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString(<span class="string">"en-UK"</span>, &#123;<span class="attr">style</span>: <span class="string">"currency"</span>, <span class="attr">currency</span>: <span class="string">"EUR"</span>&#125;)); <span class="comment">// "€123,456.79"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString(<span class="string">"tlh-Kore-AQ-fonipa"</span>, &#123;<span class="attr">style</span>: <span class="string">"currency"</span>, <span class="attr">currency</span>: <span class="string">"KRW"</span>&#125;)); <span class="comment">// "₩123,457"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString(<span class="string">"ja-JP"</span>, &#123;<span class="attr">style</span>: <span class="string">"currency"</span>, <span class="attr">currency</span>: <span class="string">"JPY"</span>&#125;)); <span class="comment">// "￥123,457"</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString(<span class="string">"zh-Hans-CN"</span>, &#123;<span class="attr">style</span>: <span class="string">"currency"</span>, <span class="attr">currency</span>: <span class="string">"CNY"</span>&#125;)); <span class="comment">// "￥123,456.79"</span></span><br></pre></td></tr></table></figure><h2 id="Number-함수"><a href="#Number-함수" class="headerlink" title="Number 함수"></a>Number 함수</h2><ul><li>함수</li><li>생성자</li></ul><h3 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h3><h4 id="Syntax-2"><a href="#Syntax-2" class="headerlink" title="Syntax"></a>Syntax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(value);</span><br></pre></td></tr></table></figure><h4 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h4><p>value: 어떠한 데이터 타입의 값도 올 수 있다.</p><h4 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h4><p>매개변수로 넘긴 값들을 숫자로 바꿀 때 사용한다.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11.11"</span>)); <span class="comment">// 11.11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11A"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"A11"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11A1"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11.A"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"011"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">// 1481186433309</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>([<span class="number">0</span>, <span class="number">1</span>])); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(&#123;<span class="attr">a</span>: <span class="string">"b"</span>&#125;)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="number">11</span>)); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h3 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h3><h4 id="Syntax-3"><a href="#Syntax-3" class="headerlink" title="Syntax"></a>Syntax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(value);</span><br></pre></td></tr></table></figure><h4 id="Parameter-1"><a href="#Parameter-1" class="headerlink" title="Parameter"></a>Parameter</h4><p>value: 어떠한 데이터 타입의 값도 올 수 있다.</p><h4 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> objNum); <span class="comment">// "object"</span></span><br><span class="line"><span class="built_in">console</span>.dir(objNum);</span><br></pre></td></tr></table></figure><p><img src="number-constructor.png" alt="Number Constructor Structure"></p><h4 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objNum = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.prototype === objNum.__proto__); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>숫자의 래퍼 객체(Number)에서 미리 정의해놓은 프로퍼티(prototype)이다.<br>이 프로퍼티에는 숫자의 표준 메소드와 프로퍼티가 정의돼있다.<br>숫자 객체의 인스턴스(new Number())는 숫자 래퍼 객체(Number)로부터<br>prototype 프로퍼티를 __proto__라는 이름으로 상속받는다. </p><h4 id="Necessity"><a href="#Necessity" class="headerlink" title="Necessity"></a>Necessity</h4><p><a href="https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/" rel="external nofollow noopener noreferrer" target="_blank">The Secret Life of JavaScript Primitives</a><br>ES에서 숫자 원시값의 프로퍼티와 메소드를 사용할 때 내부 동작 원리는 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 우리가 알던 방식대로 메소드 사용해보자.</span></span><br><span class="line"><span class="number">11.1</span>.toString(); <span class="comment">// "11.1";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Number.prototype.toString() 메소드를 쓰기 위해서</span></span><br><span class="line"><span class="comment"> * 원시값인 11.1을 Number 객체로 바꿔줘야한다.</span></span><br><span class="line"><span class="comment"> * 따라서 위 내용은 아래와 같이 자동으로 동작하게 된다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">11.1</span>).toString(); <span class="comment">// 11.1</span></span><br></pre></td></tr></table></figure><h2 id="Number-↔-String"><a href="#Number-↔-String" class="headerlink" title="Number ↔ String"></a>Number ↔ String</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num1 = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">const</span> sum = num1 + num2; <span class="comment">// "1010"</span></span><br><span class="line"><span class="keyword">const</span> sub = num1 - num2; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">const</span> mul = num1 * num2; <span class="comment">// 100</span></span><br><span class="line"><span class="keyword">const</span> div = num1 / num2; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="String-to-Number"><a href="#String-to-Number" class="headerlink" title="String to Number"></a>String to Number</h3><ul><li>Number.parseInt(string[, radix])</li><li>Number.parseFloat(string)</li><li>new Number(string).valueOf()</li><li>Number()</li><li>+string, 1*string</li></ul><h4 id="Number-parseInt-str-radix"><a href="#Number-parseInt-str-radix" class="headerlink" title="Number.parseInt(str[, radix])"></a>Number.parseInt(str[, radix])</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11.11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"A11"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11A1"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11.A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"011"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"11 0"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"0b11"</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseInt(<span class="string">"0o11"</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="Number-parseFloat-str"><a href="#Number-parseFloat-str" class="headerlink" title="Number.parseFloat(str)"></a>Number.parseFloat(str)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11.11"</span>)); <span class="comment">// 11.11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"A11"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11A1"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11.A"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"011"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"11 0"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"0b11"</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.parseFloat(<span class="string">"0o11"</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="new-Number-string-valueOf"><a href="#new-Number-string-valueOf" class="headerlink" title="new Number(string).valueOf()"></a>new Number(string).valueOf()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"11"</span>).valueOf()); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"11.11"</span>).valueOf()); <span class="comment">// 11.11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"11A"</span>).valueOf()); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"A11"</span>).valueOf()); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"11A1"</span>).valueOf()); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"11.A"</span>).valueOf()); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"011"</span>).valueOf()); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"11 0"</span>).valueOf()); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"0b11"</span>).valueOf()); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"0o11"</span>).valueOf()); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h4 id="Number-string"><a href="#Number-string" class="headerlink" title="Number(string)"></a>Number(string)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11.11"</span>)); <span class="comment">// 11.11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11A"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"A11"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11A1"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"11.A"</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"011"</span>)); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"0b11"</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"0o11"</span>)); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h4 id="string-1-string"><a href="#string-1-string" class="headerlink" title="+string, 1*string"></a>+string, 1*string</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="string">"11"</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"11.11"</span>); <span class="comment">// 11.11</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"11A"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"A11"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"11A1"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"11.A"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"011"</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"0b11"</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"0o11"</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><h4 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterations = <span class="number">10000000</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Number.parseInt()"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="built_in">Number</span>.parseInt(<span class="string">"1.1"</span>); <span class="comment">// Number.parseInt(): 561.062ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Number.parseInt()"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Number.parseInt() with radix"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="built_in">Number</span>.parseInt(<span class="string">"1.1"</span>, <span class="number">10</span>); <span class="comment">// Number.parseInt() with radix: 511.062ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Number.parseInt() with radix"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Number.parseFloat()"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="built_in">Number</span>.parseFloat(<span class="string">"1.1"</span>); <span class="comment">// Number.parseFloat(): 737.437ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Number.parseFloat()"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"new Number().valueOf()"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"1.1"</span>).valueOf(); <span class="comment">// new Number().valueOf(): 1112.782ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"new Number().valueOf()"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Number()"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="built_in">Number</span>(<span class="string">"1.1"</span>); <span class="comment">// Number(): 1066.577ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Number()"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"+string"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    +<span class="string">"1.1"</span>; <span class="comment">// +string: 20.724ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"+string"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"1*string"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="number">1</span>*<span class="string">"1.1"</span>; <span class="comment">// 1*string: 21.459ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"1*string"</span>);</span><br></pre></td></tr></table></figure><h3 id="Number-to-String"><a href="#Number-to-String" class="headerlink" title="Number to String"></a>Number to String</h3><ul><li>Number.prototype.toString()</li><li>String(number)</li><li>“” + number</li></ul><h4 id="Number-prototype-toString-1"><a href="#Number-prototype-toString-1" class="headerlink" title="Number.prototype.toString()"></a>Number.prototype.toString()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1.1</span>.toString()); <span class="comment">// "1.1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1.0</span>.toString()); <span class="comment">// "1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span>.toString()); <span class="comment">// "3"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>.toString()); <span class="comment">// "NaN"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">Infinity</span>.toString()); <span class="comment">// "Infinity"</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="literal">Infinity</span>.toString()); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.0</span>.toString()); <span class="comment">// "0"</span></span><br></pre></td></tr></table></figure><h4 id="String-number"><a href="#String-number" class="headerlink" title="String(number)"></a>String(number)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">1.1</span>)); <span class="comment">// "1.1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">1</span>)); <span class="comment">// "1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">0b11</span>)); <span class="comment">// "3"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">NaN</span>)); <span class="comment">// "NaN"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">Infinity</span>)); <span class="comment">// "Infinity"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(-<span class="literal">Infinity</span>)); <span class="comment">// "-Infinity"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">0</span>)); <span class="comment">// "0"</span></span><br></pre></td></tr></table></figure><h4 id="“”-number"><a href="#“”-number" class="headerlink" title="“” + number"></a>“” + number</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + <span class="number">1.1</span>); <span class="comment">// "1.1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + <span class="number">1</span>); <span class="comment">// "1"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + <span class="number">0b11</span>); <span class="comment">// "3"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + <span class="literal">NaN</span>); <span class="comment">// "NaN"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + <span class="literal">Infinity</span>); <span class="comment">// "Infinity"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + -<span class="literal">Infinity</span>); <span class="comment">// "-Infinity"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + <span class="number">0</span>); <span class="comment">// "0"</span></span><br></pre></td></tr></table></figure><h4 id="Performance-1"><a href="#Performance-1" class="headerlink" title="Performance"></a>Performance</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterations = <span class="number">10000000</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"Number.prototype.toString()"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="number">1.1</span>.toString(); <span class="comment">// Number.prototype.toString(): 268.619ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Number.prototype.toString()"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"String(number)"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="built_in">String</span>(<span class="number">1.1</span>); <span class="comment">// String(): 159.045ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"String(number)"</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"\"\" + number"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;iterations; i++)&#123;</span><br><span class="line">    <span class="string">""</span> + <span class="number">1.1</span>; <span class="comment">// "" + number: 20.594ms</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"\"\" + number"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> Number </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) 숫자형</title>
      <link href="/2016/12/23/ES6-Number-type/"/>
      <url>/2016/12/23/ES6-Number-type/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-Number-type/thumb.png" alt=""><br>이 글을 읽고 <a href="/2016/12/24/ES6-Number-object-and-function/">(ES6) Number 객체와 함수</a>를 이어서 보는 걸 추천한다.</p><h1 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h1><p>ES에서 숫자형은 단 하나의 자료형 뿐이다.<br>Double: 자바나 C 등등의 언어에서 실수를 표현하기 위한 자료형, 8Byte = 64Bit<br><a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="external nofollow noopener noreferrer" target="_blank">Double-precision floating-point format</a><br><img src="IEEE-754-Double-Floating-Point-Format.png" alt="ES에서 쓰는 숫자의 형태">  </p><a id="more"></a><ol><li>부호(sign)를 표현하기 위한 1비트 (+, -)  </li><li>지수부(exponent part)를 표현하기 위한 11비트  </li><li>가수부(fraction part)를 표현하기 위한 52비트</li></ol><p>유효 범위: -(2<sup>53</sup>-1) ~ 2<sup>53</sup>-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER); <span class="comment">// -9007199254740991</span></span><br><span class="line"><span class="built_in">console</span>.log(-(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>)); <span class="comment">// -9007199254740991</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER); <span class="comment">// 9007199254740991</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>); <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure><p>즉 ES에서 정수형(Integer)은 존재하지 않는다.<br>모든 숫자는 부동 소수점(Floating Point) 형태로 표현되는 실수(Real Number)이다.<br>실수는 소수 표현이 가능하고, 실수를 표현하는 방법으로 고정 소수점(Fixed Point)와<br>부동 소수점(Floating Point)이 있으니 직접 찾아보길 바란다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> === <span class="number">1.0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> .toString() === <span class="number">1.0</span>.toString()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h2><ul><li>실수 계산</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">.1</span> + <span class="number">.2</span>); <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>ES에서는 위와 같이 소수점 계산에서 고질적인 문제를 안고 있다.<br>이는 아마 <a href="https://ko.wikipedia.org/wiki/IEEE_754" rel="external nofollow noopener noreferrer" target="_blank">IEEE에서 제정한 부동소수점 표현 형식인 IEE754의 고질적인 문제</a>라고 보여진다.<br><a href="http://karmainearth.tistory.com/143" rel="external nofollow noopener noreferrer" target="_blank">실수 표현 문제 발생 이유 or 오차 발생 이유</a></p><blockquote><p>자바스크립트의 숫자는 십진 부동 소수점 숫자로 접근하는데 반해<br>  그 내부 동작 원리는 이진 부동 소수점 숫자이기 때문에 오차가 발생한다.<br><a href="http://speakingjs.com/es5/ch11.html#rounding_errors" rel="external nofollow noopener noreferrer" target="_blank">원문 보기</a><br>JavaScript’s numbers are usually entered as decimal floating-point numbers,<br>but they are internally represented as binary floating-point numbers.<br>That leads to imprecision.</p></blockquote><p>위와 같은 문제는 IEE754를 사용하는 Java에서도 동일하게 발생한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);      <span class="comment">// 0.30000000000000004</span></span><br><span class="line">        System.out.println(<span class="number">0.3</span> == <span class="number">0.1</span>+<span class="number">0.2</span>); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이를 위한 해결방안으로 <a href="https://ponyfoo.com/articles/es6-number-improvements-in-depth#numberepsilon" rel="external nofollow noopener noreferrer" target="_blank">Number.EPSILON</a>이 나왔다.  </p><ul><li>신뢰할 수 없는 범위</li></ul><p><a href="http://thrillfighter.tistory.com/349" rel="external nofollow noopener noreferrer" target="_blank">부동 소수점에 대한 이해</a><br><a href="http://slame.tistory.com/2" rel="external nofollow noopener noreferrer" target="_blank">수의 표현범위가 다른 int와 float, 그리고 신뢰할 수 없는 부동소수점</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">-9007199254740992</span> === <span class="number">-9007199254740993</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740992</span> === <span class="number">9007199254740993</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>부동 소수점의 단점은 일정 범위를 넘어가면 계산의 결과를 신뢰할 수 없다는 점이다.<br>ES에서 쓰이는 숫자형에서 신뢰할 수 있는 범위는 위에 적어논 바와 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "-9007199254740991 ~ 9007199254740991"</span></span><br><span class="line"><span class="built_in">console</span>.log(-(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>) + <span class="string">' ~ '</span> + (<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER + <span class="string">' ~ '</span> + <span class="built_in">Number</span>.MAX_SAFE_INTEGER);</span><br></pre></td></tr></table></figure><h2 id="특수한-숫자들"><a href="#특수한-숫자들" class="headerlink" title="특수한 숫자들"></a>특수한 숫자들</h2><p>또한 숫자형에서는 특수한 네 가지 값이 존재한다.  </p><ol><li>NaN(Not a Number)  </li><li>(+)Infinity  </li><li>-Infinity  </li><li>-0(Negative Zero)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> / <span class="string">"A"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE + <span class="number">1e+291</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE + <span class="number">1e+292</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE / <span class="number">-0.5</span>); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE * <span class="number">1.000000000000001</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE * <span class="number">1.0000000000000001</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1.0000000000000001</span> === <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="음수-0"><a href="#음수-0" class="headerlink" title="음수 0"></a>음수 0</h3><p>+0과 -0은 같다??</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="number">-0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="number">-0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> != <span class="number">-0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> !== <span class="number">-0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &lt; <span class="number">-0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &gt; <span class="number">-0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> + <span class="number">-0</span>); <span class="comment">// "0"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">-0</span>)); <span class="comment">// "0"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="number">-0</span>)); <span class="comment">// "0"</span></span><br></pre></td></tr></table></figure><p>하지만 아래 현상은 어떻게 설명할 수 있을까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> / <span class="number">0</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> / <span class="number">-0</span>); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">Infinity</span> === -<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-0.0</span>.toString()); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-0</span> .toString()); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-.0</span>.toString()); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">"-0"</span>); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"-0"</span>)); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="string">"-0"</span>)); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">-0</span>, <span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">-0</span>, <span class="number">0</span>)); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="필요성"><a href="#필요성" class="headerlink" title="필요성"></a>필요성</h4><p><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md#zeros" rel="external nofollow noopener noreferrer" target="_blank">You Don’t Know JS: Types &amp; Grammar - Zeros</a><br>스피드나 x, y와 같은 방향 같은 요소를 쓰는 어플리케이션에서 만약 -0이 0으로 바뀐다면,<br>속도나 방향 등등의 정보를 잃게될 것이다.  </p><blockquote><p>There are certain applications where developers use the magnitude of a value to represent one piece of information (like speed of movement per animation frame) and the sign of that number to represent another piece of information (like the direction of that movement).<br>In those applications, as one example, if a variable arrives at zero and it loses its sign, then you would lose the information of what direction it was moving in before it arrived at zero. Preserving the sign of the zero prevents potentially unwanted information loss.`</p></blockquote><h1 id="진수-리터럴"><a href="#진수-리터럴" class="headerlink" title="진수 리터럴"></a>진수 리터럴</h1><h2 id="2진수"><a href="#2진수" class="headerlink" title="2진수"></a>2진수</h2><p>수학식: 11<sub>(2)</sub><br>기타 프로그래밍 언어: 0b11, 0B11</p><p><strong>in ES</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'11'</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>in ES6</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0B11</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="8진수"><a href="#8진수" class="headerlink" title="8진수"></a>8진수</h2><p>수학식: 71<sub>(8)</sub><br>기타 프로그래밍 언어: 071</p><p><strong>in ES</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">071</span>); <span class="comment">// 57</span></span><br></pre></td></tr></table></figure><p><strong>in strict mode</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">071</span>); <span class="comment">// Uncaught SyntaxError: Octal literals are not allowed in strict mode.</span></span><br></pre></td></tr></table></figure><p>ES5의 strict mode에서는 8진수 리터럴이 적용되지 않는다.<br>왜냐하면 ES5에는 8진수 문법이 존재하지 않기 때문이다.<br>그럼에도 불구하고 브라우저 벤더들은 비표준 요소인 8진수 리터럴을 지원하게끔 구현하였다.<br>따라서 strict mode에 따라서 8진수 리터럴의 사용 가능 여부가 달려있다.</p><p><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Strict_mode#Converting_mistakes_into_errors" rel="external nofollow noopener noreferrer" target="_blank">MDN Strict mode</a>  </p><blockquote><p>strict mode in ECMAScript 5 forbids octal syntax.<br>Octal syntax isn’t part of ECMAScript 5,<br>but it’s supported in all browsers by prefixing the octal number with a zero:<br>0644 === 420 and “\045” === “%”.`</p></blockquote><p><strong>in ES6</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0o71</span>); <span class="comment">// 57</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0O71</span>); <span class="comment">// 57</span></span><br></pre></td></tr></table></figure><h2 id="16진수"><a href="#16진수" class="headerlink" title="16진수"></a>16진수</h2><p>수학식: FF<sub>(16)</sub><br>기타 프로그래밍 언어: 0xFF, xFF, hFF, etc.</p><p><strong>in ES</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0xff</span>); <span class="comment">// 255</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0Xff</span>); <span class="comment">// 255</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0xA</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0XA</span>); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span><span class="number">.1</span>); <span class="comment">// Uncaught SyntaxError: missing ) after argument list</span></span><br></pre></td></tr></table></figure><p>10진수를 제외한 진수 리터럴은 정수만 표현 가능하다.<br>.을 붙인다고 해서 실수가 되는 게 아니라 Number.prototype.1로 접근을 하게 된다.<br>10진수의 경우에는 실수 취급한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.Aa = <span class="string">'Aa'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b11</span>.Aa); <span class="comment">// 'Aa'</span></span><br><span class="line"><span class="number">1.</span>Aa; <span class="comment">// Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> Number </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains 회사 제품의 라이센스</title>
      <link href="/2016/12/18/JetBrains-License/"/>
      <url>/2016/12/18/JetBrains-License/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/JetBrains-License/thumb.png" alt=""></p><p>여름방학에 현장실습을 하면서 다음과 같은 경험을 했다.  </p><blockquote><p>A: 권성 씨, 에디터 좋다. 뭐 써요?<br>나: 저 웹스톰이요. 저희 학교는 교직원에게만 이메일을 줘서 친구 걸로 인증했어요.<br>A: 뭐 같은 대학생이니까 상관 없으려나…<br>(잠시 후…)<br>A: 어, 웹스톰은 기업용이 아니면 기업에서는 쓰면 안 된다고 하는데요?<br>나: (나니?!)</p></blockquote><a id="more"></a><p><img src="/images/JetBrains-License/webstorm.png" alt="가정용/학생용 라이센스는 기업에서 쓸 수 없다고 나온다."><br><a href="http://www.kbsmedia.net/shop/shop.htm?type=shopdetail&brandcode=00600800100000000037&NaPm=ct%3Diwuof86w%7Cci%3D39710175c68e1f21f18e9ed8ef37a0ede2bbc992%7Ctr%3Dslsl%7Csn%3D225947%7Chk%3D2c97d4652c52b3836eb42e7e617c1312a1deba82" rel="external nofollow noopener noreferrer" target="_blank">국내 유통 업체에서 팔고있는 웹스톰 개인용 라이센스</a><br>&nbsp;<br>내가 느끼기에는 ‘개인용’이란 단어를 교묘하게<br>‘가정용/학생용’이라는 단어로 바꿔치운 상술로 밖에 보이지 않았다.<br>이 당시에는 서로 바빠서 그냥 무시하고 웹스톰을 계속 썼었는데,<br>나중에 취직을 하게 되면 계속 써야할텐데 그 비싼 기업용 라이센스를<br>사야하나 싶어서 이번에 집중적으로 알아보았다.</p><ol><li>개인용 라이센스를 기업에서도 쓸 수 있는가?<br>&nbsp;<br><a href="https://sales.jetbrains.com/hc/en-gb/articles/207240855-Can-I-use-my-personal-license-at-work-and-at-home-" rel="external nofollow noopener noreferrer" target="_blank">Can I use my personal license at work and at home?</a>  <blockquote>Yes, you can use your personal license at work as well as at home. You can use it working on your personal projects as well as projects of your company. Our EULAs do not restrict this.</blockquote>그냥 써도 된다는 소리다.  &nbsp;  [Can I use my personal license for commercial development?](https://sales.jetbrains.com/hc/en-gb/articles/207241015-Can-I-use-my-personal-license-for-commercial-development-)  <blockquote>Yes, you can use your license for any kind of development. However, only you may use your personal license; you may not share it with others.</blockquote>직관적으로 상업용 개발을 하는데 개인용 라이센스를 써도 되느냐?  Yes, 하지만 타인과 공유는 하지 말란다.  &nbsp;  </li><li>개인용 라이센스를 데스크탑과 랩탑에 동시에 설치해도 되는가?<br>&nbsp;<br><a href="https://sales.jetbrains.com/hc/en-gb/articles/206544319-Can-I-use-my-personal-license-on-multiple-machines-" rel="external nofollow noopener noreferrer" target="_blank">Can I use my personal license on multiple machines?</a><blockquote>You may install the product on multiple machines and multiple OS's. However, please note, that our licenses do not allow concurrent connections. This means that the license may only be used on one machine at a time.</blockquote>다수의 컴퓨터와 다수의 OS에 설치 해도 되지만 동시에 사용하지 말라고 하는데...  무슨 탐지 기술이라도 있나 싶어서 다른 글을 더 찾아보니...&nbsp;  [Using IDE on different machines and operating systems with the same license](https://intellij-support.jetbrains.com/hc/en-us/articles/207241005-Using-IDE-on-different-machines-and-operating-systems-with-the-same-license)  <blockquote>However, IDE checks for the number of running copies on the local network when starting. In case it finds any copies started with the same license, they are all shut down except the last one.</blockquote>로컬 네트워크(같은 공유기에 물려있는 경우)에 동일한 라이센스의 IDE가 감지된 경우  마지막에 실행된 IDE를 빼고 종료를 시킨다고 한다.  그럼 전 세계의 만날 일 없는 개발자들과 공유하면... 양심에 맡기자.  &nbsp;  </li><li>개인용 라이센스와 기업용 라이센스는 무슨 차이인가?<br>&nbsp;<br><a href="https://sales.jetbrains.com/hc/en-gb/articles/207241075-What-is-the-difference-between-commercial-and-personal-licenses-" rel="external nofollow noopener noreferrer" target="_blank">What is the difference between commercial and personal licenses?</a>  <blockquote>A Commercial license is the standard licensing option for organizations and business entities. Licenses are purchased by the company and can be used by any person within this organization.</blockquote>기업용(상업용, Commercial) 라이센스는 기업이나 기관에서 살 수 있으며,  즉 `개인이 기업용 라이센스를 사는 것`은 `불가능`하며,  해당 기업과 기관에 속한 조직원이라면 누구나 해당 라이센스를 쓸 수 있다.  &nbsp;  <blockquote>A Personal license is an option for private individuals who purchase a license with their own funds, and solely for their own use. Personal licenses are not to be purchased, refunded or in any way financed by companies.</blockquote>개인용 라이센스는 개인이 살 수 있으며,  즉 `기업이 개인용 라이센스를 사주는 것`은 `불가능`하다.  &nbsp;  위 사항만 보면 아래와 같은 사항에 대해 어떠한 차이점이 존재하는지 의문점이 생긴다.  <ol><li>개인용 라이센스를 개인이 사서 개인이 회사에서 작업하나</li><!--</li></ol><p>–&gt;<li>기업용 라이센스를 기업이 사서 개인이 회사에서 작업하나</li></ol><br><a href="http://softwareengineering.stackexchange.com/questions/233898/commercial-vs-personal-software-licenses">Commercial vs Personal software licenses</a>  </p><blockquote>For Jetbrains, the corporate license is a license that's not linked to an individual. The personal license is linked to a specific person.What that means inside a company is that if you buy a corporate license for 10 users, any 10 people can use the product at any given time.If however you buy 10 personal licenses, only the 10 specific people who are mentioned can ever use the product. Were one of them to leave the company, that license becomes useless (though they might have a means to get the license transfered to another person, you'd have to contact Jetbrains about that).</blockquote>허접한 영어 실력으로 해석해보자면  <ol><li>기업용 라이센스는 몇 명의 유저가 쓸 수 있는지에 따라서 가격이 달라지는 것 같다.</li><!----><li>위에서 구매한 유저 인원수에 따라 로컬 네트워크에 동시 사용을 제한하는 것 같다.</li><!----><li>만약 조직 구성원 중 한 명이 떠나면 새로운 개발자에게 기업용 라이센스가 위임되는 것 같다.</li>마지막으로 `기업용 라이센스를 가진 개인이 집에서 작업을 할 수 있는가?`라는 의문이 들었다.  [Can I use a commercial license purchased by my company at home?](https://sales.jetbrains.com/hc/en-gb/articles/206544349-Can-I-use-a-commercial-license-purchased-by-my-company-at-home-)  <blockquote>We, in our EULAs, do not prohibit using commercial licenses of your company at home.However, please inquire your employer about it as this may vary depending on your company's policies.</blockquote>사용해도 된다는 소리 같은데, 두 번째 문장을 `Young Gratia` 님께서 친히 번역해주셨다.  회사 정책에 따라 달라질 수 있으니, 사용 전에 고용주에게 문의해보라는 내용이다.  &nbsp;  4. 학생용 라이센스는 개인용 라이센스와 동일한가?  이 부분에 있어서는 참 질문이 많았다.  링크에 접속이 되지 않아 직접 주고받은 메일의 pdf 파일을 직접 첨부한다.  [질문 메일](https://drive.google.com/open?id=0B3_CLdLxNbjRUy0xSThRQlBPVHc)  [답변 메일](https://drive.google.com/open?id=0B3_CLdLxNbjRNnMtZkNQSzFBUG8)  &nbsp;  * 나는 대학생인데 우리 학교는 교직원을 제외하고는 이메일이 제공되지 않는다.  그래서 친구의 대학 이메일을 빌려서 인증하여 사용 중인데, 이는 유효한 라이센스인가?  &nbsp;  <blockquote>You will not need a university email address, it is only necessary to upload an official document showing you are currently a student (you have an option "official document").</blockquote><!---->이메일 주소 필요없이 내가 현재 대학생이라는  사실을 입증할 수 있는 공식적인 서류만 보내면 된단다.  즉 현재 대학생이라 하더라도 나같이 타인의 이메일을 빌려  학생 라이센스를 취득한 경우 유효하지 않다.  &nbsp;  * 학생용 라이센스를 가지고 기업에서도 사용할 수 있는가?&nbsp;  <blockquote>The free student license cannot be used at work for commercial purposes. It is only intended for learning, educational purposes.</blockquote><!---->무료 학생용 라이센스는 상업적 목적인 작업에서는 쓰일 수 없단다.  기업에서는 상업적이지 않을 수가 없으므로 즉 기업에서는 못 쓴다고 보면 된다.  학생용 라이센스는 오직 학습과 교육을 위해서만 쓰여야한다.  &nbsp;  * 학생용 라이센스 인증 기간 도중에 졸업을 하는 경우, 남은 기간동안도 유효한가?  &nbsp;  나의 영어 실력이 미흡하여 질문의 의도를 파악하지 못하고,  졸업생들에게 할인을 해주는 제도에 대해 설명을 하였다.  만약 졸업 후에 학생용 라이센스 기간이 몇 달 남았다면 집에서만 조용히 쓰도록 하자.  &nbsp;  * 대학교 졸업 후에도 이메일이 사라지지 않는 경우, 계속 사용하는 것이 유효한가?  &nbsp;  이 역시 나의 영어 실력이 미흡하여 제대로된 답변을 받지 못했으나  다음의 링크를 보고 답을 얻게 되었다.  &nbsp;  [Free for students: Professional developer tools from JetBrains](https://www.jetbrains.com/student/#faq)  <blockquote>**Is a free Student License perpetual?**No, the Student License is valid for one year and perpetual licenses are not provided. After one year you will need to renew your Student License for the next year, **or purchase a license if you’re no longer a student.**</blockquote><!---->마지막 or 부분부터 해석하자면  만약 더이상 학생이 아닌 경우에는 구매하라고 한다.  즉 대학교 이메일이 졸업후에도 사라지지 않더라도 본인이 학생이 아니라면  그 라이센스는 유효하지 않다.  만약 사용 가능하다면 집안에서만 조용히 써야할 것이다. <p>다른 제품들의 라이센스에 있어서도 상술에 찌든 국내 유통 업체보다는<br>해석하기 어렵지만 보다 정확하고 정직한 공식 사이트의 문서들을 참조해야겠다.</p></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
            <tag> Editor </tag>
            
            <tag> JetBrains </tag>
            
            <tag> WebStorm </tag>
            
            <tag> PhpStorm </tag>
            
            <tag> IntelliJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN 무료 호스팅하기</title>
      <link href="/2016/11/28/CDN-Free-Hosting/"/>
      <url>/2016/11/28/CDN-Free-Hosting/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/CDN-Free-Hosting/thumb.png" alt=""><br>남들의 사랑과 관심이 고파서 라이브러리를 CDN 호스팅 업체에 등록하고자 며 칠 간 고생했던 내용을 적어봤다.<br>CDN에 대해서는 구글링하면 많이 나오는데 CDN은 각 지역 별로 서버를 두는 서비스 형식으로 대충 알고있다.<br>국내 무료 호스팅 업체에 그냥 나의 라이브러리를 업로드해도 되지만 일정 기간마다 서비스를 연장하거나 트래픽 등등의 문제가 존재하였다.<br>그리고 제이쿼리나 부트스트랩 등등의 프레임워크&amp;라이브러리들이 외국 CDN 호스팅 업체에 등록된 걸 보면 뭔가 동경의 대상이었다.<br>나의 라이브러리도 한 번 그렇게 만들어 보고 싶었다.<br>뭔가 좋아보인다 싶으면 따라하는 게 나의 단점이지만 그래도 해보고 싶었다.</p><a id="more"></a><ol><li><a href="https://www.maxcdn.com/" rel="external nofollow noopener noreferrer" target="_blank">maxCDN</a><br><img src="/images/CDN-Free-Hosting/maxcdn.jpg" alt="maxCDN"><br><img src="/images/CDN-Free-Hosting/01.png" alt="유료인 것 같다... 스킵...">  </li><li><a href="https://cdnjs.com/" rel="external nofollow noopener noreferrer" target="_blank">cdnjs</a><br><img src="/images/CDN-Free-Hosting/cdnjs.png" alt="내 라이브러리는 신생 라이브러리라 스킵...">  </li><li><a href="http://www.jsdelivr.com/" rel="external nofollow noopener noreferrer" target="_blank">jsdelivr</a><br><img src="/images/CDN-Free-Hosting/jsdelivr.png" alt="하지만 구세주는 있었으니 그 이름하여 jsdelivr...!"><br>&nbsp;<br>혼자서 깃헙 문서를 보고 따라할 사람은 아래 링크로 들어가면 된다.<br><a href="https://github.com/jsdelivr/jsdelivr/blob/master/CONTRIBUTING.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jsdelivr/jsdelivr/blob/master/CONTRIBUTING.md</a><br>&nbsp;<br>준비사항: 라이브러리가 올라가 있는 본인의 깃헙 저장소.<br>그리고 그 깃헙 저장소에 태그가 있어야한다.<br>태그가 뭔지 모르는 사람은 아래 링크를 참조하자.<br><a href="http://www.whatwant.com/377" rel="external nofollow noopener noreferrer" target="_blank">http://www.whatwant.com/377</a><br><img src="/images/CDN-Free-Hosting/02.png" alt="태그는 저장소에서 releases 탭으로 오면 볼 수 있다."><br>&nbsp;<br>그 이후에 아래 링크로 접속한다.<br><a href="https://github.com/jsdelivr/jsdelivr/tree/master/files" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jsdelivr/jsdelivr/tree/master/files</a><br><img src="/images/CDN-Free-Hosting/03.png" alt="Create new file을 클릭하자.">  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">author = &quot;name of lib author&quot;</span><br><span class="line">github = &quot;https://github.com/user_id/repository&quot;</span><br><span class="line">homepage = &quot;없으면 그냥 깃헙 저장소 주소 입력해도 되고, npm 주소 입력해도 됨.&quot;</span><br><span class="line">description = &quot;설명&quot;</span><br><span class="line">mainfile = &quot;lib.min.js&quot;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/CDN-Free-Hosting/04.png" alt="Propose new file을 클릭하자."><br><img src="/images/CDN-Free-Hosting/05.png" alt="나는 patch-3이라는 브랜치로 포크를 떴다."><br><img src="/images/CDN-Free-Hosting/06.png" alt="이제 깃헙 메인페이지로 보면 jsdelivr가 포크 떠진 게 보인다."><br><img src="/images/CDN-Free-Hosting/07.png" alt="포크 뜬 브랜치로 들어간다."><br><img src="/images/CDN-Free-Hosting/08.png" alt="Find file을 누른다."><br><img src="/images/CDN-Free-Hosting/09.png" alt="포크 뜨기 전에 입력했던 라이브러리 이름을 검색하고 클릭한다."><br><img src="/images/CDN-Free-Hosting/10.png" alt="해당 라이브러리의 디렉토리로 와서 Create new file을 클릭하자.">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 패키지 매니저에는 npm이라고 입력해도 되는 것 같다.</span><br><span class="line">// files에는 호스팅 될 파일을 입력하면 된다.</span><br><span class="line">&#123;</span><br><span class="line">  &quot;packageManager&quot;: &quot;github&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;lib-name&quot;,</span><br><span class="line">  &quot;repo&quot;: &quot;user_id/lib-name&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;</span><br><span class="line">    &quot;include&quot;: [&quot;lib-name.js&quot;, &quot;lib-name.min.js&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CDN-Free-Hosting/11.png" alt="봇이 자동으로 업데이트하기 위한 파일, Commit new file을 클릭하자."><br><img src="/images/CDN-Free-Hosting/12.png" alt="다시 한 번 Create new file을 클릭하자."><br><img src="/images/CDN-Free-Hosting/13.png" alt="호스팅 하길 원하는 버전의 디렉토리를 만들고 dummy 파일을 만들자. 어차피 삭제할 거다."><br><img src="/images/CDN-Free-Hosting/14.png" alt="해당 버전의 디렉토리로 가서 Upload files를 누르자."><br><img src="/images/CDN-Free-Hosting/15.png" alt="호스팅 하려는 파일을 업로드 하고 Commit changes를 누르자."><br><img src="/images/CDN-Free-Hosting/16.png" alt="dummy 파일을 누르자."><br><img src="/images/CDN-Free-Hosting/17.png" alt="삭제하자."><br><img src="/images/CDN-Free-Hosting/18.png" alt="머지 및 호스팅 요청을 위해 풀리퀘를 날리자."><br><img src="/images/CDN-Free-Hosting/19.png" alt="부연 설명을 블라블라 적어보자."><br><img src="/images/CDN-Free-Hosting/20.png" alt="봇이 풀리퀘(PR)에서 오류를 검출했단다."><br>예제 작성을 위해 한글을 썼더니 ascii 케릭터로만 적으라는 오류를 뿜는다.<br>하단의 Close pull request를 눌러서 취소 시키고, 오류를 수정한 후 다시 풀리퀘를 날리면 된다.<br><img src="/images/CDN-Free-Hosting/21.png" alt="인내와 고통의 시간이 지나면 관리자가 머지를 한다."><br><img src="/images/CDN-Free-Hosting/22.png" alt="마스터 브랜치에서도 내 라이브러리가 추가되었다."><br><img src="/images/CDN-Free-Hosting/23.png" alt="나의 라이브러리가 jsdelivr CDN에 등록되었다."><br>감격의 순간이다 흑흑흑…<br>버전 별로 호스팅이 되어있고, unminify, minify한 js 파일 모두 다 호스팅 되었다.<br>세상 어딘가에 나의 발자취를 남긴 것 같아 굉장히 뿌듯하다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> Hosting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES) 정규표현식 응용하기</title>
      <link href="/2016/11/27/ES-RegExp-ex/"/>
      <url>/2016/11/27/ES-RegExp-ex/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES-RegExp-ex/thumb.png" alt=""><br>이 포스트는 정규표현식에 대한 기초 사항을 설명하진 않는다.<br>대신 다양한 케이스와 테스트 하는 방법 등등에 대해 포커스를 맞춘다.<br>정규표현식의 기초에 대해 궁금한 사람들은 아래 링크를 참조하길 바란다.<br><a href="http://www.nextree.co.kr/p4327/" rel="external nofollow noopener noreferrer" target="_blank">http://www.nextree.co.kr/p4327/</a><br>정규표현식을 책의 목차의 제일 마지막에 있는 것을 보아 가장 어려운 내용인 줄 알았는데,<br><strong>안 어렵다. 쉽다.</strong><br>클로저, 콜백 등등의 개념을 몰라도 당장 익히는데 전혀 무리가 없다.<br>그리고 안 써먹으면 까먹는다. 당연하다.<br>필자도 쓸 때마다 찾아봐서 테스트하지, 그렇다 해도 시간이 절대 오래 걸리지 않는다.<br>필요한 내용만 찾아서 쓰고 테스트하면 되고, 도움을 주는 여러가지 것들이 많으니 당장 배워보길 바란다.<br>또한 다른 프로그래밍 언어에서도 조금씩 다른 형태로 지원하니 알아두면 좋다.</p><a id="more"></a><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#정규표현식은-왜-쓸까">정규표현식은 왜 쓸까</a></li><li><a href="#테스트해보기">테스트해보기</a></li><li><a href="#응용하기">응용하기</a></li><li><a href="#and의-원리-파악하기">and의 원리 파악하기</a></li></ol><h2 id="정규표현식은-왜-쓸까"><a href="#정규표현식은-왜-쓸까" class="headerlink" title="정규표현식은 왜 쓸까?"></a>정규표현식은 왜 쓸까?</h2><p>정규표현식은 문자열을 가지고 놀 때 쓴다.<br>정규표현식을 쓰지 않아도 되지만 코드를 줄이기 위해서 사용한다.<br>아래 코드를 봐보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gender = <span class="string">'M'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 1.</span></span><br><span class="line"><span class="keyword">if</span>(gender.indexOf(<span class="string">'m'</span>) &gt; <span class="number">-1</span> || gender.indexOf(<span class="string">'M'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// 블라블라...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 2.</span></span><br><span class="line"><span class="keyword">if</span>(gender.toLowerCase().indexOf(<span class="string">'m'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// 블라블라...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 3.</span></span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/m/i</span>.test(gender)) &#123;</span><br><span class="line">  <span class="comment">// 블라블라...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3번 케이스가 정규표현식을 사용한 경우이다.<br>이렇듯 정규표현식은 꼭 쓰지 않아도 되지만 코드의 길이를 확연하게 줄여주기도 한다.</p><h2 id="테스트해보기"><a href="#테스트해보기" class="headerlink" title="테스트해보기"></a>테스트해보기</h2><p>테스트 해보려고 일일이 콘솔창에 찍는 방법이 있지만 귀찮다.<br>정규표현식 테스트를 지원하는 에디터도 있지만, 그런 것에 구애받지 않고 테스트 하는 방법을 소개한다.<br>아래 사이트로 접속해보자.<br><a href="http://regexr.com/" rel="external nofollow noopener noreferrer" target="_blank">http://regexr.com/</a></p><p><img src="/images/ES-RegExp-ex/01.png" alt=""><br>설명이 필요 없을 정도로 사용 방법은 쉽다.<br>좌측 메뉴를 적극 활용하면 자신이 원하는 케이스들을 쉽게 찾을 수 있다.</p><h2 id="응용하기"><a href="#응용하기" class="headerlink" title="응용하기"></a>응용하기</h2><p>이제부터는 다양한 사례를 통해 어떻게 응용해야할지 알아보자.</p><ol><li><p>끝말잇기 한방 단어 금지시키기<br>사용 기법: <strong>not whitespace → \S, one or more → +, character set → [슘륨녘]</strong><br>끝말잇기를 하다보면 한방 단어로 끝낼 때가 있다.<br>한 판이면 상관 없지만 매번 똑같이 당하면 아주 짜증나기 마련이다.<br>특히 륨, 늄, 슘 등등으로 끝나는 화학 원소 기호들…<br>슘페터란 인물이 있지만, 막는 건 한 번에 불과하다.<br>이를 위한 정규표현식을 작성해보자.<br><img src="/images/ES-RegExp-ex/02.png" alt="해당 글자로 시작하는 놈은 안 걸린다"></p></li><li><p>가나다 순으로 구분하기<br>사용 기법: <strong>range → [다-딯], one or more → +</strong><br>알파벳과 다르게 가나다 순에서 가는 가, 갸, 거, 겨 등등 가 하나만 놓고 봐도 매우 많다.<br>단어장을 만든다 할 때 정규표현식 없이 구분하려면 if문의 도가니에 빠지게 될 것이다.<br><img src="/images/ES-RegExp-ex/03.png" alt="ㄷ으로 시작하는 단어들"><br>단어 뒤에 공백(스페이스바, 탭, 엔터키)가 아닌 경우에는 \S를 쓰면 안 된다.<br>if 문을 써서 다로 시작하는 단어, 도로 시작하는 단어, 대로 시작하는 단어, …<br>이 모든 케이스들을 구분한다면 상당한 삽질이 예상된다.</p></li><li><p>몇 학년인지 구하기<br>사용 기법: <strong>Digit → \d, one or more → +, positive lookahead → (?=학년)</strong><br><img src="/images/ES-RegExp-ex/04.png" alt="그는 초등학교 3학년이었다."><br>이는 몇 학년인지, 몇 반인지, 몇 동에 사는지 등등<br>구하려는 정보가 특정 접미어 앞에 존재할 때 유용하다.</p></li><li><p>학번 구하기<br>사용 기법: <strong>capturing → (\d+), Digit → \d, one or more → +</strong><br>이번에는 구하려는 정보가 특정 접두어 뒤에 뒤에 존재하는 정보를 구하려 한다.<br><img src="/images/ES-RegExp-ex/05.png" alt="하지만 이는 자바스크립트에서 지원하지 않는다."><br>어쩔 수 없이 트릭을 써야한다.  출처는 아래 링크다.<br><a href="http://stackoverflow.com/questions/3569104/positive-look-behind-in-javascript-regular-expression" rel="external nofollow noopener noreferrer" target="_blank">Positive look behind in JavaScript regular expression</a><br>테스트 하려면 사이트가 아닌 콘솔 창 등등에서 테스트해야만 한다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'양권성 간장대학교 3학년 학번: 20120012'</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/학번: (\d+)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(regExp)[<span class="number">1</span>]); <span class="comment">// '20120012'</span></span><br></pre></td></tr></table></figure></li><li><p>삼둥이 중에 둘 째 찾기<br>사용 기법: <strong>capturing → (.+), any character except line breaks → ., one or more → +</strong><br>이제는 접두어와 접미어 사이에 낀 녀석을 찾아보자.<br>어… 예제가 적절치 않은데 그냥 이런 것도 있다고 생각하고 나중에 참고하면 될 것 같다.<br>이번에도 테스트 하려면 사이트가 아닌 콘솔 창 등등에서 테스트해야만 한다.<br>전국에 삼둥이는 참 많다.<br>그 중에 첫 째는 대한이, 셋 째는 만세, 둘 째는…?<br>둘 째의 이름을 구해보자!  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">`대한, 민국, 만세</span></span><br><span class="line"><span class="string">대한, 간장, 짱짱</span></span><br><span class="line"><span class="string">조선, 민국, 만세`</span>;</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/대한, (.+), 만세/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.match(regExp)[<span class="number">1</span>]); <span class="comment">// 민국</span></span><br></pre></td></tr></table></figure></li><li><p>스팸 단어 정하기<br>사용 기법: <strong>capturing → (도박|마카오|카지노), or → |</strong><br>스팸 게시물은 언제나 골칫거리다.<br>이를 약간이라도 줄이고자 필터링을 하는 방법으로 정규표현식이 많이 쓰인다.<br><img src="/images/ES-RegExp-ex/06.png" alt="스팸 죽어! 죽어! 죽어!"></p></li><li><p>비밀번호의 강도 높이기<br>요즘 크래커들의 크래킹 수준은 날이 갈 수록 높아져 비밀번호에 신경을 써야한다.<br>단순히 길다고 해서 끝나는 게 아니라 좀 더 복잡해야한다.<br>기본적으로 알파벳, 숫자, 특수기호가 들어가면서 8자 이상 20자 이하의 비밀번호를 작성해보자.<br>출처는 오래 전이라 까먹었다. 스택 오버플로우였는데…  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(?=.*[a-z])(?=.*\d)(?=.*[\&#123;\&#125;\[\]\/?.,;:|\)*~<span class="string">`!^\-_+&lt;&gt;@\#$%&amp;\\\=\(\'\"])[a-z\d\&#123;\&#125;\[\]\/?.,;:|\)*~`</span>!^\-_+<span class="xml"><span class="tag">&lt;&gt;</span>@\#$%&amp;\\\=\(\'\"]&#123;8,20&#125;/</span></span><br></pre></td></tr></table></figure></li></ol><p>이상한 외계어가 보인다.<br>그냥 가져다 쓰실 분은 쓰시고, 혹시 여기서 좀 더 보안을 강화하고 싶거나<br>호기심 충만하신 분들만 아래 내용을 보면 될 것 같다.  </p><p>먼저 이걸 이해하기 전에 정규표현식의 and에 대해 알아야 한다.<br>기본적으로 자바스크립트의 정규표현식에서는 and 연산자가 없다.<br>아래와 같은 편법이 필요하다.<br><a href="http://stackoverflow.com/questions/5176384/regexp-logic-and-or" rel="external nofollow noopener noreferrer" target="_blank">regexp logic and or</a><br>이해를 돕기 위해 정규표현식을 합성해서 공백을 넣었다.<br><img src="/images/ES-RegExp-ex/07.png" alt="you란 단어 뒤에 I란 단어가 나오는 문장"><br><img src="/images/ES-RegExp-ex/09.png" alt="(?=)을 사용하면 이렇게도 바꿀 수 있다."><br>(?=)은 접미어 앞에 존재하는 단어를 긁어내는 연산자이다.<br>you 라는 단어 앞에 글자가 0개 이상 있고, I 라는 단어 앞에 글자가 0개 이상 있다.<br>풀어서 쓰면 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you 앞에 글자 0개 이상 + I 앞에 글자 0개 이상(you를 포함) + 그 뒤에 글자 0개 이상(I를 포함)</span><br></pre></td></tr></table></figure><p><img src="/images/ES-RegExp-ex/08.png" alt="순서가 상관 없다면 or 연산자를 사용하여 쓸 수 있다."><br><img src="/images/ES-RegExp-ex/10.png" alt="(?=)을 사용하면 이렇게도 바꿀 수 있다."><br>(?=.*word1)(?=.*word2)와 같은 기법으로 순서가 상관 없는 and를 구현할 수 있다.<br>그리고 어떠한 글자들을 허용할 것인지 .*을 이용하여 표현하였다.</p><p>여기까지 이해했다면 이제 위 비밀번호 외계어 정규 표현식을 이해할 수 있다.<br>하나씩 까서 보자.  </p><ol><li><span style="color: blue">(?=.*[a-z])</span><span style="color: red">(?=.*\d)</span><span style="color: green">(?=.*[{}[]/?.,;:|)*~`!^-_+&lt;&gt;@#$%&amp;\=(&#39;&quot;])</span><br>첫 번째 포함 키워드는 알파벳, 두 번째 포함 키워드는 숫자, 세 번째 포함 키워드는 특수기호<br>특수기호는 입맛에 맞게 더 넣던지 빼던지 하면 된다.</li><li>[<span style="color: blue">a-z</span><span style="color: red">\d</span><span style="color: green">{}[]/?.,;:|)*~`!^-_+&lt;&gt;@#$%&amp;\=(&#39;&quot;</span>]<br>알파벳과 숫자, 특수기호의 입력을 허용</li><li>{8, 20}<br>8자 이상 20자 이하</li></ol><p>이를 다 조합해보면<br>알파벳, 숫자, 특수기호를 무조건 포함해야하며, 순서는 상관 없고,<br>알파벳, 숫자, 특수기호만 허용하고, 8자 이상 20자 이하<br>의 패스워드가 만들어지게 된다.</p><p>그럼…<br>알파벳, 숫자는 무조건 포함하면서 특수기호는 입력 해도 그만 안 해도 그만인 정규표현식은 어떻게 만들면 될까?<br>댓글 유도 및 방문자 여러분에게 질문을 던져본다.</p><h2 id="and의-원리-파악하기"><a href="#and의-원리-파악하기" class="headerlink" title="and의 원리 파악하기"></a>and의 원리 파악하기</h2><p>호기심이 멈추지 않아 and를 왜 (?=.*word1)(?=.*word2)와 같이 구현한 건지 파보았다.<br>머리가 돌아가지 않아 순전히 노가다였다.  </p><p><img src="/images/ES-RegExp-ex/11.png" alt=""><br>우선 word1이라는 단어가 포함되게 하려면 위와 같이 작성하여야 한다.</p><p><img src="/images/ES-RegExp-ex/12.png" alt=""><br>word1이란 단어 앞에 있는 패턴만 얻고 싶을 때 /패턴(?=word1)/을 쓴다.<br>하지만 정규표현식을 보면 (?=word1)앞에 아무런 패턴이 없다.<br>따라서 (?=word1)으로 얻어지는 패턴은 word1의 시작 위치이다.<br>그 시작 위치 이후에 .*, 즉 글자가 0개 이상이므로 위와 같이 word1의 시작 지점 이후부터의 문자만 가져온다.<br>두 번째 1word1에서 word1의 앞 부분인 1은 얻어오질 못하는 것이다.</p><p><img src="/images/ES-RegExp-ex/13.png" alt=""><br>@+word1의 정보까지 얻어오려면 위와 같이 .*을 붙여줘야한다.<br>그래야 @+word1이 시작하는 위치를 얻어와서 1word1도 정상적으로 인식한다.</p><p><img src="/images/ES-RegExp-ex/14.png" alt=""><br>이 경우에는 왜 아무것도 못 얻어오는지 보자.<br>(?=word1)로 word1이 시작하는 위치를 얻어왔다.  </p><p><img src="/images/ES-RegExp-ex/15.png" alt=""><br>저 위치에서 (?=word2)가 실행이 된다.<br>저 위치에선 word2 앞에 있는 정보를 얻어올 수 없다.<br>word1이 가로막고 있기 때문이다.</p><p><img src="/images/ES-RegExp-ex/16.png" alt=""><br>(?=word2)를 (?=.*word2)로 바꿔줘야 (?=word1)가 반환한 위치로 가도<br>가로막히지 않고 제대로 정보를 얻어올 수 있다.</p><p><img src="/images/ES-RegExp-ex/17.png" alt="(?=.\*word1)가 반환하는 위치는 다음과 같다."><br>마지막 케이스는 word1이 없으므로 반환하는 위치가 없다.<br>처음에 .*을 붙여버리면 각 라인 별 빨간 박스로 표시해둔 .*word1의 정보까지 받아오는 것 같다.  </p><p><img src="/images/ES-RegExp-ex/18.png" alt="(?=.\*word1)은 빨간 박스, (?=.\*word2)는 파란 박스, .*은 하늘색 박스를 참조하자."><br>(?=.*word1)을 수행한 후에 빨간색 박스친 정보를 가지고 있다.<br>그 이후에 (?=.*word2)를 수행하면 word2가 시작되는 파란색 화살표 위치로 이동하게 된다.<br>그 이후에 .*이 실행되서 하늘색 결과를 얻어올 수 있다.</p><p><img src="/images/ES-RegExp-ex/19.png" alt="(?=.\*word1)가 반환하는 위치와 정보는 다음과 같다."><br>먼저 (?=.*word1)이 시작하는 위치와 정보를 저렇게 받아온다.</p><p><img src="/images/ES-RegExp-ex/20.png" alt="(?=.\*word2)가 반환하는 위치와 정보는 파란색 박스와 같다."><br>먼저 (?=.*word2)이 시작하는 위치는 (?=.*word1)이 시작하는 위치와 같다.<br>그리고 (?=.*word2)이 얻어오는 정보는 파란색 박스와 같다.<br>두 패턴이 얻어온 정보를 짬뽕해서 그 뒤에 .*이 실행되면서 원하는 정보를 얻어온다.</p><p>내가 이해한 게 잘 이해한 건지, 설명이 틀리지는 않았는지는 장담하지 못하겠다…<br>넘나 어렵다…<br>그냥 쓰기나 할 걸 괜히 파고 든 것 같다는 생각이 살짜쿵 든다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Markdown) 개발자스러운 뱃지</title>
      <link href="/2016/11/26/Markdown-Badge/"/>
      <url>/2016/11/26/Markdown-Badge/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Markdown-Badge/thumb.png" alt=""><br>이번 포스트는 정말 별 것 없다.<br><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" rel="external nofollow noopener noreferrer" target="_blank">마크다운 문법</a>에 대한 설명도 아니고 그냥 좀 더 개발자스러운 이미지들을 써보는 글이다.  </p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#뭐가-개발자스러운-뱃지인가">뭐가 개발자스러운 뱃지인가?</a></li><li><a href="#뱃지를-직접-사용해보자">뱃지를 직접 사용해보자</a></li><li><a href="#커스텀-뱃지-만들기">커스텀 뱃지 만들기</a></li><li><a href="#NPM-뱃지">NPM 뱃지</a></li></ol><h2 id="뭐가-개발자스러운-뱃지인가"><a href="#뭐가-개발자스러운-뱃지인가" class="headerlink" title="뭐가 개발자스러운 뱃지인가?"></a>뭐가 개발자스러운 뱃지인가?</h2><p><a href="https://github.com/twbs/bootstrap" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/Markdown-Badge/01.png" alt="부트스트랩 깃헙 페이지"></a><br>유명한 라이브러리&amp;프레임워크를 보면 위와 같은 이미지? 스티커?들이 보인다.<br>bower며 npm이며 build 등등의 뱃지가 보인다.<br>이번 포스트에서 소개할 것은 위 사항들을 사용하는 방법에 대해서 배워보자.</p><a id="more"></a><h2 id="뱃지를-직접-사용해보자"><a href="#뱃지를-직접-사용해보자" class="headerlink" title="뱃지를 직접 사용해보자."></a>뱃지를 직접 사용해보자.</h2><p>우선 <a href="http://shields.io/" rel="external nofollow noopener noreferrer" target="_blank">http://shields.io/</a>로 접속하자.<br>여기서 나는 내가 npm에 올린 <a href="https://www.npmjs.com/package/check-browsers" rel="external nofollow noopener noreferrer" target="_blank">check-browsers</a>라는 라이브러리의 다운로드 수와 버전을 표시하기로 했다.</p><p><img src="/images/Markdown-Badge/02.png" alt="다운로드 관련 이미지"><br>나는 총 다운로드 수를 표현하고 싶어서 npm의 두 번째 이미지를 클릭하였다.</p><p><img src="/images/Markdown-Badge/03.png" alt="총 다운로드 수 90..."><br>npm 패키지의/dt(다운로드 토탈)/패키지 이름의 형식을 가진다.<br>마크다운 문법에서 사용하려면 그냥 복붙하면 된다.</p><p><img src="/images/Markdown-Badge/04.png" alt="버전 관련 이미지"><br>이번엔 내 패키지의 버전을 표시해보자.</p><p><img src="/images/Markdown-Badge/05.png" alt="버전은 1.0.3"><br>npm 패키지의/v(버전)/패키지 이름의 형식을 가진다.</p><p><img src="/images/Markdown-Badge/06.png" alt="따봉 관련 이미지"><br>깃헙에서 내 저장소가 따봉 몇 개나 받았는지도 표현할 수 있다.</p><p><img src="/images/Markdown-Badge/07.png" alt="따봉은 1개 ㅠㅠ..."><br>유저이름/저장소 이름의 형식을 가진다.</p><p>이외에 커밋 갯수나 트위터 팔로워 뱃지 등등은 직접 찾아서 사용하면 된다.<br>또한 뱃지는 svg, json, png 포맷을 지원한다.</p><h2 id="커스텀-뱃지-만들기"><a href="#커스텀-뱃지-만들기" class="headerlink" title="커스텀 뱃지 만들기"></a>커스텀 뱃지 만들기</h2><p><img src="/images/Markdown-Badge/08.png" alt="스크롤을 쭉쭉 내려보자."><br>커스톰 뱃지의 형태도 나오고 직접 만들어볼 수도 있다.</p><p><img src="/images/Markdown-Badge/09.png" alt="스타일링을 위한 파라미터"><br>다양한 파라미터를 통해 스타일, 레이블 등등을 바꿔치기 할 수 있다.<br>이는 커스텀 뱃지나 기존에 만들어져있는 형태의 뱃지에서도 사용이 가능하다.</p><h2 id="NPM-뱃지"><a href="#NPM-뱃지" class="headerlink" title="NPM 뱃지"></a>NPM 뱃지</h2><p>NPM 뱃지는 NPM만을 위한 뱃지이다.<br>백문이 불여일견, <a href="https://nodei.co/" rel="external nofollow noopener noreferrer" target="_blank">https://nodei.co/</a>로 접속해보자.</p><p><img src="/images/Markdown-Badge/10.png" alt="npm 관련 다양한 뱃지들"><br>npm에 특화된 다양한 뱃지들이 존재한다.</p><p><img src="/images/Markdown-Badge/11.png" alt="닥치고 내 거나 내놔!"><br>복잡시럽게 읽기 귀찮은 사람들은 간단하게 패키지 이름만 입력하면 다양한 뱃지가 나온다.  </p><p>좀 더 커스터마이징 하고 싶은 사람들은 해당 페이지를 읽으면 된다.</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 등등 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(git) 정리 노트</title>
      <link href="/2016/11/19/git-Reference/"/>
      <url>/2016/11/19/git-Reference/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/git-Reference/thumb.png" alt=""><br><strong>이 포스트는 git을 접하다 보면 마주치는 다양한 상황들에 대해 대처하기 위해 정리한 글이다.</strong><br>Ctrl+F 키를 눌러 원하시는 키워드를 검색하시면 다양한 케이스들을 볼 수 있다.<br>이 문서는 계속해서 업데이트 될 예정이고, 댓글로 제보 해주면 감사할 것 같다 &gt;_&lt;<br>혹시 문제 해결이 되지 않는다면 검색 키워드들을 조합해서 검색해보길 바란다.<br>취소, 되돌아가기, 삭제: undo, reset, remove<br>되돌아가기: revert, retrieve<br>특정: specific<br>미작동: not working  </p><a id="more"></a><h2 id="gitignore가-작동하지-않을-때"><a href="#gitignore가-작동하지-않을-때" class="headerlink" title=".gitignore가 작동하지 않을 때"></a><a href="http://stackoverflow.com/questions/11451535/gitignore-not-working" rel="external nofollow noopener noreferrer" target="_blank">.gitignore가 작동하지 않을 때</a></h2><p>검색 키워드: .gitignore not working</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;fixed untracked files&quot;</span><br></pre></td></tr></table></figure><p>커밋 메시지는 자기 입맛에 맞게 수정하면 된다.</p><h2 id="특정-브랜치-클론하기"><a href="#특정-브랜치-클론하기" class="headerlink" title="특정 브랜치 클론하기"></a><a href="http://stackoverflow.com/questions/1911109/how-to-clone-a-specific-git-branch" rel="external nofollow noopener noreferrer" target="_blank">특정 브랜치 클론하기</a></h2><p>검색 키워드: git specific branch clone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;브랜치명&gt; &lt;원격 저장소 주소&gt; &lt;폴더명&gt;</span><br></pre></td></tr></table></figure><p>폴더명을 입력하지 않으면 원격 저장소 이름으로 폴더가 생성된다.</p><h2 id="특정-커밋-클론하기"><a href="#특정-커밋-클론하기" class="headerlink" title="특정 커밋 클론하기"></a><a href="http://stackoverflow.com/questions/3555107/git-clone-particular-version-of-remote-repository" rel="external nofollow noopener noreferrer" target="_blank">특정 커밋 클론하기</a></h2><p>검색 키워드: git clone specific commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;원격 저장소 주소&gt; &lt;폴더명&gt;</span><br><span class="line">cd &lt;폴더명&gt;</span><br><span class="line">git reset --hard &lt;커밋 해시&gt;</span><br></pre></td></tr></table></figure><p>한 번에 땡겨오는 명령어는 없는 것 같다.</p><h2 id="add한-파일-취소시키기"><a href="#add한-파일-취소시키기" class="headerlink" title="add한 파일 취소시키기"></a><a href="http://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit" rel="external nofollow noopener noreferrer" target="_blank">add한 파일 취소시키기</a></h2><p>검색 키워드: git undo add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure><p>커밋을 하기 전에 add한 파일을 취소시킬 때 유용하다.<br>add한 모든 파일을 취소 시키려면 file을 빼고 입력하면 된다.<br>git status를 찍어보면 untracked 상태로 돌아간 걸 확인할 수 있다.</p><h2 id="특정-커밋으로-돌아가기"><a href="#특정-커밋으로-돌아가기" class="headerlink" title="특정 커밋으로 돌아가기"></a><a href="http://stackoverflow.com/questions/17667023/git-how-to-reset-origin-master-to-a-commit" rel="external nofollow noopener noreferrer" target="_blank">특정 커밋으로 돌아가기</a></h2><p>검색 키워드: git reset commit to master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;커밋 해시&gt;</span><br><span class="line">// 아래까지 하면 리모트 저장소까지 돌림.</span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure><h2 id="로컬에서-가장-최근-커밋-삭제"><a href="#로컬에서-가장-최근-커밋-삭제" class="headerlink" title="로컬에서 가장 최근 커밋 삭제"></a><a href="http://stackoverflow.com/questions/927358/how-to-undo-last-commits-in-git" rel="external nofollow noopener noreferrer" target="_blank">로컬에서 가장 최근 커밋 삭제</a></h2><p>검색 키워드: git reset recent commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~</span><br></pre></td></tr></table></figure><p>git log –oneline을 찍어보면 가장 최근 커밋이 날아간 걸 볼 수 있다.</p><h2 id="리모트-저장소-특정-커밋까지-삭제"><a href="#리모트-저장소-특정-커밋까지-삭제" class="headerlink" title="리모트 저장소 특정 커밋까지 삭제"></a><a href="http://stackoverflow.com/questions/1270514/undoing-a-git-push" rel="external nofollow noopener noreferrer" target="_blank">리모트 저장소 특정 커밋까지 삭제</a></h2><p>검색 키워드: git undo remote push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f &lt;리모트 저장소 이름&gt; &lt;삭제하기 직전 커밋 해시:브랜치 이름&gt;</span><br></pre></td></tr></table></figure><p>삭제하기 직전 커밋까지만 살고 그 이후의 커밋은 날아간다.</p><h2 id="워킹-디렉토리-깔끔하게-하기"><a href="#워킹-디렉토리-깔끔하게-하기" class="headerlink" title="워킹 디렉토리 깔끔하게 하기"></a><a href="http://stackoverflow.com/questions/4327708/git-reset-hard-head-leaves-untracked-files-behind" rel="external nofollow noopener noreferrer" target="_blank">워킹 디렉토리 깔끔하게 하기</a></h2><p>검색 키워드: git reset untracked files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -f -d</span><br></pre></td></tr></table></figure><p>untracked 파일들이 날아간다.<br>특정 커밋으로 돌아갔을 때 잡다구레한 파일들을 날릴 때 유용하다.</p><h2 id="로컬-리모트-브랜치-삭제하기"><a href="#로컬-리모트-브랜치-삭제하기" class="headerlink" title="로컬/리모트 브랜치 삭제하기"></a><a href="http://stackoverflow.com/questions/2003505/how-to-delete-a-git-branch-both-locally-and-remotely" rel="external nofollow noopener noreferrer" target="_blank">로컬/리모트 브랜치 삭제하기</a></h2><p>검색 키워드: git remove remote branch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d branch_name</span><br><span class="line">git push origin :&lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p>순서대로 로컬/리모트 저장소에서 브랜치를 삭제하는 명령어이다.</p><h2 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a><a href="https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-Git-Alias" rel="external nofollow noopener noreferrer" target="_blank">Alias</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.unstage &quot;reset HEAD --&quot;</span><br><span class="line">git unstage fileA</span><br><span class="line">git reset HEAD fileA</span><br></pre></td></tr></table></figure><p>첫 번째 라인에서 alias(별칭)을 글로벌로 선언함.<br>2, 3번 라인은 동일함.</p><h2 id="add와-commit-동시에-하기"><a href="#add와-commit-동시에-하기" class="headerlink" title="add와 commit 동시에 하기"></a><a href="#">add와 commit 동시에 하기</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.commitx &apos;!git add . &amp;&amp; git commit -a -m &apos;</span><br><span class="line">git commitx &quot;커밋 메시지&quot;</span><br></pre></td></tr></table></figure><p>명령어 두 개가 혼재돼있을 때는 첫 명령어에 !을 붙여야 정상 작동한다.<br>윈도우에서는 ‘’ 대신에 “”을 써야 작동하는 것 같다<br>add와 commit을 매번하기 귀찮으므로 필자가 자주 쓰는 alias이다.</p><h2 id="alias-관리"><a href="#alias-관리" class="headerlink" title="alias 관리"></a><a href="#">alias 관리</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --get-regexp alias</span><br><span class="line">git config --global --unset alias.untage</span><br></pre></td></tr></table></figure><p>첫 번째 라인은 alias 목록을 보여주고,<br>두 번째 라인은 alias를 삭제해주는 역할을 한다.</p><h2 id="commit-메세지에-timestamp-넣기"><a href="#commit-메세지에-timestamp-넣기" class="headerlink" title="commit 메세지에 timestamp 넣기."></a><a href="http://stackoverflow.com/questions/4654437/how-to-set-current-date-as-git-commit-message" rel="external nofollow noopener noreferrer" target="_blank">commit 메세지에 timestamp 넣기.</a></h2><p>검색 키워드: git commit message time</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;`date`&quot;</span><br><span class="line">git commit -m &quot;`date +\&quot;%Y/%m/%d %H:%M:%S\&quot;`&quot;</span><br></pre></td></tr></table></figure><p>첫 번째 라인은 Sun Dec 4 22:12:42 KST 2016 같은 형식으로 커밋 메시지가 나오고<br>두 번째 라인은 2016/12/04 22:25:13 같은 형식으로 커밋 메시지가 나온다.</p><h2 id="로컬-저장소를-원격-저장소로부터-싱크-맞추기"><a href="#로컬-저장소를-원격-저장소로부터-싱크-맞추기" class="headerlink" title="로컬 저장소를 원격 저장소로부터 싱크 맞추기"></a><a href="http://stackoverflow.com/questions/6373277/git-sync-local-repo-with-remote-one" rel="external nofollow noopener noreferrer" target="_blank">로컬 저장소를 원격 저장소로부터 싱크 맞추기</a></h2><p>검색 키워드: git sync with remote</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch // 커밋 로그들만 받아옴.</span><br><span class="line">git reset --hard origin/&lt;your-working-branch&gt;</span><br></pre></td></tr></table></figure><h2 id="로컬-브랜치-이름-바꾸기"><a href="#로컬-브랜치-이름-바꾸기" class="headerlink" title="로컬 브랜치 이름 바꾸기"></a><a href="http://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch" rel="external nofollow noopener noreferrer" target="_blank">로컬 브랜치 이름 바꾸기</a></h2><p>검색 키워드: git branch rename</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;oldname&gt; &lt;newname&gt;</span><br><span class="line">git branch -m &lt;newname&gt; // 현재 브랜치</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Middle-end </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 형상 관리 </tag>
            
            <tag> 버전 관리 </tag>
            
            <tag> 배포 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Webpack) 모듈? 번들링?</title>
      <link href="/2016/11/18/Module-bundling-with-Webpck/"/>
      <url>/2016/11/18/Module-bundling-with-Webpck/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Module-bundling-with-Webpck/thumb.png" alt="">  </p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#들어가기에-앞서">들어가기에 앞서</a></li><li><a href="#모듈-너는-누구니">모듈, 너는 누구니?</a></li><li><a href="#웹팩을-사용해보자">웹팩을 사용해보자</a></li><li><a href="#웹팩에게-모듈이란…">웹팩에게 모듈이란…?</a></li><li><a href="#바벨은-안전한가">개발용? 배포용?</a></li><li><a href="#부트스트랩-폰트어썸-제이쿼리-이미지-모듈을-사용해보자">부트스트랩, 폰트어썸, 제이쿼리, 이미지 모듈을 사용해보자.</a></li><li><a href="#홈페이지-IE8에서도-웹팩을-써보자">홈페이지, IE8에서도 웹팩을 써보자.</a></li><li><a href="#마치며…">마치며…</a> </li></ol><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>아주 많이 참조한 링크<br><a href="https://github.com/AriaFallah/WebpackTutorial/tree/master/ko-arahansa/part1" rel="external nofollow noopener noreferrer" target="_blank">웹팩입문자를 위한 튜토리얼 파트1 - 웹팩 입문 !</a></p><a id="more"></a><p>이 포스트에서는 <strong>Node.js</strong>, <strong>npm</strong>, <strong>ES(ECMAScript)</strong>, <strong><a href="/2016/11/11/Babel-ES6-with-IE8/">Babel</a></strong> 등등에 대해서는 설명하지 않는다.<br>해당 내용들은 구글링을 통해 직접 찾아보길 바란다.</p><p>이번 포스트에서는 모듈이 왜 필요한지, 무엇인지, 번들링이란 무엇인지 등등에 대해 다룬다.<br>또한 홈페이지나 SPA가 여러 개 있는 다중 페이지, IE8에서도 모듈 번들링을 하는 방법까지 다뤄보자.</p><h2 id="모듈-너는-누구니"><a href="#모듈-너는-누구니" class="headerlink" title="모듈, 너는 누구니?"></a>모듈, 너는 누구니?</h2><p>ES5(3)를 공부해본 사람이라면 자바스크립트의 스코프 관리는 지저분하다는 것을 알 수 있다.<br>이를 해결하고자 아래와 같은 방법들이 있다.<br>private module을 구현하는 코드 (전역의 공간을 더럽히지 않는 코드)<br>대신 script 모듈에서 script2 모듈에 있는 데이터를 불러올 수 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES3+ (IE 8+)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// 소스코드 끄적끄적...</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 (Moden Browser)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 소스코드 끄적끄적...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public module을 구현하는 코드<br>script 모듈에서 script2 모듈에 있는 데이터를 불러올 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES3+ (IE 8+), 전역 스코프에 변수가 추가된다는 단점이 존재한다.</span></span><br><span class="line"><span class="comment">// 네임스페이스 패턴이라고 부른다.</span></span><br><span class="line"><span class="comment">// script.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> car = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> namespace = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> color = <span class="string">'blue'</span>; <span class="comment">// 외부에 노출시키지 않음, 캡슐화.</span></span><br><span class="line">  <span class="comment">// 아래 메소드는 네임스페이스의 메소드임.</span></span><br><span class="line">  namespace.getColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">  &#125;;</span><br><span class="line">  namespace.setColor = <span class="function"><span class="keyword">function</span>(<span class="params">_color</span>) </span>&#123;</span><br><span class="line">    color = _color;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 메소드를 달고 있는 네임스페이스 객체 리턴.</span></span><br><span class="line">  <span class="keyword">return</span> namespace;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES3+ (IE 8+), 전역 스코프에 car라는 변수가 추가된다는 단점이 존재한다.</span></span><br><span class="line"><span class="comment">// script2.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(car.getColor()); <span class="comment">// 'blue';</span></span><br><span class="line">car.setColor(<span class="string">'red'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.getColor()); <span class="comment">// 'red';</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 (현재 지원하는 브라우저 없음)</span></span><br><span class="line"><span class="comment">// 이 방법이 베스트인데, 크롬마저도 미지원이다.</span></span><br><span class="line"><span class="comment">// script.js</span></span><br><span class="line"><span class="keyword">let</span> color = <span class="string">'blue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getColor = <span class="function"><span class="params">()</span> =&gt;</span> color;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setColor = <span class="function">(<span class="params">_color</span>) =&gt;</span> color = _color;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 (현재 지원하는 브라우저 없음)</span></span><br><span class="line"><span class="comment">// 이 방법이 베스트인데, 크롬마저도 미지원이다.</span></span><br><span class="line"><span class="comment">// script2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;getColor, setColor&#125; <span class="keyword">from</span> <span class="string">'./script'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(getColor());</span><br><span class="line">setColor(<span class="string">'red'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(getColor());</span><br></pre></td></tr></table></figure><p>이렇 듯 모듈은 변수의 스코프를 관리하는 기능을 한다.<br>물론 이게 모듈의 전부는 아니지만, 그건 이 포스트의 주제를 벗어나므로 설명하지 않겠다.<br>브라우저에서 ES6의 모듈이 지원되지는 않지만 모듈을 사용하는 두 가지 방법이 존재한다.</p><ol><li>자바스크립트 파일/모듈 로더인 requireJS를 사용.</li><li>모듈 번들러인 Webpack이나 Browserify 등등을 사용.</li></ol><p>이 중에서 나는 2번의 Webpack을 택했다.<br>참고로 번들러는 번들링하는 놈을 지칭하고,<br>번들링은 여러가지 파일을 모아서 하나로 만드는 것이라고 보면 된다.<br>여러 모듈을 하나로 합쳐서 http 리퀘스트 횟수를 줄여서<br>퍼포먼스를 향상시키는 등등의 효과를 불러일으킬 수 있다.</p><h2 id="웹팩을-사용해보자"><a href="#웹팩을-사용해보자" class="headerlink" title="웹팩을 사용해보자"></a>웹팩을 사용해보자</h2><p>터미널 창에서 아래와 같이 입력해보자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g webpack</span><br><span class="line">$ npm i -D webpack babel-core babel-preset-latest babel-loader</span><br></pre></td></tr></table></figure><p>위 명령어들을 하나 하나 헤짚어 보자.</p><ol><li>npm i -g webpack<br>터미널에서 webpack 명령어를 사용하기 위해 글로벌로 웹팩을 설치</li><li>npm i -D webpack<br>현재 프로젝트에서 웹팩을 사용하기 위해 설치</li><li>babel-core<br>requireJS 문법을 이용해도 모듈 번들링을 할 수 있지만,<br>ES6의 import, export를 사용해보기 위해 babel을 사용하였다.</li><li>babel-preset-latest<br>babel에는 plugin이라는 게 존재한다.<br>이 plugin은 es6의 애로우 펑션을 지원하는 플러그인, 클래스를 지원하는 플러그인 등등이 있다.<br>그러한 플러그인을 모아놓은 걸 preset이라고 부른다.<br>es2015 preset은 es6의 플러그인들을 모아놓은 것이고,<br>latest preset은 ES2015~ES2017까지의 프리셋들을 모아놓은 것이다.<br>시간이 지나면 latest의 지원 프리셋 범위는 더 늘어날 수도 있다.</li><li>babel-loader<br>웹팩과 바벨을 연동해서 사용하기 위한 로더.</li></ol><p>이제는 아래와 같이 디렉토리를 구성해보자.</p><ol><li>.babelrc</li><li>entry-index.js</li><li>index.html</li><li>module-a.js</li><li>module-b.js</li><li>module-c.js</li><li>webpack.config.js</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ES6의 import와 export 문은 이 포스트에서 다루지 않겠다.   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module-a.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">'나는 a'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ab = a + <span class="string">', a를 외부에 노출시키지 않고 변수 a를 활용!'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module-b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">'모듈 a에 존재하는 변수 a와는 다른 스코프를 가짐'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module-c.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">'나도 써주랑!'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry-index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;ab&#125; <span class="keyword">from</span> <span class="string">'./module-a'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./module-b'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;b&#125; <span class="keyword">from</span> <span class="string">'./module-c'</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(ab); <span class="comment">// "나는 a, a를 외부에 노출시키지 않고 변수 a를 활용!"</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// "모듈 a에 존재하는 변수 a와는 다른 스코프를 가짐"</span></span><br></pre></td></tr></table></figure><p>.babelrc 파일은 바벨의 설정 파일이다.<br>아래와 같이 써주자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"latest"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.config.js 파일은 웹팩의 기본 설정 파일이다.<br>아래와 같이 써주자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);  </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">  entry: <span class="string">'./entry-index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compressor: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'babel'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>설정 파일을 하나씩 파헤쳐보자.</p><ol><li><p>devtool<br>소스맵과 디버깅을 요긴하게 하기 위한 옵션이다.<br>자세한 건 <a href="/2016/11/14/Webpack-devtool-option-Performance/">devtool 옵션 퍼포먼스</a>를 참고하자.</p></li><li><p>entry<br><a href="http://d2.naver.com/helloworld/0239818" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 모듈화 도구, webpack</a>에서는 아래와 같이 말하고 있다.</p><blockquote>![](/images/Module-bundling-with-Webpck/01.png)  서로 의존 관계에 있는 다양한 모듈을 사용하는 시작점이 되는 파일이다.</blockquote>[Webpack 적용기 2 : 어떻게 사용하는가?](https://hjlog.me/post/118)에서는 다음과 같이 설명하고 있다.  > 번들링의 진입점에 해당하는 entry point에서부터 require으로 명시된 의존성들을 해석하며 의존성 트리(dependency tree)를 그린다.</li><li><p>output<br>결과물이 어느 폴더, 어떤 파일명으로 저장될지 정하는 옵션이다.</p></li><li><p>plugins<br>js 난독화 플러그인, 번들 파일을 html에 자동으로 삽입해주는 플러그인 등등 종류가 많다.</p></li><li><p>UglifyJsPlugin<br>js 난독화 플러그인</p></li><li><p>modules<br>파일들에 영향을 주는 옵션들</p></li><li><p>loaders<br><a href="https://hjlog.me/post/118" rel="external nofollow noopener noreferrer" target="_blank">Webpack 적용기 2 : 어떻게 사용하는가?</a>에서는 다음과 같이 설명하고 있다.</p><blockquote><p>이 때 require된 모듈들은 불러들어지는 과정에서 파이프라이닝 된<br>일련의 로더 들을 거치게 된다.  </p></blockquote></li></ol><p><strong>로더</strong>를 하나의 정해진 <strong>역할을 수행</strong>하는, 일종의 <strong>함수</strong>라고 생각할 수 있다.<br>로더는 직전 단계의 모듈을 입력으로 받아,<br>다양한 변형을 가한 뒤 다음 로더의 입력으로 넘겨준다.<br>마지막 로더는 최종적으로 적절하게 변형된 모듈을<br>번들 자바스크립트 파일에 넣어주게 된다.</p><p>그럼 실제로 번들링을 해보자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack -w</span><br></pre></td></tr></table></figure><p>위 명령어를 실행하면 모듈들이 번들링되며 엔트리 포인트와 엔트리 포인트에 관련된 모듈들이<br>변경될 때마다 다시 번들링되는 감시(watch)를 진행하게 된다.<br>Ctrl+C 키를 누르면 빠져나올 수 있다.</p><p>그리고나서 다시 디렉토리를 보면 다음과 같은 파일이 생긴 것을 볼 수 있다.</p><ol><li>bundle.js</li><li>bundle.js.map</li></ol><p>한번 index.html 파일을 열어보고 콘솔창을 보자.<br><img src="/images/Module-bundling-with-Webpck/02.png" alt="index.html은 bundle.js만 로드했지만 bundle.js.map이 원본 파일 정보를 들고 있어서 어떠한 파일에서 오류가 났는지 쉽게 알 수 있다."><br>디버깅하여 모듈은 어떠한 스코프를 가지는지 알아보자.<br><img src="/images/Module-bundling-with-Webpck/03.png" alt="모듈은 로컬 스코프에 별도의 객체를 만들어 스코프를 관리한다."><br>6번 라인에 브레이크 포인트를 걸고 새로고침을 해보았다.<br>module-c는 import 시켰지만 모듈의 변수를 사용하지 않았으므로<br>불필요하게 스코프를 생성하지 않았다.</p><p>만약 모듈화가 브라우저 자체 내에서 지원된다면<br>index.html은 아래와 같이 마크업해야하지 않을까 싶다.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./module-a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./module-b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./module-c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./entry-index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>웹팩의 모듈 번들링 방식은 bundle.js 파일 하나만 요청해서 리퀘스트 횟수가 1회였는데,<br>저렇게 의존하는 모듈이 많으면 많을 수록 리퀘스트 횟수가 증가하여 큰 비용을 지불하게 될 것이다.<br>위와 같이 웹팩을 사용하면 큰 효과를 얻어낼 수 있다.</p><h2 id="웹팩에게-모듈이란…"><a href="#웹팩에게-모듈이란…" class="headerlink" title="웹팩에게 모듈이란…?"></a>웹팩에게 모듈이란…?</h2><p>ES6의 관점에서 모듈과 웹팩의 관점에서 모듈은 다르다.<br>ES6는 js 파일만 모듈이라고 한정하는데 반해 웹팩은 이미지, css 파일 등등도 모듈로 취급한다.<br>js 모듈을 import 시키는 것은 따로 로더를 요구하지 않지만,<br>다른 모듈들은 로더를 필요로 한다.<br>다음 예제를 통해 css, scss 모듈을 import 시켜보자.<br>또한 번들링 된 모듈(bundle.js)을 자동으로 추가시켜보자.<br>위 디렉토리에서 아래 파일들을 추가하자.</p><ol><li>style.css</li><li>style.scss</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">user-select</span>: none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.scss */</span></span><br><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 index.html을 아래와 같이 수정해주자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>나는 문서의 제목이얌! 내가 짱이지!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>IE11+에서 나는 드래그 안 될 걸?!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 entry-index.js에 (s)css 모듈을 추가해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../styles/style.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/style.scss'</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123;ab&#125; <span class="keyword">from</span> <span class="string">'./module-a'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./module-b'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;b&#125; <span class="keyword">from</span> <span class="string">'./module-c'</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(ab); <span class="comment">// "나는 a, a를 외부에 노출시키지 않고 변수 a를 활용!"</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// "모듈 a에 존재하는 변수 a와는 다른 스코프를 가짐"</span></span><br></pre></td></tr></table></figure><p>그리고 관련 로더들을 설치해보자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D html-webpack-plugin style-loader css-loader node-sass sass-loader postcss-loader autoprefixer</span><br></pre></td></tr></table></figure><p>하나씩 까보자.</p><ol><li><p>html-webpack-plugin<br>html에 번들링 된 bundle.js 파일을 넣어주는 역할을 한다.</p></li><li><p>style-loader css-loader<br>css 모듈을 import 시키기 위한 로더이다.</p></li><li><p>node-sass sass-loader<br>scss 모듈을 import 시키기 위한 로더이다.  </p></li><li><p>postcss-loader autoprefixer<br>(s)css 파일 등등에 벤더 프리픽스를 자동으로 붙이는 로더이다.</p></li></ol><p>webpack.config.js는 아래와 같이 고쳐보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);  </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">  entry: <span class="string">'./entry-index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compressor: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./index.html'</span>,</span><br><span class="line">      filename: <span class="string">'./index2.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  postcss: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'babel'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap'</span>, <span class="string">'sass?sourceMap'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>추가된 옵션들을 하나씩 살펴보자.</p><ol><li><p>html webpack plugin<br>html에 번들링 한 파일을 자동으로 삽입해준다.<br>tmplate에 ejs 등등의 html 템플릿 엔진으로 작성한 걸 넣어주고,<br>filename에 그 템플릿을 토대로 새롭게 만들어질 html 파일을 지정해주면 된다.<br>자세한 내용은 <a href="https://github.com/ampedandwired/html-webpack-plugin" rel="external nofollow noopener noreferrer" target="_blank">플러그인 api</a>를 참조하길 바란다.</p></li><li><p>postcss<br>스타일 시트에 벤더 프리픽스를 지정하기 위해 추가하였다.<br>사용하고자 하는 쿼리는 <a href="https://github.com/ai/browserslist" rel="external nofollow noopener noreferrer" target="_blank">Browserslist</a>에서 확인 가능하고,<br>쿼리문 테스트는 <a href="http://browserl.ist/" rel="external nofollow noopener noreferrer" target="_blank">browserl.ist</a>에서 확인 가능하며,<br>데모는 <a href="http://autoprefixer.github.io/" rel="external nofollow noopener noreferrer" target="_blank">Autoprefixer CSS online</a>에서 가능하다.</p></li><li><p>css-loader, sass-loader<br>test에는 정규표현식이 들어가고, 로더의 순서는 바뀌면 오류가 난다.<br>아마 오른쪽에서부터 왼쪽으로 적용이 되는 게 아닐까 싶다.<br>또한 소스맵 옵션을 제거하면 아래와 같이 난독화된 소스를 보게돼 디버깅하기가 쉽지 않다.<br><img src="/images/Module-bundling-with-Webpck/04.png" alt="스타일의 규모가 크다고 가정하면 생각만해도 끔찍하다"></p></li></ol><h2 id="개발용-배포용"><a href="#개발용-배포용" class="headerlink" title="개발용? 배포용?"></a>개발용? 배포용?</h2><p>뭔가 이제 그럴듯 하게 보이긴 하지만 현재 프로젝트 디렉토리를 보자.</p><ol><li>node_modules - 패키지들이 설치된 폴더로 개발할 때 수정할 일이 없는 파일.</li><li>.babelrc - 바벨의 설정파일로서 개발할 때 수정할 일이 없는 파일.</li><li>bundle.js - 개발할 때는 필요없는 배포용 파일</li><li>bundle.js.map - 실제 사용자가 디버깅 할 필요는 없으므로 이 파일도 개발용 파일.</li><li>entry-index.js - 개발용 파일</li><li>index.html - 템플릿이 되는 파일이므로 개발용 파일</li><li>index2.html - 템플릿을 토대로 만들어진 배포용 파일</li><li>module-a.js - bundle.js에 번들링된 내용이므로 실제 배포할 때 필요없는 개발용 파일</li><li>module-b.js - bundle.js에 번들링된 내용이므로 실제 배포할 때 필요없는 개발용 파일</li><li>module-c.js - bundle.js에 번들링된 내용이므로 실제 배포할 때 필요없는 개발용 파일</li><li>package.json - 패키지들의 의존성을 도와주는 파일로서 바벨의 설정파일로서 개발할 때 수정할 일이 없는 파일.</li><li>style.css - bundle.js에 번들링된 내용이므로 실제 배포할 때 필요없는 개발용 파일</li><li>styles.css - bundle.js에 번들링된 내용이므로 실제 배포할 때 필요없는 개발용 파일</li><li>webpack.config.js - 번들을 하기 위한 설정 파일이므로 개발할 때 수정할 일이 없는 파일.</li></ol><p>개발용 파일과 배포용 파일이 너무 난잡하게 섞여있다.<br>이는 나중에 개발 &amp; 배포를 할 때 상당한 혼란을 초래한다.</p><p>또한 스타일 시트를 bundle.js 안에 번들링하면 아래와 같은 현상이 발생한다.<br><img src="/images/Module-bundling-with-Webpck/05.gif" alt="새로고침을 하면 일시적으로 스타일이 적용되지 않은 모습이 보인다."><br>위 현상은 스타일 시트의 규모가 커질 수록 스타일이 적용되지 않은 모습이 노출되는 시간이 길어진다.<br>이를 해결하고자 css 파일에 소스맵을 안 붙여서 내부 스타일 시트로 배포하는 수가 있지만,<br>bundle.js의 몸뚱아리만 키워 로딩속도를 저하시키는 요인이 되기도 한다.<br>http 리퀘스트 횟수를 줄이라고는 하지만 기본적으로 http 리퀘스트는 4개의 병렬로 처리된다.<br>따라서 몸뚱아리만 큰 bundle.js를 로딩시키는 것보다<br>css 파일을 따로 빼서 bundle.js와 병렬로 로딩시키게끔 처리하는 게 훨씬 효율적이다.</p><p>그럼 개발용 파일과 배포용 파일을 분리해 보자!<br>우선 디렉토리를 아래와 같이 바꾼다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ node_modules</span><br><span class="line">+ src</span><br><span class="line">  - index.html</span><br><span class="line">  + scripts</span><br><span class="line">    - entry-index.js</span><br><span class="line">    - module-a.js</span><br><span class="line">    - module-b.js</span><br><span class="line">    - module-c.js</span><br><span class="line">  + styles</span><br><span class="line">    - style.css</span><br><span class="line">    - style.scss</span><br><span class="line">.babelrc</span><br><span class="line">package.json</span><br><span class="line">webpack.config.dev.js</span><br><span class="line">webpack.config.prod.js</span><br></pre></td></tr></table></figure><p>우선 개발과 상관없는 설정 파일들은 루트 디렉토리로 빼버렸다.<br>그리고 개발에 집중하고자 개발용 파일들을 src 폴더에 체계적으로 분류하였다.<br>또한 웹팩의 설정 파일을 개발용과 배포용으로 나눴는데 이유는 다음과 같다.</p><ul><li><p>개발용 파일은 디버깅이 주 목적이라 소스맵이 필요하다.<br>또한 난독화시키는 것은 번들링 타임을 증가시키는 주범이므로 뺀다.<br>그리고 HTML 파일을 핫리로드하게 만들어야 한다.</p><blockquote>핫리로드란 서버의 재시작 없이 내용이 재교체되는 것을 뜻한다.또한 브라우저에서 자동으로 새로고침이 이루어진다.</blockquote>그리고 스타일 시트를 외부로 빼면 HMR을 이용할 수 없으므로 따로 빼지 않는다.> HMR(Hot Module Replacement)이란 서버의 재시작 없이,브라우저가 새로고침하지 않고, 수정된 부분만 바꾸는 것을 의미한다.</li><li><p>배포용 파일은 실 사용이 주 목적이라 용량을 경량화 시킬 난독화 작업이 진행되고,<br>디버깅 할 필요가 없으므로 소스맵도 붙이지 않고,<br>또한 HTML 파일은 핫리로드하게 만들 필요가 없고,<br>HMR을 사용할 필요가 없으므로 스타일 시트를 외부로 뺀다.</p></li></ul><p>이를 위해서 추가로 패키지를 설치할 필요가 있다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g webpack-dev-server</span><br><span class="line">$ npm i -D webpack-dev-server raw-loader webpack-browser-plugin extract-text-webpack-plugin webpack-strip clean-webpack-plugin</span><br></pre></td></tr></table></figure><ol><li>webpack-dev-server  </li></ol><p>-g로 설치하는 이유는 해당 명령어를 터미널에서 쓰기 위함이고<br>다시 한 번 -D로 설치하는 이유는 현재 프로젝트에서 해당 패키지를 쓰기 위함이다.<br>webpack-dev-server는 실제 눈에 보이지 않는 디렉토리를 만들고 그 디렉토리에<br>번들링을 진행하고 watch하며 테스트를 하는 웹팩 개발용 서버이다.</p><ol start="2"><li><p>raw-loader는 html 파일을 핫리로드하게 만드는 로더이다.  </p></li><li><p>webpack-browser-plugin<br>webpack-dev-server에서 번들링을 끝낸 후 자동으로 브라우저를 열어주는 플러그인이다.<br>자세한 옵션은 <a href="https://www.npmjs.com/package/webpack-browser-plugin" rel="external nofollow noopener noreferrer" target="_blank">webpack-browser-plugin</a>을 확인하자.</p></li><li><p>extract-text-webpack-plugin<br>스타일 시트를 따로 빼기 위한 플러그인이다.</p></li><li><p>webpack-strip<br>js 파일에서 디버깅을 위해 찍어본 로그를 삭제해준다. </p></li><li><p>clean-webpack-plugin<br>배포용 파일을 빌드하기 전에 배포용 디렉토리를 지워주는 플러그인이다.</p></li></ol><p>이제 webpack.config.dev.js 부터 수정해보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">const</span> WebpackBrowserPlugin = <span class="built_in">require</span>(<span class="string">'webpack-browser-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'cheap-eval-source-map'</span>,</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</span><br><span class="line">    <span class="string">'webpack/hot/dev-server'</span>,</span><br><span class="line">    <span class="string">'./src/scripts/entry-index.js'</span></span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'http://127.0.0.1:8080/'</span>,</span><br><span class="line">    filename: <span class="string">'scripts/bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> WebpackBrowserPlugin()</span><br><span class="line">  ],</span><br><span class="line">  postcss: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'babel'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap,-minimize'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap,-minimize'</span>, <span class="string">'sass?sourceMap,outputStyle=expanded'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">      loader: <span class="string">'raw-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>추가된 속성들을 하나씩 살펴보자.</p><ol><li><p>entry<br>두 개의 새로운 엔트리포인트가 서버와 브라우저에 접속하여 HMR을 허용한다.</p></li><li><p>publicPath<br>자세히는 모르겠지만 저렇게 설정해주지 않으면, 이미지나 폰트가 제대로 붙지 않음.</p></li><li><p>new webpack.HotModuleReplacementPlugin()<br>HMR을 사용하기 위한 플러그인</p></li><li><p>new WebpackBrowserPlugin()<br>번들링이 끝나면 자동으로 브라우저를 열어줌.</p></li><li><p>css?sourceMap,-minimize, sass?sourceMap,outputStyle=expanded<br>(s)css 파일을 압축시키지 않으면서 소스맵을 붙이고자 할 때 씀.</p></li><li><p>raw-loader<br>HTML을 핫리로드하게 만드는 로더.</p></li><li><p>devServer<br>hot은 HMR의 활성화 여부이다.</p></li></ol><p>이제는 배포용 설정 파일인 webpack.config.prod.js를 아래와 같이 바꿔보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/scripts/entry-index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'scripts/bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compressor: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xhtml: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'styles/bundle.css'</span>)</span><br><span class="line">  ],</span><br><span class="line">  postcss: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loaders: [<span class="string">'babel'</span>, <span class="string">'webpack-strip?strip[]=debug,strip[]=console.log,strip[]=console.dir'</span>],</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!postcss-loader'</span>)</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!sass!postcss-loader'</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>추가된 속성들을 하나씩 살펴보자.</p><ol><li><p>new CleanWebpackPlugin([‘dist’])<br>빌드를 시작하기 전에 먼저 배포용 디렉토리를 지워줘야한다.</p></li><li><p>new webpack.DefinePlugin()  </p></li></ol><p><em>process.env.NODE_ENV</em>는 개발환경인지 배포환경인지 알고자 할 때 쓰인다.<br>production이면 배포 모드, development이면 개발환경이다.<br>이는 HTML을 핫리로드하게 만들지 안 만들지를 결정하기 위해 썼다.</p><ol start="3"><li><p>new webpack.optimize.OccurrenceOrderPlugin()</p><blockquote><p>모듈을 할당하고 발생 카운트 아이디들을 발생(?chunk)시킨다.<br>ID들은 종종 적은(짧은) id들을 얻는데 사용된다.<br>이것은 id가 예상가능하며 파일 전체 크기를 경감시켜 추천한다.</p></blockquote></li><li><p>new HtmlWebpackPlugin({ minify: {}})<br><a href="https://github.com/kangax/html-minifier#options-quick-reference" rel="external nofollow noopener noreferrer" target="_blank">html 난독화 옵션</a>을 참고하자.</p></li><li><p>new ExtractTextPlugin(‘styles/bundle.css’)<br>번들링한 스타일 시트 파일을 어디에다 추출할지 정해주는 플러그인.</p></li><li><p>‘webpack-strip?strip[]=debug,strip[]=console.log,strip[]=console.dir’<br>webpack-strip 로더를 사용하여 디버깅을 위해 로그에 찍었던 로그를 삭제했다.</p></li><li><p>ExtractTextPlugin.extract()<br>해당 스타일 시트를 css파일로 뽑아내는 로더이다.</p></li></ol><p>또한 html을 핫리로드하게 만들어주려면 엔트리에 html 모듈을 추가해야한다.<br>하지만 배포용에서는 핫리로드하게 만들어줄 필요가 없기 때에 조건문을 쓰면 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry-index.js</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'../index.html'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/style.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/style.scss'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123;ab&#125; <span class="keyword">from</span> <span class="string">'./module-a'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./module-b'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;b&#125; <span class="keyword">from</span> <span class="string">'./module-c'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(ab);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>웹팩의 설정 파일의 기본적인 이름은 webpack.config.js이다.<br>그래서 webpack 이라는 명령어만 붙여도 자동으로 webpack.config.js 파일을 인식했는데,<br>우리는 임의로 설정 파일의 이름을 바꿨기 때문에 달리 진행해야한다.  </p><p>개발을 진행하기 위해서는 터미널에 아래와 같이 입력을 해야한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack-dev-server -d --config webpack.config.dev.js</span><br></pre></td></tr></table></figure><p>배포를 진행하기 위해서는 아래와 같이 입력을 해야한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --config webpack.config.prod.js</span><br></pre></td></tr></table></figure><p>하지만 위와 같은 작업은 매우 귀찮다.<br>npm의 스크립트를 이용해보자.<br>우선 package.json에서 scripts 부분을 아래와 같이 수정해준다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack-dev-server -d --config webpack.config.dev.js",</span><br><span class="line">  "build": "webpack --config webpack.config.prod.js",</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 개발을 진행하고자 할 때는 아래와 같이 입력해주면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>배포를 진행하고자 할 때는 아래과 같이 입력해주면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>우선 개발용 서버로 진입해서 살펴보자.<br><img src="/images/Module-bundling-with-Webpck/06.png" alt="http://localhost:8080/ 으로 접속해보자."><br>js 파일에서 스타일을 렌더링하는 코드가 있기 때문에 js파일을 전부 로드한 이후에<br>스타일 시트가 적용돼서 초반에 스타일 시트가 적용되지 않은 모습이 잠깐 보이게 된다.<br>또한 html 파일에 넣지 않았던 번들링된 파일과 스타일 시트가 들어가있다.</p><p>그럼 style.scss 파일을 고쳐보자.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"><span class="comment">/*gg*/</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Module-bundling-with-Webpck/07.gif" alt="크롬의 네트워크탭을 보면 처음부터 리퀘스트를 때리는 게 아니라 필요한 부분만 때린다."><br>위와 같이 새로고침 없이 필요한 부분만 갱신하는 게 HMR이다.</p><p>그럼 index.html 파일을 고쳐보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>댓글을 달아주시면 짱짱맨<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>IE11+에서 나는 드래그 안 될 걸?!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/Module-bundling-with-Webpck/07.gif" alt="크롬의 네트워크탭을 보면 처음부터 리퀘스트를 때린다."><br>이는 js 파일도 마찬가지인데, js 파일과 html 파일은 핫모듈이 아니기 때문에 핫리로드를 하는 것이다.</p><p>그럼 이제 실제 배포를 진행해보자.<br>빌드를 하고 나서 배포용 디렉토리를 살펴보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ dist</span><br><span class="line">  + scripts</span><br><span class="line">    - bundle.js</span><br><span class="line">  + styles</span><br><span class="line">    - bundle.css</span><br><span class="line">  - index.html</span><br></pre></td></tr></table></figure><p>각각의 파일을 열어보면 파일이 1줄로 압축돼있어서 용량을 최소화하여<br>트래픽을 줄이고 로딩 속도를 높여 퍼포먼스를 향상시켰다.</p><p>이제 index.html 파일을 브라우저에서 열어보자.<br><img src="/images/Module-bundling-with-Webpck/09.png" alt="우리가 html 소스 코드에 넣지 않았던 css 파일과 js 파일이 들어있다."><br><img src="/images/Module-bundling-with-Webpck/10.png" alt="우리가 테스트 용도로 넣었던 로그가 지워져있다."></p><p>실제로 웹팩으로 모듈 번들링을 할 때는 이렇게 개발용과 배포용으로 나누어서 진행하고,<br>개발용 서버로 개발하다 개발을 완료하면<br>빌드를 해서 배포용 디렉토리 안의 파일만 실서버에 올리면 된다.</p><h2 id="부트스트랩-폰트어썸-제이쿼리-이미지-모듈을-사용해보자"><a href="#부트스트랩-폰트어썸-제이쿼리-이미지-모듈을-사용해보자" class="headerlink" title="부트스트랩, 폰트어썸, 제이쿼리, 이미지 모듈을 사용해보자."></a>부트스트랩, 폰트어썸, 제이쿼리, 이미지 모듈을 사용해보자.</h2><p>우선 위 모듈들을 설치해야한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S jquery bootstrap font-awesome</span><br><span class="line">$ npm i -D url-loader file-loader</span><br></pre></td></tr></table></figure><p>font-awesome은 폰트를 쓰는 대표적인 라이브러리이다.<br>웹팩에서는 폰트와 이미지도 하나의 모듈로 보고, 그러한 모듈을 사용하기 위해서는<br>url-loader와 file-loader가 필요한 것이다.</p><p>이를 위해서는 개발용, 배포용 설정 파일의 모듈 로더에 다음과 같은 걸 추가해줘야한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">  loader: <span class="string">'url?limit=10000&amp;mimetype=application/font-woff&amp;name=fonts/[name].[ext]'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  test: <span class="regexp">/\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">  loader: <span class="string">'file?name=fonts/[name].[ext]'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  test: <span class="regexp">/\.(jp(e)g|gif|png)?$/</span>,</span><br><span class="line">  loader: <span class="string">'file?name=img/[name].[ext]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>폰트와 이미지는 로더를 통해야만 정상적으로 작업이 가능하고,<br>name 파라미터를 통해 저장될 디렉토리와 이름을 정했다.</p><p>추가적으로 extract-text-webpack-plugin의 버그 때문에 배포용 설정에서<br>(s)css 로더 부분을 수정해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.css$/,</span><br><span class="line">  loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css!postcss-loader&apos;, &#123;publicPath: &apos;../&apos;&#125;),</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  test: /\.scss$/,</span><br><span class="line">  loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css!sass!postcss-loader&apos;, &#123;publicPath: &apos;../&apos;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>번들된 css 파일에서 url()과 같은 경로가 꼬이길래 강제로 경로를 지정해준 것이다.</p><p>그리고 src 디렉토리 내에 img 폴더를 만들고 임의의 이미지를 넣는다.<br>그 후에 src/index.html을 다음과 같이 수정하자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>댓글을 달아주시면 짱짱맨<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>IE11+에서 나는 드래그 안 될 걸?!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-address-book"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/logo.png"</span> <span class="attr">alt</span>=<span class="string">"로고"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>부트스트랩과 폰트 어썸을 썼다.</p><p>src/styles/style.scss는 아래와 같이 수정해주자.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: blue;</span><br><span class="line"><span class="variable">$square</span>: <span class="number">90px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span></span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'../img/logo.png'</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$square</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$square</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실제로 라이브러리&amp;프레임워크를 써보자.<br>src/scripts/entry-index.js를 수정하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'../index.html'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.min.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'font-awesome/css/font-awesome.min.css'</span>;</span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/style.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/style.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;ab&#125; <span class="keyword">from</span> <span class="string">'./module-a'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./module-b'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;b&#125; <span class="keyword">from</span> <span class="string">'./module-c'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ab);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'a'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>제이쿼리, 부트스트랩, 폰트 어썸을 import 시켰고,<br>btn 아이디를 가진 엘리먼트를 클릭하면 경고창이 뜨게 제이쿼리를 사용하였다.</p><p>이제 $ npm run dev를 치고 실제 개발용 서버에서 보자.<br><img src="/images/Module-bundling-with-Webpck/11.png" alt="제이쿼리, 부트스트랩, 폰트어썸 모두 동작을 잘 한다."><br>버튼을 누르면 경고창도 뜨고, (s)css와 js의 소스맵 모두 잘 붙는다.</p><p>이제 $ npm run build를 치고 실제 배포용 파일을 보자.<br><img src="/images/Module-bundling-with-Webpck/12.png" alt="확장자 별로 잘 분리가 되었다."></p><p>index.html을 브라우저에 띄워보자.<br><img src="/images/Module-bundling-with-Webpck/13.png" alt="아주 잘 나온다."><br>디버깅 용 로그도 사라졌고, 디버깅 할 필요가 없으니 소스맵도 안 붙였다.</p><p>기본적인 외부 모듈들 사용방법은 이러하고,<br>자신이 필요한 건 그때 그때 사용법을 익히면 된다.</p><h2 id="홈페이지-IE8에서도-웹팩을-써보자"><a href="#홈페이지-IE8에서도-웹팩을-써보자" class="headerlink" title="홈페이지, IE8에서도 웹팩을 써보자."></a>홈페이지, IE8에서도 웹팩을 써보자.</h2><p>기본적으로 홈페이지와 SPA 사이에는 차이점을 모듈화 관점에서 바라보자.<br>홈페이지는…</p><ol><li>페이지가 여러 개다.</li><li>각 페이지 별로 적용되는 모듈들이 다르다.</li><li>IE8을 지원해야하는 경우가 많다.</li></ol><p>우리가 예제로 작업한 페이지는 하나였다.</p><p>그럼 다중 페이지에서 모듈화를 진행하고자 할 때를 가정하고 실습을 진행하자.<br>우선 디렉토리를 아래와 같이 만든다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+ node_modules</span><br><span class="line">+ src</span><br><span class="line">  + img</span><br><span class="line">    - 임의의 이미지 파일</span><br><span class="line">  + scripts</span><br><span class="line">    - entry-index.js</span><br><span class="line">    - entry-sub.js</span><br><span class="line">    - module-a.js</span><br><span class="line">    - module-b.js</span><br><span class="line">    - module-c.js</span><br><span class="line">  + styles</span><br><span class="line">    - style.css</span><br><span class="line">    - style.scss</span><br><span class="line">    - sub.css</span><br><span class="line">    - sub.scss</span><br><span class="line">  - index.html</span><br><span class="line">  - sub.html</span><br><span class="line">- .babelrc</span><br><span class="line">- package.json</span><br><span class="line">- webpack.config.dev.js</span><br><span class="line">- webpack.config.prod.js</span><br></pre></td></tr></table></figure><p>새로 추가된 파일의 소스는 아래와 같이 바꾸자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry-sub.js</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'../sub.html'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/sub.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/sub.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;b&#125; <span class="keyword">from</span> <span class="string">'./module-c'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* sub.css */</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* sub.scss */</span></span><br><span class="line"><span class="variable">$bgColor</span>: orange;</span><br><span class="line"><span class="variable">$boxSize</span>: <span class="number">500px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgColor</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">section &#123;</span><br><span class="line">  width: <span class="variable">$boxSize</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$boxSize</span> + <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgColor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sub.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>IE8에서도 제대로 보이나?<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>내가 바로 버튼이다.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 개발용 파일을 수정해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">const</span> WebpackBrowserPlugin = <span class="built_in">require</span>(<span class="string">'webpack-browser-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> dev = [</span><br><span class="line">  <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</span><br><span class="line">  <span class="string">'webpack/hot/dev-server'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'cheap-eval-source-map'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: [</span><br><span class="line">      dev[<span class="number">0</span>], dev[<span class="number">1</span>],</span><br><span class="line">      <span class="string">'./src/scripts/entry-index.js'</span></span><br><span class="line">    ],</span><br><span class="line">    sub: [</span><br><span class="line">      dev[<span class="number">0</span>], dev[<span class="number">1</span>],</span><br><span class="line">      <span class="string">'./src/scripts/entry-sub.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'http://127.0.0.1:8080/'</span>,</span><br><span class="line">    filename: <span class="string">'scripts/[name].bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'index'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/sub.html'</span>,</span><br><span class="line">      filename: <span class="string">'sub.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'sub'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> WebpackBrowserPlugin()</span><br><span class="line">  ],</span><br><span class="line">  postcss: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'babel'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap,-minimize'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap,-minimize'</span>, <span class="string">'sass?sourceMap,outputStyle=expanded'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">      loader: <span class="string">'raw'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'url?limit=10000&amp;mimetype=application/font-woff&amp;name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(jp(e)g|gif|png)?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=img/[name].[ext]'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>entry<br>entry를 객체로 만들어서 객체 프로퍼티들이 엔트리가 되게 된다.<br>각 엔트리별로 webpack-dev-server 설정들을 붙여야해서 배열화 시켜서 넣었다.</p></li><li><p>filename<br>[name]에는 엔트리의 이름이 들어간다.</p></li><li><p>new HtmlWebpackPlugin()<br>각 엔트리별로 모듈을 각각 삽입해줘야한다.<br>filename은 기본이 index.html이라 생략을 했고,<br>chunks에는 원하는 엔트리들을 넣으면 된다.</p></li></ol><p>이번엔 배포용 설정 파일을 수정하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/scripts/entry-index.js'</span>,</span><br><span class="line">    sub: <span class="string">'./src/scripts/entry-sub.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'scripts/[name].bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compressor: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'index'</span>],</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xhtml: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/sub.html'</span>,</span><br><span class="line">      filename: <span class="string">'sub.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'sub'</span>],</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xhtml: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'style/[name].bundle.css'</span>)</span><br><span class="line">  ],</span><br><span class="line">  postcss: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loaders: [<span class="string">'babel'</span>, <span class="string">'webpack-strip?strip[]=debug,strip[]=console.log,strip[]=console.dir'</span>],</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!postcss-loader'</span>, &#123;<span class="attr">publicPath</span>: <span class="string">'../'</span>&#125;),</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!sass!postcss-loader'</span>, &#123;<span class="attr">publicPath</span>: <span class="string">'../'</span>&#125;)</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'url?limit=10000&amp;mimetype=application/font-woff&amp;name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(jp(e)g|gif|png)?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=img/[name].[ext]'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>new ExtractTextPlugin()에서도 [name]은 각 엔트리 별 이름이 들어간다.</p><p>$ npm run dev 를 치고 한 번 확인해보자.<br><img src="/images/Module-bundling-with-Webpck/14.png" alt="번들된 index 엔트리가 잘 붙었다."></p><p><a href="http://127.0.0.1/8080/sub.html" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1/8080/sub.html</a> 으로 접속해보자.<br><img src="/images/Module-bundling-with-Webpck/15.png" alt="번들된 sub 엔트리가 잘 붙었다."></p><p>$ npm run build 를 치고 배포용 파일을 확인해보자.<br><img src="/images/Module-bundling-with-Webpck/16.png" alt="각 페이지 별로 쓸 모듈들이 번들링 된 파일들이 잘 뽑아졌다."></p><p>하지만 IE8에서 결과를 확인하면 처참한 결과를 확인할 수 있다.<br><img src="/images/Module-bundling-with-Webpck/17.png" alt="노답"></p><p>이를 위해서는</p><ol><li><p>ES5 Polyfill 붙이기<br>babel로 트랜스파일한 ES5 전용 폴리필인 babel-polyfill이 있고,<br>이벤트 리스너 관련해서는 수동으로 추가해줘야한다.<br>자세한 내용은 아래 링크를 참고하자.<br><a href="/2016/11/11/Babel-ES6-with-IE8/#ES5를-IE8에서도-지원하기">(Babel) ES6를 IE8에서도 써보자</a></p></li><li><p>HTML5 Sectioning Elements Polyfill 붙이기<br>HTML5는 다양한 API가 있어서 하나의 폴리필로는 커버가 힘들다.<br>우선 내가 쓴 section 엘리먼트를 커버하기 위해 html5shiv를 쓰겠다.</p></li><li><p>CSS3 폴리필도 상당히 많으므로 본인이 원하는 걸 직접 찾아봐야한다.<br>이는 이번 포스트에서 생략한다.</p></li></ol><p>폴리필들을 설치하자.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S html5shiv</span><br><span class="line">$ npm i -D babel-plugin-transform-es3-property-literals babel-plugin-transform-es3-member-expression-literals</span><br></pre></td></tr></table></figure><p>그리고 src/scripts 폴더 안에 eventListener.polyfill.js 파일을 만들자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">!<span class="built_in">window</span>.addEventListener &amp;&amp; (<span class="function"><span class="keyword">function</span>(<span class="params">WindowPrototype, DocumentPrototype, ElementPrototype, addEventListener, removeEventListener, dispatchEvent, registry</span>) </span>&#123;</span><br><span class="line">  WindowPrototype[addEventListener] = DocumentPrototype[addEventListener] = ElementPrototype[addEventListener] = <span class="function"><span class="keyword">function</span>(<span class="params">type, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">this</span>;</span><br><span class="line">    registry.unshift([target, type, listener, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      event.currentTarget = target;</span><br><span class="line">      event.preventDefault = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        event.returnValue = <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">      event.stopPropagation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        event.cancelBubble = <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">      event.target = event.srcElement || target;</span><br><span class="line">      listener.call(target, event);</span><br><span class="line">    &#125;]);</span><br><span class="line">    <span class="keyword">this</span>.attachEvent(<span class="string">"on"</span> + type, registry[<span class="number">0</span>][<span class="number">3</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line">  WindowPrototype[removeEventListener] = DocumentPrototype[removeEventListener] = ElementPrototype[removeEventListener] = <span class="function"><span class="keyword">function</span>(<span class="params">type, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>, register; register = registry[index]; ++index) &#123;</span><br><span class="line">      <span class="keyword">if</span>(register[<span class="number">0</span>] == <span class="keyword">this</span> &amp;&amp; register[<span class="number">1</span>] == type &amp;&amp; register[<span class="number">2</span>] == listener) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.detachEvent(<span class="string">"on"</span> + type, registry.splice(index, <span class="number">1</span>)[<span class="number">0</span>][<span class="number">3</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  WindowPrototype[dispatchEvent] = DocumentPrototype[dispatchEvent] = ElementPrototype[dispatchEvent] = <span class="function"><span class="keyword">function</span>(<span class="params">eventObject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fireEvent(<span class="string">"on"</span> + eventObject.type, eventObject);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(Window.prototype, HTMLDocument.prototype, Element.prototype, <span class="string">"addEventListener"</span>, <span class="string">"removeEventListener"</span>, <span class="string">"dispatchEvent"</span>, []);</span><br></pre></td></tr></table></figure><p>src/scripts 폴더 안에 preRender.polyfill.js 파일을 만들자.<br>이 파일에는 렌더링 되기 이전, head에 들어가야하는 폴리필,<br>대표적인 게 html5, css3 폴리필 등등이 해당한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'html5shiv'</span>;</span><br></pre></td></tr></table></figure><p>폴리필을 적용하고자하는 엔트리와 html 파일을 수정해줘야한다.<br>sub만 건드려보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry-sub.js</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'../sub.html'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./eventListener.polyfill'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/sub.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../styles/sub.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;b&#125; <span class="keyword">from</span> <span class="string">'./module-c'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>다른 코드가 오기 전에 폴리필을 먼저 import 시켜야한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sub.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scripts/preRender.polyfill.bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>IE8에서도 제대로 보이나?<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>내가 바로 버튼이다.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.16.0/polyfill.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>head에 폴리필을 넣어줬다.<br>현재는 존재하지 않지만 번들링을 통해 만들 예정이다.<br>html webpack plugin이 head와 body 동시에 다른 파일 삽입이 불가능해서<br>부득이하게 이러한 방법을 사용했다.<br>또한 babel-polyfill을 minify하게 되면 IE8에서 오류가 나게 된다.<br>따라서 부득이하게 cdn을 이용하였다.</p><p>.babelrc 설정도 바꿔주자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"latest"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"transform-es3-property-literals"</span>,</span><br><span class="line">    <span class="string">"transform-es3-member-expression-literals"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 웹팩 설정들을 바꿔보자.<br>우선 개발용 파일부터 손 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">const</span> WebpackBrowserPlugin = <span class="built_in">require</span>(<span class="string">'webpack-browser-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> dev = <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'cheap-eval-source-map'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: [dev, <span class="string">'./src/scripts/entry-index.js'</span>],</span><br><span class="line">    sub: [dev, <span class="string">'./src/scripts/entry-sub.js'</span>],</span><br><span class="line">    [<span class="string">'preRender.polyfill'</span>]: <span class="string">'./src/scripts/preRender.polyfill.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'http://127.0.0.1:8080/'</span>,</span><br><span class="line">    filename: <span class="string">'scripts/[name].bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'index'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/sub.html'</span>,</span><br><span class="line">      filename: <span class="string">'sub.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'sub'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> WebpackBrowserPlugin()</span><br><span class="line">  ],</span><br><span class="line">  postcss: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'babel'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap,-minimize'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap,-minimize'</span>, <span class="string">'sass?sourceMap,outputStyle=expanded'</span>, <span class="string">'postcss-loader'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">      loader: <span class="string">'raw'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'url?limit=10000&amp;mimetype=application/font-woff&amp;name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(jp(e)g|gif|png)?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=img/[name].[ext]'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>우선 IE8에서는 HMR을 못 쓴다.<br>ES5 폴리필이 붙기 전에 HMR이 먼저 로딩돼서 오류가 난다.<br>따라서 해당 내용을 빼버렸다.</p></li><li><p>preRender.polyfill을 번들링했다.</p></li></ol><p><img src="/images/Module-bundling-with-Webpck/18.png" alt="콘솔 창에 오류가 나오는 게 찝찝하지만 잘 나온다."></p><p>이번에는 배포용 설정 파일을 손대자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: [<span class="string">'./src/scripts/entry-index.js'</span>],</span><br><span class="line">    sub: [<span class="string">'./src/scripts/entry-sub.js'</span>],</span><br><span class="line">    [<span class="string">'preRender.polyfill'</span>]: [<span class="string">'./src/scripts/preRender.polyfill.js'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'scripts/[name].bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compressor: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'index'</span>],</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xhtml: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/sub.html'</span>,</span><br><span class="line">      filename: <span class="string">'sub.html'</span>,</span><br><span class="line">      chunks: [<span class="string">'sub'</span>],</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xhtml: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'style/[name].bundle.css'</span>)</span><br><span class="line">  ],</span><br><span class="line">  postcss: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">'last 2 versions'</span>, <span class="string">'&gt; 10%'</span>, <span class="string">'ie 9'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loaders: [<span class="string">'babel'</span>, <span class="string">'webpack-strip?strip[]=debug,strip[]=console.log,strip[]=console.dir'</span>],</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!postcss-loader'</span>, &#123;<span class="attr">publicPath</span>: <span class="string">'../'</span>&#125;),</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!sass!postcss-loader'</span>, &#123;<span class="attr">publicPath</span>: <span class="string">'../'</span>&#125;)</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'url?limit=10000&amp;mimetype=application/font-woff&amp;name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=fonts/[name].[ext]'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(jp(e)g|gif|png)?$/</span>,</span><br><span class="line">      loader: <span class="string">'file?name=img/[name].[ext]'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>크게 바뀐 건 없고, 바뀐 사항은 위에서 다 설명하였다.</p><p>$ npm run build를 쳐서 빌드를 하고 dist/sub.html을 IE8에서 켜보자.<br><img src="/images/Module-bundling-with-Webpck/19.png" alt="IE8에서도 잘 작동한다."></p><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>이번 글은 작성하는데 엄청난 시간이 걸렸다.<br>또한 나의 지식이 매우 부족하여 구글링을 하여도 당췌 답이 안 나오는 게 태반이었고,<br>지금 포스트를 쓰면서도 내가 맞게 쓰고 있는 건지도 모르겠다.<br>방문자 분들께서 잘못된 부분을 지적해주시면 정말 감사할 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack </tag>
            
            <tag> Cross Browsing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Webpack) devtool 옵션 퍼포먼스</title>
      <link href="/2016/11/14/Webpack-devtool-option-Performance/"/>
      <url>/2016/11/14/Webpack-devtool-option-Performance/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Webpack-devtool-option-Performance/thumb.png" alt=""></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#들어가기에-앞서">들어가기에 앞서</a></li><li><a href="#소스맵">소스맵</a></li><li><a href="#devtool">devtool</a></li><li><a href="#마치며…">마치며…</a></li></ol><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>이 포스트에서는 <a href="/2016/11/18/Module-bundling-with-Webpck/">웹팩</a>에 대한 기초 내용을 설명하지 않는다.<br>웹팩을 모르는 사람은 살포시 뒤로가기를 누르는 걸 권장한다.</p><h2 id="소스맵"><a href="#소스맵" class="headerlink" title="소스맵"></a>소스맵</h2><p>소스맵은 원본 소스와 난독화된 소스를 매핑해주는 방법 중 하나이다.<br>*.map 파일을 통해 제공되고, json 형태로 돼있다.<br>사진을 통해 한번 보자.<br><img src="/images/Webpack-devtool-option-Performance/01.png" alt=""><br><img src="/images/Webpack-devtool-option-Performance/02.png" alt="난독화된 파일을 통해서는 어떤 부분에서 오류가 났는지 알기 힘들다."><br><img src="/images/Webpack-devtool-option-Performance/03.png" alt="소스맵을 통하면 원본 파일의 어떠한 부분에서 오류가 났는지 볼 수 있다."><br><img src="/images/Webpack-devtool-option-Performance/04.png" alt="디버깅도 가능하다.">  </p><a id="more"></a><h2 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h2><p>웹팩에서 devtool 옵션은 개발을 용이하게 하기 위해 소스맵을 제공하는 옵션이다.<br>하지만 devtool 옵션은 굉장히 많고, 그 중 8가지를 테스트 해봤다.</p><ol><li>eval</li><li>eval-source-map</li><li>cheap-eval-source-map</li><li>cheap-module-eval-source-map</li><li>source-map</li><li>inline-source-map</li><li>cheap-source-map</li><li>cheap-module-source-map</li></ol><p>또한 웹팩에는 배포용 설정과 개발용 설정이 따로 존재하고,<br>webpack 명령어와 webpack -d 명령어가 존재하는 등 총 32가지의 테스트를 해봤다.<br>먼저 배포용 설정 파일을 보자.<br>아래와 같은 설정이 들어있다.</p><ol><li>ES6 to ES5, 디버깅용 로그들 삭제, js 난독화((이걸 하지 않으면 소스맵이 제대로 붙지 않음.)</li><li>css 난독화 및 소스맵 적용</li><li>scss 난독화 및 소스맵 적용</li><li>html 난독화</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'devtool 옵션 입력'</span>,</span><br><span class="line">  entry: <span class="string">'./src/script/entry'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compressor: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xhtml: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loaders: [<span class="string">'babel'</span>, <span class="string">'webpack-strip?strip[]=debug,strip[]=console.log,strip[]=console.dir'</span>],</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap'</span>, <span class="string">'sass?sourceMap'</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/Webpack-devtool-option-Performance/05.png" alt="배포용은 수정하면서 작업하는 게 아니기 때문에 빌드 시간, 로그, 디버깅보다 용량이 제일 중요하다."><br>이제 개발용 설정 파일을 보자.<br>아래와 같은 설정이 들어있다.</p><ol><li>ES6 to ES5, js 난독화 (이걸 하지 않으면 소스맵이 제대로 붙지 않음.) </li><li>css 난독화 및 소스맵 적용</li><li>scss 난독화 및 소스맵 적용</li><li>핫 모듈 리플레이스먼트 적용(이 예제에서는 (s)css 파일만 적용됨)</li><li>핫 리로드 적용(이 예제에서는 js, html 파일만 적용됨)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">'devtool 옵션 입력'</span>,</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</span><br><span class="line">    <span class="string">'webpack/hot/dev-server'</span>,</span><br><span class="line">    <span class="string">'./src/script/entry'</span></span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'_dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compressor: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'babel'</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css?sourceMap'</span>, <span class="string">'sass?sourceMap'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">      loader: <span class="string">'raw-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./_dist'</span>,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/Webpack-devtool-option-Performance/06.png" alt="개발용은 수정이 빈번하고 디버깅을 해야하기 때문에 용량보다 빌드 시간, 로그, 디버깅이 더 중요하다."></p><h2 id="마치며…"><a href="#마치며…" class="headerlink" title="마치며…"></a>마치며…</h2><p>배포용은 용량이 가장 작은 cheap-module-source-map 옵션을 사용하고 webpack 명령어를 사용하는 게 가장 좋다.<br>개발용은 로그, 디버깅, 번들링 타임을 고려하면 inline-source-map 옵션을 사용하고 webpack-dev-server 명령어를 사용하는 게 가장 좋을 것 같다.<br>뭐 거의 비슷비슷 하므로 본인의 입맛에 맞게 찾아 쓰면 되겠다.<br>또한 devtool은 js 파일의 소스맵하고만 관련 있지, (s)css의 소스맵과는 무관하다.</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Webpack </tag>
            
            <tag> Debugging </tag>
            
            <tag> Performance </tag>
            
            <tag> Source Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Babel) ES6를 IE8에서도 써보자</title>
      <link href="/2016/11/11/Babel-ES6-with-IE8/"/>
      <url>/2016/11/11/Babel-ES6-with-IE8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Babel-ES6-with-IE8/thumb.png" alt="">  </p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#들어가기에-앞서">들어가기에 앞서</a></li><li><a href="#ES6-왜-써">ES6 왜 써?</a></li><li><a href="#ES6에서-ES5로-트랜스파일하기">ES6에서 ES5로 트랜스파일하기</a></li><li><a href="#ES5를-IE8에서도-지원하기">ES5를 IE8에서도 지원하기</a></li><li><a href="#바벨은-안전한가">바벨은 안전한가?</a>  </li></ol><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p>아주 많이 참조한 링크<br><a href="http://meetup.toast.com/posts/85" rel="external nofollow noopener noreferrer" target="_blank">지금 바로 시작하는 ES6</a></p><p>이 포스트에서는 <strong>Node.js</strong>, <strong>npm</strong>, <strong>ES(ECMAScript)</strong> 등등에 대해서는 설명하지 않는다.<br>해당 내용들은 구글링을 통해 직접 찾아보길 바란다.<br>또한 import, export로 모듈화 시키는 것은 현재 지원 브라우저도 없고,<br>다양한 모듈 번들러 중 하나인 <a href="/2016/11/18/Module-bundling-with-Webpck/">웹팩</a>를 이용하거나 RequireJS를 이용하거나 등등 방법은 많지만<br>해당 포스트에서는 다루지 않고 건너 뛴다.</p><a id="more"></a><p>해당 포스트에서는 ES6를 왜 써야하는지,<br>어떻게 하면 Windows XP IE8 유저들에게까지<br>우리의 우아한 코드를 전달할 수 있는지에 대해 중점을 뒀다. </p><h2 id="ES6-왜-써"><a href="#ES6-왜-써" class="headerlink" title="ES6 왜 써?"></a>ES6 왜 써?</h2><p>백문이 불여일견. 코드로 보자.</p><p>배열의 모든 요소를 더한 후 반환하는 코드.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES3 (IE 8+)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> sumArr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length;) &#123;</span><br><span class="line">  sumArr += arr[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumArr); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 (IE 9+)</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> sumArr = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">p, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sumArr); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 (Modern Browser)</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> sumArr = arr.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p+c);</span><br><span class="line"><span class="built_in">console</span>.log(sumArr); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>private module을 구현하는 코드 (전역의 공간을 더럽히지 않는 코드)<br>대신 script 모듈에서 script2 모듈에 있는 데이터를 불러올 수 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES3+ (IE 8+)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// 소스코드 끄적끄적...</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 (Moden Browser)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 소스코드 끄적끄적...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public module을 구현하는 코드<br>script 모듈에서 script2 모듈에 있는 데이터를 불러올 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES3+ (IE 8+), 전역 스코프에 변수가 추가된다는 단점이 존재한다.</span></span><br><span class="line"><span class="comment">// script.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> car = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> namespace = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> color = <span class="string">'blue'</span>; <span class="comment">// 외부에 노출시키지 않음, 캡슐화.</span></span><br><span class="line">  <span class="comment">// 아래 메소드는 네임스페이스의 메소드임.</span></span><br><span class="line">  namespace.getColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">  &#125;;</span><br><span class="line">  namespace.setColor = <span class="function"><span class="keyword">function</span>(<span class="params">_color</span>) </span>&#123;</span><br><span class="line">    color = _color;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 메소드를 달고 있는 네임스페이스 객체 리턴.</span></span><br><span class="line">  <span class="keyword">return</span> namespace;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES3+ (IE 8+), 전역 스코프에 car라는 변수가 추가된다는 단점이 존재한다.</span></span><br><span class="line"><span class="comment">// script2.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(car.getColor()); <span class="comment">// 'blue';</span></span><br><span class="line">car.setColor(<span class="string">'red'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.getColor()); <span class="comment">// 'red';</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 (현재 지원하는 브라우저 없음)</span></span><br><span class="line"><span class="comment">// 바벨을 사용하면 CommonJS 모듈로 변환해주는데</span></span><br><span class="line"><span class="comment">// Node.js는 CommonJS를 지원해주는데 반해 브라우저는 이를 미지원한다.</span></span><br><span class="line"><span class="comment">// 이를 위해서는 모듈 번들러인 Browserify나 Webpack을 쓰거나</span></span><br><span class="line"><span class="comment">// 브라우저에서 지원이 되는 RequireJS 모듈로 변환해주는 바벨용 플러그인을 쓴 후</span></span><br><span class="line"><span class="comment">// RequireJS를 사용하면 된다.</span></span><br><span class="line"><span class="comment">// script.js</span></span><br><span class="line"><span class="keyword">let</span> color = <span class="string">'blue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getColor = <span class="function"><span class="params">()</span> =&gt;</span> color;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setColor = <span class="function">(<span class="params">_color</span>) =&gt;</span> color = _color;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 (현재 지원하는 브라우저 없음)</span></span><br><span class="line"><span class="comment">// 바벨을 사용하면 CommonJS 모듈로 변환해주는데</span></span><br><span class="line"><span class="comment">// Node.js는 CommonJS를 지원해주는데 반해 브라우저는 이를 미지원한다.</span></span><br><span class="line"><span class="comment">// 이를 위해서는 모듈 번들러인 Browserify나 Webpack을 쓰거나</span></span><br><span class="line"><span class="comment">// 브라우저에서 지원이 되는 RequireJS 모듈로 변환해주는 바벨용 플러그인을 쓴 후</span></span><br><span class="line"><span class="comment">// RequireJS를 사용하면 된다.</span></span><br><span class="line"><span class="comment">// script2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;getColor, setColor&#125; <span class="keyword">from</span> <span class="string">'./script'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(getColor());</span><br><span class="line">setColor(<span class="string">'red'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(getColor());</span><br></pre></td></tr></table></figure><p>이외에도 정말 무궁무진할 정도로 생산성을 향상시키는 코드들이 많다.</p><h2 id="ES6에서-ES5로-트랜스파일하기"><a href="#ES6에서-ES5로-트랜스파일하기" class="headerlink" title="ES6에서 ES5로 트랜스파일하기"></a>ES6에서 ES5로 트랜스파일하기</h2><p><a href="http://kangax.github.io/compat-table/es6/" rel="external nofollow noopener noreferrer" target="_blank">ES6의 호환성 보기</a><br><img src="/images/Babel-ES6-with-IE8/es6-compatibility.png" alt="IE11의 ES6 지원율은 심히 안습이다."><br><img src="/images/Babel-ES6-with-IE8/babel.jpg" alt="혹시나 문제가 있는 짤이라면 말씀해주세요."><br><img src="/images/Babel-ES6-with-IE8/es5-compatibility.png" alt="ES5는 IE8을 제외하고는 많이 커버가 된다."><br>하지만 우리에게는 방법이 있다!<br>바로 <strong>트랜스파일러</strong>인 <strong>바벨</strong>을 이용하는 것이다.<br><strong>컴파일</strong>은 사람이 이해할 수 있는 <strong>하이 레벨의 코드</strong>를<br>컴퓨터가 이해할 수 있는 <strong>로우 레벨의 기계어</strong>로 바꾸는 것을 말한다.<br><strong>트랜스파일</strong>이란 <strong>같은 레벨</strong>의 <strong>다른 언어</strong>로 변환하는 것을 뜻한다.<br>브라우저별로 ES6의 지원율이 상이하기 때문에<br>같은 레벨인 ES6를 같은 레벨의 ES5로 트랜스파일하면 되는 것이다.<br>그럼 우선 babel을 설치해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g babel-cli</span><br><span class="line">$ npm i -D babel-cli babel-preset-latest</span><br></pre></td></tr></table></figure><p>위 명령어를 하나씩 파헤쳐보자.</p><ol><li>babel-cli를 global로 설치하지 않으면, 터미널에서 <em>babel</em>이라는 명령어를 인식하지 못한다.</li><li>babel-cli는 터미널에서 babel을 돌려주는 것으로써 현재 프로젝트에 또 설치를 해줘야 동작을 제대로 한다.</li><li>babel에는 plugin이라는 게 존재한다.<br>이 plugin은 es6의 애로우 펑션을 지원하는 플러그인, 클래스를 지원하는 플러그인 등등이 있다.<br>그러한 플러그인을 모아놓은 걸 preset이라고 부른다.<br>es2015 preset은 es6의 플러그인들을 모아놓은 것이고,<br>latest preset은 ES2015~ES2017까지의 프리셋들을 모아놓은 것이다.<br>시간이 지나면 latest의 지원 프리셋 범위는 더 늘어날 수도 있다.  </li></ol><p>그리고 바벨 설정 파일을 하나 만들어줘야한다.<br><strong>.babelrc</strong>라는 파일을 만들고 아래와 같이 적어주자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"latest"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>바벨의 설정파일이 바뀔 때마다 babel-cli가 watch중이라면 꺼줬다 켜야 제대로 적용된다.<br>그리고 폴더 구조를 아래와 같이 만들어보자. (다르게 해도 상관없다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ es6</span><br><span class="line">  - script.js</span><br><span class="line">.babelrc</span><br><span class="line">index.html</span><br><span class="line">packge.json</span><br></pre></td></tr></table></figure><p>es6 폴더에는 es6+로 작성한 코드가 담길 것이다.<br>script.js에는 아래와 같이 코딩해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> A = <span class="string">'1'</span>;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">const</span> sumArr = arr.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p+c);</span><br><span class="line">  <span class="built_in">console</span>.log(sumArr); <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">  <span class="keyword">const</span> evtClick = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(A);</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, evtClick);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 이후 터미널 창에서 아래와 같이 입력한다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ babel es6 -d script -w</span><br></pre></td></tr></table></figure><p>또 하나하나 파헤쳐보자.</p><ol><li>babel: babel-cli를 쓴다는 것이다.</li><li>es6: es6 디렉토리에 있는 파일을 트랜스파일 한다.</li><li>-d script: 결과물을 script라는 폴더에다가 던져준다.</li><li>-w: watch, 계속 주시하면서 파일이 바뀔 때마다 트랜스파일해준다.<br>watch를 끝내려면 Ctrl+C키를 누른 후 y키를 누른 후 Enter 키를 누르면 된다.</li></ol><p>그리고 나서 디렉토리를 보면 다음과 같다.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ es6</span><br><span class="line">  - script.js</span><br><span class="line">+ script</span><br><span class="line">  - script.js</span><br><span class="line">.babelrc</span><br><span class="line">index.html</span><br><span class="line">packge.json</span><br></pre></td></tr></table></figure><p>한 번 우리의 코드가 어떻게 바뀌었는지 script/script.js를 열어보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;  </span><br><span class="line">&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> A = <span class="string">'1'</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">var</span> sumArr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">p, c</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> p + c;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(sumArr); <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">    <span class="keyword">var</span> evtClick = <span class="function"><span class="keyword">function</span> <span class="title">evtClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(A);</span><br><span class="line">    &#125;;</span><br><span class="line">    btn.addEventListener(<span class="string">'click'</span>, evtClick);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쓸 데 없는 블록으로 감싸고 있긴 하지만 그래도 전역을 더럽히지 않고,<br>훌륭하게 코드를 ES5로 트랜스파일 하였다.<br>즉 우리가 개발할 때는 es6의 디렉토리 내의 파일로 개발을 하고<br>배포할 때는 script 디렉토리 내의 코드를 배포하면 된다.<br>여기까지가 IE9+ 프로젝트에서 하면 되는 내용이다.</p><h2 id="ES5를-IE8에서도-지원하기"><a href="#ES5를-IE8에서도-지원하기" class="headerlink" title="ES5를 IE8에서도 지원하기"></a>ES5를 IE8에서도 지원하기</h2><p>우리나라는 MS 공화국이다.<br>저기 산골짝에 가면 XP를 쓰는 사람도 있고, 아직도 공공기관에서도 XP를 쓴다는 소리가 들린다.<br>XP가 날고 기어봤자 IE8까지 밖에 지원이 안 되고, 그러한 악의 근원들까지 커버를 쳐야할 때가 온다.<br>또한 윈도우 7의 기본 브라우저도 IE8이기 때문에 업데이트를 안 하는 사람들이 많다.<br>그럴 경우를 대비해 바벨에서도 <em>Polyfill</em>을 준비해두었다.<br>Polyfill이란 아래와 같이 미지원 환경에서도 해당 내용을 지원하게끔 하는 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">Array</span>.prototype.forEach ) &#123; <span class="comment">// for IE8</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn, scope</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        fn.call(scope, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>설치하기 귀찮은 사람을 CDN을 이용하자. (이상하게 min은 오류가 나는 것 같다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.16.0/polyfill.js</span><br></pre></td></tr></table></figure><p>아닌 사람은 아래와 같이 입력하여 설치해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S babel-polyfill</span><br></pre></td></tr></table></figure><p>그리고 index.html에 폴리필을 넣어주자. (무조건 사용자가 작성한 코드보다 위에 존재해야한다.)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/babel-polyfill/dist/polyfill.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./script/script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그리고 IE8에서 실행해보자.<br><img src="/images/Babel-ES6-with-IE8/ie8.png" alt="역시 IE는 실망을 저버리지 않는다."><br>addEventListener, removeEventListener 등등의 Polyfill을 수동으로 추가해줘야한다.<br>아래 링크로 가면 minify 버전의 소스코드도 볼 수 있다.<br><a href="https://gist.github.com/jonathantneal/3748027" rel="external nofollow noopener noreferrer" target="_blank">Polyfill the EventListener interface in IE8</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eventListener.polyfill.js</span></span><br><span class="line">!<span class="built_in">window</span>.addEventListener &amp;&amp; (<span class="function"><span class="keyword">function</span>(<span class="params">WindowPrototype, DocumentPrototype, ElementPrototype, addEventListener, removeEventListener, dispatchEvent, registry</span>) </span>&#123;</span><br><span class="line">  WindowPrototype[addEventListener] = DocumentPrototype[addEventListener] = ElementPrototype[addEventListener] = <span class="function"><span class="keyword">function</span>(<span class="params">type, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">this</span>;</span><br><span class="line">    registry.unshift([target, type, listener, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      event.currentTarget = target;</span><br><span class="line">      event.preventDefault = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        event.returnValue = <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">      event.stopPropagation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        event.cancelBubble = <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">      event.target = event.srcElement || target;</span><br><span class="line">      listener.call(target, event);</span><br><span class="line">    &#125;]);</span><br><span class="line">    <span class="keyword">this</span>.attachEvent(<span class="string">"on"</span> + type, registry[<span class="number">0</span>][<span class="number">3</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line">  WindowPrototype[removeEventListener] = DocumentPrototype[removeEventListener] = ElementPrototype[removeEventListener] = <span class="function"><span class="keyword">function</span>(<span class="params">type, listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>, register; register = registry[index]; ++index) &#123;</span><br><span class="line">      <span class="keyword">if</span>(register[<span class="number">0</span>] == <span class="keyword">this</span> &amp;&amp; register[<span class="number">1</span>] == type &amp;&amp; register[<span class="number">2</span>] == listener) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.detachEvent(<span class="string">"on"</span> + type, registry.splice(index, <span class="number">1</span>)[<span class="number">0</span>][<span class="number">3</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  WindowPrototype[dispatchEvent] = DocumentPrototype[dispatchEvent] = ElementPrototype[dispatchEvent] = <span class="function"><span class="keyword">function</span>(<span class="params">eventObject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fireEvent(<span class="string">"on"</span> + eventObject.type, eventObject);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(Window.prototype, HTMLDocument.prototype, Element.prototype, <span class="string">"addEventListener"</span>, <span class="string">"removeEventListener"</span>, <span class="string">"dispatchEvent"</span>, []);</span><br></pre></td></tr></table></figure><p>그리고 index.html에 폴리필을 넣어주자. (무조건 사용자가 작성한 코드보다 위에 존재해야한다.)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/babel-polyfill/dist/polyfill.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./script/eventListener.polyfill.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./script/script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/Babel-ES6-with-IE8/ie8-2.png" alt="저렇게 오류를 뿜어도 작동은 제대로 한다."><br>아직 끝난 게 아니다.<br>아래와 같은 코드를 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="keyword">catch</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">foo.catch();</span><br></pre></td></tr></table></figure><p>이제 위 코드가 어떻게 트랜스파일 되는지 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;  </span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="keyword">catch</span>: <span class="function"><span class="keyword">function</span> <span class="title">_catch</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">foo.catch();</span><br></pre></td></tr></table></figure><p>위와 같은 코드를 IE8에서 테스트 해보자.<br><img src="/images/Babel-ES6-with-IE8/ie8-3.png" alt="결과는 참담하다."><br>2번 라인과 4번 라인에서 객체의 메소드와 메소드 호출로 <strong>catch</strong>를 사용하였다.<br>IE8은 ES3를 지원하고, ES3에서는 catch 같은 키워드를 저렇게 식별자로 쓰게 되면 오류를 뿜는다.<br>ES3를 위한 플러그인이 바벨에는 또 존재한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D babel-plugin-transform-es3-property-literals babel-plugin-transform-es3-member-expression-literals</span><br></pre></td></tr></table></figure><ul><li>babel-plugin-transform-es3-property-literals을 쓰면 아래와 같이 바뀐다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="string">"catch"</span>: <span class="function"><span class="keyword">function</span> <span class="title">_catch</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>프로퍼티에서 키워드인 catch에 쌍따옴표를 붙인 걸 볼 수 있다.</p><ul><li>babel-plugin-transform-es3-member-expression-literals을 쓰면 아래와 같이 바뀐다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo[<span class="string">"catch"</span>]();</span><br></pre></td></tr></table></figure><p>표현식에서 키워드인 catch를 []로 감싸고, 쌍따옴표를 붙인 걸 볼 수 있다.<br>플러그인을 쓰기 위해 .babelrc 파일을 수정하자.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"latest"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"transform-es3-property-literals"</span>,</span><br><span class="line">    <span class="string">"transform-es3-member-expression-literals"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기까지 완료하면 IE8까지 ES6의 문법을 그대로 쓸 수 있다.  </p><h2 id="바벨은-안전한가"><a href="#바벨은-안전한가" class="headerlink" title="바벨은 안전한가?"></a>바벨은 안전한가?</h2><p>아래와 같은 ES6 코드를 보자. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>변수 a가 선언 되기도 전에 사용을 하고 있고, <a href="/2016/11/10/ES6-Scope/#TDZ">TDZ</a>에 존재하는 a는 사용할 수 없는 예제이다.<br>하지만 위 코드를 ES5로 트랜스파일하면 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>var의 호이스팅 때문에 ES6와는 다른 값이 나오게 된다.<br>이러한 점 말고도 더 있는지 모르겠지만 바벨이 ES5 전부를 커버할 수 있는 건 아니다.<br>이는 바벨이 꼬지기 때문이 아니라 ES6와 ES5 사이의 언어의 설계에 대한 차이 때문에<br>일어나는 어쩔 수 없는 현상이다.<br>실제 배포하는 파일은 ES5 파일이기 때문에 바벨이 존재한다 하더라도 ES5까지 알아둬야<br>개발하는데 훨씬 수월할 것이다.<br>따라서 ES5와 ES6를 병행하여 공부하는 게 현명한 방법이 아닐까 싶다.<br>또한 팀원들이 ES6, npm 등등에 대한 지식이 없다면 학습하는 비용까지 포함하면<br>지금 당장은 실무에 적용하기엔 무리가 있을 것이다.<br>하지만 다같이 스터디를 하고, 추후에 있을 프로젝트에서 사용한다고 가정했을 때<br>생산성이 향상되는 효과를 볼 수 있지 않을까 싶다.</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Babel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
            <tag> Babel </tag>
            
            <tag> Cross Browsing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(ES6) Scope</title>
      <link href="/2016/11/10/ES6-Scope/"/>
      <url>/2016/11/10/ES6-Scope/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ES6-Scope/thumb.png" alt=""></p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#들어가기에-앞서">들어가기에 앞서</a></li><li><a href="#ES5의-함수-단위의-스코프">ES5의 함수 단위의 스코프</a></li><li><a href="#함수-단위-스코프의-위험성">함수 단위 스코프의 위험성</a></li><li><a href="#함수-단위-스코프의-극복-모듈화">함수 단위 스코프의 극복, 모듈화</a></li><li><a href="#ES6의-블록-단위의-스코프">ES6의 블록 단위의 스코프</a></li><li><a href="#TDZ">TDZ</a></li></ol><h2 id="들어가기에-앞서"><a href="#들어가기에-앞서" class="headerlink" title="들어가기에 앞서"></a>들어가기에 앞서</h2><p><strong>스코프</strong>, <strong>콜 스택</strong>, <strong>실행 컨텍스트</strong>가 무엇인지, <strong>ES5</strong>, <strong>ES6</strong>가 무엇인지에 대해서는 설명하지 않는다.<br>ES5와 ES6 사이에 있어서 <strong>스코프의 차이점</strong>은<br>ES5는 <strong>함수 단위의 스코프</strong>이고, ES6는 <strong>블록 단위의 스코프</strong>라는 점이다.<br>ES5와 ES6를 병행하여 학습하는 방법이 필자는 좋다고 여겨 한 포스트에 몰아 넣어서 분량이 길다.<br>따뜻한 사랑과 관심이 많이 필요하다.<br>ES5의 스코프에 대해 충분히 숙지한 사람들은 <a href="#ES6의-블록-단위의-스코프">ES6의 블록 단위의 스코프</a>부터 읽도록 하자.<br>그럼 스코프에 대해서 심화하여 다뤄보도록 하자.</p><a id="more"></a><h2 id="ES5의-함수-단위의-스코프"><a href="#ES5의-함수-단위의-스코프" class="headerlink" title="ES5의 함수 단위의 스코프"></a>ES5의 함수 단위의 스코프</h2><p>우선 ES5의 <strong>함수 단위 스코프</strong>부터 살펴보자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> AA = <span class="string">'c'</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Scope/01.png" alt=""><br>우선 <strong>크롬</strong>의 <strong>개발자 도구(F12)</strong>에서 <strong>소스 탭</strong>으로 들어간 후에 <strong>자바스크립트 소스 파일</strong>을 선택해준다.<br>그리고 변수를 초기화하는 2, 3번 라인에 <strong>브레이크 포인트</strong>를 걸어준 후에 새로고침하면<br>2번 라인을 실행하기 전에 브레이크가 걸리게 된다.<br><strong>콜 스택</strong>에는 <strong>전역 실행 컨텍스트</strong>만 쌓여있는 상태인데,<br>여기서 실행 컨텍스트가 생기는 경우를 되짚어보자.</p><ol><li><strong>전역코드</strong></li><li>함수를 호출한 경우</li><li>eval() 함수를 호출한 경우</li></ol><p>위 예제는 1번에 해당한다.<br>전역 코드의 실행 컨텍스트는 콜 스택에 <strong>Push</strong>되고,<br><strong>(anonymous function)</strong>이 그 실행 컨텍스트를 가리킨다.<br>전역 실행 컨텍스트의 스코프는 <strong>Global 객체</strong>인 <strong>window 객체</strong>의 프로퍼티로 들어간 것 처럼 보인다.<br>브라우저가 아닌 <strong>Node.js</strong>에서는 Global 객체가 window 객체가 아니라<br><strong>global이라는 이름을 가진 객체</strong>이므로 예제는 반드시 브라우저에서 실행하자.<br><a href="http://stackoverflow.com/questions/19849136/does-node-js-have-equivalent-to-window-object-in-browser" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/19849136/does-node-js-have-equivalent-to-window-object-in-browser</a><br>또한 <em>delete</em> 연산자로 삭제되지 않으므로 프로퍼티가 아니니 혼동하지 말길 바란다.<br>하지만 <em>window.A</em>와 같이 사용이 가능하므로 window 객체의 프로퍼티의 이름을 피해서<br>변수 네이밍 하는 걸 추천한다.<br>또한 코드가 실행되기도 이전에 <strong>A</strong>와 <strong>AA</strong> 변수가 선언되고 <em>undefined</em>라는 값을 가진 걸 볼 수 있다.<br>ES5의 이러한 <strong>호이스팅</strong> 때문에 갖은 오류를 양산하기도 하였다.</p><p>이번에는 <strong>함수를 호출한 경우</strong>에 스코프가 어떻게 형성되는지 알아보자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index4.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> A = <span class="string">'B'</span>;</span><br><span class="line">  <span class="keyword">var</span> C = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(A)</span><br><span class="line">  &#125;;</span><br><span class="line">  C();</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 'A'</span></span><br><span class="line">B(); <span class="comment">// 'B'</span></span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Scope/02.png" alt=""><br>6번 라인에서 브레이크 포인트를 걸고 콜스택을 보자.</p><ol><li>C</li><li>B</li><li>(anonymous function)</li></ol><p>순으로 콜스택에 쌓여있다.<br>이를 풀어 써보자면…</p><ol><li>함수 C의 실행 컨텍스트</li><li>함수 B의 실행 컨텍스트</li><li>전역 실행 컨텍스트</li></ol><p>그리고 각 컨텍스트를 한번 뒤집어 까보자!<br>먼저 위 사진을 보면 전역 실행 컨텍스트에는 사용자가 변수로 선언한 A가 “A”라는 값을 갖고 있다.<br>물론 내리면 변수 B에 함수가 할당된 것도 볼 수 있다.</p><p><img src="/images/ES6-Scope/03.png" alt=""><br>그 다음으로 함수 B의 실행 컨텍스트를 까보자.<br>파란색이 함수 B의 실행 컨텍스트, 빨간색이 전역 실행 컨텍스트다.<br>함수 B의 실행 컨텍스트는 따로 Local이라는 스코프를 가지고 있다.<br>그 안에 존재하는 변수들이 지역 변수가 되는 것이다.<br>서로 같은 A라는 변수지만 지역 변수가 더 우선순위가 높아서<br>함수 B 안에서는 전역 변수 A가 아닌 지역 변수 A를 갖고 놀게 된다.<br>만약 지역 변수 A가 없는데 A를 갖고 놀려면 스코프 체인이란 걸 타고 전역까지 뒤지게 될 것이다.</p><p><img src="/images/ES6-Scope/04.png" alt=""><br>마지막으로 함수 C의 실행 컨텍스트를 까보자.<br>빨간색이 함수 B의 실행 컨텍스트, 파란색이 함수 C의 실행 컨텍스트이다.<br>함수 C의 실행 컨텍스트의 스코프 내부에는 this 밖에 없다.<br>하지만 함수 C에서는 A라는 변수를 갖고 놀고 있다.<br>자신의 스코프에 해당 변수가 없으므로 스코프 체인을 타고 올라가서<br>바로 상위 스코프인 함수 B의 실행 컨텍스트에 변수 A가 있으므로 그걸 가지고 논다.<br>하지만 자신의 스코프가 아닌 상위 스코프를 가지고 노는 것이므로 클로저다.<br>다시 한번 클로저의 정의를 상기시켜보자.</p><ol><li>이미 생명 주기가 끝난 외부 함수의 변수를 참조하는 함수</li><li>생성 당시의 스코프에 대한 연결을 갖는 블록</li></ol><p>함수 B의 스코프가 <strong>이미 생명 주기가 끝난 외부 함수의 변수</strong>, <strong>생성 당시의 스코프</strong>이고,<br>함수 C의 스코프가 <strong>참조하는 함수</strong>, <strong>연결을 갖는 블록</strong>과 매칭이 된다.<br>왜 그런지 궁금하면 아래 링크를 참조하고 공부하자.<br><a href="http://blog.javarouka.me/2012/01/closure.html" rel="external nofollow noopener noreferrer" target="_blank">http://blog.javarouka.me/2012/01/closure.html</a></p><h2 id="함수-단위-스코프의-위험성"><a href="#함수-단위-스코프의-위험성" class="headerlink" title="함수 단위 스코프의 위험성"></a>함수 단위 스코프의 위험성</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"><span class="keyword">var</span> evtClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(A);</span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, evtClick);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index3.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">'2'</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Scope/05.png" alt=""><br>index2.js의 5, 7번 라인에서 브레이크 포인트를 걸고 현재 전역 컨텍스트의<br>A의 값을 보면 “1”이라는 값이 들어간 것을 볼 수 있다.<br>그리고 나서 index.html에서 버튼을 클릭해보자.<br><img src="/images/ES6-Scope/06.png" alt=""><br>index2.js의 7번 라인에서 브레이크가 걸린다.<br>그리고 전역 컨텍스트의 A의 값을 보면 쥐도새도 모르게 “2”라는 값으로 바뀌어있다.<br>바로 index3.js에서 바꿔치기 한 것이다.<br>index.html의 소스를 보면 index2.js를 먼저 로드하고 그 이후에 index3.js를<br>그 후에 로드하기 때문에 위 소스를 합쳐보면 아래와 같이 된다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"><span class="keyword">var</span> evtClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(A); <span class="comment">// 바꿔치기 된 애를 콘솔창에 찍음.</span></span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, evtClick);</span><br><span class="line"><span class="comment">// index3.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> A = <span class="string">'2'</span>; <span class="comment">// 여기서 바꿔치기 됨.</span></span><br></pre></td></tr></table></figure><h2 id="함수-단위-스코프의-극복-모듈화"><a href="#함수-단위-스코프의-극복-모듈화" class="headerlink" title="함수 단위 스코프의 극복, 모듈화"></a>함수 단위 스코프의 극복, 모듈화</h2><p>위와 같이 전역 스코프가 더러워지는 것을 방지하고자<br>자바나 C++과 같이 자바스크립트도 모듈화하려는 시도는 많았다.<br><strong>CommonJS</strong>와 <strong>RequireJS</strong>가 대표적이었으나 현재는 <strong>Webpack</strong>이 대세인 것 같다.<br>위와 관련된 글들도 인터넷에 상당히 널려있으니 찾아서 공부하자.<br>여기서 위의 내용을 다루기에는 광범위하므로 순수 ES5만으로만 구현해보자.<br>index2.js와 index3.js의 소스를 아래와 같이 고쳐보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">var</span> A = <span class="string">'1'</span>;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">  <span class="keyword">var</span> evtClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(A);</span><br><span class="line">  &#125;;</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, evtClick);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index3.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">var</span> A = <span class="string">'2'</span>;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>위 코드는 즉시 실행 함수(IIFE)를 이용한 패턴으로,<br>코드를 로드하자마자 함수를 실행시켜버려서 스코프로 감싸버리는 것이다.<br>따라서 위와 같이 하면 전역에 아무런 변수도 노출시키지 않게 된다.<br><img src="/images/ES6-Scope/07.png" alt=""><br>6, 8번 라인에 브레이크 포인트를 걸고 콜스택을 보면 아래와 같다.</p><ol><li>(anonymous function)</li><li>(anonymous function)</li></ol><p>풀어서 쓰면 아래와 같다.</p><ol><li>index.js의 실행 컨텍스트</li><li>전역 실행 컨텍스트</li></ol><p>index.js의 실행 컨텍스트를 보면 자기 자신이 가지고 있는 변수만 가지고 있다.<br>Global 객체를 까봐도 전혀 자신의 정보를 노출하고 있지 않다.</p><p>이제 index.html에서 버튼을 눌러서 실제로 어떻게 작동하는지 보자.<br><img src="/images/ES6-Scope/08.png" alt=""><br>색깔로 구분해서 클로저를 사용했다는 것을 쉽게 알 수 있다.<br>그리고 모듈화를 하였으므로 다른 파일과 소통을 하지 않아 자기 자신의 값을 그대로 지키고 있다.<br>모듈화 패턴은 IIFE말고도 위에 언급한 프레임워크를 쓴다거나 네임스페이스 패턴을 쓰거나<br>방법은 무궁무진하므로 본인의 입맛대로 코딩하는 걸 추천한다.</p><h2 id="ES6의-블록-단위의-스코프"><a href="#ES6의-블록-단위의-스코프" class="headerlink" title="ES6의 블록 단위의 스코프"></a>ES6의 블록 단위의 스코프</h2><p>이제부터가 본 게임의 시작이다.<br>ES6에서는 <strong>const</strong>와 <strong>let</strong>이라는 키워드로 변수를 선언한다.<br>레거시 환경 때문인지 여전히 <strong>var</strong>를 지원하지만 함수 단위의 스코프는<br>위에서 말한 단점들이 존재해서 더 이상 쓰지 않는 걸 권장한다.<br><strong>const</strong>는 상수를 선언할 때 쓰며 선언과 동시에 할당을 무조건 해야한다.<br><strong>let</strong>은 var에서 블록 단위의 스코프로 바뀐 것과 <a href="#TDZ">TDZ</a> 빼고는 크게 차이점은 없다.<br>그럼 한번 다시 위의 코드를 const와 let을 써서 바꿔보자.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">let</span> AA = <span class="string">'c'</span>;</span><br><span class="line">A = <span class="string">'a'</span>; <span class="comment">// Uncaught TypeError</span></span><br></pre></td></tr></table></figure><p>참고로 ES6에서는 항상 strict 모드로 작동한다.<br><a href="http://stackoverflow.com/questions/31685262/not-recommended-to-write-out-use-strict-with-es6" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/31685262/not-recommended-to-write-out-use-strict-with-es6</a><br><img src="/images/ES6-Scope/09.png" alt=""><br>소스 코드 전체에 브레이크 포인트를 걸고 지켜봤더니 신기하게 Global 객체에 A와 AA 변수가 없다.<br>호이스팅이 일어나지 않는 걸까…?<br><img src="/images/ES6-Scope/18.png" alt=""><br>파이어폭스에서는 호이스팅이 일어난다.<br>크롬의 오류다. 크롬이 만능은 아니었다.<br><img src="/images/ES6-Scope/10.png" alt=""><br>1번 라인을 실행 한 후 2번 라인이 실행되기 전에 브레이크가 걸리는데<br>이 때 스코프에 새로운 스코프가 생성된다.<br>새로운 함수를 실행한 것이 아닌데도 Script라는 새로운 스코프가 생성되었다.<br>const와 let을 사용하면 global 객체의 프로퍼티와 변수명이 충돌이 일어나지 않게 되어<br>좀 더 자유로운 네이밍이 가능해졌다.<br><img src="/images/ES6-Scope/11.png" alt=""><br>2번 라인을 실행 후 3번 라인이 실행되기 전에 브레이크가 걸리고,<br>이 때 스코프를 보면 2번 라인의 AA 변수가 Script라는 스코프에 생성된 걸 볼 수 있다.<br>3번 라인까지 실행시키면<br><em>Uncaught TypeError: Assignment to constant variable.</em>라는 오류 메시지를 볼 수 있다.<br>상수에 값을 할당하려고 했기 때문이다. (설령 같은 값일지라도…)<br>ES6는 변수를 새로운 스코프에 할당하는 모양이다.</p><p>그럼 위에서 작성했던 코드를 다시 한번 고쳐보자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"><span class="keyword">const</span> evtClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(A);</span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, evtClick);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index3.js</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="string">'2'</span>; <span class="comment">// Uncaught SyntaxError: Identifier 'A' has already been declared</span></span><br></pre></td></tr></table></figure><p>분명 파일을 분리했는데도 A를 중복해서 선언했다고 오류를 뿜는다.<br>테스트를 위해 index3.js의 소스를 아래와 같이 고쳐보자.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index3.js</span></span><br><span class="line"><span class="keyword">const</span> B = <span class="string">'2'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Scope/12.png" alt=""><br>이해를 돕고자 index3.js의 2번 라인에 브레이크 포인트를 걸었다.<br>엄머나… Script라는 스코프 안에 index2.js와 index3.js의 변수가 짬뽕 리믹스 돼있다…<br>결과적으로 ES5와 다른 점은 글로벌 객체가 아닌 별도의 스코프를 생성할 뿐, 큰 차이는 없다.<br>사실 호이스팅이 일어나기는 하지만, <a href="#TDZ">TDZ</a>라는 것을 알아야하기 때문에 마지막에 설명한다.<br>그럼 블록이 무엇인지에 대해서 생각해보자.<br><strong>{ … }</strong> 이게 블록이다. 끝이다.<br><strong>if(bool) {…}</strong>, <strong>while(bool) {…}</strong>, <strong>for(…) {…}</strong>, <strong>function(…) {…}</strong><br>등등 <strong>{</strong>와 <strong>}</strong>으로 감싸진다면 다 블록이다.<br><img src="/images/ES6-Scope/13.png" alt=""><br>즉 블록 단위 스코프가 함수 단위 스코프를 포함하고 있는 관계가 된다.<br>이제 그럼 js 파일들을 블록으로 감싸보자.<br>디버깅하려고 로그도 찍어봤다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> A = <span class="string">'1'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">  <span class="keyword">const</span> evtClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(A);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, evtClick);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index3.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> A = <span class="string">'2'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Scope/14.png" alt=""><br>console.log 부분을 전부 브레이크 포인트를 걸어준다.<br>3번에서 멈췄고 스코프를 보니 Block이라는 스코프가 새로 생겼다.<br>이름만 들어도 블록 스코프임이 틀림 없어보인다.<br><img src="/images/ES6-Scope/15.png" alt=""><br>그 다음은 index3.js에서 브레이크가 걸린다.<br>새로운 Block 스코프가 생겼다.<br>블록을 만날 때마다 블록 스코프가 생기니 즉시 실행 함수와 같이<br>지저분한 패턴을 쓰지 않아도 모듈화가 가능하다.<br><img src="/images/ES6-Scope/16.png" alt=""><br>버튼을 누르고 나서 브레이크가 찍힌 모습이다.<br>스코프는 클릭 이벤트 리스너의 스코프만이 존재한다.<br>함수로 감싼 게 아니기 때문에 클로저도 아니라 성능면에서도 훨씬 좋다.<br>하지만 다른 파일에서 현재 파일의 변수의 값을 얻어오지 못한다.<br>블록 스코프로 구현한 모듈은 반쪽짜리 모듈,<br>자바로 치면 <strong>private class</strong> 밖에 되지 않는다.<br>이를 해결하기 위한 문법으로 <strong>import</strong>, <strong>export</strong> 문이 ES6에 존재하지만 <strong>지원하는 브라우저가 없다.</strong><br>때문에 모듈화를 하고 싶다면 <a href="/2016/11/18/Module-bundling-with-Webpck/">웹팩</a>이란 녀석을 쓰면 된다.<br>이것도 마찬가지로 웹서핑 하면 많이 나오므로 자세한 설명은 생략하도록 하자.</p><h2 id="TDZ"><a href="#TDZ" class="headerlink" title="TDZ"></a>TDZ</h2><p>드디어 대망의 마지막 챕터다.<br><strong>TDZ</strong>는 <strong>Temporal Dead Zone</strong>의 줄임말로 호이스팅, 스코프와 연관이 깊다.<br>아래 코드를 보면서 얘기하자.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> A = <span class="string">'1'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(btn); <span class="comment">// Uncaught ReferenceError: btn is not defined</span></span><br><span class="line">  <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/ES6-Scope/17.png" alt=""><br>2번 라인에 브레이크 포인트를 걸고 보면 btn이 undefined라는 값을 가지고 있다.<br>5번에 도달하기도 전이니 호이스팅이 된 것이다.<br>하지만 4번 라인을 만나는 순간 오류를 뿜게 된다.<br>이유는 변수 btn은 선언되기 전까지 호이스팅은 되지만 TDZ에 존재하기 때문이다.<br>TDZ에 존재하는 변수에 접근하면 위와 같은 에러를 뿜는 것이고,<br>선언이 되는 순간 TDZ에서 빠져나오게 된다.<br>선언되기 전까지 임시적(Temporal)으로 죽어(Dead)있기 때문에 그런 이름이 붙지 않았나 싶다.<br>아마 레거시 환경(<strong>var</strong>) 때문에 호이스팅을 살려둬야 했고, 그로 인한 오류를 줄이고자<br>ES6 환경에서는 TDZ를 만들어서 두 가지 요구사항을 동시에 충족시킨 것 같다.<br>이렇게만 보면 점점 자바스럽게 변하는 게 아닐지 모르겠지만<br>아래 코드를 보면 생각이 달라질 것이다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(x); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">    HelloWorld _class = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">     _class.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자바의 경우 호이스팅이 일어나지 않는다.<br>TDZ라는 것도 존재하지 않는다.<br>하지만 ES6에서는 위 두 개념들이 존재한다.<br>호이스팅 된 변수는 선언되기 전까지 TDZ에 존재해 접근이 불가능하다.<br>ES6에서 위 코드를 비슷하게 구현에 포커스를 두고 코딩을 하면 아래와 같다.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> print = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x); <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">15</span>; <span class="comment">// 얘가 없다면 콘솔 창에 10이 찍힘.</span></span><br><span class="line">  &#125;;</span><br><span class="line">  print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5번 라인의 x가 호이스팅 되고, 5번 라인에 다다르기 전까지는 TDZ에 존재하여 접근이 불가능해진다.<br>하지만 4번 라인에서 접근을 하고 있으므로 에러를 뿜는 것이다.<br>이 또한 좀 아이러니하게 설계가 된 것 같다.<br>레거시 환경을 버릴 수 없으니 이러한 문제점을 떠안고 가는 것 같은데…<br>그래도 이렇게 만들어진 걸 어찌하랴, 나중에 또 극복하는 방법들을 찾아보거나<br>위와 같은 패턴으로 코딩하는 걸 피하게끔 이런 개념들을 중요시 여기고 익혀야겠다.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> ECMAScript </category>
          
          <category> ES2015+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES2015 </tag>
            
            <tag> Scope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>블로그를 시작하다</title>
      <link href="/2016/11/10/Start-Blog/"/>
      <url>/2016/11/10/Start-Blog/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Start-Blog/thumb.png" alt=""></p><p><a href="http://perfectacle.blog.me/" rel="external nofollow noopener noreferrer" target="_blank">기존의 네이버 블로그</a>를 포기하고 새로 블로그를 이전했다.<br>다소 어려움들이 있었지만 제대로 해보려고 한다.</p><h2 id="왜-블로그를-옮겼는가"><a href="#왜-블로그를-옮겼는가" class="headerlink" title="왜 블로그를 옮겼는가?"></a>왜 블로그를 옮겼는가?</h2><ul><li>네이버 블로그는 꾸미는데 제약사항이 많다.</li><li>기존의 블로그는 너무 중구난방식이었다.</li><li>깃헙 페이지를 이용하면 뭔가 개발자스럽다.</li><li>마크다운 문법에 익숙해지고 싶다.</li><li>포트폴리오 파일들을 내 블로그에 올리는 게 가능하다.</li><li>포스트의 버전관리도 가능하다.</li></ul><a id="more"></a><p>내가 네이버 블로그를 제대로 관리 안 한 탓도 있었지만,<br>구글링을 하다보면 티스토리나 기타 블로그들은 정말 멋진 개발자다운 블로그였다.<br>하지만 그런 걸 네이버 블로그로 하려면 엄두가 나지 않았다.<br>티스토리가 유력한 후보였지만, 깃헙 페이지가 더 개발자스러워보이고,<br>깃헙을 쓴다면 마크다운 문법에 익숙해질 필요가 있다고 판단하여 깃헙 페이지를 선정하였다.<br>또한 블로그의 포스트를 마이그레이션 할 때도 마크다운 문법은 매우 좋다고 들었다.<br>타 블로그들을 인라인 스타일 때문에 마이그레이션 할 때 문제가 많다지만,<br>마크업 문법을 HTML로 바꾸는 것은 매우 쉽다고 들었기 때문이다.</p><h2 id="아쉬운-점"><a href="#아쉬운-점" class="headerlink" title="아쉬운 점"></a>아쉬운 점</h2><ul><li>테마의 디자인이 조금 옛스럽다.</li><li>테마의 디자인이 이쁘면 기능이 구지다.</li><li>블로그 개발용과 배포용 저장소를 따로 만들어야한다.</li></ul><p>나는 블로그에 <strong>글 쓰는 것</strong>에 초점을 두고 싶었으나<br>깃헙 페이지는 나에게 너무나 많은 것을 요구했다.<br>일단 <strong>git</strong>은 어느정도 사용해서 문제될 게 없었으나 망할놈의 <strong>Jekyll</strong>…<br>또한 Jekyll을 쓰려면 <strong>Ruby</strong>를 설치해야했고, <strong>Windows OS</strong>를 쓰는 나에게는 크나큰 장벽이 되었다.<br>경로가 꼬이거나 해줘야하는 잡다한 작업들이 많아서 그냥 포기해버렸다.  </p><p>해서 찾아낸 게 <strong>Hexo</strong>다.<br><strong>Node</strong> 위에서 돌아가기 때문에 Windows OS에서도 전혀 문제가 없다.<br>하지만 이 역시 직접 커스터마이징 하기가 귀찮고 시간이 오래 걸려서…<br>그렇게 해서 테마찾기의 여정 끝에 <a href="https://github.com/ppoffice/hexo-theme-hueman" rel="external nofollow noopener noreferrer" target="_blank">Hueman</a>이라는 테마를 찾았다.<br>디자인 개선하려면 무지하게 귀찮고 엄청난 삽질이 예상된다.</p><h2 id="좋은-점"><a href="#좋은-점" class="headerlink" title="좋은 점"></a>좋은 점</h2><ul><li>검색 기능</li><li>댓글 기능</li><li>멀티 카테고리 기능</li><li>카테고리 별 페이지네이션</li><li>태그 기능</li><li>태그 별 페이지네이션</li><li>최근 포스트</li><li>반응형 짱짱맨</li></ul><p>여러가지 테마를 찾아본 가운데 위 사항들이 나를 매료했다.<br>디자인이 제일 마음에 걸렸지마는…<br>나에게는 <strong>글 쓰는 것</strong>이 메인이기 때문에, 더 이상 시간을 허비할 수 없었다.<br>나중에 좋은 테마를 또 발견한다면 포스트만 들고 날아가면 되기 때문이다.</p><h2 id="자-이제-시작이다"><a href="#자-이제-시작이다" class="headerlink" title="자, 이제 시작이다!"></a>자, 이제 시작이다!</h2><p>내 꿈을!<br>내 꿈을 펼칠 블로그의 토대가 마련되었다.<br>당분간은 좀 더 뻘짓을 할 수도 있겠지만…<br>일단은 기존의 블로그에서 있던 내용 조금씩 정리하며 퍼다 나르고,<br>밀렸던 리액트며, ES6 등등의 공부를 해야겠다!!</p>]]></content>
      
      
      <categories>
          
          <category> 기타 </category>
          
          <category> 잡동사니 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 잡동사니 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
